
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cc8  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  20000000  08002cc8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000e4c  20000200  08003000  00010200  2**9
                  ALLOC
  3 ._usrstack    00000100  2000104c  08003e4c  00010200  2**0
                  ALLOC
  4 .debug_info   000066d0  00000000  00000000  000100e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000248b  00000000  00000000  000167b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    0000433e  00000000  00000000  00018c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000890  00000000  00000000  0001cf7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000c68  00000000  00000000  0001d80d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000025f1  00000000  00000000  0001e475  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cc2  00000000  00000000  00020a66  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  00022728  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000033  00000000  00000000  00022739  2**0
                  CONTENTS, READONLY
 13 .debug_frame  0000138c  00000000  00000000  0002276c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 1d 07 00 08                             .P. ....

08000008 <LED_Tick>:
void Test_DCMOTOR();



void LED_Tick( void )
{
 8000008:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 800000a:	f640 4325 	movw	r3, #3109	; 0xc25
 800000e:	2000      	movs	r0, #0
 8000010:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000014:	4798      	blx	r3
 8000016:	bd08      	pop	{r3, pc}

08000018 <Test_DCMOTOR>:
void Test_DCMOTOR()
{
	u8  Ch;
	static s16 Pwm = 0;

	Ch = Hw_Uart_Getch( 0 );
 8000018:	2000      	movs	r0, #0




void Test_DCMOTOR()
{
 800001a:	b510      	push	{r4, lr}
	u8  Ch;
	static s16 Pwm = 0;

	Ch = Hw_Uart_Getch( 0 );
 800001c:	4b2a      	ldr	r3, [pc, #168]	; (80000c8 <Test_DCMOTOR+0xb0>)
 800001e:	4798      	blx	r3

	if( Ch == 'i' )
 8000020:	2869      	cmp	r0, #105	; 0x69
 8000022:	d027      	beq.n	8000074 <Test_DCMOTOR+0x5c>
	{
		Hw_DcMotor_Handle( Pwm, Pwm );
	}
	else if( Ch == ',' )
 8000024:	282c      	cmp	r0, #44	; 0x2c
 8000026:	d02e      	beq.n	8000086 <Test_DCMOTOR+0x6e>
	{
		Hw_DcMotor_Handle( -Pwm, -Pwm );
	}
	else if( Ch == 'j' )
 8000028:	286a      	cmp	r0, #106	; 0x6a
 800002a:	d036      	beq.n	800009a <Test_DCMOTOR+0x82>
	{
		Hw_DcMotor_Handle( -Pwm, Pwm );
	}
	else if( Ch == 'l' )
 800002c:	286c      	cmp	r0, #108	; 0x6c
 800002e:	d03e      	beq.n	80000ae <Test_DCMOTOR+0x96>
	{
		Hw_DcMotor_Handle( Pwm, -Pwm );
	}
	else if( Ch == 'k' )
 8000030:	286b      	cmp	r0, #107	; 0x6b
 8000032:	d040      	beq.n	80000b6 <Test_DCMOTOR+0x9e>
	{
		Hw_DcMotor_Handle( 0, 0 );
	}
	else if( Ch == 'q' )
 8000034:	2871      	cmp	r0, #113	; 0x71
	{
		Pwm += 10;
 8000036:	4b25      	ldr	r3, [pc, #148]	; (80000cc <Test_DCMOTOR+0xb4>)
	}
	else if( Ch == 'k' )
	{
		Hw_DcMotor_Handle( 0, 0 );
	}
	else if( Ch == 'q' )
 8000038:	d008      	beq.n	800004c <Test_DCMOTOR+0x34>
		Pwm += 10;

		if( Pwm > 100 ) Pwm = 100;

	}
	else if( Ch == 'a' )
 800003a:	2861      	cmp	r0, #97	; 0x61
 800003c:	d011      	beq.n	8000062 <Test_DCMOTOR+0x4a>
 800003e:	f9b3 2000 	ldrsh.w	r2, [r3]
	{
		if( Pwm >= 10 ) Pwm -= 10;
	}

	Hw_Uart_Print( 0, "Pwm %d\n", Pwm );
 8000042:	2000      	movs	r0, #0
 8000044:	4922      	ldr	r1, [pc, #136]	; (80000d0 <Test_DCMOTOR+0xb8>)
 8000046:	4b23      	ldr	r3, [pc, #140]	; (80000d4 <Test_DCMOTOR+0xbc>)
 8000048:	4798      	blx	r3
 800004a:	bd10      	pop	{r4, pc}
	{
		Hw_DcMotor_Handle( 0, 0 );
	}
	else if( Ch == 'q' )
	{
		Pwm += 10;
 800004c:	8819      	ldrh	r1, [r3, #0]
 800004e:	310a      	adds	r1, #10
 8000050:	b289      	uxth	r1, r1

		if( Pwm > 100 ) Pwm = 100;
 8000052:	b20a      	sxth	r2, r1
 8000054:	2a64      	cmp	r2, #100	; 0x64
	{
		Hw_DcMotor_Handle( 0, 0 );
	}
	else if( Ch == 'q' )
	{
		Pwm += 10;
 8000056:	bfd8      	it	le
 8000058:	8019      	strhle	r1, [r3, #0]

		if( Pwm > 100 ) Pwm = 100;
 800005a:	ddf2      	ble.n	8000042 <Test_DCMOTOR+0x2a>
 800005c:	2264      	movs	r2, #100	; 0x64
 800005e:	801a      	strh	r2, [r3, #0]
 8000060:	e7ef      	b.n	8000042 <Test_DCMOTOR+0x2a>

	}
	else if( Ch == 'a' )
	{
		if( Pwm >= 10 ) Pwm -= 10;
 8000062:	8819      	ldrh	r1, [r3, #0]
 8000064:	b20a      	sxth	r2, r1
 8000066:	2a09      	cmp	r2, #9
 8000068:	bfc2      	ittt	gt
 800006a:	f1a1 020a 	subgt.w	r2, r1, #10
 800006e:	b292      	uxthgt	r2, r2
 8000070:	801a      	strhgt	r2, [r3, #0]
 8000072:	e7e6      	b.n	8000042 <Test_DCMOTOR+0x2a>

	Ch = Hw_Uart_Getch( 0 );

	if( Ch == 'i' )
	{
		Hw_DcMotor_Handle( Pwm, Pwm );
 8000074:	4c15      	ldr	r4, [pc, #84]	; (80000cc <Test_DCMOTOR+0xb4>)
 8000076:	4b18      	ldr	r3, [pc, #96]	; (80000d8 <Test_DCMOTOR+0xc0>)
 8000078:	f9b4 0000 	ldrsh.w	r0, [r4]
 800007c:	4601      	mov	r1, r0
 800007e:	4798      	blx	r3
 8000080:	f9b4 2000 	ldrsh.w	r2, [r4]
 8000084:	e7dd      	b.n	8000042 <Test_DCMOTOR+0x2a>
	}
	else if( Ch == ',' )
	{
		Hw_DcMotor_Handle( -Pwm, -Pwm );
 8000086:	4c11      	ldr	r4, [pc, #68]	; (80000cc <Test_DCMOTOR+0xb4>)
 8000088:	4b13      	ldr	r3, [pc, #76]	; (80000d8 <Test_DCMOTOR+0xc0>)
 800008a:	8820      	ldrh	r0, [r4, #0]
 800008c:	4240      	negs	r0, r0
 800008e:	b200      	sxth	r0, r0
 8000090:	4601      	mov	r1, r0
 8000092:	4798      	blx	r3
 8000094:	f9b4 2000 	ldrsh.w	r2, [r4]
 8000098:	e7d3      	b.n	8000042 <Test_DCMOTOR+0x2a>
	}
	else if( Ch == 'j' )
	{
		Hw_DcMotor_Handle( -Pwm, Pwm );
 800009a:	4c0c      	ldr	r4, [pc, #48]	; (80000cc <Test_DCMOTOR+0xb4>)
 800009c:	8821      	ldrh	r1, [r4, #0]
 800009e:	4248      	negs	r0, r1
	}
	else if( Ch == 'l' )
	{
		Hw_DcMotor_Handle( Pwm, -Pwm );
 80000a0:	b200      	sxth	r0, r0
 80000a2:	b209      	sxth	r1, r1
 80000a4:	4b0c      	ldr	r3, [pc, #48]	; (80000d8 <Test_DCMOTOR+0xc0>)
 80000a6:	4798      	blx	r3
 80000a8:	f9b4 2000 	ldrsh.w	r2, [r4]
 80000ac:	e7c9      	b.n	8000042 <Test_DCMOTOR+0x2a>
 80000ae:	4c07      	ldr	r4, [pc, #28]	; (80000cc <Test_DCMOTOR+0xb4>)
 80000b0:	8820      	ldrh	r0, [r4, #0]
 80000b2:	4241      	negs	r1, r0
 80000b4:	e7f4      	b.n	80000a0 <Test_DCMOTOR+0x88>
	}
	else if( Ch == 'k' )
	{
		Hw_DcMotor_Handle( 0, 0 );
 80000b6:	2000      	movs	r0, #0
 80000b8:	4b07      	ldr	r3, [pc, #28]	; (80000d8 <Test_DCMOTOR+0xc0>)
 80000ba:	4601      	mov	r1, r0
 80000bc:	4798      	blx	r3
 80000be:	4b03      	ldr	r3, [pc, #12]	; (80000cc <Test_DCMOTOR+0xb4>)
 80000c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80000c4:	e7bd      	b.n	8000042 <Test_DCMOTOR+0x2a>
 80000c6:	bf00      	nop
 80000c8:	08000a81 	.word	0x08000a81
 80000cc:	20000200 	.word	0x20000200
 80000d0:	08002bfc 	.word	0x08002bfc
 80000d4:	08000b01 	.word	0x08000b01
 80000d8:	08001275 	.word	0x08001275

080000dc <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 80000dc:	b500      	push	{lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 80000de:	4b0b      	ldr	r3, [pc, #44]	; (800010c <main+0x30>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 80000e0:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 80000e2:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 80000e4:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 80000e6:	4b0a      	ldr	r3, [pc, #40]	; (8000110 <main+0x34>)
 80000e8:	4798      	blx	r3
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 80000ea:	4d0a      	ldr	r5, [pc, #40]	; (8000114 <main+0x38>)
 80000ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80000f0:	2202      	movs	r2, #2
 80000f2:	4620      	mov	r0, r4
 80000f4:	4b08      	ldr	r3, [pc, #32]	; (8000118 <main+0x3c>)
 80000f6:	9400      	str	r4, [sp, #0]
 80000f8:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );	
 80000fa:	4620      	mov	r0, r4
 80000fc:	4b07      	ldr	r3, [pc, #28]	; (800011c <main+0x40>)
 80000fe:	4798      	blx	r3
	//
	//Ap_RadioMenu_ExeCmd();    
	//Ap_GLcdMenu_ExeCmd();    
	//Ap_EduMenu_ExeCmd();

	Lb_printf("ezExplorer\n");
 8000100:	4807      	ldr	r0, [pc, #28]	; (8000120 <main+0x44>)
 8000102:	4b08      	ldr	r3, [pc, #32]	; (8000124 <main+0x48>)
 8000104:	4798      	blx	r3
 8000106:	4c08      	ldr	r4, [pc, #32]	; (8000128 <main+0x4c>)
    while(1)
    {
    	Test_DCMOTOR();
 8000108:	47a0      	blx	r4
 800010a:	e7fd      	b.n	8000108 <main+0x2c>
 800010c:	080007cd 	.word	0x080007cd
 8000110:	0800012d 	.word	0x0800012d
 8000114:	08000e7d 	.word	0x08000e7d
 8000118:	08000009 	.word	0x08000009
 800011c:	08000e9d 	.word	0x08000e9d
 8000120:	08002c04 	.word	0x08002c04
 8000124:	08000525 	.word	0x08000525
 8000128:	08000019 	.word	0x08000019

0800012c <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 800012c:	4770      	bx	lr
 800012e:	bf00      	nop

08000130 <print_byte_out>:




void print_byte_out(unsigned int c)
{
 8000130:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 8000132:	4b09      	ldr	r3, [pc, #36]	; (8000158 <print_byte_out+0x28>)




void print_byte_out(unsigned int c)
{
 8000134:	4605      	mov	r5, r0
	if( StrPrintMode == LB_PRINT_OUT_UART )
 8000136:	781b      	ldrb	r3, [r3, #0]
 8000138:	b153      	cbz	r3, 8000150 <print_byte_out+0x20>
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 800013a:	4a08      	ldr	r2, [pc, #32]	; (800015c <print_byte_out+0x2c>)
 800013c:	4908      	ldr	r1, [pc, #32]	; (8000160 <print_byte_out+0x30>)
 800013e:	6814      	ldr	r4, [r2, #0]
 8000140:	6808      	ldr	r0, [r1, #0]
 8000142:	1c63      	adds	r3, r4, #1
 8000144:	5505      	strb	r5, [r0, r4]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 8000146:	6809      	ldr	r1, [r1, #0]
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 8000148:	6013      	str	r3, [r2, #0]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 800014a:	2200      	movs	r2, #0
 800014c:	54ca      	strb	r2, [r1, r3]
 800014e:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 8000150:	4b04      	ldr	r3, [pc, #16]	; (8000164 <print_byte_out+0x34>)
 8000152:	4798      	blx	r3
 8000154:	bd38      	pop	{r3, r4, r5, pc}
 8000156:	bf00      	nop
 8000158:	20000208 	.word	0x20000208
 800015c:	20000204 	.word	0x20000204
 8000160:	200002ec 	.word	0x200002ec
 8000164:	08000b31 	.word	0x08000b31

08000168 <PrintString.part.0>:
                }
        }
        return;
}

void PrintString(char *fmt, char *s)
 8000168:	b538      	push	{r3, r4, r5, lr}
 800016a:	4604      	mov	r4, r0
{
        if (!fmt || !s) return;
        while (*s) print_byte_out(*s++);
 800016c:	7800      	ldrb	r0, [r0, #0]
 800016e:	b128      	cbz	r0, 800017c <PrintString.part.0+0x14>
 8000170:	4d03      	ldr	r5, [pc, #12]	; (8000180 <PrintString.part.0+0x18>)
 8000172:	47a8      	blx	r5
 8000174:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000178:	2800      	cmp	r0, #0
 800017a:	d1fa      	bne.n	8000172 <PrintString.part.0+0xa>
 800017c:	bd38      	pop	{r3, r4, r5, pc}
 800017e:	bf00      	nop
 8000180:	08000131 	.word	0x08000131

08000184 <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 8000184:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;
 8000186:	b1d0      	cbz	r0, 80001be <DecToLong+0x3a>
 8000188:	7803      	ldrb	r3, [r0, #0]
 800018a:	b1d3      	cbz	r3, 80001c2 <DecToLong+0x3e>


        for (*retval=0; *s; s++){
 800018c:	2300      	movs	r3, #0
 800018e:	600b      	str	r3, [r1, #0]
 8000190:	7802      	ldrb	r2, [r0, #0]
 8000192:	b19a      	cbz	r2, 80001bc <DecToLong+0x38>
                if (*s < '0' || *s > '9') return false;
 8000194:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000198:	b2e2      	uxtb	r2, r4
 800019a:	2a09      	cmp	r2, #9
 800019c:	d902      	bls.n	80001a4 <DecToLong+0x20>
 800019e:	e012      	b.n	80001c6 <DecToLong+0x42>
 80001a0:	2d09      	cmp	r5, #9
 80001a2:	d810      	bhi.n	80001c6 <DecToLong+0x42>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 80001a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80001a8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80001ac:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80001ae:	f810 2f01 	ldrb.w	r2, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 80001b2:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 80001b6:	b2e5      	uxtb	r5, r4
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80001b8:	2a00      	cmp	r2, #0
 80001ba:	d1f1      	bne.n	80001a0 <DecToLong+0x1c>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 80001bc:	2001      	movs	r0, #1
}        // DecToLong.
 80001be:	bc30      	pop	{r4, r5}
 80001c0:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 80001c2:	4618      	mov	r0, r3
 80001c4:	e7fb      	b.n	80001be <DecToLong+0x3a>


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 80001c6:	2000      	movs	r0, #0
 80001c8:	e7f9      	b.n	80001be <DecToLong+0x3a>
 80001ca:	bf00      	nop

080001cc <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 80001cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80001d0:	7803      	ldrb	r3, [r0, #0]
        return;
}


void PrintDec(char *fmt, int l)
{
 80001d2:	b084      	sub	sp, #16
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 80001d4:	2600      	movs	r6, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 80001d6:	4682      	mov	sl, r0
 80001d8:	4689      	mov	r9, r1
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 80001da:	9600      	str	r6, [sp, #0]
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d07f      	beq.n	80002e0 <PrintDec+0x114>
	{
		if (c=='d') break;
 80001e0:	2b64      	cmp	r3, #100	; 0x64
 80001e2:	d07d      	beq.n	80002e0 <PrintDec+0x114>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
 80001e4:	4f56      	ldr	r7, [pc, #344]	; (8000340 <PrintDec+0x174>)


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 80001e6:	4634      	mov	r4, r6
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 80001e8:	46b0      	mov	r8, r6

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 80001ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80001ee:	2a08      	cmp	r2, #8
 80001f0:	d872      	bhi.n	80002d8 <PrintDec+0x10c>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 80001f2:	f81a 2004 	ldrb.w	r2, [sl, r4]
 80001f6:	eb0a 0504 	add.w	r5, sl, r4
 80001fa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80001fe:	2b09      	cmp	r3, #9
 8000200:	a801      	add	r0, sp, #4
 8000202:	f04f 0300 	mov.w	r3, #0
 8000206:	d808      	bhi.n	800021a <PrintDec+0x4e>
			{
				tol[j] = s[i++];
 8000208:	54c2      	strb	r2, [r0, r3]
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800020a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			{
				tol[j] = s[i++];
 800020e:	3401      	adds	r4, #1
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8000210:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000214:	3301      	adds	r3, #1
 8000216:	2909      	cmp	r1, #9
 8000218:	d9f6      	bls.n	8000208 <PrintDec+0x3c>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800021a:	aa04      	add	r2, sp, #16
 800021c:	18d3      	adds	r3, r2, r3
			i--;
			DecToLong(tol, &flagcnt);
 800021e:	4669      	mov	r1, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8000220:	f803 8c0c 	strb.w	r8, [r3, #-12]
			i--;
 8000224:	3c01      	subs	r4, #1
			DecToLong(tol, &flagcnt);
 8000226:	47b8      	blx	r7
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8000228:	3401      	adds	r4, #1
 800022a:	f81a 3004 	ldrb.w	r3, [sl, r4]
 800022e:	b10b      	cbz	r3, 8000234 <PrintDec+0x68>
	{
		if (c=='d') break;
 8000230:	2b64      	cmp	r3, #100	; 0x64
 8000232:	d1da      	bne.n	80001ea <PrintDec+0x1e>
		else if (c=='l') flagl=true;
		else continue;
	}

	// 위의 flag에 따라 출력.
	if (flagcnt)
 8000234:	9800      	ldr	r0, [sp, #0]
 8000236:	2800      	cmp	r0, #0
 8000238:	d052      	beq.n	80002e0 <PrintDec+0x114>
	{
                if (flagcnt>9) flagcnt=9;
 800023a:	2809      	cmp	r0, #9
 800023c:	dd78      	ble.n	8000330 <PrintDec+0x164>
 800023e:	2009      	movs	r0, #9
 8000240:	9000      	str	r0, [sp, #0]
 8000242:	2206      	movs	r2, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000244:	2107      	movs	r1, #7
 8000246:	230a      	movs	r3, #10
                retval *= num;
 8000248:	eb03 0383 	add.w	r3, r3, r3, lsl #2
{
        long retval=num;
        cnt--;


        while (cnt--){
 800024c:	3901      	subs	r1, #1
                retval *= num;
 800024e:	005b      	lsls	r3, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000250:	1c4c      	adds	r4, r1, #1
 8000252:	d1f9      	bne.n	8000248 <PrintDec+0x7c>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8000254:	fb99 f1f3 	sdiv	r1, r9, r3
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000258:	240a      	movs	r4, #10
 800025a:	2802      	cmp	r0, #2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 800025c:	fb03 9911 	mls	r9, r3, r1, r9
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000260:	d005      	beq.n	800026e <PrintDec+0xa2>
                retval *= num;
 8000262:	eb04 0484 	add.w	r4, r4, r4, lsl #2
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000266:	3a01      	subs	r2, #1
                retval *= num;
 8000268:	0064      	lsls	r4, r4, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800026a:	1c53      	adds	r3, r2, #1
 800026c:	d1f9      	bne.n	8000262 <PrintDec+0x96>
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800026e:	f246 6567 	movw	r5, #26215	; 0x6667
 8000272:	4f34      	ldr	r7, [pc, #208]	; (8000344 <PrintDec+0x178>)
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 8000274:	f04f 0801 	mov.w	r8, #1
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000278:	f2c6 6566 	movt	r5, #26214	; 0x6666
 800027c:	e00d      	b.n	800029a <PrintDec+0xce>


                        if (result!=0 || divisor==1) leading_zero = false;


                        if (leading_zero==true){
 800027e:	f1b8 0f00 	cmp.w	r8, #0
 8000282:	d01c      	beq.n	80002be <PrintDec+0xf2>
                                if (flag0)        print_byte_out('0');
 8000284:	2030      	movs	r0, #48	; 0x30
 8000286:	b906      	cbnz	r6, 800028a <PrintDec+0xbe>
                                else                print_byte_out(' ');
 8000288:	2020      	movs	r0, #32
 800028a:	47b8      	blx	r7
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800028c:	fb85 2304 	smull	r2, r3, r5, r4
 8000290:	17e4      	asrs	r4, r4, #31
 8000292:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 8000296:	2c00      	cmp	r4, #0
 8000298:	dd1b      	ble.n	80002d2 <PrintDec+0x106>
                        result = remainder/divisor;
 800029a:	fb99 f3f4 	sdiv	r3, r9, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800029e:	b2d8      	uxtb	r0, r3
 80002a0:	3030      	adds	r0, #48	; 0x30
                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 80002a2:	f1b4 0e01 	subs.w	lr, r4, #1
 80002a6:	f1de 0200 	rsbs	r2, lr, #0
 80002aa:	eb52 020e 	adcs.w	r2, r2, lr
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	bf18      	it	ne
 80002b2:	f042 0201 	orrne.w	r2, r2, #1
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80002b6:	fb04 9913 	mls	r9, r4, r3, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d0df      	beq.n	800027e <PrintDec+0xb2>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80002be:	47b8      	blx	r7
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80002c0:	fb85 2304 	smull	r2, r3, r5, r4
 80002c4:	17e4      	asrs	r4, r4, #31
 80002c6:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 80002ca:	2c00      	cmp	r4, #0

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80002cc:	f04f 0800 	mov.w	r8, #0
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80002d0:	dce3      	bgt.n	800029a <PrintDec+0xce>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 80002d2:	b004      	add	sp, #16
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 80002d8:	2b30      	cmp	r3, #48	; 0x30
 80002da:	bf08      	it	eq
 80002dc:	2601      	moveq	r6, #1
 80002de:	e7a3      	b.n	8000228 <PrintDec+0x5c>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80002e0:	f44f 444a 	mov.w	r4, #51712	; 0xca00
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 80002e4:	f246 6767 	movw	r7, #26215	; 0x6667

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80002e8:	250a      	movs	r5, #10
 80002ea:	f6c3 349a 	movt	r4, #15258	; 0x3b9a
 80002ee:	2101      	movs	r1, #1
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80002f0:	4e14      	ldr	r6, [pc, #80]	; (8000344 <PrintDec+0x178>)
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 80002f2:	f2c6 6766 	movt	r7, #26214	; 0x6666
 80002f6:	e008      	b.n	800030a <PrintDec+0x13e>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80002f8:	47b0      	blx	r6
 80002fa:	2100      	movs	r1, #0
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 80002fc:	fb87 2304 	smull	r2, r3, r7, r4
 8000300:	17e4      	asrs	r4, r4, #31
 8000302:	3d01      	subs	r5, #1
 8000304:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 8000308:	d0e3      	beq.n	80002d2 <PrintDec+0x106>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 800030a:	1e60      	subs	r0, r4, #1
 800030c:	4242      	negs	r2, r0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800030e:	fb99 f3f4 	sdiv	r3, r9, r4
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 8000312:	4142      	adcs	r2, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	bf18      	it	ne
 8000318:	f042 0201 	orrne.w	r2, r2, #1
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800031c:	b2d8      	uxtb	r0, r3
 800031e:	3030      	adds	r0, #48	; 0x30
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000320:	fb04 9913 	mls	r9, r4, r3, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 8000324:	2a00      	cmp	r2, #0
 8000326:	d1e7      	bne.n	80002f8 <PrintDec+0x12c>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000328:	2900      	cmp	r1, #0
 800032a:	d0e5      	beq.n	80002f8 <PrintDec+0x12c>
 800032c:	2101      	movs	r1, #1
 800032e:	e7e5      	b.n	80002fc <PrintDec+0x130>
}

int Power(int num, int cnt)
{
        long retval=num;
        cnt--;
 8000330:	1e43      	subs	r3, r0, #1


        while (cnt--){
 8000332:	1e81      	subs	r1, r0, #2
 8000334:	1ec2      	subs	r2, r0, #3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d185      	bne.n	8000246 <PrintDec+0x7a>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 800033a:	230a      	movs	r3, #10
 800033c:	e78a      	b.n	8000254 <PrintDec+0x88>
 800033e:	bf00      	nop
 8000340:	08000185 	.word	0x08000185
 8000344:	08000131 	.word	0x08000131

08000348 <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 800034c:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800034e:	b087      	sub	sp, #28
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8000350:	2600      	movs	r6, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000352:	4681      	mov	r9, r0
 8000354:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8000356:	9602      	str	r6, [sp, #8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000358:	2b00      	cmp	r3, #0
 800035a:	f000 8085 	beq.w	8000468 <PrintHex+0x120>
                if (c=='x') break;
 800035e:	2b78      	cmp	r3, #120	; 0x78
 8000360:	f000 8082 	beq.w	8000468 <PrintHex+0x120>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 8000364:	4f6d      	ldr	r7, [pc, #436]	; (800051c <PrintHex+0x1d4>)
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
 8000366:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000368:	46b0      	mov	r8, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 800036a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800036e:	2a08      	cmp	r2, #8
 8000370:	d876      	bhi.n	8000460 <PrintHex+0x118>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000372:	f819 2004 	ldrb.w	r2, [r9, r4]
 8000376:	eb09 0104 	add.w	r1, r9, r4
 800037a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800037e:	2b09      	cmp	r3, #9
 8000380:	a803      	add	r0, sp, #12
 8000382:	f04f 0300 	mov.w	r3, #0
 8000386:	d808      	bhi.n	800039a <PrintHex+0x52>
                                tol[j] = s[i++];
 8000388:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800038a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                                tol[j] = s[i++];
 800038e:	3401      	adds	r4, #1

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000390:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8000394:	3301      	adds	r3, #1
 8000396:	2d09      	cmp	r5, #9
 8000398:	d9f6      	bls.n	8000388 <PrintHex+0x40>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 800039a:	aa06      	add	r2, sp, #24
 800039c:	18d3      	adds	r3, r2, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 800039e:	a902      	add	r1, sp, #8
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80003a0:	f803 8c0c 	strb.w	r8, [r3, #-12]
                        i--;
 80003a4:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 80003a6:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80003a8:	3401      	adds	r4, #1
 80003aa:	f819 3004 	ldrb.w	r3, [r9, r4]
 80003ae:	b10b      	cbz	r3, 80003b4 <PrintHex+0x6c>
                if (c=='x') break;
 80003b0:	2b78      	cmp	r3, #120	; 0x78
 80003b2:	d1da      	bne.n	800036a <PrintHex+0x22>
 80003b4:	9a01      	ldr	r2, [sp, #4]
 80003b6:	9b02      	ldr	r3, [sp, #8]
 80003b8:	ba12      	rev	r2, r2
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 80003ba:	9201      	str	r2, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d056      	beq.n	800046e <PrintHex+0x126>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 80003c0:	07da      	lsls	r2, r3, #31
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 80003c2:	bf58      	it	pl
 80003c4:	f04f 0801 	movpl.w	r8, #1
        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 80003c8:	d521      	bpl.n	800040e <PrintHex+0xc6>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 80003ca:	43db      	mvns	r3, r3
 80003cc:	3308      	adds	r3, #8
 80003ce:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80003d2:	aa06      	add	r2, sp, #24
 80003d4:	eb02 0363 	add.w	r3, r2, r3, asr #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 80003d8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
                        if (lHex!=0) leading_zero=false;
 80003dc:	f013 030f 	ands.w	r3, r3, #15
 80003e0:	d00b      	beq.n	80003fa <PrintHex+0xb2>
                        if (lHex<10) lHex+='0';
 80003e2:	2b09      	cmp	r3, #9
 80003e4:	bf98      	it	ls
 80003e6:	f103 0030 	addls.w	r0, r3, #48	; 0x30
 80003ea:	d901      	bls.n	80003f0 <PrintHex+0xa8>
                        else         lHex+='A'-10;
 80003ec:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 80003f0:	4f4b      	ldr	r7, [pc, #300]	; (8000520 <PrintHex+0x1d8>)
 80003f2:	47b8      	blx	r7
 80003f4:	f04f 0800 	mov.w	r8, #0
 80003f8:	e006      	b.n	8000408 <PrintHex+0xc0>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d07c      	beq.n	80004f8 <PrintHex+0x1b0>
 80003fe:	2030      	movs	r0, #48	; 0x30
 8000400:	4f47      	ldr	r7, [pc, #284]	; (8000520 <PrintHex+0x1d8>)
 8000402:	47b8      	blx	r7
 8000404:	f04f 0801 	mov.w	r8, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 8000408:	9b02      	ldr	r3, [sp, #8]
 800040a:	3b01      	subs	r3, #1
 800040c:	9302      	str	r3, [sp, #8]
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 800040e:	f1c3 0308 	rsb	r3, r3, #8
 8000412:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8000416:	105c      	asrs	r4, r3, #1
 8000418:	2c03      	cmp	r4, #3
 800041a:	dc1e      	bgt.n	800045a <PrintHex+0x112>
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800041c:	ab01      	add	r3, sp, #4
 800041e:	4f40      	ldr	r7, [pc, #256]	; (8000520 <PrintHex+0x1d8>)
 8000420:	191c      	adds	r4, r3, r4
 8000422:	f10d 0908 	add.w	r9, sp, #8
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8000426:	f814 3b01 	ldrb.w	r3, [r4], #1
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800042a:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800042e:	091b      	lsrs	r3, r3, #4
 8000430:	d04d      	beq.n	80004ce <PrintHex+0x186>
                        if (uHex<10) uHex+='0';
 8000432:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 8000434:	bf88      	it	hi
 8000436:	f103 0037 	addhi.w	r0, r3, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800043a:	d969      	bls.n	8000510 <PrintHex+0x1c8>
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 800043c:	47b8      	blx	r7
 800043e:	f04f 0800 	mov.w	r8, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000442:	2d00      	cmp	r5, #0
 8000444:	d04b      	beq.n	80004de <PrintHex+0x196>
                        if (lHex<10) lHex+='0';
 8000446:	2d09      	cmp	r5, #9
                        else         lHex+='A'-10;
 8000448:	bf88      	it	hi
 800044a:	f105 0037 	addhi.w	r0, r5, #55	; 0x37
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800044e:	d959      	bls.n	8000504 <PrintHex+0x1bc>
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000450:	47b8      	blx	r7
 8000452:	f04f 0800 	mov.w	r8, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000456:	454c      	cmp	r4, r9
 8000458:	d1e5      	bne.n	8000426 <PrintHex+0xde>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
                }
        }
        return;
}
 800045a:	b007      	add	sp, #28
 800045c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8000460:	2b30      	cmp	r3, #48	; 0x30
 8000462:	bf08      	it	eq
 8000464:	2601      	moveq	r6, #1
 8000466:	e79f      	b.n	80003a8 <PrintHex+0x60>
 8000468:	9b01      	ldr	r3, [sp, #4]
 800046a:	ba1b      	rev	r3, r3
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 800046c:	9301      	str	r3, [sp, #4]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800046e:	f10d 0603 	add.w	r6, sp, #3
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000472:	f816 3f01 	ldrb.w	r3, [r6, #1]!
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000476:	2201      	movs	r2, #1
 8000478:	2400      	movs	r4, #0
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800047a:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800047e:	091b      	lsrs	r3, r3, #4
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000480:	4f27      	ldr	r7, [pc, #156]	; (8000520 <PrintHex+0x1d8>)
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000482:	d01e      	beq.n	80004c2 <PrintHex+0x17a>
                        if (uHex<10) uHex+='0';
 8000484:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 8000486:	bf88      	it	hi
 8000488:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800048c:	d93d      	bls.n	800050a <PrintHex+0x1c2>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 800048e:	47b8      	blx	r7
 8000490:	2200      	movs	r2, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000492:	1c2b      	adds	r3, r5, #0
 8000494:	bf18      	it	ne
 8000496:	2301      	movne	r3, #1
 8000498:	2c03      	cmp	r4, #3
 800049a:	bf08      	it	eq
 800049c:	f043 0301 	orreq.w	r3, r3, #1
 80004a0:	b193      	cbz	r3, 80004c8 <PrintHex+0x180>
                        if (lHex<10) lHex+='0';
 80004a2:	2d09      	cmp	r5, #9
                        else         lHex+='A'-10;
 80004a4:	bf88      	it	hi
 80004a6:	f105 0037 	addhi.w	r0, r5, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80004aa:	d934      	bls.n	8000516 <PrintHex+0x1ce>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80004ac:	47b8      	blx	r7
 80004ae:	2200      	movs	r2, #0
                        }
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
 80004b0:	3401      	adds	r4, #1
 80004b2:	2c04      	cmp	r4, #4
 80004b4:	d0d1      	beq.n	800045a <PrintHex+0x112>
                        c = s[i];
 80004b6:	f816 3f01 	ldrb.w	r3, [r6, #1]!
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80004ba:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80004be:	091b      	lsrs	r3, r3, #4
 80004c0:	d1e0      	bne.n	8000484 <PrintHex+0x13c>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 80004c2:	b312      	cbz	r2, 800050a <PrintHex+0x1c2>
 80004c4:	2201      	movs	r2, #1
 80004c6:	e7e4      	b.n	8000492 <PrintHex+0x14a>
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80004c8:	b32a      	cbz	r2, 8000516 <PrintHex+0x1ce>
 80004ca:	2201      	movs	r2, #1
 80004cc:	e7f0      	b.n	80004b0 <PrintHex+0x168>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 80004ce:	f1b8 0f00 	cmp.w	r8, #0
 80004d2:	d01d      	beq.n	8000510 <PrintHex+0x1c8>
                                if (flag0) print_byte_out('0');
 80004d4:	b156      	cbz	r6, 80004ec <PrintHex+0x1a4>
 80004d6:	2030      	movs	r0, #48	; 0x30
 80004d8:	47b8      	blx	r7
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d1b3      	bne.n	8000446 <PrintHex+0xfe>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 80004de:	f1b8 0f00 	cmp.w	r8, #0
 80004e2:	d00f      	beq.n	8000504 <PrintHex+0x1bc>
                                if (flag0) print_byte_out('0');
 80004e4:	b12e      	cbz	r6, 80004f2 <PrintHex+0x1aa>
 80004e6:	2030      	movs	r0, #48	; 0x30
 80004e8:	47b8      	blx	r7
 80004ea:	e7b4      	b.n	8000456 <PrintHex+0x10e>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 80004ec:	2020      	movs	r0, #32
 80004ee:	47b8      	blx	r7
 80004f0:	e7a7      	b.n	8000442 <PrintHex+0xfa>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 80004f2:	2020      	movs	r0, #32
 80004f4:	47b8      	blx	r7
 80004f6:	e7ae      	b.n	8000456 <PrintHex+0x10e>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 80004f8:	2020      	movs	r0, #32
 80004fa:	4f09      	ldr	r7, [pc, #36]	; (8000520 <PrintHex+0x1d8>)
 80004fc:	47b8      	blx	r7
 80004fe:	f04f 0801 	mov.w	r8, #1
 8000502:	e781      	b.n	8000408 <PrintHex+0xc0>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000504:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8000508:	e7a2      	b.n	8000450 <PrintHex+0x108>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800050a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800050e:	e7be      	b.n	800048e <PrintHex+0x146>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000510:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000514:	e792      	b.n	800043c <PrintHex+0xf4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000516:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800051a:	e7c7      	b.n	80004ac <PrintHex+0x164>
 800051c:	08000185 	.word	0x08000185
 8000520:	08000131 	.word	0x08000131

08000524 <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 8000524:	b40f      	push	{r0, r1, r2, r3}
 8000526:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800052a:	b084      	sub	sp, #16
	int		i;
	va_list args;
	char	*s=fmt;
 800052c:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8000530:	4b34      	ldr	r3, [pc, #208]	; (8000604 <Lb_printf+0xe0>)
 8000532:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 8000534:	f85a 4b04 	ldr.w	r4, [sl], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000538:	4d33      	ldr	r5, [pc, #204]	; (8000608 <Lb_printf+0xe4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800053a:	4f34      	ldr	r7, [pc, #208]	; (800060c <Lb_printf+0xe8>)
 800053c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8000614 <Lb_printf+0xf0>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000540:	4e33      	ldr	r6, [pc, #204]	; (8000610 <Lb_printf+0xec>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8000542:	701a      	strb	r2, [r3, #0]
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000544:	f10d 0904 	add.w	r9, sp, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000548:	7820      	ldrb	r0, [r4, #0]
 800054a:	b350      	cbz	r0, 80005a2 <Lb_printf+0x7e>
	{
		if (*s=='%')
 800054c:	2825      	cmp	r0, #37	; 0x25
 800054e:	d12d      	bne.n	80005ac <Lb_printf+0x88>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8000550:	f88d 0004 	strb.w	r0, [sp, #4]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8000554:	1c62      	adds	r2, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000556:	2101      	movs	r1, #1
 8000558:	4694      	mov	ip, r2
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800055a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800055e:	f1a3 0463 	sub.w	r4, r3, #99	; 0x63
 8000562:	2b78      	cmp	r3, #120	; 0x78
 8000564:	bf18      	it	ne
 8000566:	2c01      	cmpne	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000568:	4610      	mov	r0, r2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800056a:	d922      	bls.n	80005b2 <Lb_printf+0x8e>
 800056c:	2b73      	cmp	r3, #115	; 0x73
 800056e:	d020      	beq.n	80005b2 <Lb_printf+0x8e>
 8000570:	2b25      	cmp	r3, #37	; 0x25
 8000572:	d01e      	beq.n	80005b2 <Lb_printf+0x8e>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000574:	f801 3009 	strb.w	r3, [r1, r9]
 8000578:	3101      	adds	r1, #1
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800057a:	290a      	cmp	r1, #10
 800057c:	d1ec      	bne.n	8000558 <Lb_printf+0x34>
 800057e:	f89c 3001 	ldrb.w	r3, [ip, #1]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000582:	1c44      	adds	r4, r0, #1
 8000584:	2b64      	cmp	r3, #100	; 0x64
 8000586:	d01f      	beq.n	80005c8 <Lb_printf+0xa4>
 8000588:	d825      	bhi.n	80005d6 <Lb_printf+0xb2>
 800058a:	2b25      	cmp	r3, #37	; 0x25
 800058c:	d036      	beq.n	80005fc <Lb_printf+0xd8>
 800058e:	2b63      	cmp	r3, #99	; 0x63
 8000590:	d1da      	bne.n	8000548 <Lb_printf+0x24>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000592:	f89a 0000 	ldrb.w	r0, [sl]
 8000596:	47a8      	blx	r5
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000598:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 800059a:	f10a 0a04 	add.w	sl, sl, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 800059e:	2800      	cmp	r0, #0
 80005a0:	d1d4      	bne.n	800054c <Lb_printf+0x28>
			s++;
		}
	}
	va_end(args);
	return;
}
 80005a2:	b004      	add	sp, #16
 80005a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005a8:	b004      	add	sp, #16
 80005aa:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80005ac:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 80005ae:	3401      	adds	r4, #1
 80005b0:	e7ca      	b.n	8000548 <Lb_printf+0x24>
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 80005b2:	aa04      	add	r2, sp, #16
					format[i] = '\0';
                	break;
 80005b4:	4660      	mov	r0, ip
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 80005b6:	1851      	adds	r1, r2, r1
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80005b8:	1c44      	adds	r4, r0, #1
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
					format[i] = '\0';
 80005ba:	2200      	movs	r2, #0
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80005bc:	2b64      	cmp	r3, #100	; 0x64
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 80005be:	f801 3c0c 	strb.w	r3, [r1, #-12]
					format[i] = '\0';
 80005c2:	f801 2c0b 	strb.w	r2, [r1, #-11]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80005c6:	d1df      	bne.n	8000588 <Lb_printf+0x64>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 80005c8:	f8da 1000 	ldr.w	r1, [sl]
 80005cc:	4648      	mov	r0, r9
 80005ce:	f10a 0a04 	add.w	sl, sl, #4
 80005d2:	47b8      	blx	r7
					break;
 80005d4:	e7b8      	b.n	8000548 <Lb_printf+0x24>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80005d6:	2b73      	cmp	r3, #115	; 0x73
 80005d8:	d008      	beq.n	80005ec <Lb_printf+0xc8>
 80005da:	2b78      	cmp	r3, #120	; 0x78
 80005dc:	d1b4      	bne.n	8000548 <Lb_printf+0x24>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 80005de:	f8da 1000 	ldr.w	r1, [sl]
 80005e2:	4648      	mov	r0, r9
 80005e4:	f10a 0a04 	add.w	sl, sl, #4
 80005e8:	47b0      	blx	r6
					break;
 80005ea:	e7ad      	b.n	8000548 <Lb_printf+0x24>
				case 's' :
					PrintString(format, va_arg(args, char *));
 80005ec:	f8da 0000 	ldr.w	r0, [sl]
 80005f0:	f10a 0a04 	add.w	sl, sl, #4
        return;
}

void PrintString(char *fmt, char *s)
{
        if (!fmt || !s) return;
 80005f4:	2800      	cmp	r0, #0
 80005f6:	d0a7      	beq.n	8000548 <Lb_printf+0x24>
 80005f8:	47c0      	blx	r8
 80005fa:	e7a5      	b.n	8000548 <Lb_printf+0x24>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80005fc:	4618      	mov	r0, r3
 80005fe:	47a8      	blx	r5
 8000600:	e7a2      	b.n	8000548 <Lb_printf+0x24>
 8000602:	bf00      	nop
 8000604:	20000208 	.word	0x20000208
 8000608:	08000131 	.word	0x08000131
 800060c:	080001cd 	.word	0x080001cd
 8000610:	08000349 	.word	0x08000349
 8000614:	08000169 	.word	0x08000169

08000618 <Lb_sprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_sprintf( char *pStr, char *fmt, ... )
{
 8000618:	b40e      	push	{r1, r2, r3}
 800061a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	va_list args;
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 800061e:	4b38      	ldr	r3, [pc, #224]	; (8000700 <Lb_sprintf+0xe8>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
	pStrPrintBuf = pStr;
 8000624:	4b37      	ldr	r3, [pc, #220]	; (8000704 <Lb_sprintf+0xec>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_sprintf( char *pStr, char *fmt, ... )
{
 8000626:	b085      	sub	sp, #20
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	va_list args;
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 8000628:	6018      	str	r0, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Lb_sprintf( char *pStr, char *fmt, ... )
{
	int		i;
	char	*s=fmt;
 800062a:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	va_list args;
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 800062e:	4b36      	ldr	r3, [pc, #216]	; (8000708 <Lb_sprintf+0xf0>)
 8000630:	2200      	movs	r2, #0
     RET     : void
---------------------------------------------------------------------------*/
void Lb_sprintf( char *pStr, char *fmt, ... )
{
	int		i;
	char	*s=fmt;
 8000632:	f85a 4b04 	ldr.w	r4, [sl], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000636:	4d35      	ldr	r5, [pc, #212]	; (800070c <Lb_sprintf+0xf4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000638:	4f35      	ldr	r7, [pc, #212]	; (8000710 <Lb_sprintf+0xf8>)
 800063a:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8000718 <Lb_sprintf+0x100>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800063e:	4e35      	ldr	r6, [pc, #212]	; (8000714 <Lb_sprintf+0xfc>)
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	va_list args;
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 8000640:	601a      	str	r2, [r3, #0]
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000642:	f10d 0904 	add.w	r9, sp, #4
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	va_start(args, fmt);
	
	while (*s)
 8000646:	7820      	ldrb	r0, [r4, #0]
 8000648:	b350      	cbz	r0, 80006a0 <Lb_sprintf+0x88>
	{
		if (*s=='%')
 800064a:	2825      	cmp	r0, #37	; 0x25
 800064c:	d12d      	bne.n	80006aa <Lb_sprintf+0x92>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 800064e:	f88d 0004 	strb.w	r0, [sp, #4]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8000652:	1c62      	adds	r2, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000654:	2101      	movs	r1, #1
 8000656:	4694      	mov	ip, r2
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000658:	f812 3b01 	ldrb.w	r3, [r2], #1
 800065c:	f1a3 0463 	sub.w	r4, r3, #99	; 0x63
 8000660:	2b78      	cmp	r3, #120	; 0x78
 8000662:	bf18      	it	ne
 8000664:	2c01      	cmpne	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000666:	4610      	mov	r0, r2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000668:	d922      	bls.n	80006b0 <Lb_sprintf+0x98>
 800066a:	2b73      	cmp	r3, #115	; 0x73
 800066c:	d020      	beq.n	80006b0 <Lb_sprintf+0x98>
 800066e:	2b25      	cmp	r3, #37	; 0x25
 8000670:	d01e      	beq.n	80006b0 <Lb_sprintf+0x98>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000672:	f801 3009 	strb.w	r3, [r1, r9]
 8000676:	3101      	adds	r1, #1
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000678:	290a      	cmp	r1, #10
 800067a:	d1ec      	bne.n	8000656 <Lb_sprintf+0x3e>
 800067c:	f89c 3001 	ldrb.w	r3, [ip, #1]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000680:	1c44      	adds	r4, r0, #1
 8000682:	2b64      	cmp	r3, #100	; 0x64
 8000684:	d01f      	beq.n	80006c6 <Lb_sprintf+0xae>
 8000686:	d825      	bhi.n	80006d4 <Lb_sprintf+0xbc>
 8000688:	2b25      	cmp	r3, #37	; 0x25
 800068a:	d036      	beq.n	80006fa <Lb_sprintf+0xe2>
 800068c:	2b63      	cmp	r3, #99	; 0x63
 800068e:	d1da      	bne.n	8000646 <Lb_sprintf+0x2e>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000690:	f89a 0000 	ldrb.w	r0, [sl]
 8000694:	47a8      	blx	r5
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	va_start(args, fmt);
	
	while (*s)
 8000696:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8000698:	f10a 0a04 	add.w	sl, sl, #4
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	va_start(args, fmt);
	
	while (*s)
 800069c:	2800      	cmp	r0, #0
 800069e:	d1d4      	bne.n	800064a <Lb_sprintf+0x32>
	}
	
	va_end(args);
	
	return;
}
 80006a0:	b005      	add	sp, #20
 80006a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006a6:	b003      	add	sp, #12
 80006a8:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80006aa:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 80006ac:	3401      	adds	r4, #1
 80006ae:	e7ca      	b.n	8000646 <Lb_sprintf+0x2e>
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 80006b0:	aa04      	add	r2, sp, #16
					format[i] = '\0';
                	break;
 80006b2:	4660      	mov	r0, ip
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 80006b4:	1851      	adds	r1, r2, r1
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80006b6:	1c44      	adds	r4, r0, #1
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
					format[i] = '\0';
 80006b8:	2200      	movs	r2, #0
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80006ba:	2b64      	cmp	r3, #100	; 0x64
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 80006bc:	f801 3c0c 	strb.w	r3, [r1, #-12]
					format[i] = '\0';
 80006c0:	f801 2c0b 	strb.w	r2, [r1, #-11]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80006c4:	d1df      	bne.n	8000686 <Lb_sprintf+0x6e>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 80006c6:	f8da 1000 	ldr.w	r1, [sl]
 80006ca:	4648      	mov	r0, r9
 80006cc:	f10a 0a04 	add.w	sl, sl, #4
 80006d0:	47b8      	blx	r7
					break;
 80006d2:	e7b8      	b.n	8000646 <Lb_sprintf+0x2e>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80006d4:	2b73      	cmp	r3, #115	; 0x73
 80006d6:	d008      	beq.n	80006ea <Lb_sprintf+0xd2>
 80006d8:	2b78      	cmp	r3, #120	; 0x78
 80006da:	d1b4      	bne.n	8000646 <Lb_sprintf+0x2e>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 80006dc:	f8da 1000 	ldr.w	r1, [sl]
 80006e0:	4648      	mov	r0, r9
 80006e2:	f10a 0a04 	add.w	sl, sl, #4
 80006e6:	47b0      	blx	r6
					break;
 80006e8:	e7ad      	b.n	8000646 <Lb_sprintf+0x2e>
				case 's' :
					PrintString(format, va_arg(args, char *));
 80006ea:	f8da 0000 	ldr.w	r0, [sl]
 80006ee:	f10a 0a04 	add.w	sl, sl, #4
        return;
}

void PrintString(char *fmt, char *s)
{
        if (!fmt || !s) return;
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d0a7      	beq.n	8000646 <Lb_sprintf+0x2e>
 80006f6:	47c0      	blx	r8
 80006f8:	e7a5      	b.n	8000646 <Lb_sprintf+0x2e>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80006fa:	4618      	mov	r0, r3
 80006fc:	47a8      	blx	r5
 80006fe:	e7a2      	b.n	8000646 <Lb_sprintf+0x2e>
 8000700:	20000208 	.word	0x20000208
 8000704:	200002ec 	.word	0x200002ec
 8000708:	20000204 	.word	0x20000204
 800070c:	08000131 	.word	0x08000131
 8000710:	080001cd 	.word	0x080001cd
 8000714:	08000349 	.word	0x08000349
 8000718:	08000169 	.word	0x08000169

0800071c <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 800071c:	4668      	mov	r0, sp
 800071e:	f020 0107 	bic.w	r1, r0, #7
 8000722:	468d      	mov	sp, r1
 8000724:	b519      	push	{r0, r3, r4, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000726:	4923      	ldr	r1, [pc, #140]	; (80007b4 <zero_loop+0x66>)
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <zero_loop+0x6a>)
 800072a:	4299      	cmp	r1, r3
 800072c:	d20b      	bcs.n	8000746 <Hw_StartUp_Init+0x2a>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 800072e:	43c8      	mvns	r0, r1
 8000730:	18c0      	adds	r0, r0, r3
 8000732:	f020 0003 	bic.w	r0, r0, #3
 8000736:	4c21      	ldr	r4, [pc, #132]	; (80007bc <zero_loop+0x6e>)
 8000738:	3004      	adds	r0, #4
 800073a:	2300      	movs	r3, #0
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 800073c:	591a      	ldr	r2, [r3, r4]
 800073e:	505a      	str	r2, [r3, r1]
 8000740:	3304      	adds	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000742:	4283      	cmp	r3, r0
 8000744:	d1fa      	bne.n	800073c <Hw_StartUp_Init+0x20>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 8000746:	481f      	ldr	r0, [pc, #124]	; (80007c4 <zero_loop+0x76>)
 8000748:	491f      	ldr	r1, [pc, #124]	; (80007c8 <zero_loop+0x7a>)
 800074a:	f04f 0200 	mov.w	r2, #0

0800074e <zero_loop>:
 800074e:	4288      	cmp	r0, r1
 8000750:	bfb8      	it	lt
 8000752:	f840 2b04 	strlt.w	r2, [r0], #4
 8000756:	f6ff affa 	blt.w	800074e <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 800075a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800075e:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000762:	6822      	ldr	r2, [r4, #0]
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
	
	u32 TimeOutCnt  = 0;
 8000764:	2300      	movs	r3, #0
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8000766:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800076a:	6022      	str	r2, [r4, #0]
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 800076c:	f240 40ff 	movw	r0, #1279	; 0x4ff
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8000770:	6821      	ldr	r1, [r4, #0]
		TimeOutCnt++;		
 8000772:	3301      	adds	r3, #1
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8000774:	4283      	cmp	r3, r0
 8000776:	f481 3100 	eor.w	r1, r1, #131072	; 0x20000
 800077a:	bf8c      	ite	hi
 800077c:	2200      	movhi	r2, #0
 800077e:	2201      	movls	r2, #1
 8000780:	ea12 4251 	ands.w	r2, r2, r1, lsr #17
 8000784:	d1f4      	bne.n	8000770 <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 8000786:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	f042 0210 	orr.w	r2, r2, #16
 8000794:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	f022 0203 	bic.w	r2, r2, #3
 800079c:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	f042 0202 	orr.w	r2, r2, #2
 80007a4:	601a      	str	r2, [r3, #0]


    main();
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <zero_loop+0x72>)
 80007a8:	4798      	blx	r3

}
 80007aa:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
 80007ae:	4685      	mov	sp, r0
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	20000000 	.word	0x20000000
 80007b8:	200000e4 	.word	0x200000e4
 80007bc:	08002cc8 	.word	0x08002cc8
 80007c0:	080000dd 	.word	0x080000dd
 80007c4:	20000200 	.word	0x20000200
 80007c8:	2000104c 	.word	0x2000104c

080007cc <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 80007ce:	f640 334d 	movw	r3, #2893	; 0xb4d
 80007d2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80007d6:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 80007d8:	f640 5335 	movw	r3, #3381	; 0xd35
 80007dc:	f6c0 0300 	movt	r3, #2048	; 0x800
 80007e0:	4798      	blx	r3
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80007e2:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 80007e6:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80007ea:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 80007ee:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 80007f2:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80007f6:	f241 0104 	movw	r1, #4100	; 0x1004
 80007fa:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 80007fe:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000802:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000806:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800080a:	f2c3 3044 	movt	r0, #13124	; 0x3344
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800080e:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8000812:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8000816:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800081a:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 800081e:	f640 2335 	movw	r3, #2613	; 0xa35
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8000822:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 8000826:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800082a:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800082c:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800082e:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000830:	6008      	str	r0, [r1, #0]
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 8000832:	4798      	blx	r3
	Hw_Timer_Init();
 8000834:	f640 5385 	movw	r3, #3461	; 0xd85
 8000838:	f6c0 0300 	movt	r3, #2048	; 0x800
 800083c:	4798      	blx	r3

	Hw_Adc_Init();
 800083e:	f640 63dd 	movw	r3, #3805	; 0xedd
 8000842:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000846:	4798      	blx	r3

	Hw_VCom_Init();
 8000848:	f640 63b1 	movw	r3, #3761	; 0xeb1
 800084c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000850:	4798      	blx	r3
	
	Hw_Led_Init();
 8000852:	f640 33e1 	movw	r3, #3041	; 0xbe1
 8000856:	f6c0 0300 	movt	r3, #2048	; 0x800
 800085a:	4798      	blx	r3

	Hw_DcMotor_Init();
 800085c:	f241 03b1 	movw	r3, #4273	; 0x10b1
 8000860:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000864:	4798      	blx	r3
 8000866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000868 <Hw_ISR_UART2_Handler>:


//-- UART2 ISR
//
void Hw_ISR_UART2_Handler(void)
{
 8000868:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART2_DR;
 800086a:	f244 4304 	movw	r3, #17412	; 0x4404
 800086e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000872:	681b      	ldr	r3, [r3, #0]


//-- UART2 ISR
//
void Hw_ISR_UART2_Handler(void)
{
 8000874:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART2_DR;
 8000876:	a902      	add	r1, sp, #8
 8000878:	f801 3d01 	strb.w	r3, [r1, #-1]!
	

	Hw_Uart_Q_Push( 1, &UartData );
 800087c:	2001      	movs	r0, #1
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <Hw_ISR_UART2_Handler+0x2c>)
 8000880:	4798      	blx	r3

	if( Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr != NULL )
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <Hw_ISR_UART2_Handler+0x30>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	b113      	cbz	r3, 800088e <Hw_ISR_UART2_Handler+0x26>
	{
		(*Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr)(UartData);	
 8000888:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800088c:	4798      	blx	r3
	} 
}
 800088e:	b003      	add	sp, #12
 8000890:	bd00      	pop	{pc}
 8000892:	bf00      	nop
 8000894:	08000c81 	.word	0x08000c81
 8000898:	200002f0 	.word	0x200002f0

0800089c <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 800089c:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 800089e:	f643 0304 	movw	r3, #14340	; 0x3804
 80008a2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80008a6:	681b      	ldr	r3, [r3, #0]


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80008a8:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80008aa:	a902      	add	r1, sp, #8
 80008ac:	f801 3d01 	strb.w	r3, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 80008b0:	2000      	movs	r0, #0
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <Hw_ISR_UART1_Handler+0x2c>)
 80008b4:	4798      	blx	r3

	if( Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr != NULL )
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <Hw_ISR_UART1_Handler+0x30>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	b113      	cbz	r3, 80008c2 <Hw_ISR_UART1_Handler+0x26>
	{
		(*Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr)(UartData);	
 80008bc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80008c0:	4798      	blx	r3
	} 
}
 80008c2:	b003      	add	sp, #12
 80008c4:	bd00      	pop	{pc}
 80008c6:	bf00      	nop
 80008c8:	08000c81 	.word	0x08000c81
 80008cc:	200002f0 	.word	0x200002f0

080008d0 <Hw_Uart_Putch.part.0>:
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
	switch( Ch )
	{
		case HW_UART_COM1:
		    while( !(REG_USART1_SR & 0x80) );
 80008d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80008d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80008d8:	6813      	ldr	r3, [r2, #0]
 80008da:	061b      	lsls	r3, r3, #24
 80008dc:	d5fc      	bpl.n	80008d8 <Hw_Uart_Putch.part.0+0x8>
    		REG_USART1_DR = Uart_PutData;
 80008de:	f643 0304 	movw	r3, #14340	; 0x3804
 80008e2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80008e6:	6018      	str	r0, [r3, #0]
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 80008ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80008f0:	f241 0618 	movw	r6, #4120	; 0x1018
 80008f4:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80008f8:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 80008fa:	f240 23f0 	movw	r3, #752	; 0x2f0
 80008fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000902:	f643 040c 	movw	r4, #14348	; 0x380c
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8000906:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 8000908:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800090a:	f2c4 0401 	movt	r4, #16385	; 0x4001
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 800090e:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000912:	230c      	movs	r3, #12
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000914:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 8000918:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 800091c:	f643 0708 	movw	r7, #14344	; 0x3808
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000920:	f8c6 8000 	str.w	r8, [r6]
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000924:	2200      	movs	r2, #0
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000926:	6023      	str	r3, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000928:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 800092c:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000930:	f240 2371 	movw	r3, #625	; 0x271
 8000934:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000938:	f24e 1504 	movw	r5, #57604	; 0xe104
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800093c:	f8cc 2000 	str.w	r2, [ip]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000940:	f2ce 0500 	movt	r5, #57344	; 0xe000
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART1_CR3  = 0;
 8000944:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000948:	603b      	str	r3, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800094a:	682b      	ldr	r3, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800094c:	2025      	movs	r0, #37	; 0x25
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800094e:	f043 0320 	orr.w	r3, r3, #32
 8000952:	602b      	str	r3, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8000954:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8000956:	f640 5349 	movw	r3, #3401	; 0xd49
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 800095a:	f041 0120 	orr.w	r1, r1, #32
 800095e:	6021      	str	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8000960:	f640 019d 	movw	r1, #2205	; 0x89d
 8000964:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000968:	f6c0 0100 	movt	r1, #2048	; 0x800
 800096c:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 800096e:	6823      	ldr	r3, [r4, #0]
 8000970:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000974:	6023      	str	r3, [r4, #0]
 8000976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800097a:	bf00      	nop

0800097c <Hw_Uart_Open_COM2>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 800097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 800097e:	f241 041c 	movw	r4, #4124	; 0x101c
 8000982:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000986:	6825      	ldr	r5, [r4, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 8000988:	f240 22f0 	movw	r2, #752	; 0x2f0
 800098c:	f2c2 0200 	movt	r2, #8192	; 0x2000
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 8000990:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 8000994:	f44f 6300 	mov.w	r3, #2048	; 0x800
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 8000998:	6110      	str	r0, [r2, #16]
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
 800099a:	6151      	str	r1, [r2, #20]
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 800099c:	f2c4 0301 	movt	r3, #16385	; 0x4001
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 80009a0:	6025      	str	r5, [r4, #0]
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 80009a2:	681a      	ldr	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 80009a4:	f244 440c 	movw	r4, #17420	; 0x440c
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 80009a8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80009ac:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
 80009ae:	681a      	ldr	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 80009b0:	f2c4 0400 	movt	r4, #16384	; 0x4000
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
 80009b4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80009b8:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
 80009ba:	681a      	ldr	r2, [r3, #0]
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 80009bc:	f244 4610 	movw	r6, #17424	; 0x4410
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
 80009c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009c4:	601a      	str	r2, [r3, #0]
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
 80009c6:	681a      	ldr	r2, [r3, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART2_CR3  = 0;
 80009c8:	f244 4514 	movw	r5, #17428	; 0x4414
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
 80009cc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80009d0:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 80009d2:	681a      	ldr	r2, [r3, #0]
	REG_USART2_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 80009d4:	f244 4008 	movw	r0, #17416	; 0x4408
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 80009d8:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 80009da:	681f      	ldr	r7, [r3, #0]
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 80009dc:	2200      	movs	r2, #0
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 80009de:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80009e2:	601f      	str	r7, [r3, #0]
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 80009e4:	230c      	movs	r3, #12
 80009e6:	6023      	str	r3, [r4, #0]
	REG_USART2_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 80009e8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80009ec:	f44f 739c 	mov.w	r3, #312	; 0x138
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 80009f0:	f2c4 0600 	movt	r6, #16384	; 0x4000
	REG_USART2_CR3  = 0;
 80009f4:	f2c4 0500 	movt	r5, #16384	; 0x4000
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80009f8:	f24e 1104 	movw	r1, #57604	; 0xe104
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 80009fc:	6032      	str	r2, [r6, #0]
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80009fe:	f2ce 0100 	movt	r1, #57344	; 0xe000
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART2_CR3  = 0;
 8000a02:	602a      	str	r2, [r5, #0]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 8000a04:	6003      	str	r3, [r0, #0]
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000a06:	680b      	ldr	r3, [r1, #0]
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 8000a08:	2026      	movs	r0, #38	; 0x26
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a0e:	600b      	str	r3, [r1, #0]
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 8000a10:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 8000a12:	f640 5349 	movw	r3, #3401	; 0xd49
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 8000a16:	f041 0120 	orr.w	r1, r1, #32
 8000a1a:	6021      	str	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 8000a1c:	f640 0169 	movw	r1, #2153	; 0x869
 8000a20:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000a24:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000a28:	4798      	blx	r3
	
	REG_USART2_CR1 |= ( 1 << 13 );	    // USART Enable
 8000a2a:	6823      	ldr	r3, [r4, #0]
 8000a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a30:	6023      	str	r3, [r4, #0]
 8000a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000a34 <Hw_Uart_Init>:
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 8000a34:	f640 4339 	movw	r3, #3129	; 0xc39
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 8000a38:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 8000a3a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000a3e:	4798      	blx	r3
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000a40:	f240 23f0 	movw	r3, #752	; 0x2f0
 8000a44:	2400      	movs	r4, #0
 8000a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8000a4a:	f640 02ed 	movw	r2, #2285	; 0x8ed
 8000a4e:	4621      	mov	r1, r4
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000a50:	605c      	str	r4, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000a52:	609c      	str	r4, [r3, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000a54:	611c      	str	r4, [r3, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000a56:	615c      	str	r4, [r3, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000a58:	61dc      	str	r4, [r3, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000a5a:	621c      	str	r4, [r3, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000a5c:	629c      	str	r4, [r3, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000a5e:	62dc      	str	r4, [r3, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000a60:	635c      	str	r4, [r3, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000a62:	639c      	str	r4, [r3, #56]	; 0x38
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8000a64:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000a68:	f6c0 0200 	movt	r2, #2048	; 0x800
 8000a6c:	4790      	blx	r2
			break;
			
		case HW_UART_COM2:
			Hw_Uart_Open_COM2( BaudData, ISR_FuncPtr );
 8000a6e:	f640 137d 	movw	r3, #2429	; 0x97d
 8000a72:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000a76:	4621      	mov	r1, r4
 8000a78:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000a7c:	4798      	blx	r3
 8000a7e:	bd10      	pop	{r4, pc}

08000a80 <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000a80:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 8000a82:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000a84:	b083      	sub	sp, #12
 8000a86:	4d08      	ldr	r5, [pc, #32]	; (8000aa8 <Hw_Uart_Getch+0x28>)
 8000a88:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 8000a8a:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 8000a8e:	4620      	mov	r0, r4
 8000a90:	47a8      	blx	r5
 8000a92:	2800      	cmp	r0, #0
 8000a94:	d0fb      	beq.n	8000a8e <Hw_Uart_Getch+0xe>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 8000a96:	4620      	mov	r0, r4
 8000a98:	f10d 0107 	add.w	r1, sp, #7
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <Hw_Uart_Getch+0x2c>)
 8000a9e:	4798      	blx	r3

	return Uart_GetData;
}
 8000aa0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000aa4:	b003      	add	sp, #12
 8000aa6:	bd30      	pop	{r4, r5, pc}
 8000aa8:	08000c55 	.word	0x08000c55
 8000aac:	08000cdd 	.word	0x08000cdd

08000ab0 <Hw_Uart_Putch>:
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
 8000ab0:	b508      	push	{r3, lr}
	switch( Ch )
 8000ab2:	b918      	cbnz	r0, 8000abc <Hw_Uart_Putch+0xc>
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <Hw_Uart_Putch+0x2c>)
 8000ab8:	4798      	blx	r3
 8000aba:	bd08      	pop	{r3, pc}
 8000abc:	2801      	cmp	r0, #1
 8000abe:	d000      	beq.n	8000ac2 <Hw_Uart_Putch+0x12>
 8000ac0:	bd08      	pop	{r3, pc}
		    while( !(REG_USART1_SR & 0x80) );
    		REG_USART1_DR = Uart_PutData;
			break;
			
		case HW_UART_COM2:
		    while( !(REG_USART2_SR & 0x80) );
 8000ac2:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 8000ac6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000aca:	6813      	ldr	r3, [r2, #0]
 8000acc:	0618      	lsls	r0, r3, #24
 8000ace:	d5fc      	bpl.n	8000aca <Hw_Uart_Putch+0x1a>
    		REG_USART2_DR = Uart_PutData;
 8000ad0:	f244 4304 	movw	r3, #17412	; 0x4404
 8000ad4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000ad8:	6019      	str	r1, [r3, #0]
 8000ada:	bd08      	pop	{r3, pc}
 8000adc:	080008d1 	.word	0x080008d1

08000ae0 <Hw_Uart_PrintEx>:
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_PrintEx( u8 Ch, char *UartPrintData )
{
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	460c      	mov	r4, r1
	while( *UartPrintData != '\0' )
 8000ae4:	7809      	ldrb	r1, [r1, #0]
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_PrintEx( u8 Ch, char *UartPrintData )
{
 8000ae6:	4605      	mov	r5, r0
	while( *UartPrintData != '\0' )
 8000ae8:	b131      	cbz	r1, 8000af8 <Hw_Uart_PrintEx+0x18>
 8000aea:	4e04      	ldr	r6, [pc, #16]	; (8000afc <Hw_Uart_PrintEx+0x1c>)
	{
		Hw_Uart_Putch( Ch, *UartPrintData );
 8000aec:	4628      	mov	r0, r5
 8000aee:	47b0      	blx	r6
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_PrintEx( u8 Ch, char *UartPrintData )
{
	while( *UartPrintData != '\0' )
 8000af0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d1f9      	bne.n	8000aec <Hw_Uart_PrintEx+0xc>
 8000af8:	bd70      	pop	{r4, r5, r6, pc}
 8000afa:	bf00      	nop
 8000afc:	08000ab1 	.word	0x08000ab1

08000b00 <Hw_Uart_Print>:
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Print( u8 Ch,  char *format, ... )
{
 8000b00:	b40e      	push	{r1, r2, r3}
 8000b02:	b510      	push	{r4, lr}
	
	//va_start( ap, format );

	//vsprintf( Str, format, ap );	

	Lb_sprintf(Str, format );
 8000b04:	f240 6319 	movw	r3, #1561	; 0x619
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Print( u8 Ch,  char *format, ... )
{
 8000b08:	b0b3      	sub	sp, #204	; 0xcc
 8000b0a:	4604      	mov	r4, r0
	
	//va_start( ap, format );

	//vsprintf( Str, format, ap );	

	Lb_sprintf(Str, format );
 8000b0c:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8000b0e:	4668      	mov	r0, sp
 8000b10:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000b14:	4798      	blx	r3
	//va_end(ap);	
	
	
	
	
	Hw_Uart_PrintEx( Ch, Str );
 8000b16:	f640 23e1 	movw	r3, #2785	; 0xae1
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	4669      	mov	r1, sp
 8000b1e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000b22:	4798      	blx	r3
}
 8000b24:	b033      	add	sp, #204	; 0xcc
 8000b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b2a:	b003      	add	sp, #12
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_USE_UART_CH_MENU, '\r');
 8000b30:	280a      	cmp	r0, #10


//------------------------------- printf 포팅용 --------------------------------
//
void print_byte(unsigned int c)
{
 8000b32:	b538      	push	{r3, r4, r5, lr}
 8000b34:	4604      	mov	r4, r0
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_USE_UART_CH_MENU, '\r');
 8000b36:	d003      	beq.n	8000b40 <print_byte+0x10>
 8000b38:	4d03      	ldr	r5, [pc, #12]	; (8000b48 <print_byte+0x18>)
 8000b3a:	b2e0      	uxtb	r0, r4
 8000b3c:	47a8      	blx	r5
 8000b3e:	bd38      	pop	{r3, r4, r5, pc}
 8000b40:	200d      	movs	r0, #13
 8000b42:	4d01      	ldr	r5, [pc, #4]	; (8000b48 <print_byte+0x18>)
 8000b44:	47a8      	blx	r5
 8000b46:	e7f8      	b.n	8000b3a <print_byte+0xa>
 8000b48:	080008d1 	.word	0x080008d1

08000b4c <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8000b4c:	f241 0304 	movw	r3, #4100	; 0x1004
 8000b50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b54:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000b56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8000b5a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000b5e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000b62:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8000b64:	681a      	ldr	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000b66:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8000b6a:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8000b6e:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000b70:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8000b72:	460a      	mov	r2, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000b74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b78:	600b      	str	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8000b7a:	6813      	ldr	r3, [r2, #0]
 8000b7c:	019b      	lsls	r3, r3, #6
 8000b7e:	d5fc      	bpl.n	8000b7a <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8000b80:	f241 0304 	movw	r3, #4100	; 0x1004
 8000b84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b88:	6819      	ldr	r1, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8000b8a:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8000b8c:	f021 0103 	bic.w	r1, r1, #3
 8000b90:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 8000b92:	6819      	ldr	r1, [r3, #0]
 8000b94:	f041 0102 	orr.w	r1, r1, #2
 8000b98:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 8000b9a:	6819      	ldr	r1, [r3, #0]
 8000b9c:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8000ba0:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 8000ba2:	6819      	ldr	r1, [r3, #0]
 8000ba4:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8000ba8:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 8000baa:	6819      	ldr	r1, [r3, #0]
 8000bac:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000bb0:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 8000bb2:	6819      	ldr	r1, [r3, #0]
 8000bb4:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 8000bb8:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 8000bba:	6819      	ldr	r1, [r3, #0]
 8000bbc:	6019      	str	r1, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8000bbe:	6813      	ldr	r3, [r2, #0]
 8000bc0:	f003 030c 	and.w	r3, r3, #12
 8000bc4:	2b08      	cmp	r3, #8
 8000bc6:	d1fa      	bne.n	8000bbe <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 8000bc8:	f241 0318 	movw	r3, #4120	; 0x1018
 8000bcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bd6:	f042 021d 	orr.w	r2, r2, #29
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8000be0:	2204      	movs	r2, #4
 8000be2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000be6:	6811      	ldr	r1, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8000be8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8000bec:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8000bf0:	6011      	str	r1, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 8000bf2:	6811      	ldr	r1, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8000bf4:	f2c4 0301 	movt	r3, #16385	; 0x4001
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
 8000bf8:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8000bfc:	6011      	str	r1, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8000bfe:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8000c00:	f640 420c 	movw	r2, #3084	; 0xc0c
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8000c04:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 8000c08:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8000c0a:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8000c0c:	f2c4 0201 	movt	r2, #16385	; 0x4001
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8000c10:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 8000c14:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 8000c16:	6819      	ldr	r1, [r3, #0]
 8000c18:	6019      	str	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8000c1a:	6813      	ldr	r3, [r2, #0]
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	4770      	bx	lr

08000c24 <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 8000c24:	b938      	cbnz	r0, 8000c36 <Hw_Led_Toggle+0x12>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 3 );
 8000c26:	f640 430c 	movw	r3, #3084	; 0xc0c
 8000c2a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	f082 0208 	eor.w	r2, r2, #8
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	4770      	bx	lr

08000c38 <Hw_Uart_Q_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
 8000c38:	2300      	movs	r3, #0
 8000c3a:	4804      	ldr	r0, [pc, #16]	; (8000c4c <Hw_Uart_Q_Init+0x14>)
 8000c3c:	4904      	ldr	r1, [pc, #16]	; (8000c50 <Hw_Uart_Q_Init+0x18>)
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8000c3e:	461a      	mov	r2, r3
 8000c40:	521a      	strh	r2, [r3, r0]
 8000c42:	525a      	strh	r2, [r3, r1]
 8000c44:	3302      	adds	r3, #2
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
 8000c46:	2b0e      	cmp	r3, #14
 8000c48:	d1fa      	bne.n	8000c40 <Hw_Uart_Q_Init+0x8>
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
	}
}
 8000c4a:	4770      	bx	lr
 8000c4c:	20000424 	.word	0x20000424
 8000c50:	20000434 	.word	0x20000434

08000c54 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000c54:	f240 4234 	movw	r2, #1076	; 0x434
 8000c58:	f240 4324 	movw	r3, #1060	; 0x424
 8000c5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c64:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 8000c68:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
 8000c6c:	1ad2      	subs	r2, r2, r3
 8000c6e:	3220      	adds	r2, #32
 8000c70:	17d3      	asrs	r3, r2, #31
 8000c72:	0edb      	lsrs	r3, r3, #27
 8000c74:	18d2      	adds	r2, r2, r3
 8000c76:	f002 001f 	and.w	r0, r2, #31
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8000c7a:	1ac0      	subs	r0, r0, r3
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <Hw_Uart_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8000c80:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000c82:	4c13      	ldr	r4, [pc, #76]	; (8000cd0 <Hw_Uart_Q_Push+0x50>)
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <Hw_Uart_Q_Push+0x54>)
 8000c86:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
 8000c8a:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8000c8e:	b235      	sxth	r5, r6
 8000c90:	1aaa      	subs	r2, r5, r2
 8000c92:	3220      	adds	r2, #32
 8000c94:	17d3      	asrs	r3, r2, #31
 8000c96:	0edb      	lsrs	r3, r3, #27
 8000c98:	18d2      	adds	r2, r2, r3
 8000c9a:	f002 021f 	and.w	r2, r2, #31
 8000c9e:	1ad3      	subs	r3, r2, r3
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000ca0:	2b1f      	cmp	r3, #31
 8000ca2:	d012      	beq.n	8000cca <Hw_Uart_Q_Push+0x4a>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000ca4:	3601      	adds	r6, #1
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000ca6:	b236      	sxth	r6, r6
 8000ca8:	17f3      	asrs	r3, r6, #31
 8000caa:	0edb      	lsrs	r3, r3, #27
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000cac:	eb00 1240 	add.w	r2, r0, r0, lsl #5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cb0:	18f6      	adds	r6, r6, r3
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000cb2:	7809      	ldrb	r1, [r1, #0]
 8000cb4:	1955      	adds	r5, r2, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cb6:	f006 061f 	and.w	r6, r6, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000cba:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <Hw_Uart_Q_Push+0x58>)
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cbc:	1af3      	subs	r3, r6, r3
 8000cbe:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000cc2:	5551      	strb	r1, [r2, r5]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;

	return TRUE;
 8000cc4:	2001      	movs	r0, #1
}
 8000cc6:	bc70      	pop	{r4, r5, r6}
 8000cc8:	4770      	bx	lr
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000cca:	2000      	movs	r0, #0
 8000ccc:	e7fb      	b.n	8000cc6 <Hw_Uart_Q_Push+0x46>
 8000cce:	bf00      	nop
 8000cd0:	20000434 	.word	0x20000434
 8000cd4:	20000424 	.word	0x20000424
 8000cd8:	2000032c 	.word	0x2000032c

08000cdc <Hw_Uart_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000cdc:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000cde:	4c12      	ldr	r4, [pc, #72]	; (8000d28 <Hw_Uart_Q_Pop+0x4c>)
 8000ce0:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <Hw_Uart_Q_Pop+0x50>)
 8000ce2:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000ce6:	4603      	mov	r3, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000ce8:	f932 0010 	ldrsh.w	r0, [r2, r0, lsl #1]
 8000cec:	b235      	sxth	r5, r6
 8000cee:	1b40      	subs	r0, r0, r5
 8000cf0:	3020      	adds	r0, #32
 8000cf2:	17c2      	asrs	r2, r0, #31
 8000cf4:	0ed2      	lsrs	r2, r2, #27
 8000cf6:	1880      	adds	r0, r0, r2
 8000cf8:	f000 001f 	and.w	r0, r0, #31
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000cfc:	1a80      	subs	r0, r0, r2
 8000cfe:	d010      	beq.n	8000d22 <Hw_Uart_Q_Pop+0x46>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000d00:	3601      	adds	r6, #1

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d02:	b236      	sxth	r6, r6
 8000d04:	17f2      	asrs	r2, r6, #31
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000d06:	eb03 1043 	add.w	r0, r3, r3, lsl #5

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d0a:	0ed2      	lsrs	r2, r2, #27
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000d0c:	1945      	adds	r5, r0, r5
 8000d0e:	4808      	ldr	r0, [pc, #32]	; (8000d30 <Hw_Uart_Q_Pop+0x54>)

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d10:	18b6      	adds	r6, r6, r2
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000d12:	5d40      	ldrb	r0, [r0, r5]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d14:	f006 061f 	and.w	r6, r6, #31
 8000d18:	1ab2      	subs	r2, r6, r2
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000d1a:	7008      	strb	r0, [r1, #0]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;

    return TRUE;
 8000d1c:	2001      	movs	r0, #1
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d1e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]

    return TRUE;
}
 8000d22:	bc70      	pop	{r4, r5, r6}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000424 	.word	0x20000424
 8000d2c:	20000434 	.word	0x20000434
 8000d30:	2000032c 	.word	0x2000032c

08000d34 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8000d34:	f240 6300 	movw	r3, #1536	; 0x600
 8000d38:	f64e 5208 	movw	r2, #60680	; 0xed08
 8000d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d40:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	4770      	bx	lr

08000d48 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8000d48:	f240 6300 	movw	r3, #1536	; 0x600
 8000d4c:	3010      	adds	r0, #16
 8000d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d52:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000d56:	4770      	bx	lr

08000d58 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8000d58:	f240 6300 	movw	r3, #1536	; 0x600
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 8000d5c:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8000d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d62:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000d66:	4770      	bx	lr

08000d68 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 8000d68:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 8000d6a:	f640 616d 	movw	r1, #3693	; 0xe6d
 8000d6e:	f640 5359 	movw	r3, #3417	; 0xd59
 8000d72:	203c      	movs	r0, #60	; 0x3c
 8000d74:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000d7e:	4798      	blx	r3
 8000d80:	bd08      	pop	{r3, pc}
 8000d82:	bf00      	nop

08000d84 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 8000d84:	b510      	push	{r4, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 8000d86:	4c1b      	ldr	r4, [pc, #108]	; (8000df4 <Hw_Timer_Init+0x70>)
 8000d88:	7823      	ldrb	r3, [r4, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d030      	beq.n	8000df0 <Hw_Timer_Init+0x6c>
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <Hw_Timer_Init+0x74>)
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000d90:	2200      	movs	r2, #0
     TITLE   : Hw_Timer_Init
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
 8000d92:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000d96:	f803 2c08 	strb.w	r2, [r3, #-8]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000d9a:	f823 2c06 	strh.w	r2, [r3, #-6]
		Timer_Tbl[i].Timer_Init = 0;
 8000d9e:	f823 2c04 	strh.w	r2, [r3, #-4]
		Timer_Tbl[i].TmrFnct    = NULL;
 8000da2:	f843 2b10 	str.w	r2, [r3], #16
	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d1f5      	bne.n	8000d96 <Hw_Timer_Init+0x12>
		Timer_Tbl[i].Timer_Init = 0;
		Timer_Tbl[i].TmrFnct    = NULL;
	}	                   
	
	
	Hw_Timer_SetupISR();
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <Hw_Timer_Init+0x78>)
 8000dac:	4798      	blx	r3
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8000dae:	f24e 0114 	movw	r1, #57364	; 0xe014
 8000db2:	f641 103f 	movw	r0, #6463	; 0x193f
 8000db6:	f2ce 0100 	movt	r1, #57344	; 0xe000
	
	REG_STK_VAL  = 0;	
 8000dba:	f24e 0218 	movw	r2, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8000dbe:	f2c0 0001 	movt	r0, #1
 8000dc2:	6008      	str	r0, [r1, #0]
	
	REG_STK_VAL  = 0;	
 8000dc4:	f2ce 0200 	movt	r2, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000dc8:	f24e 0310 	movw	r3, #57360	; 0xe010
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8000dcc:	2100      	movs	r1, #0
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000dce:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8000dd2:	6011      	str	r1, [r2, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	f042 0204 	orr.w	r2, r2, #4
 8000dda:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	f042 0202 	orr.w	r2, r2, #2
 8000de2:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	f042 0201 	orr.w	r2, r2, #1
 8000dea:	601a      	str	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	7023      	strb	r3, [r4, #0]
 8000df0:	bd10      	pop	{r4, pc}
 8000df2:	bf00      	nop
 8000df4:	200002b0 	.word	0x200002b0
 8000df8:	20000214 	.word	0x20000214
 8000dfc:	08000d69 	.word	0x08000d69

08000e00 <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8000e00:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <Hw_Timer_Tick+0x60>)
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8000e02:	b538      	push	{r3, r4, r5, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 8000e04:	6811      	ldr	r1, [r2, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <Hw_Timer_Tick+0x64>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8000e08:	3101      	adds	r1, #1
 8000e0a:	6011      	str	r1, [r2, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8000e0c:	881a      	ldrh	r2, [r3, #0]
 8000e0e:	b292      	uxth	r2, r2
 8000e10:	b11a      	cbz	r2, 8000e1a <Hw_Timer_Tick+0x1a>
 8000e12:	881a      	ldrh	r2, [r3, #0]
 8000e14:	3a01      	subs	r2, #1
 8000e16:	b292      	uxth	r2, r2
 8000e18:	801a      	strh	r2, [r3, #0]
 8000e1a:	4c13      	ldr	r4, [pc, #76]	; (8000e68 <Hw_Timer_Tick+0x68>)
     WORK	:
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
 8000e1c:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 8000e20:	e002      	b.n	8000e28 <Hw_Timer_Tick+0x28>
 8000e22:	3410      	adds	r4, #16

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 8000e24:	42ac      	cmp	r4, r5
 8000e26:	d01a      	beq.n	8000e5e <Hw_Timer_Tick+0x5e>
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000e28:	f814 3c08 	ldrb.w	r3, [r4, #-8]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d1f8      	bne.n	8000e22 <Hw_Timer_Tick+0x22>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000e30:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	f824 3c06 	strh.w	r3, [r4, #-6]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1f0      	bne.n	8000e22 <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000e40:	f814 2c07 	ldrb.w	r2, [r4, #-7]
 8000e44:	2a01      	cmp	r2, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000e46:	f834 2c04 	ldrh.w	r2, [r4, #-4]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8000e4a:	bf08      	it	eq
 8000e4c:	f804 3c08 	strbeq.w	r3, [r4, #-8]

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000e50:	f824 2c06 	strh.w	r2, [r4, #-6]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000e54:	6823      	ldr	r3, [r4, #0]
 8000e56:	3410      	adds	r4, #16
 8000e58:	4798      	blx	r3

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 8000e5a:	42ac      	cmp	r4, r5
 8000e5c:	d1e4      	bne.n	8000e28 <Hw_Timer_Tick+0x28>
				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
			}
		}
	}
	
}
 8000e5e:	bd38      	pop	{r3, r4, r5, pc}
 8000e60:	200002ac 	.word	0x200002ac
 8000e64:	200002b2 	.word	0x200002b2
 8000e68:	20000214 	.word	0x20000214

08000e6c <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 8000e6c:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 8000e6e:	f640 6301 	movw	r3, #3585	; 0xe01
 8000e72:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000e76:	4798      	blx	r3
 8000e78:	bd08      	pop	{r3, pc}
 8000e7a:	bf00      	nop

08000e7c <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 8000e7c:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8000e7e:	f240 240c 	movw	r4, #524	; 0x20c
 8000e82:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000e86:	eb04 1000 	add.w	r0, r4, r0, lsl #4
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 8000e8a:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8000e8c:	9b01      	ldr	r3, [sp, #4]
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8000e8e:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8000e90:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 8000e92:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 8000e94:	8081      	strh	r1, [r0, #4]
}
 8000e96:	bc10      	pop	{r4}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8000e9c:	2809      	cmp	r0, #9
 8000e9e:	d803      	bhi.n	8000ea8 <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 8000ea0:	4b02      	ldr	r3, [pc, #8]	; (8000eac <Hw_Timer_Start+0x10>)
 8000ea2:	0100      	lsls	r0, r0, #4
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	541a      	strb	r2, [r3, r0]
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	2000020c 	.word	0x2000020c

08000eb0 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8000eb0:	b508      	push	{r3, lr}
	Set_System();
 8000eb2:	f641 3301 	movw	r3, #6913	; 0x1b01
 8000eb6:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000eba:	4798      	blx	r3
	Set_USBClock();
 8000ebc:	f641 3321 	movw	r3, #6945	; 0x1b21
 8000ec0:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000ec4:	4798      	blx	r3
	USB_Interrupts_Config();
 8000ec6:	f641 3365 	movw	r3, #7013	; 0x1b65
 8000eca:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000ece:	4798      	blx	r3
	USB_Init();	
 8000ed0:	f242 63c5 	movw	r3, #9925	; 0x26c5
 8000ed4:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000ed8:	4798      	blx	r3
 8000eda:	bd08      	pop	{r3, pc}

08000edc <Hw_Adc_Init>:
{
	//GPIO_InitTypeDef GPIO_InitStructure;

	//-- ADC GPIO 설정  PA7 : AIN7
	//
	REG_GPIOA_CRL &= ~(0x0F << (28));	// Clear
 8000edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ee0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000ee4:	6819      	ldr	r1, [r3, #0]


	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
 8000ee6:	f241 0204 	movw	r2, #4100	; 0x1004
{
	//GPIO_InitTypeDef GPIO_InitStructure;

	//-- ADC GPIO 설정  PA7 : AIN7
	//
	REG_GPIOA_CRL &= ~(0x0F << (28));	// Clear
 8000eea:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
 8000eee:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRL |=  (0x00 << (28));	// MODE, PA.7 Input Mode
 8000ef0:	6819      	ldr	r1, [r3, #0]


	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
 8000ef2:	f2c4 0202 	movt	r2, #16386	; 0x4002
	//GPIO_InitTypeDef GPIO_InitStructure;

	//-- ADC GPIO 설정  PA7 : AIN7
	//
	REG_GPIOA_CRL &= ~(0x0F << (28));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (28));	// MODE, PA.7 Input Mode
 8000ef6:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRL |=  (0x00 << (30));	// CNF,  PA.7 Analog Mode	
 8000ef8:	6818      	ldr	r0, [r3, #0]
	CLR_BIT( REG_RCC_CFGR, 14 );


	// Enable ADC1 clock so that we can talk to it
	//
	SET_BIT( REG_RCC_APB2ENR, 9 );
 8000efa:	f241 0118 	movw	r1, #4120	; 0x1018

	//-- ADC GPIO 설정  PA7 : AIN7
	//
	REG_GPIOA_CRL &= ~(0x0F << (28));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (28));	// MODE, PA.7 Input Mode
	REG_GPIOA_CRL |=  (0x00 << (30));	// CNF,  PA.7 Analog Mode	
 8000efe:	6018      	str	r0, [r3, #0]


	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
 8000f00:	6813      	ldr	r3, [r2, #0]
	CLR_BIT( REG_RCC_CFGR, 14 );


	// Enable ADC1 clock so that we can talk to it
	//
	SET_BIT( REG_RCC_APB2ENR, 9 );
 8000f02:	f2c4 0102 	movt	r1, #16386	; 0x4002


	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
 8000f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f0a:	6013      	str	r3, [r2, #0]
	CLR_BIT( REG_RCC_CFGR, 14 );
 8000f0c:	6813      	ldr	r3, [r2, #0]
	SET_BIT( REG_RCC_APB2ENR, 9 );


	// ADC1 Configuration ------------------------------------------------------
	//
	REG_ADC1_CR1 = 0
 8000f0e:	f242 4004 	movw	r0, #9220	; 0x2404

	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
	CLR_BIT( REG_RCC_CFGR, 14 );
 8000f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f16:	6013      	str	r3, [r2, #0]


	// Enable ADC1 clock so that we can talk to it
	//
	SET_BIT( REG_RCC_APB2ENR, 9 );
 8000f18:	680a      	ldr	r2, [r1, #0]
        				//             0~17
        				//             



	REG_ADC1_CR2 = 0
 8000f1a:	f242 4308 	movw	r3, #9224	; 0x2408
	CLR_BIT( REG_RCC_CFGR, 14 );


	// Enable ADC1 clock so that we can talk to it
	//
	SET_BIT( REG_RCC_APB2ENR, 9 );
 8000f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f22:	600a      	str	r2, [r1, #0]


	// ADC1 Configuration ------------------------------------------------------
	//
	REG_ADC1_CR1 = 0
 8000f24:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000f28:	2200      	movs	r2, #0
        				//             0~17
        				//             



	REG_ADC1_CR2 = 0
 8000f2a:	f2c4 0301 	movt	r3, #16385	; 0x4001
	SET_BIT( REG_RCC_APB2ENR, 9 );


	// ADC1 Configuration ------------------------------------------------------
	//
	REG_ADC1_CR1 = 0
 8000f2e:	6002      	str	r2, [r0, #0]
        				//             0~17
        				//             



	REG_ADC1_CR2 = 0
 8000f30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f34:	601a      	str	r2, [r3, #0]
						//             1 : Enabled


	// Enable ADC1
	//
	SET_BIT( REG_ADC1_CR2, 0 );
 8000f36:	681a      	ldr	r2, [r3, #0]
	//
	SET_BIT( REG_ADC1_CR2, 3 );	

	// Check the end of ADC1 reset calibration register
	//
	while(IS_SET_BIT(REG_ADC1_CR2, 3));
 8000f38:	4619      	mov	r1, r3
						//             1 : Enabled


	// Enable ADC1
	//
	SET_BIT( REG_ADC1_CR2, 0 );
 8000f3a:	f042 0201 	orr.w	r2, r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]

	// Enable ADC1 reset calibaration register
	//
	SET_BIT( REG_ADC1_CR2, 3 );	
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	f042 0208 	orr.w	r2, r2, #8
 8000f46:	601a      	str	r2, [r3, #0]

	// Check the end of ADC1 reset calibration register
	//
	while(IS_SET_BIT(REG_ADC1_CR2, 3));
 8000f48:	680a      	ldr	r2, [r1, #0]
 8000f4a:	f242 4308 	movw	r3, #9224	; 0x2408
 8000f4e:	0712      	lsls	r2, r2, #28
 8000f50:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000f54:	d4f8      	bmi.n	8000f48 <Hw_Adc_Init+0x6c>

	// Start ADC1 calibaration
	//
	//ADC_StartCalibration(ADC1);
	SET_BIT( REG_ADC1_CR2, 2 );
 8000f56:	6819      	ldr	r1, [r3, #0]

	// Check the end of ADC1 calibration
	//
	while(IS_SET_BIT(REG_ADC1_CR2, 2));
 8000f58:	461a      	mov	r2, r3
	while(IS_SET_BIT(REG_ADC1_CR2, 3));

	// Start ADC1 calibaration
	//
	//ADC_StartCalibration(ADC1);
	SET_BIT( REG_ADC1_CR2, 2 );
 8000f5a:	f041 0104 	orr.w	r1, r1, #4
 8000f5e:	6019      	str	r1, [r3, #0]

	// Check the end of ADC1 calibration
	//
	while(IS_SET_BIT(REG_ADC1_CR2, 2));
 8000f60:	6813      	ldr	r3, [r2, #0]
 8000f62:	f013 0304 	ands.w	r3, r3, #4
 8000f66:	d1fb      	bne.n	8000f60 <Hw_Adc_Init+0x84>


	REG_ADC1_SQR1  = 0;
 8000f68:	f242 422c 	movw	r2, #9260	; 0x242c
 8000f6c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000f70:	6013      	str	r3, [r2, #0]
	REG_ADC1_SQR1 |= (1<<20);	// 1개 채널만 컨버젼
 8000f72:	6813      	ldr	r3, [r2, #0]
 8000f74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4770      	bx	lr

08000f7c <Hw_DcMotor_Run>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DcMotor_Run( u8 Ch, u8 Dir )
{
	switch( Ch )
 8000f7c:	2803      	cmp	r0, #3
 8000f7e:	d811      	bhi.n	8000fa4 <Hw_DcMotor_Run+0x28>
 8000f80:	e8df f000 	tbb	[pc, r0]
 8000f84:	0211202e 	.word	0x0211202e
			break;

		case 3:
			if( Dir == HW_DCMOTOR_FOR )
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_L );
 8000f88:	f640 430c 	movw	r3, #3084	; 0xc0c
 8000f8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000f90:	681a      	ldr	r2, [r3, #0]
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_R );
			}
			break;

		case 3:
			if( Dir == HW_DCMOTOR_FOR )
 8000f92:	2900      	cmp	r1, #0
 8000f94:	d04a      	beq.n	800102c <Hw_DcMotor_Run+0xb0>
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_L );
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_R );
			}
			else
			{
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_L );
 8000f96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f9a:	601a      	str	r2, [r3, #0]
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_R );
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	4770      	bx	lr
			break;

		case 2:
			if( Dir == HW_DCMOTOR_FOR )
			{
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_L );
 8000fa6:	f640 430c 	movw	r3, #3084	; 0xc0c
 8000faa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000fae:	681a      	ldr	r2, [r3, #0]
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_R );
			}
			break;

		case 2:
			if( Dir == HW_DCMOTOR_FOR )
 8000fb0:	2900      	cmp	r1, #0
 8000fb2:	d133      	bne.n	800101c <Hw_DcMotor_Run+0xa0>
			{
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_L );
 8000fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fb8:	601a      	str	r2, [r3, #0]
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_R );
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	4770      	bx	lr
			break;

		case 1:
			if( Dir == HW_DCMOTOR_FOR )
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_L );
 8000fc4:	f640 430c 	movw	r3, #3084	; 0xc0c
 8000fc8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000fcc:	681a      	ldr	r2, [r3, #0]
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_R );
			}
			break;

		case 1:
			if( Dir == HW_DCMOTOR_FOR )
 8000fce:	b9e9      	cbnz	r1, 800100c <Hw_DcMotor_Run+0x90>
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_L );
 8000fd0:	f022 0204 	bic.w	r2, r2, #4
 8000fd4:	601a      	str	r2, [r3, #0]
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_R );
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	4770      	bx	lr
	switch( Ch )
	{
		case 0:
			if( Dir == HW_DCMOTOR_FOR )
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_L );
 8000fe0:	f640 430c 	movw	r3, #3084	; 0xc0c
 8000fe4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000fe8:	681a      	ldr	r2, [r3, #0]
void Hw_DcMotor_Run( u8 Ch, u8 Dir )
{
	switch( Ch )
	{
		case 0:
			if( Dir == HW_DCMOTOR_FOR )
 8000fea:	b939      	cbnz	r1, 8000ffc <Hw_DcMotor_Run+0x80>
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_L );
 8000fec:	f022 0201 	bic.w	r2, r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_R );
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	f042 0202 	orr.w	r2, r2, #2
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	4770      	bx	lr
			}
			else
			{
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_L );
 8000ffc:	f042 0201 	orr.w	r2, r2, #1
 8001000:	601a      	str	r2, [r3, #0]
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_R );
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	f022 0202 	bic.w	r2, r2, #2
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	4770      	bx	lr
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_L );
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_R );
			}
			else
			{
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_L );
 800100c:	f042 0204 	orr.w	r2, r2, #4
 8001010:	601a      	str	r2, [r3, #0]
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_R );
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	4770      	bx	lr
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_L );
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_R );
			}
			else
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_L );
 800101c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001020:	601a      	str	r2, [r3, #0]
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_R );
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	4770      	bx	lr
			break;

		case 3:
			if( Dir == HW_DCMOTOR_FOR )
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_L );
 800102c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001030:	601a      	str	r2, [r3, #0]
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_R );
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	4770      	bx	lr

0800103c <Hw_DcMotor_Stop>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DcMotor_Stop( u8 Ch )
{
	switch( Ch )
 800103c:	2803      	cmp	r0, #3
 800103e:	d80f      	bhi.n	8001060 <Hw_DcMotor_Stop+0x24>
 8001040:	e8df f000 	tbb	[pc, r0]
 8001044:	020f1c29 	.word	0x020f1c29
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_L );
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_R );
			break;

		case 3:
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_L );
 8001048:	f640 430c 	movw	r3, #3084	; 0xc0c
 800104c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001056:	601a      	str	r2, [r3, #0]
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_R );
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	4770      	bx	lr
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_L );
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_R );
			break;

		case 2:
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_L );
 8001062:	f640 430c 	movw	r3, #3084	; 0xc0c
 8001066:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001070:	601a      	str	r2, [r3, #0]
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_R );
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001078:	601a      	str	r2, [r3, #0]
			break;
 800107a:	4770      	bx	lr
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_L );
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_R );
			break;

		case 1:
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_L );
 800107c:	f640 430c 	movw	r3, #3084	; 0xc0c
 8001080:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	f022 0204 	bic.w	r2, r2, #4
 800108a:	601a      	str	r2, [r3, #0]
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_R );
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001092:	601a      	str	r2, [r3, #0]
			break;
 8001094:	4770      	bx	lr
void Hw_DcMotor_Stop( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_L );
 8001096:	f640 430c 	movw	r3, #3084	; 0xc0c
 800109a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	f022 0201 	bic.w	r2, r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_R );
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	f022 0202 	bic.w	r2, r2, #2
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	4770      	bx	lr

080010b0 <Hw_DcMotor_Init>:

	//-- GPIO 설정
	//
	//-- L0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
 80010b0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80010b4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80010b8:	6811      	ldr	r1, [r2, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DcMotor_Init( void )
{
 80010ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	//-- GPIO 설정
	//
	//-- L0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
 80010be:	f021 010f 	bic.w	r1, r1, #15
 80010c2:	6011      	str	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 0));	// MODE, PB.0 Output mode, max speed 50Mhz
 80010c4:	6811      	ldr	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	

	//-- L3 PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 80010c6:	f640 4304 	movw	r3, #3076	; 0xc04
	//-- GPIO 설정
	//
	//-- L0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << ( 0));	// MODE, PB.0 Output mode, max speed 50Mhz
 80010ca:	f041 0103 	orr.w	r1, r1, #3
 80010ce:	6011      	str	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 2));	// CNF,  PB.0 General purpose output push-pul	
 80010d0:	6811      	ldr	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	

	//-- L3 PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 80010d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
	//
	//-- L0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << ( 0));	// MODE, PB.0 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << ( 2));	// CNF,  PB.0 General purpose output push-pul	
 80010d6:	6011      	str	r1, [r2, #0]

	//-- L1 PB.1
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 4));	// Clear
 80010d8:	6811      	ldr	r1, [r2, #0]

	//-- R3 PB.14
	//
	REG_GPIOB_CRH &= ~(0x0F << (24));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (24));	// MODE, PB.7 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (26));	// CNF,  PB.7 General purpose output push-pul				
 80010da:	2400      	movs	r4, #0
	REG_GPIOB_CRL |=  (0x03 << ( 0));	// MODE, PB.0 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << ( 2));	// CNF,  PB.0 General purpose output push-pul	

	//-- L1 PB.1
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 4));	// Clear
 80010dc:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80010e0:	6011      	str	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 4));	// MODE, PB.1 Output mode, max speed 50Mhz
 80010e2:	6811      	ldr	r1, [r2, #0]
 80010e4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80011c0 <Hw_DcMotor_Init+0x110>
 80010e8:	f041 0130 	orr.w	r1, r1, #48	; 0x30
 80010ec:	6011      	str	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 6));	// CNF,  PB.1 General purpose output push-pul	
 80010ee:	6811      	ldr	r1, [r2, #0]
 80010f0:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 80011c4 <Hw_DcMotor_Init+0x114>
 80010f4:	6011      	str	r1, [r2, #0]

	//-- L2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
 80010f6:	6811      	ldr	r1, [r2, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DcMotor_Init( void )
{
 80010f8:	b082      	sub	sp, #8
	REG_GPIOB_CRL |=  (0x03 << ( 4));	// MODE, PB.1 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << ( 6));	// CNF,  PB.1 General purpose output push-pul	

	//-- L2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
 80010fa:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 80010fe:	6011      	str	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
 8001100:	6811      	ldr	r1, [r2, #0]
	REG_GPIOB_CRH |=  (0x00 << (26));	// CNF,  PB.7 General purpose output push-pul				




	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
 8001102:	4625      	mov	r5, r4
	REG_GPIOB_CRL |=  (0x00 << ( 6));	// CNF,  PB.1 General purpose output push-pul	

	//-- L2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
 8001104:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8001108:	6011      	str	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	
 800110a:	6811      	ldr	r1, [r2, #0]

	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );

		Hw_DcMotor_State[i].Dir   = HW_DCMOTOR_STOP;
 800110c:	2702      	movs	r7, #2

	//-- L2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	
 800110e:	6011      	str	r1, [r2, #0]

	//-- L3 PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8001110:	681a      	ldr	r2, [r3, #0]
	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );

		Hw_DcMotor_State[i].Dir   = HW_DCMOTOR_STOP;
		Hw_DcMotor_State[i].Pin   = FALSE;
 8001112:	46a1      	mov	r9, r4
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	

	//-- L3 PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8001114:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001118:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
 800111a:	681a      	ldr	r2, [r3, #0]
		Hw_DcMotor_Stop( i );

		Hw_DcMotor_State[i].Dir   = HW_DCMOTOR_STOP;
		Hw_DcMotor_State[i].Pin   = FALSE;
		Hw_DcMotor_State[i].Speed = 0;
		Hw_DcMotor_State[i].State = HW_DCMOTOR_STATE_STOP;
 800111c:	2601      	movs	r6, #1
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	

	//-- L3 PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
 800111e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001122:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	601a      	str	r2, [r3, #0]

	//-- R0 PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800112e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.2 Output mode, max speed 50Mhz
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001136:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.2 General purpose output push-pul	
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	601a      	str	r2, [r3, #0]
	
	//-- R1 PB.12
	//
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001142:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE, PB.6 Output mode, max speed 50Mhz
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800114a:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (18));	// CNF,  PB.6 General purpose output push-pul	
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	601a      	str	r2, [r3, #0]
	
	//-- R2 PB.13
	//
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001156:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (20));	// MODE, PB.6 Output mode, max speed 50Mhz
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 800115e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (22));	// CNF,  PB.6 General purpose output push-pul	
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	601a      	str	r2, [r3, #0]

	//-- R3 PB.14
	//
	REG_GPIOB_CRH &= ~(0x0F << (24));	// Clear
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800116a:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (24));	// MODE, PB.7 Output mode, max speed 50Mhz
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8001172:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (26));	// CNF,  PB.7 General purpose output push-pul				
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	601a      	str	r2, [r3, #0]



	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );
 8001178:	4628      	mov	r0, r5
	REG_GPIOB_CRH |=  (0x00 << (26));	// CNF,  PB.7 General purpose output push-pul				




	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
 800117a:	3501      	adds	r5, #1
	{
		Hw_DcMotor_Stop( i );
 800117c:	47c0      	blx	r8
	REG_GPIOB_CRH |=  (0x00 << (26));	// CNF,  PB.7 General purpose output push-pul				




	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
 800117e:	b2ed      	uxtb	r5, r5
     TITLE   : Hw_DcMotor_Init
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DcMotor_Init( void )
 8001180:	eb04 030a 	add.w	r3, r4, sl

	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );

		Hw_DcMotor_State[i].Dir   = HW_DCMOTOR_STOP;
 8001184:	705f      	strb	r7, [r3, #1]
		Hw_DcMotor_State[i].Pin   = FALSE;
 8001186:	f883 9002 	strb.w	r9, [r3, #2]
		Hw_DcMotor_State[i].Speed = 0;
 800118a:	f8a3 9004 	strh.w	r9, [r3, #4]
		Hw_DcMotor_State[i].State = HW_DCMOTOR_STATE_STOP;
 800118e:	f804 600a 	strb.w	r6, [r4, sl]
 8001192:	3406      	adds	r4, #6
	REG_GPIOB_CRH |=  (0x00 << (26));	// CNF,  PB.7 General purpose output push-pul				




	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
 8001194:	2d04      	cmp	r5, #4
 8001196:	d1ef      	bne.n	8001178 <Hw_DcMotor_Init+0xc8>
		Hw_DcMotor_State[i].Pin   = FALSE;
		Hw_DcMotor_State[i].Speed = 0;
		Hw_DcMotor_State[i].State = HW_DCMOTOR_STATE_STOP;
	}

	Hw_Timer_Set  ( HW_TIMER_CH_DCMOTOR, 1, LOOP_TIME, Hw_DcMotor_Tick, NULL );
 8001198:	2300      	movs	r3, #0
 800119a:	2006      	movs	r0, #6
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2101      	movs	r1, #1
 80011a0:	2202      	movs	r2, #2
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <Hw_DcMotor_Init+0x104>)
 80011a4:	4c04      	ldr	r4, [pc, #16]	; (80011b8 <Hw_DcMotor_Init+0x108>)
 80011a6:	47a0      	blx	r4
	Hw_Timer_Start( HW_TIMER_CH_DCMOTOR );
 80011a8:	2006      	movs	r0, #6
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <Hw_DcMotor_Init+0x10c>)
 80011ac:	4798      	blx	r3
}
 80011ae:	b002      	add	sp, #8
 80011b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b4:	080011c9 	.word	0x080011c9
 80011b8:	08000e7d 	.word	0x08000e7d
 80011bc:	08000e9d 	.word	0x08000e9d
 80011c0:	0800103d 	.word	0x0800103d
 80011c4:	20000790 	.word	0x20000790

080011c8 <Hw_DcMotor_Tick>:




void Hw_DcMotor_Tick( void )
{
 80011c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011cc:	4e27      	ldr	r6, [pc, #156]	; (800126c <Hw_DcMotor_Tick+0xa4>)
		}
		else
		{
			//-- 카운트 값을 0~100% 값으로 변환
			//
			DutyRatio = Cnt*HW_DCMOTOR_MAX_PWM/HW_DCMOTOR_MAX_CNT;
 80011ce:	2400      	movs	r4, #0
 80011d0:	f8b6 b000 	ldrh.w	fp, [r6]
 80011d4:	f8df a098 	ldr.w	sl, [pc, #152]	; 8001270 <Hw_DcMotor_Tick+0xa8>
 80011d8:	eb0b 078b 	add.w	r7, fp, fp, lsl #2
 80011dc:	007f      	lsls	r7, r7, #1




void Hw_DcMotor_Tick( void )
{
 80011de:	b083      	sub	sp, #12
		}
		else
		{
			//-- 카운트 값을 0~100% 값으로 변환
			//
			DutyRatio = Cnt*HW_DCMOTOR_MAX_PWM/HW_DCMOTOR_MAX_CNT;
 80011e0:	b2bf      	uxth	r7, r7
	u16 DutyRatio;

	static u16 Cnt = 0;


	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
 80011e2:	4625      	mov	r5, r4
			DutyRatio = Cnt*HW_DCMOTOR_MAX_PWM/HW_DCMOTOR_MAX_CNT;

			if( DutyRatio > Hw_DcMotor_State[i].Speed && Hw_DcMotor_State[i].Pin == TRUE )
			{
				Hw_DcMotor_Stop(i);
				Hw_DcMotor_State[i].Pin = FALSE;
 80011e4:	46a0      	mov	r8, r4





void Hw_DcMotor_Tick( void )
 80011e6:	eb04 010a 	add.w	r1, r4, sl
 80011ea:	4689      	mov	r9, r1
	static u16 Cnt = 0;


	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		if( Cnt == 0 )
 80011ec:	f1bb 0f00 	cmp.w	fp, #0
 80011f0:	d123      	bne.n	800123a <Hw_DcMotor_Tick+0x72>
		{
			if( Hw_DcMotor_State[i].Speed > 0 && Hw_DcMotor_State[i].Dir != HW_DCMOTOR_STOP )
 80011f2:	8889      	ldrh	r1, [r1, #4]
				Hw_DcMotor_Run( i, Hw_DcMotor_State[i].Dir );
				Hw_DcMotor_State[i].Pin = TRUE;
			}
			else
			{
				Hw_DcMotor_Stop(i);
 80011f4:	4628      	mov	r0, r5

	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		if( Cnt == 0 )
		{
			if( Hw_DcMotor_State[i].Speed > 0 && Hw_DcMotor_State[i].Dir != HW_DCMOTOR_STOP )
 80011f6:	2900      	cmp	r1, #0
 80011f8:	d030      	beq.n	800125c <Hw_DcMotor_Tick+0x94>
 80011fa:	f899 1001 	ldrb.w	r1, [r9, #1]
 80011fe:	2902      	cmp	r1, #2
 8001200:	d02c      	beq.n	800125c <Hw_DcMotor_Tick+0x94>
			{
				Hw_DcMotor_Run( i, Hw_DcMotor_State[i].Dir );
 8001202:	f640 737d 	movw	r3, #3965	; 0xf7d
 8001206:	f6c0 0300 	movt	r3, #2048	; 0x800
 800120a:	4798      	blx	r3
				Hw_DcMotor_State[i].Pin = TRUE;
 800120c:	2301      	movs	r3, #1
 800120e:	f889 3002 	strb.w	r3, [r9, #2]
	u16 DutyRatio;

	static u16 Cnt = 0;


	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
 8001212:	3501      	adds	r5, #1
 8001214:	b2ed      	uxtb	r5, r5
 8001216:	3406      	adds	r4, #6
 8001218:	2d04      	cmp	r5, #4
 800121a:	d1e4      	bne.n	80011e6 <Hw_DcMotor_Tick+0x1e>
			}
		}
	}


	Cnt++;
 800121c:	f10b 0c01 	add.w	ip, fp, #1
 8001220:	fa1f fc8c 	uxth.w	ip, ip

	if( Cnt >= HW_DCMOTOR_MAX_CNT ) Cnt = 0;
 8001224:	f1bc 0f09 	cmp.w	ip, #9
			}
		}
	}


	Cnt++;
 8001228:	f8a6 c000 	strh.w	ip, [r6]

	if( Cnt >= HW_DCMOTOR_MAX_CNT ) Cnt = 0;
 800122c:	d902      	bls.n	8001234 <Hw_DcMotor_Tick+0x6c>
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <Hw_DcMotor_Tick+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	801a      	strh	r2, [r3, #0]
}
 8001234:	b003      	add	sp, #12
 8001236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		{
			//-- 카운트 값을 0~100% 값으로 변환
			//
			DutyRatio = Cnt*HW_DCMOTOR_MAX_PWM/HW_DCMOTOR_MAX_CNT;

			if( DutyRatio > Hw_DcMotor_State[i].Speed && Hw_DcMotor_State[i].Pin == TRUE )
 800123a:	888b      	ldrh	r3, [r1, #4]
 800123c:	42bb      	cmp	r3, r7
 800123e:	d2e8      	bcs.n	8001212 <Hw_DcMotor_Tick+0x4a>
 8001240:	788b      	ldrb	r3, [r1, #2]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d1e5      	bne.n	8001212 <Hw_DcMotor_Tick+0x4a>
			{
				Hw_DcMotor_Stop(i);
 8001246:	f241 033d 	movw	r3, #4157	; 0x103d
 800124a:	9101      	str	r1, [sp, #4]
 800124c:	4628      	mov	r0, r5
 800124e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001252:	4798      	blx	r3
				Hw_DcMotor_State[i].Pin = FALSE;
 8001254:	9901      	ldr	r1, [sp, #4]
 8001256:	f881 8002 	strb.w	r8, [r1, #2]
 800125a:	e7da      	b.n	8001212 <Hw_DcMotor_Tick+0x4a>
				Hw_DcMotor_Run( i, Hw_DcMotor_State[i].Dir );
				Hw_DcMotor_State[i].Pin = TRUE;
			}
			else
			{
				Hw_DcMotor_Stop(i);
 800125c:	f241 033d 	movw	r3, #4157	; 0x103d
 8001260:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001264:	4798      	blx	r3
				Hw_DcMotor_State[i].Pin = FALSE;
 8001266:	f889 8002 	strb.w	r8, [r9, #2]
 800126a:	e7d2      	b.n	8001212 <Hw_DcMotor_Tick+0x4a>
 800126c:	200002b4 	.word	0x200002b4
 8001270:	20000790 	.word	0x20000790

08001274 <Hw_DcMotor_Handle>:
void Hw_DcMotor_Handle( s16 SpeedLeft, s16 SpeedRight )
{
	u16 Pwm;


	if( SpeedLeft  >  HW_DCMOTOR_MAX_PWM )	SpeedLeft  =  HW_DCMOTOR_MAX_PWM;
 8001274:	2864      	cmp	r0, #100	; 0x64
 8001276:	dc1d      	bgt.n	80012b4 <Hw_DcMotor_Handle+0x40>
	if( SpeedLeft  < -HW_DCMOTOR_MAX_PWM )	SpeedLeft  = -HW_DCMOTOR_MAX_PWM;
 8001278:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800127c:	4298      	cmp	r0, r3
 800127e:	bfb8      	it	lt
 8001280:	4618      	movlt	r0, r3
	if( SpeedRight >  HW_DCMOTOR_MAX_PWM )	SpeedRight =  HW_DCMOTOR_MAX_PWM;
 8001282:	2964      	cmp	r1, #100	; 0x64
 8001284:	dc19      	bgt.n	80012ba <Hw_DcMotor_Handle+0x46>
	if( SpeedRight < -HW_DCMOTOR_MAX_PWM )	SpeedRight = -HW_DCMOTOR_MAX_PWM;
 8001286:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800128a:	4299      	cmp	r1, r3
 800128c:	bfb8      	it	lt
 800128e:	4619      	movlt	r1, r3


	if( SpeedLeft > 0 )
 8001290:	2800      	cmp	r0, #0
 8001292:	dd15      	ble.n	80012c0 <Hw_DcMotor_Handle+0x4c>
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 8001294:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <Hw_DcMotor_Handle+0x9c>)
	if( SpeedRight < -HW_DCMOTOR_MAX_PWM )	SpeedRight = -HW_DCMOTOR_MAX_PWM;


	if( SpeedLeft > 0 )
	{
		Pwm = SpeedLeft;
 8001296:	b280      	uxth	r0, r0
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 8001298:	2200      	movs	r2, #0
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 800129a:	8218      	strh	r0, [r3, #16]
 800129c:	8098      	strh	r0, [r3, #4]
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 800129e:	735a      	strb	r2, [r3, #13]
 80012a0:	705a      	strb	r2, [r3, #1]
		Hw_DcMotor_SetDir( HW_DCMOTOR_LU, HW_DCMOTOR_STOP );
		Hw_DcMotor_SetDir( HW_DCMOTOR_LD, HW_DCMOTOR_STOP );				
	}


	if( SpeedRight > 0 )
 80012a2:	2900      	cmp	r1, #0
 80012a4:	dd13      	ble.n	80012ce <Hw_DcMotor_Handle+0x5a>
	{
		Pwm = SpeedRight;
 80012a6:	b289      	uxth	r1, r1
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 80012a8:	2200      	movs	r2, #0
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 80012aa:	82d9      	strh	r1, [r3, #22]
 80012ac:	8159      	strh	r1, [r3, #10]
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 80012ae:	74da      	strb	r2, [r3, #19]
 80012b0:	71da      	strb	r2, [r3, #7]
 80012b2:	4770      	bx	lr
void Hw_DcMotor_Handle( s16 SpeedLeft, s16 SpeedRight )
{
	u16 Pwm;


	if( SpeedLeft  >  HW_DCMOTOR_MAX_PWM )	SpeedLeft  =  HW_DCMOTOR_MAX_PWM;
 80012b4:	2064      	movs	r0, #100	; 0x64
	if( SpeedLeft  < -HW_DCMOTOR_MAX_PWM )	SpeedLeft  = -HW_DCMOTOR_MAX_PWM;
	if( SpeedRight >  HW_DCMOTOR_MAX_PWM )	SpeedRight =  HW_DCMOTOR_MAX_PWM;
 80012b6:	2964      	cmp	r1, #100	; 0x64
 80012b8:	dde5      	ble.n	8001286 <Hw_DcMotor_Handle+0x12>
 80012ba:	2164      	movs	r1, #100	; 0x64
	if( SpeedRight < -HW_DCMOTOR_MAX_PWM )	SpeedRight = -HW_DCMOTOR_MAX_PWM;


	if( SpeedLeft > 0 )
 80012bc:	2800      	cmp	r0, #0
 80012be:	dce9      	bgt.n	8001294 <Hw_DcMotor_Handle+0x20>
		Hw_DcMotor_SetPwm( HW_DCMOTOR_LD, Pwm );		
		Hw_DcMotor_SetDir( HW_DCMOTOR_LU, HW_DCMOTOR_FOR );
		Hw_DcMotor_SetDir( HW_DCMOTOR_LD, HW_DCMOTOR_FOR );		
	}
	else
	if( SpeedLeft < 0 )
 80012c0:	d114      	bne.n	80012ec <Hw_DcMotor_Handle+0x78>
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <Hw_DcMotor_Handle+0x9c>)
 80012c4:	2202      	movs	r2, #2
		Hw_DcMotor_SetDir( HW_DCMOTOR_LU, HW_DCMOTOR_STOP );
		Hw_DcMotor_SetDir( HW_DCMOTOR_LD, HW_DCMOTOR_STOP );				
	}


	if( SpeedRight > 0 )
 80012c6:	2900      	cmp	r1, #0
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 80012c8:	735a      	strb	r2, [r3, #13]
 80012ca:	705a      	strb	r2, [r3, #1]
		Hw_DcMotor_SetDir( HW_DCMOTOR_LU, HW_DCMOTOR_STOP );
		Hw_DcMotor_SetDir( HW_DCMOTOR_LD, HW_DCMOTOR_STOP );				
	}


	if( SpeedRight > 0 )
 80012cc:	dceb      	bgt.n	80012a6 <Hw_DcMotor_Handle+0x32>
		Hw_DcMotor_SetPwm( HW_DCMOTOR_RD, Pwm );		
		Hw_DcMotor_SetDir( HW_DCMOTOR_RU, HW_DCMOTOR_FOR );
		Hw_DcMotor_SetDir( HW_DCMOTOR_RD, HW_DCMOTOR_FOR );		
	}
	else
	if( SpeedRight < 0 )
 80012ce:	d103      	bne.n	80012d8 <Hw_DcMotor_Handle+0x64>
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 80012d0:	2202      	movs	r2, #2
 80012d2:	74da      	strb	r2, [r3, #19]
 80012d4:	71da      	strb	r2, [r3, #7]
 80012d6:	4770      	bx	lr
		Hw_DcMotor_SetDir( HW_DCMOTOR_RD, HW_DCMOTOR_FOR );		
	}
	else
	if( SpeedRight < 0 )
	{
		Pwm = -SpeedRight;
 80012d8:	4249      	negs	r1, r1
 80012da:	b289      	uxth	r1, r1
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetPwm( u8 Ch, u16 Pwm  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;
 80012dc:	2964      	cmp	r1, #100	; 0x64
 80012de:	d814      	bhi.n	800130a <Hw_DcMotor_Handle+0x96>

	Hw_DcMotor_State[Ch].Speed = Pwm;
 80012e0:	82d9      	strh	r1, [r3, #22]
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 80012e2:	2201      	movs	r2, #1
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 80012e4:	8159      	strh	r1, [r3, #10]
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 80012e6:	74da      	strb	r2, [r3, #19]
 80012e8:	71da      	strb	r2, [r3, #7]
 80012ea:	4770      	bx	lr
		Hw_DcMotor_SetDir( HW_DCMOTOR_LD, HW_DCMOTOR_FOR );		
	}
	else
	if( SpeedLeft < 0 )
	{
		Pwm = -SpeedLeft;
 80012ec:	4240      	negs	r0, r0
 80012ee:	b280      	uxth	r0, r0
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetPwm( u8 Ch, u16 Pwm  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;
 80012f0:	2864      	cmp	r0, #100	; 0x64
 80012f2:	d806      	bhi.n	8001302 <Hw_DcMotor_Handle+0x8e>

	Hw_DcMotor_State[Ch].Speed = Pwm;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <Hw_DcMotor_Handle+0x9c>)
 80012f6:	8218      	strh	r0, [r3, #16]
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 80012f8:	2201      	movs	r2, #1
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 80012fa:	8098      	strh	r0, [r3, #4]
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 80012fc:	735a      	strb	r2, [r3, #13]
 80012fe:	705a      	strb	r2, [r3, #1]
 8001300:	e7cf      	b.n	80012a2 <Hw_DcMotor_Handle+0x2e>
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 8001302:	4b03      	ldr	r3, [pc, #12]	; (8001310 <Hw_DcMotor_Handle+0x9c>)
 8001304:	2064      	movs	r0, #100	; 0x64
 8001306:	8218      	strh	r0, [r3, #16]
 8001308:	e7f6      	b.n	80012f8 <Hw_DcMotor_Handle+0x84>
 800130a:	2164      	movs	r1, #100	; 0x64
 800130c:	82d9      	strh	r1, [r3, #22]
 800130e:	e7e8      	b.n	80012e2 <Hw_DcMotor_Handle+0x6e>
 8001310:	20000790 	.word	0x20000790

08001314 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8001314:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <EP1_IN_Callback+0x58>)
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	2a01      	cmp	r2, #1
 800131c:	d000      	beq.n	8001320 <EP1_IN_Callback+0xc>
 800131e:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 8001320:	4c13      	ldr	r4, [pc, #76]	; (8001370 <EP1_IN_Callback+0x5c>)
 8001322:	6820      	ldr	r0, [r4, #0]
 8001324:	b300      	cbz	r0, 8001368 <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8001326:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001328:	4a12      	ldr	r2, [pc, #72]	; (8001374 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 800132a:	d814      	bhi.n	8001356 <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 800132c:	6813      	ldr	r3, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 800132e:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 8001330:	1818      	adds	r0, r3, r0
 8001332:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 8001334:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001336:	b29b      	uxth	r3, r3
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 8001338:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800133a:	480f      	ldr	r0, [pc, #60]	; (8001378 <EP1_IN_Callback+0x64>)
 800133c:	21c0      	movs	r1, #192	; 0xc0
 800133e:	18c0      	adds	r0, r0, r3
 8001340:	462a      	mov	r2, r5
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <EP1_IN_Callback+0x68>)
 8001344:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 8001346:	2001      	movs	r0, #1
 8001348:	4629      	mov	r1, r5
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <EP1_IN_Callback+0x6c>)
 800134c:	4798      	blx	r3
      SetEPTxValid(ENDP1); 
 800134e:	2001      	movs	r0, #1
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <EP1_IN_Callback+0x70>)
 8001352:	4798      	blx	r3
 8001354:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001356:	6813      	ldr	r3, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8001358:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 800135a:	f103 0140 	add.w	r1, r3, #64	; 0x40
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 800135e:	6020      	str	r0, [r4, #0]
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001360:	b29b      	uxth	r3, r3
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8001362:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8001364:	2540      	movs	r5, #64	; 0x40
 8001366:	e7e8      	b.n	800133a <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 8001368:	7018      	strb	r0, [r3, #0]
 800136a:	bd38      	pop	{r3, r4, r5, pc}
 800136c:	200002d8 	.word	0x200002d8
 8001370:	200002e4 	.word	0x200002e4
 8001374:	200002e0 	.word	0x200002e0
 8001378:	20000810 	.word	0x20000810
 800137c:	08002709 	.word	0x08002709
 8001380:	08002949 	.word	0x08002949
 8001384:	0800280d 	.word	0x0800280d

08001388 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8001388:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 800138a:	f240 74a8 	movw	r4, #1960	; 0x7a8
 800138e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001392:	f642 2309 	movw	r3, #10761	; 0x2a09
 8001396:	4621      	mov	r1, r4
 8001398:	2003      	movs	r0, #3
 800139a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800139e:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 80013a0:	f641 4331 	movw	r3, #7217	; 0x1c31
 80013a4:	b2c1      	uxtb	r1, r0
 80013a6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80013aa:	4620      	mov	r0, r4
 80013ac:	4798      	blx	r3
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 80013ae:	f642 0331 	movw	r3, #10289	; 0x2831
 80013b2:	2003      	movs	r0, #3
 80013b4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80013b8:	4798      	blx	r3
 80013ba:	bd10      	pop	{r4, pc}

080013bc <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 80013bc:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <SOF_Callback+0x24>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b05      	cmp	r3, #5
 80013c4:	d000      	beq.n	80013c8 <SOF_Callback+0xc>
 80013c6:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <SOF_Callback+0x28>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	1c51      	adds	r1, r2, #1
 80013ce:	2a05      	cmp	r2, #5
 80013d0:	6019      	str	r1, [r3, #0]
 80013d2:	d1f8      	bne.n	80013c6 <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <SOF_Callback+0x2c>)
 80013da:	4798      	blx	r3
 80013dc:	e7f3      	b.n	80013c6 <SOF_Callback+0xa>
 80013de:	bf00      	nop
 80013e0:	200002cc 	.word	0x200002cc
 80013e4:	200002b8 	.word	0x200002b8
 80013e8:	08001c5d 	.word	0x08001c5d

080013ec <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 80013ec:	f645 4244 	movw	r2, #23620	; 0x5c44
 80013f0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80013f4:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 80013f6:	b570      	push	{r4, r5, r6, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 80013f8:	4c6b      	ldr	r4, [pc, #428]	; (80015a8 <USB_Istr+0x1bc>)
 80013fa:	b29b      	uxth	r3, r3

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80013fc:	4d6b      	ldr	r5, [pc, #428]	; (80015ac <USB_Istr+0x1c0>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 80013fe:	8023      	strh	r3, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8001400:	8821      	ldrh	r1, [r4, #0]
 8001402:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8001404:	b088      	sub	sp, #32
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8001406:	4019      	ands	r1, r3
 8001408:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800140c:	b289      	uxth	r1, r1
 800140e:	2900      	cmp	r1, #0
 8001410:	d168      	bne.n	80014e4 <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8001412:	8822      	ldrh	r2, [r4, #0]
 8001414:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001418:	4213      	tst	r3, r2
 800141a:	d15f      	bne.n	80014dc <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 800141c:	8822      	ldrh	r2, [r4, #0]
 800141e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001422:	4213      	tst	r3, r2
 8001424:	d14e      	bne.n	80014c4 <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8001426:	8822      	ldrh	r2, [r4, #0]
 8001428:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800142c:	4213      	tst	r3, r2
  {
    _SetISTR((uint16_t)CLR_ERR);
 800142e:	bf1f      	itttt	ne
 8001430:	f645 4244 	movwne	r2, #23620	; 0x5c44
 8001434:	f2c4 0200 	movtne	r2, #16384	; 0x4000
 8001438:	f64d 71ff 	movwne	r1, #57343	; 0xdfff
 800143c:	6011      	strne	r1, [r2, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 800143e:	8822      	ldrh	r2, [r4, #0]
 8001440:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001444:	4213      	tst	r3, r2
 8001446:	d131      	bne.n	80014ac <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8001448:	8822      	ldrh	r2, [r4, #0]
 800144a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800144e:	4213      	tst	r3, r2
 8001450:	d00e      	beq.n	8001470 <USB_Istr+0x84>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 8001452:	4b57      	ldr	r3, [pc, #348]	; (80015b0 <USB_Istr+0x1c4>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d125      	bne.n	80014a6 <USB_Istr+0xba>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 800145a:	2002      	movs	r0, #2
 800145c:	4b55      	ldr	r3, [pc, #340]	; (80015b4 <USB_Istr+0x1c8>)
 800145e:	4798      	blx	r3
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8001460:	f645 4244 	movw	r2, #23620	; 0x5c44
 8001464:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001468:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800146c:	882b      	ldrh	r3, [r5, #0]
 800146e:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8001470:	8822      	ldrh	r2, [r4, #0]
 8001472:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001476:	4213      	tst	r3, r2
 8001478:	d013      	beq.n	80014a2 <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 800147a:	f645 4244 	movw	r2, #23620	; 0x5c44
 800147e:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 8001482:	f2c4 0200 	movt	r2, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8001486:	f645 4348 	movw	r3, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 800148a:	6011      	str	r1, [r2, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 800148c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	0419      	lsls	r1, r3, #16
 8001494:	d432      	bmi.n	80014fc <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 8001496:	4b48      	ldr	r3, [pc, #288]	; (80015b8 <USB_Istr+0x1cc>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 800149c:	2007      	movs	r0, #7
 800149e:	4b45      	ldr	r3, [pc, #276]	; (80015b4 <USB_Istr+0x1c8>)
 80014a0:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 80014a2:	b008      	add	sp, #32
 80014a4:	bd70      	pop	{r4, r5, r6, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 80014a6:	4b45      	ldr	r3, [pc, #276]	; (80015bc <USB_Istr+0x1d0>)
 80014a8:	4798      	blx	r3
 80014aa:	e7d9      	b.n	8001460 <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 80014ac:	f645 4344 	movw	r3, #23620	; 0x5c44
 80014b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80014b4:	f64e 72ff 	movw	r2, #61439	; 0xefff
 80014b8:	601a      	str	r2, [r3, #0]
    Resume(RESUME_EXTERNAL);
 80014ba:	2000      	movs	r0, #0
 80014bc:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <USB_Istr+0x1c8>)
 80014be:	4798      	blx	r3
 80014c0:	882b      	ldrh	r3, [r5, #0]
 80014c2:	e7c1      	b.n	8001448 <USB_Istr+0x5c>
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 80014c4:	f645 4344 	movw	r3, #23620	; 0x5c44
 80014c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80014cc:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 80014d0:	601a      	str	r2, [r3, #0]
    Device_Property.Reset();
 80014d2:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <USB_Istr+0x1d4>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4798      	blx	r3
 80014d8:	882b      	ldrh	r3, [r5, #0]
 80014da:	e7a4      	b.n	8001426 <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <USB_Istr+0x1d8>)
 80014de:	4798      	blx	r3
 80014e0:	882b      	ldrh	r3, [r5, #0]
 80014e2:	e79b      	b.n	800141c <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 80014e4:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <USB_Istr+0x1dc>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 80014e6:	f64f 51ff 	movw	r1, #65023	; 0xfdff
 80014ea:	6011      	str	r1, [r2, #0]
    bIntPackSOF++;
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	3201      	adds	r2, #1
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	701a      	strb	r2, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 80014f4:	4b35      	ldr	r3, [pc, #212]	; (80015cc <USB_Istr+0x1e0>)
 80014f6:	4798      	blx	r3
 80014f8:	882b      	ldrh	r3, [r5, #0]
 80014fa:	e78a      	b.n	8001412 <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 80014fc:	492e      	ldr	r1, [pc, #184]	; (80015b8 <USB_Istr+0x1cc>)
 80014fe:	680b      	ldr	r3, [r1, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	600b      	str	r3, [r1, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8001504:	680b      	ldr	r3, [r1, #0]
 8001506:	2b03      	cmp	r3, #3
 8001508:	d9c8      	bls.n	800149c <USB_Istr+0xb0>
 800150a:	f645 4240 	movw	r2, #23616	; 0x5c40
 800150e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001512:	6813      	ldr	r3, [r2, #0]
 8001514:	f013 0308 	ands.w	r3, r3, #8
 8001518:	d1c0      	bne.n	800149c <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 800151a:	6810      	ldr	r0, [r2, #0]
 800151c:	4d2c      	ldr	r5, [pc, #176]	; (80015d0 <USB_Istr+0x1e4>)
 800151e:	b280      	uxth	r0, r0
 8001520:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8001524:	6028      	str	r0, [r5, #0]
 8001526:	f2c4 0200 	movt	r2, #16384	; 0x4000
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800152a:	f852 4b04 	ldr.w	r4, [r2], #4
 800152e:	ae08      	add	r6, sp, #32
 8001530:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8001534:	3301      	adds	r3, #1
 8001536:	b2a4      	uxth	r4, r4
 8001538:	2b08      	cmp	r3, #8
 800153a:	f840 4c20 	str.w	r4, [r0, #-32]
 800153e:	d1f4      	bne.n	800152a <USB_Istr+0x13e>
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8001540:	682a      	ldr	r2, [r5, #0]
        _SetCNTR(wCNTR);
 8001542:	f645 4340 	movw	r3, #23616	; 0x5c40
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	602a      	str	r2, [r5, #0]
        _SetCNTR(wCNTR);
 800154c:	682a      	ldr	r2, [r5, #0]
 800154e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001552:	b292      	uxth	r2, r2
 8001554:	601a      	str	r2, [r3, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8001556:	682a      	ldr	r2, [r5, #0]
        _SetCNTR(wCNTR);
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8001558:	f645 4044 	movw	r0, #23620	; 0x5c44
        /*apply FRES */
        wCNTR|=CNTR_FRES;
        _SetCNTR(wCNTR);
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	602a      	str	r2, [r5, #0]
        _SetCNTR(wCNTR);
 8001562:	682a      	ldr	r2, [r5, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8001564:	f2c4 0000 	movt	r0, #16384	; 0x4000
        wCNTR|=CNTR_FRES;
        _SetCNTR(wCNTR);
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
        _SetCNTR(wCNTR);
 8001568:	b292      	uxth	r2, r2
 800156a:	601a      	str	r2, [r3, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 800156c:	6802      	ldr	r2, [r0, #0]
 800156e:	f645 4344 	movw	r3, #23620	; 0x5c44
 8001572:	0552      	lsls	r2, r2, #21
 8001574:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001578:	d5f8      	bpl.n	800156c <USB_Istr+0x180>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 800157a:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800157e:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8001582:	6018      	str	r0, [r3, #0]
 8001584:	f2c4 0200 	movt	r2, #16384	; 0x4000
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001588:	2300      	movs	r3, #0
        _SetENDPOINT(i, EP[i]);
 800158a:	ac08      	add	r4, sp, #32
 800158c:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8001590:	f850 0c20 	ldr.w	r0, [r0, #-32]
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001594:	3301      	adds	r3, #1
        _SetENDPOINT(i, EP[i]);
 8001596:	b280      	uxth	r0, r0
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001598:	2b08      	cmp	r3, #8
        _SetENDPOINT(i, EP[i]);
 800159a:	f842 0b04 	str.w	r0, [r2], #4
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 800159e:	d1f4      	bne.n	800158a <USB_Istr+0x19e>
        _SetENDPOINT(i, EP[i]);
      
        esof_counter = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	600b      	str	r3, [r1, #0]
 80015a4:	e77a      	b.n	800149c <USB_Istr+0xb0>
 80015a6:	bf00      	nop
 80015a8:	200007e8 	.word	0x200007e8
 80015ac:	20001044 	.word	0x20001044
 80015b0:	200002d0 	.word	0x200002d0
 80015b4:	080019e9 	.word	0x080019e9
 80015b8:	200002c4 	.word	0x200002c4
 80015bc:	080018b9 	.word	0x080018b9
 80015c0:	2000005c 	.word	0x2000005c
 80015c4:	08002a41 	.word	0x08002a41
 80015c8:	200002c0 	.word	0x200002c0
 80015cc:	080013bd 	.word	0x080013bd
 80015d0:	200002bc 	.word	0x200002bc

080015d4 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <Virtual_Com_Port_SetConfiguration+0x10>)
 80015d6:	7a9b      	ldrb	r3, [r3, #10]
 80015d8:	b113      	cbz	r3, 80015e0 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 80015da:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <Virtual_Com_Port_SetConfiguration+0x14>)
 80015dc:	2205      	movs	r2, #5
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20001020 	.word	0x20001020
 80015e8:	200002cc 	.word	0x200002cc

080015ec <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 80015ec:	f240 23cc 	movw	r3, #716	; 0x2cc
 80015f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015f4:	2204      	movs	r2, #4
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop

080015fc <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <Virtual_Com_Port_Status_In+0x10>)
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	2a20      	cmp	r2, #32
 8001602:	d101      	bne.n	8001608 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	200002c8 	.word	0x200002c8

08001610 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop

08001614 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8001614:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8001616:	b510      	push	{r4, lr}
 8001618:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 800161a:	d003      	beq.n	8001624 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 800161c:	2820      	cmp	r0, #32
 800161e:	d011      	beq.n	8001644 <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8001620:	2002      	movs	r0, #2
 8001622:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001624:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <Virtual_Com_Port_Data_Setup+0x50>)
 8001626:	6813      	ldr	r3, [r2, #0]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800162e:	2b21      	cmp	r3, #33	; 0x21
 8001630:	d1f6      	bne.n	8001620 <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8001632:	490d      	ldr	r1, [pc, #52]	; (8001668 <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001634:	6813      	ldr	r3, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8001636:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 8001638:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800163a:	6199      	str	r1, [r3, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800163c:	825c      	strh	r4, [r3, #18]
  (*CopyRoutine)(0);
 800163e:	4788      	blx	r1
  return USB_SUCCESS;
 8001640:	4620      	mov	r0, r4
 8001642:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001644:	4a07      	ldr	r2, [pc, #28]	; (8001664 <Virtual_Com_Port_Data_Setup+0x50>)
 8001646:	6811      	ldr	r1, [r2, #0]
 8001648:	7809      	ldrb	r1, [r1, #0]
 800164a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800164e:	2921      	cmp	r1, #33	; 0x21
 8001650:	d003      	beq.n	800165a <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8001652:	4a06      	ldr	r2, [pc, #24]	; (800166c <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8001654:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8001656:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 8001658:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800165a:	4804      	ldr	r0, [pc, #16]	; (800166c <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 800165c:	4904      	ldr	r1, [pc, #16]	; (8001670 <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 800165e:	7003      	strb	r3, [r0, #0]
 8001660:	e7e8      	b.n	8001634 <Virtual_Com_Port_Data_Setup+0x20>
 8001662:	bf00      	nop
 8001664:	20001040 	.word	0x20001040
 8001668:	080016a9 	.word	0x080016a9
 800166c:	200002c8 	.word	0x200002c8
 8001670:	080016c1 	.word	0x080016c1

08001674 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <Virtual_Com_Port_NoData_Setup+0x20>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800167e:	2b21      	cmp	r3, #33	; 0x21
 8001680:	d001      	beq.n	8001686 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8001682:	2002      	movs	r0, #2
}
 8001684:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 8001686:	2802      	cmp	r0, #2
 8001688:	d001      	beq.n	800168e <Virtual_Com_Port_NoData_Setup+0x1a>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 800168a:	2822      	cmp	r0, #34	; 0x22
 800168c:	d1f9      	bne.n	8001682 <Virtual_Com_Port_NoData_Setup+0xe>

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 800168e:	2000      	movs	r0, #0
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20001040 	.word	0x20001040

08001698 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8001698:	b109      	cbz	r1, 800169e <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 800169a:	2002      	movs	r0, #2
 800169c:	4770      	bx	lr
  }
  else if (Interface > 1)
 800169e:	2801      	cmp	r0, #1
 80016a0:	d8fb      	bhi.n	800169a <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 80016a2:	4608      	mov	r0, r1
}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop

080016a8 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 80016a8:	b108      	cbz	r0, 80016ae <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 80016aa:	4803      	ldr	r0, [pc, #12]	; (80016b8 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 80016ac:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <Virtual_Com_Port_GetLineCoding+0x14>)
 80016b0:	2208      	movs	r2, #8
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	821a      	strh	r2, [r3, #16]
    return NULL;
 80016b6:	4770      	bx	lr
 80016b8:	200000d8 	.word	0x200000d8
 80016bc:	20001040 	.word	0x20001040

080016c0 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 80016c0:	b108      	cbz	r0, 80016c6 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 80016c2:	4803      	ldr	r0, [pc, #12]	; (80016d0 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 80016c4:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 80016c6:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <Virtual_Com_Port_SetLineCoding+0x14>)
 80016c8:	2208      	movs	r2, #8
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	821a      	strh	r2, [r3, #16]
    return NULL;
 80016ce:	4770      	bx	lr
 80016d0:	200000d8 	.word	0x200000d8
 80016d4:	20001040 	.word	0x20001040

080016d8 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 80016d8:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d805      	bhi.n	80016f0 <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 80016e4:	4904      	ldr	r1, [pc, #16]	; (80016f8 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 80016e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <Virtual_Com_Port_GetStringDescriptor+0x24>)
 80016ec:	4798      	blx	r3
 80016ee:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 80016f0:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 80016f2:	bd08      	pop	{r3, pc}
 80016f4:	20001040 	.word	0x20001040
 80016f8:	200000b8 	.word	0x200000b8
 80016fc:	0800211d 	.word	0x0800211d

08001700 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8001700:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8001702:	f240 0154 	movw	r1, #84	; 0x54
 8001706:	f242 131d 	movw	r3, #8477	; 0x211d
 800170a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800170e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001712:	4798      	blx	r3
}
 8001714:	bd08      	pop	{r3, pc}
 8001716:	bf00      	nop

08001718 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8001718:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800171a:	f240 01b0 	movw	r1, #176	; 0xb0
 800171e:	f242 131d 	movw	r3, #8477	; 0x211d
 8001722:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001726:	f6c0 0300 	movt	r3, #2048	; 0x800
 800172a:	4798      	blx	r3
}
 800172c:	bd08      	pop	{r3, pc}
 800172e:	bf00      	nop

08001730 <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001730:	f241 0240 	movw	r2, #4160	; 0x1040

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8001734:	f642 4384 	movw	r3, #11396	; 0x2c84
 8001738:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800173c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001740:	6812      	ldr	r2, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8001742:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8001744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8001748:	f242 7361 	movw	r3, #10081	; 0x2761
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800174c:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800174e:	7251      	strb	r1, [r2, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001750:	7294      	strb	r4, [r2, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8001752:	72d4      	strb	r4, [r2, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8001754:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001758:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800175a:	f242 7675 	movw	r6, #10101	; 0x2775
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 800175e:	4798      	blx	r3

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8001760:	f6c0 0600 	movt	r6, #2048	; 0x800
 8001764:	4620      	mov	r0, r4
 8001766:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800176a:	f242 758d 	movw	r5, #10125	; 0x278d
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800176e:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8001770:	f6c0 0500 	movt	r5, #2048	; 0x800
 8001774:	2110      	movs	r1, #16
 8001776:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8001778:	f642 0ae1 	movw	sl, #10465	; 0x28e1

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800177c:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800177e:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8001782:	2140      	movs	r1, #64	; 0x40
 8001784:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8001786:	f642 08bd 	movw	r8, #10429	; 0x28bd
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800178a:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800178c:	f6c0 0800 	movt	r8, #2048	; 0x800
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	4620      	mov	r0, r4
 8001794:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8001796:	f642 0355 	movw	r3, #10325	; 0x2855
 800179a:	4620      	mov	r0, r4
 800179c:	f6c0 0300 	movt	r3, #2048	; 0x800
 80017a0:	4798      	blx	r3
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80017a2:	f240 035c 	movw	r3, #92	; 0x5c
 80017a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017aa:	f642 1969 	movw	r9, #10601	; 0x2969
 80017ae:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 80017b2:	f6c0 0900 	movt	r9, #2048	; 0x800
 80017b6:	4620      	mov	r0, r4
 80017b8:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 80017ba:	f642 0331 	movw	r3, #10289	; 0x2831
 80017be:	f6c0 0300 	movt	r3, #2048	; 0x800
 80017c2:	4620      	mov	r0, r4
 80017c4:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 80017c6:	2001      	movs	r0, #1
 80017c8:	4621      	mov	r1, r4
 80017ca:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 80017cc:	2001      	movs	r0, #1
 80017ce:	21c0      	movs	r1, #192	; 0xc0
 80017d0:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 80017d2:	f242 77cd 	movw	r7, #10189	; 0x27cd
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 80017d6:	2001      	movs	r0, #1
 80017d8:	2120      	movs	r1, #32
 80017da:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 80017dc:	f6c0 0700 	movt	r7, #2048	; 0x800
 80017e0:	2001      	movs	r0, #1
 80017e2:	4621      	mov	r1, r4
 80017e4:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 80017e6:	2002      	movs	r0, #2
 80017e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80017ec:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 80017ee:	2002      	movs	r0, #2
 80017f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f4:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 80017f6:	2002      	movs	r0, #2
 80017f8:	4621      	mov	r1, r4
 80017fa:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 80017fc:	2002      	movs	r0, #2
 80017fe:	2120      	movs	r1, #32
 8001800:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8001802:	2003      	movs	r0, #3
 8001804:	4621      	mov	r1, r4
 8001806:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8001808:	2003      	movs	r0, #3
 800180a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800180e:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 8001810:	2003      	movs	r0, #3
 8001812:	2140      	movs	r1, #64	; 0x40
 8001814:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8001816:	2003      	movs	r0, #3
 8001818:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800181c:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800181e:	4621      	mov	r1, r4
 8001820:	2003      	movs	r0, #3
 8001822:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8001824:	f242 6311 	movw	r3, #9745	; 0x2611
 8001828:	f6c0 0300 	movt	r3, #2048	; 0x800
 800182c:	4620      	mov	r0, r4
 800182e:	4798      	blx	r3
  
  bDeviceState = ATTACHED;
 8001830:	f240 23cc 	movw	r3, #716	; 0x2cc
 8001834:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001840 <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8001840:	f641 5301 	movw	r3, #7425	; 0x1d01
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8001844:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8001846:	f6c0 0300 	movt	r3, #2048	; 0x800
 800184a:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 800184c:	f241 0340 	movw	r3, #4160	; 0x1040
 8001850:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 8001858:	f641 037d 	movw	r3, #6269	; 0x187d

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 800185c:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 800185e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001862:	4798      	blx	r3

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8001864:	f642 13dd 	movw	r3, #10717	; 0x29dd
 8001868:	f6c0 0300 	movt	r3, #2048	; 0x800
 800186c:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 800186e:	f240 23cc 	movw	r3, #716	; 0x2cc
 8001872:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001876:	601c      	str	r4, [r3, #0]
 8001878:	bd10      	pop	{r4, pc}
 800187a:	bf00      	nop

0800187c <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800187c:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800187e:	f641 4315 	movw	r3, #7189	; 0x1c15
 8001882:	2001      	movs	r0, #1
 8001884:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001888:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800188a:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800188e:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8001892:	f241 0244 	movw	r2, #4164	; 0x1044
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001896:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800189a:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800189c:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80018a0:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80018a2:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80018a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80018aa:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 80018ac:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 80018ae:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80018b0:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80018b2:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 80018b4:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 80018b6:	bd38      	pop	{r3, r4, r5, pc}

080018b8 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 80018b8:	b570      	push	{r4, r5, r6, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 80018ba:	2300      	movs	r3, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 80018bc:	b082      	sub	sp, #8
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 80018be:	f645 4140 	movw	r1, #23616	; 0x5c40
 80018c2:	f2c4 0100 	movt	r1, #16384	; 0x4000
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 80018c6:	9301      	str	r3, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 80018c8:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 80018cc:	680d      	ldr	r5, [r1, #0]
 80018ce:	493a      	ldr	r1, [pc, #232]	; (80019b8 <Suspend+0x100>)
 80018d0:	f2c4 0200 	movt	r2, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 80018d4:	f852 0b04 	ldr.w	r0, [r2], #4
 80018d8:	b280      	uxth	r0, r0
 80018da:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80018de:	3301      	adds	r3, #1
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d1f7      	bne.n	80018d4 <Suspend+0x1c>
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 80018e4:	b2aa      	uxth	r2, r5
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 80018e6:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 80018ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018ee:	f645 4340 	movw	r3, #23616	; 0x5c40
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 80018f2:	402c      	ands	r4, r5
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 80018f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 80018f8:	f042 0601 	orr.w	r6, r2, #1
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 80018fc:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8001900:	f645 4044 	movw	r0, #23620	; 0x5c44
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8001904:	601a      	str	r2, [r3, #0]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8001906:	f2c4 0000 	movt	r0, #16384	; 0x4000
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 800190a:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 800190c:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 800190e:	6802      	ldr	r2, [r0, #0]
 8001910:	f645 4344 	movw	r3, #23620	; 0x5c44
 8001914:	0552      	lsls	r2, r2, #21
 8001916:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800191a:	d5f8      	bpl.n	800190e <Suspend+0x56>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 800191c:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8001920:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8001924:	6018      	str	r0, [r3, #0]
 8001926:	f2c4 0200 	movt	r2, #16384	; 0x4000
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800192a:	2300      	movs	r3, #0
	_SetENDPOINT(i, EP[i]);
 800192c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8001930:	3301      	adds	r3, #1
	_SetENDPOINT(i, EP[i]);
 8001932:	b280      	uxth	r0, r0
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8001934:	2b08      	cmp	r3, #8
	_SetENDPOINT(i, EP[i]);
 8001936:	f842 0b04 	str.w	r0, [r2], #4
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800193a:	d1f7      	bne.n	800192c <Suspend+0x74>
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 800193c:	f645 4340 	movw	r3, #23616	; 0x5c40
 8001940:	f2c4 0300 	movt	r3, #16384	; 0x4000
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 8001944:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	_SetCNTR(wCNTR);
 8001948:	601c      	str	r4, [r3, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 800194a:	6819      	ldr	r1, [r3, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800194c:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 8001950:	b289      	uxth	r1, r1
 8001952:	f041 0104 	orr.w	r1, r1, #4
 8001956:	6019      	str	r1, [r3, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8001958:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800195c:	6811      	ldr	r1, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800195e:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8001962:	9101      	str	r1, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 8001964:	6811      	ldr	r1, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8001966:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 800196a:	f021 0103 	bic.w	r1, r1, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 800196e:	f041 0101 	orr.w	r1, r1, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 8001972:	6011      	str	r1, [r2, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8001974:	6820      	ldr	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8001976:	f645 4144 	movw	r1, #23620	; 0x5c44
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800197a:	f040 0004 	orr.w	r0, r0, #4
 800197e:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8001980:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8001984:	6808      	ldr	r0, [r1, #0]
 8001986:	04c0      	lsls	r0, r0, #19
 8001988:	d50f      	bpl.n	80019aa <Suspend+0xf2>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 800198a:	f64e 70ff 	movw	r0, #61439	; 0xefff
 800198e:	6008      	str	r0, [r1, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 8001990:	6818      	ldr	r0, [r3, #0]
        wCNTR&=~CNTR_FSUSP;
 8001992:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 8001996:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 8001998:	6019      	str	r1, [r3, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 800199a:	9b01      	ldr	r3, [sp, #4]
 800199c:	6013      	str	r3, [r2, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	6023      	str	r3, [r4, #0]
#endif
    }
}
 80019a6:	b002      	add	sp, #8
 80019a8:	bd70      	pop	{r4, r5, r6, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <Suspend+0x104>)
 80019ac:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6023      	str	r3, [r4, #0]
 80019b6:	e7f6      	b.n	80019a6 <Suspend+0xee>
 80019b8:	200007f0 	.word	0x200007f0
 80019bc:	08001d45 	.word	0x08001d45

080019c0 <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 80019c0:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 80019c2:	f645 4440 	movw	r4, #23616	; 0x5c40
 80019c6:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80019ca:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 80019cc:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80019d0:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 80019d2:	f641 3345 	movw	r3, #6981	; 0x1b45
 80019d6:	f6c0 0300 	movt	r3, #2048	; 0x800
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 80019da:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 80019dc:	4798      	blx	r3

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 80019de:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80019e2:	6023      	str	r3, [r4, #0]
 80019e4:	bd10      	pop	{r4, pc}
 80019e6:	bf00      	nop

080019e8 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 80019e8:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 80019ea:	4c2b      	ldr	r4, [pc, #172]	; (8001a98 <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 80019ec:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 80019ee:	bf18      	it	ne
 80019f0:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 80019f2:	7823      	ldrb	r3, [r4, #0]
 80019f4:	2b05      	cmp	r3, #5
 80019f6:	d819      	bhi.n	8001a2c <Resume+0x44>
 80019f8:	e8df f003 	tbb	[pc, r3]
 80019fc:	2f2a221b 	.word	0x2f2a221b
 8001a00:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 8001a02:	7863      	ldrb	r3, [r4, #1]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8001a0a:	7863      	ldrb	r3, [r4, #1]
 8001a0c:	b983      	cbnz	r3, 8001a30 <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 8001a0e:	f645 4240 	movw	r2, #23616	; 0x5c40
 8001a12:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001a16:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 8001a18:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001a1c:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 8001a1e:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 8001a20:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <Resume+0xb0>)
 8001a22:	2106      	movs	r1, #6
 8001a24:	7011      	strb	r1, [r2, #0]
        remotewakeupon = 0;
 8001a26:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <Resume+0xb4>)
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8001a2c:	2306      	movs	r3, #6
 8001a2e:	7023      	strb	r3, [r4, #0]
 8001a30:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <Resume+0xb4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d028      	beq.n	8001a8c <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8001a3a:	2305      	movs	r3, #5
 8001a3c:	7023      	strb	r3, [r4, #0]
 8001a3e:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <Resume+0xb8>)
 8001a42:	4798      	blx	r3
      ResumeS.eState = RESUME_START;
 8001a44:	2304      	movs	r3, #4
 8001a46:	7023      	strb	r3, [r4, #0]
      remotewakeupon = 1;
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <Resume+0xb4>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
      break;
 8001a4e:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8001a50:	2302      	movs	r3, #2
 8001a52:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	7023      	strb	r3, [r4, #0]
      break;
 8001a58:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 8001a5a:	7863      	ldrb	r3, [r4, #1]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8001a62:	7863      	ldrb	r3, [r4, #1]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1e3      	bne.n	8001a30 <Resume+0x48>
        ResumeS.eState = RESUME_START;
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <Resume+0xb0>)
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 8001a70:	f645 4340 	movw	r3, #23616	; 0x5c40
 8001a74:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001a78:	681a      	ldr	r2, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 8001a7a:	b292      	uxth	r2, r2
 8001a7c:	f042 0210 	orr.w	r2, r2, #16
 8001a80:	601a      	str	r2, [r3, #0]
      ResumeS.eState = RESUME_ON;
 8001a82:	2305      	movs	r3, #5
 8001a84:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 8001a86:	230a      	movs	r3, #10
 8001a88:	7063      	strb	r3, [r4, #1]
      break;
 8001a8a:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <Resume+0xb8>)
 8001a8e:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 8001a90:	2306      	movs	r3, #6
 8001a92:	7023      	strb	r3, [r4, #0]
 8001a94:	bd10      	pop	{r4, pc}
 8001a96:	bf00      	nop
 8001a98:	200007ec 	.word	0x200007ec
 8001a9c:	200002d4 	.word	0x200002d4
 8001aa0:	080019c1 	.word	0x080019c1

08001aa4 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 8001aa4:	f240 4314 	movw	r3, #1044	; 0x414
 8001aa8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001aac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	4770      	bx	lr

08001ab4 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8001ab4:	b430      	push	{r4, r5}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001ab6:	b1ca      	cbz	r2, 8001aec <IntToUnicode+0x38>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8001ab8:	1e55      	subs	r5, r2, #1
 8001aba:	b2ed      	uxtb	r5, r5
 8001abc:	3501      	adds	r5, #1
 8001abe:	2300      	movs	r3, #0
 8001ac0:	006d      	lsls	r5, r5, #1
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8001ac2:	461c      	mov	r4, r3
 8001ac4:	e007      	b.n	8001ad6 <IntToUnicode+0x22>
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8001ac6:	3230      	adds	r2, #48	; 0x30
 8001ac8:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8001aca:	18ca      	adds	r2, r1, r3
 8001acc:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8001ace:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001ad0:	42ab      	cmp	r3, r5
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8001ad2:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001ad4:	d00a      	beq.n	8001aec <IntToUnicode+0x38>
  {
    if( ((value >> 28)) < 0xA )
 8001ad6:	0f02      	lsrs	r2, r0, #28
 8001ad8:	2a09      	cmp	r2, #9
 8001ada:	d9f4      	bls.n	8001ac6 <IntToUnicode+0x12>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8001adc:	3237      	adds	r2, #55	; 0x37
 8001ade:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8001ae0:	18ca      	adds	r2, r1, r3
 8001ae2:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8001ae4:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001ae6:	42ab      	cmp	r3, r5
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8001ae8:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001aea:	d1f4      	bne.n	8001ad6 <IntToUnicode+0x22>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8001aec:	bc30      	pop	{r4, r5}
 8001aee:	4770      	bx	lr

08001af0 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 8001af0:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 8001af2:	f241 33ed 	movw	r3, #5101	; 0x13ed
 8001af6:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001afa:	4798      	blx	r3
 8001afc:	bd08      	pop	{r3, pc}
 8001afe:	bf00      	nop

08001b00 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 8001b00:	f241 0304 	movw	r3, #4100	; 0x1004
 8001b04:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b0e:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001b16:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop

08001b20 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8001b20:	f241 0204 	movw	r2, #4100	; 0x1004
 8001b24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b28:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8001b2a:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8001b2e:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8001b32:	6011      	str	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8001b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop

08001b44 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <Leave_LowPowerMode+0x18>)
 8001b46:	7a9b      	ldrb	r3, [r3, #10]
 8001b48:	b91b      	cbnz	r3, 8001b52 <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <Leave_LowPowerMode+0x1c>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8001b52:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <Leave_LowPowerMode+0x1c>)
 8001b54:	2205      	movs	r2, #5
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20001020 	.word	0x20001020
 8001b60:	200002cc 	.word	0x200002cc

08001b64 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8001b64:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8001b68:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8001b6a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001b6e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8001b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8001b76:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8001b78:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b7c:	6819      	ldr	r1, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8001b7e:	f240 4204 	movw	r2, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8001b82:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001b86:	6019      	str	r1, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8001b88:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001b8c:	6810      	ldr	r0, [r2, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8001b8e:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 8001b92:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8001b96:	6010      	str	r0, [r2, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8001b98:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8001b9c:	6808      	ldr	r0, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8001b9e:	f240 420c 	movw	r2, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8001ba2:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8001ba6:	6008      	str	r0, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8001ba8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001bac:	6811      	ldr	r1, [r2, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8001bae:	f640 5459 	movw	r4, #3417	; 0xd59
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8001bb2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001bb6:	6011      	str	r1, [r2, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8001bb8:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8001bba:	f641 21f1 	movw	r1, #6897	; 0x1af1
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8001bbe:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8001bc2:	2090      	movs	r0, #144	; 0x90
 8001bc4:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8001bce:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8001bd0:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8001bd2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001bd6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001bda:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8001bdc:	f641 21a5 	movw	r1, #6821	; 0x1aa5
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8001be0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001be4:	601a      	str	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8001be6:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001bea:	2200      	movs	r2, #0
 8001bec:	20e8      	movs	r0, #232	; 0xe8
 8001bee:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8001bf0:	f24e 1204 	movw	r2, #57604	; 0xe104
 8001bf4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001bf8:	6811      	ldr	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8001bfa:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8001bfe:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001c02:	6011      	str	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8001c04:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	bd38      	pop	{r3, r4, r5, pc}
 8001c12:	bf00      	nop

08001c14 <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8001c14:	f241 030c 	movw	r3, #4108	; 0x100c
 8001c18:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c1c:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 8001c1e:	b918      	cbnz	r0, 8001c28 <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 8001c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8001c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	4770      	bx	lr

08001c30 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8001c30:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001c32:	460d      	mov	r5, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8001c34:	b083      	sub	sp, #12
 8001c36:	4606      	mov	r6, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001c38:	b159      	cbz	r1, 8001c52 <USB_To_USART_Send_Data+0x22>
 8001c3a:	4f07      	ldr	r7, [pc, #28]	; (8001c58 <USB_To_USART_Send_Data+0x28>)
 8001c3c:	2400      	movs	r4, #0
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8001c3e:	5d33      	ldrb	r3, [r6, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8001c40:	2005      	movs	r0, #5
 8001c42:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001c46:	3401      	adds	r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8001c48:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8001c4c:	47b8      	blx	r7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001c4e:	42ac      	cmp	r4, r5
 8001c50:	d3f5      	bcc.n	8001c3e <USB_To_USART_Send_Data+0xe>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 8001c52:	b003      	add	sp, #12
 8001c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c56:	bf00      	nop
 8001c58:	08000c81 	.word	0x08000c81

08001c5c <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 8001c5c:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8001c5e:	4c20      	ldr	r4, [pc, #128]	; (8001ce0 <Handle_USBAsynchXfer+0x84>)
 8001c60:	7823      	ldrb	r3, [r4, #0]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d026      	beq.n	8001cb4 <Handle_USBAsynchXfer+0x58>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8001c66:	4d1f      	ldr	r5, [pc, #124]	; (8001ce4 <Handle_USBAsynchXfer+0x88>)
 8001c68:	682b      	ldr	r3, [r5, #0]
 8001c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c6e:	d022      	beq.n	8001cb6 <Handle_USBAsynchXfer+0x5a>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8001c70:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <Handle_USBAsynchXfer+0x8c>)
 8001c72:	6811      	ldr	r1, [r2, #0]
 8001c74:	428b      	cmp	r3, r1
 8001c76:	d02f      	beq.n	8001cd8 <Handle_USBAsynchXfer+0x7c>
 8001c78:	bf98      	it	ls
 8001c7a:	b298      	uxthls	r0, r3
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 8001c7c:	d921      	bls.n	8001cc2 <Handle_USBAsynchXfer+0x66>
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8001c7e:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
 8001c82:	4a1a      	ldr	r2, [pc, #104]	; (8001cec <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8001c84:	2940      	cmp	r1, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8001c86:	6011      	str	r1, [r2, #0]
 8001c88:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8001c8a:	d91f      	bls.n	8001ccc <Handle_USBAsynchXfer+0x70>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8001c8c:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8001c8e:	3940      	subs	r1, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8001c90:	602b      	str	r3, [r5, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8001c92:	6011      	str	r1, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8001c94:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8001c98:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8001c9a:	1818      	adds	r0, r3, r0
 8001c9c:	4632      	mov	r2, r6
 8001c9e:	21c0      	movs	r1, #192	; 0xc0
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8001ca2:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8001ca4:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 8001ca6:	4628      	mov	r0, r5
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <Handle_USBAsynchXfer+0x9c>)
 8001caa:	4631      	mov	r1, r6
 8001cac:	4798      	blx	r3
    SetEPTxValid(ENDP1); 
 8001cae:	4628      	mov	r0, r5
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <Handle_USBAsynchXfer+0xa0>)
 8001cb2:	4798      	blx	r3
 8001cb4:	bd70      	pop	{r4, r5, r6, pc}
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8001cb8:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8001cba:	6819      	ldr	r1, [r3, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8001cbc:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	b151      	cbz	r1, 8001cd8 <Handle_USBAsynchXfer+0x7c>
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8001cc2:	1ac9      	subs	r1, r1, r3
 8001cc4:	4a09      	ldr	r2, [pc, #36]	; (8001cec <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8001cc6:	2940      	cmp	r1, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8001cc8:	6011      	str	r1, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8001cca:	d8df      	bhi.n	8001c8c <Handle_USBAsynchXfer+0x30>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 8001ccc:	18cb      	adds	r3, r1, r3
 8001cce:	602b      	str	r3, [r5, #0]
      USART_Rx_length = 0;
 8001cd0:	2300      	movs	r3, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 8001cd2:	b28e      	uxth	r6, r1
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e7de      	b.n	8001c96 <Handle_USBAsynchXfer+0x3a>
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
    {
      USB_Tx_State = 0; 
 8001cd8:	2300      	movs	r3, #0
 8001cda:	7023      	strb	r3, [r4, #0]
      return;
 8001cdc:	bd70      	pop	{r4, r5, r6, pc}
 8001cde:	bf00      	nop
 8001ce0:	200002d8 	.word	0x200002d8
 8001ce4:	200002e0 	.word	0x200002e0
 8001ce8:	200002dc 	.word	0x200002dc
 8001cec:	200002e4 	.word	0x200002e4
 8001cf0:	20000810 	.word	0x20000810
 8001cf4:	08002709 	.word	0x08002709
 8001cf8:	08002949 	.word	0x08002949
 8001cfc:	0800280d 	.word	0x0800280d

08001d00 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 8001d00:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8001d02:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 8001d06:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8001d0a:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 8001d0e:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8001d12:	6812      	ldr	r2, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 8001d14:	681b      	ldr	r3, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8001d16:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 8001d1a:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8001d1e:	18d0      	adds	r0, r2, r3
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8001d20:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8001d22:	d007      	beq.n	8001d34 <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 8001d24:	4904      	ldr	r1, [pc, #16]	; (8001d38 <Get_SerialNum+0x38>)
 8001d26:	2208      	movs	r2, #8
 8001d28:	4d04      	ldr	r5, [pc, #16]	; (8001d3c <Get_SerialNum+0x3c>)
 8001d2a:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	4904      	ldr	r1, [pc, #16]	; (8001d40 <Get_SerialNum+0x40>)
 8001d30:	2204      	movs	r2, #4
 8001d32:	47a8      	blx	r5
 8001d34:	bd38      	pop	{r3, r4, r5, pc}
 8001d36:	bf00      	nop
 8001d38:	20000002 	.word	0x20000002
 8001d3c:	08001ab5 	.word	0x08001ab5
 8001d40:	20000012 	.word	0x20000012

08001d44 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 8001d44:	bf30      	wfi
 8001d46:	4770      	bx	lr

08001d48 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8001d48:	b508      	push	{r3, lr}
  if (Length == 0)
 8001d4a:	b138      	cbz	r0, 8001d5c <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <Standard_GetConfiguration+0x20>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <Standard_GetConfiguration+0x24>)
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	300a      	adds	r0, #10
}
 8001d5a:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <Standard_GetConfiguration+0x24>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8001d64:	bd08      	pop	{r3, pc}
 8001d66:	bf00      	nop
 8001d68:	2000103c 	.word	0x2000103c
 8001d6c:	20001040 	.word	0x20001040

08001d70 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8001d70:	b508      	push	{r3, lr}
  if (Length == 0)
 8001d72:	b138      	cbz	r0, 8001d84 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <Standard_GetInterface+0x20>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <Standard_GetInterface+0x24>)
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	300c      	adds	r0, #12
}
 8001d82:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <Standard_GetInterface+0x24>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8001d8c:	bd08      	pop	{r3, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000103c 	.word	0x2000103c
 8001d94:	20001040 	.word	0x20001040

08001d98 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8001d98:	b508      	push	{r3, lr}
  if (Length == 0)
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	d037      	beq.n	8001e0e <Standard_GetStatus+0x76>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <Standard_GetStatus+0x8c>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8001da0:	4821      	ldr	r0, [pc, #132]	; (8001e28 <Standard_GetStatus+0x90>)
 8001da2:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001da4:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8001da6:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001da8:	7813      	ldrb	r3, [r2, #0]
 8001daa:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8001dae:	d017      	beq.n	8001de0 <Standard_GetStatus+0x48>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d02b      	beq.n	8001e0c <Standard_GetStatus+0x74>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d128      	bne.n	8001e0a <Standard_GetStatus+0x72>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8001db8:	7953      	ldrb	r3, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 8001dba:	f003 020f 	and.w	r2, r3, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001dbe:	0092      	lsls	r2, r2, #2
 8001dc0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001dc4:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001dc8:	f013 0f80 	tst.w	r3, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001dcc:	6813      	ldr	r3, [r2, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001dce:	d123      	bne.n	8001e18 <Standard_GetStatus+0x80>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001dd0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dd8:	d111      	bne.n	8001dfe <Standard_GetStatus+0x66>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 8001dda:	2301      	movs	r3, #1
 8001ddc:	7003      	strb	r3, [r0, #0]
 8001dde:	e00e      	b.n	8001dfe <Standard_GetStatus+0x66>
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 8001de0:	7a52      	ldrb	r2, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8001de2:	f002 0320 	and.w	r3, r2, #32
 8001de6:	b2db      	uxtb	r3, r3
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8001de8:	f002 0240 	and.w	r2, r2, #64	; 0x40
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 8001dec:	428b      	cmp	r3, r1
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8001dee:	b2d2      	uxtb	r2, r2
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 8001df0:	bf18      	it	ne
 8001df2:	2302      	movne	r3, #2
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8001df4:	2a00      	cmp	r2, #0
 8001df6:	d0f1      	beq.n	8001ddc <Standard_GetStatus+0x44>
    {
      SetBit(StatusInfo0, 0);
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <Standard_GetStatus+0x94>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 8001e06:	4808      	ldr	r0, [pc, #32]	; (8001e28 <Standard_GetStatus+0x90>)
 8001e08:	bd08      	pop	{r3, pc}
    }

  }
  else
  {
    return NULL;
 8001e0a:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 8001e0c:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <Standard_GetStatus+0x8c>)
 8001e10:	2202      	movs	r2, #2
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	821a      	strh	r2, [r3, #16]
    return 0;
 8001e16:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001e18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001e1c:	2b10      	cmp	r3, #16
 8001e1e:	d1ee      	bne.n	8001dfe <Standard_GetStatus+0x66>
 8001e20:	e7db      	b.n	8001dda <Standard_GetStatus+0x42>
 8001e22:	bf00      	nop
 8001e24:	20001040 	.word	0x20001040
 8001e28:	20001010 	.word	0x20001010
 8001e2c:	2000103c 	.word	0x2000103c

08001e30 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8001e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8001e34:	4e2b      	ldr	r6, [pc, #172]	; (8001ee4 <DataStageIn+0xb4>)
 8001e36:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8001e38:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8001e3a:	7a20      	ldrb	r0, [r4, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf08      	it	eq
 8001e40:	2804      	cmpeq	r0, #4
 8001e42:	bf14      	ite	ne
 8001e44:	f04f 0800 	movne.w	r8, #0
 8001e48:	f04f 0801 	moveq.w	r8, #1
 8001e4c:	d10a      	bne.n	8001e64 <DataStageIn+0x34>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <DataStageIn+0xb8>)
 8001e50:	781a      	ldrb	r2, [r3, #0]
 8001e52:	2a01      	cmp	r2, #1
 8001e54:	d030      	beq.n	8001eb8 <DataStageIn+0x88>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8001e56:	4b25      	ldr	r3, [pc, #148]	; (8001eec <DataStageIn+0xbc>)
 8001e58:	2210      	movs	r2, #16
 8001e5a:	2707      	movs	r7, #7
 8001e5c:	801a      	strh	r2, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8001e5e:	7227      	strb	r7, [r4, #8]
 8001e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8001e64:	8aa7      	ldrh	r7, [r4, #20]
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8001e66:	69a2      	ldr	r2, [r4, #24]
 8001e68:	429f      	cmp	r7, r3
 8001e6a:	bf34      	ite	cc
 8001e6c:	463d      	movcc	r5, r7
 8001e6e:	461d      	movcs	r5, r3
 8001e70:	4628      	mov	r0, r5
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8001e72:	42bb      	cmp	r3, r7
 8001e74:	bf8c      	ite	hi
 8001e76:	2702      	movhi	r7, #2
 8001e78:	2704      	movls	r7, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8001e7a:	4790      	blx	r2
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <DataStageIn+0xc0>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8001e7e:	4681      	mov	r9, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8001e80:	4640      	mov	r0, r8
 8001e82:	4798      	blx	r3
 8001e84:	462a      	mov	r2, r5
 8001e86:	4601      	mov	r1, r0
 8001e88:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <DataStageIn+0xc4>)
 8001e8a:	4648      	mov	r0, r9
 8001e8c:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 8001e8e:	4629      	mov	r1, r5
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <DataStageIn+0xc8>)
 8001e92:	4640      	mov	r0, r8
 8001e94:	4798      	blx	r3

  pEPinfo->Usb_wLength -= Length;
 8001e96:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8001e98:	8a62      	ldrh	r2, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8001e9a:	1b5b      	subs	r3, r3, r5
 8001e9c:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <DataStageIn+0xbc>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8001ea0:	18ad      	adds	r5, r5, r2
  vSetEPTxStatus(EP_TX_VALID);
 8001ea2:	2230      	movs	r2, #48	; 0x30
 8001ea4:	801a      	strh	r2, [r3, #0]
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8001ea6:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <DataStageIn+0xcc>)
 8001eaa:	6834      	ldr	r4, [r6, #0]
 8001eac:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001eb0:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8001eb2:	7227      	strb	r7, [r4, #8]
 8001eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8001eb8:	f645 4250 	movw	r2, #23632	; 0x5c50
 8001ebc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001ec0:	6811      	ldr	r1, [r2, #0]
 8001ec2:	f243 0202 	movw	r2, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001ec6:	b289      	uxth	r1, r1
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8001ec8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001ecc:	188a      	adds	r2, r1, r2
 8001ece:	0052      	lsls	r2, r2, #1
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	6011      	str	r1, [r2, #0]
 8001ed4:	4a05      	ldr	r2, [pc, #20]	; (8001eec <DataStageIn+0xbc>)
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8001ed6:	2704      	movs	r7, #4
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8001ed8:	2030      	movs	r0, #48	; 0x30
 8001eda:	8010      	strh	r0, [r2, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8001edc:	7019      	strb	r1, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8001ede:	7227      	strb	r7, [r4, #8]
 8001ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ee4:	20001040 	.word	0x20001040
 8001ee8:	200002e8 	.word	0x200002e8
 8001eec:	20001048 	.word	0x20001048
 8001ef0:	08002909 	.word	0x08002909
 8001ef4:	08002709 	.word	0x08002709
 8001ef8:	08002949 	.word	0x08002949
 8001efc:	20001046 	.word	0x20001046

08001f00 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8001f00:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <Standard_SetConfiguration+0x30>)
 8001f04:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <Standard_SetConfiguration+0x34>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	7851      	ldrb	r1, [r2, #1]
 8001f0a:	78da      	ldrb	r2, [r3, #3]
 8001f0c:	4291      	cmp	r1, r2
 8001f0e:	d201      	bcs.n	8001f14 <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 8001f10:	2002      	movs	r0, #2
  }
}
 8001f12:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001f14:	7899      	ldrb	r1, [r3, #2]
 8001f16:	2900      	cmp	r1, #0
 8001f18:	d1fa      	bne.n	8001f10 <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8001f1a:	889c      	ldrh	r4, [r3, #4]
 8001f1c:	2c00      	cmp	r4, #0
 8001f1e:	d1f7      	bne.n	8001f10 <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8001f20:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <Standard_SetConfiguration+0x38>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4798      	blx	r3
    return USB_SUCCESS;
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	bd10      	pop	{r4, pc}
 8001f2e:	bf00      	nop
 8001f30:	20001040 	.word	0x20001040
 8001f34:	200000e0 	.word	0x200000e0
 8001f38:	2000103c 	.word	0x2000103c

08001f3c <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8001f3c:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8001f3e:	4a10      	ldr	r2, [pc, #64]	; (8001f80 <Standard_SetInterface+0x44>)
 8001f40:	4c10      	ldr	r4, [pc, #64]	; (8001f84 <Standard_SetInterface+0x48>)
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	6992      	ldr	r2, [r2, #24]
 8001f48:	7958      	ldrb	r0, [r3, #5]
 8001f4a:	78d9      	ldrb	r1, [r3, #3]
 8001f4c:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 8001f4e:	6823      	ldr	r3, [r4, #0]
 8001f50:	7a9a      	ldrb	r2, [r3, #10]
 8001f52:	b90a      	cbnz	r2, 8001f58 <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 8001f54:	2002      	movs	r0, #2
}
 8001f56:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8001f58:	2800      	cmp	r0, #0
 8001f5a:	d1fb      	bne.n	8001f54 <Standard_SetInterface+0x18>
 8001f5c:	791a      	ldrb	r2, [r3, #4]
 8001f5e:	2a00      	cmp	r2, #0
 8001f60:	d1f8      	bne.n	8001f54 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 8001f62:	789d      	ldrb	r5, [r3, #2]
 8001f64:	2d00      	cmp	r5, #0
 8001f66:	d1f5      	bne.n	8001f54 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <Standard_SetInterface+0x4c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8001f70:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8001f72:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8001f74:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8001f76:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8001f78:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8001f7a:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8001f7c:	bd38      	pop	{r3, r4, r5, pc}
 8001f7e:	bf00      	nop
 8001f80:	20001018 	.word	0x20001018
 8001f84:	20001040 	.word	0x20001040
 8001f88:	2000103c 	.word	0x2000103c

08001f8c <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8001f8c:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8001f8e:	4b35      	ldr	r3, [pc, #212]	; (8002064 <Standard_ClearFeature+0xd8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001f94:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8001f98:	d003      	beq.n	8001fa2 <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001f9a:	2802      	cmp	r0, #2
 8001f9c:	d006      	beq.n	8001fac <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 8001f9e:	2002      	movs	r0, #2
}
 8001fa0:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8001fa2:	7a5a      	ldrb	r2, [r3, #9]
 8001fa4:	f022 0220 	bic.w	r2, r2, #32
 8001fa8:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8001faa:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8001fac:	885a      	ldrh	r2, [r3, #2]
 8001fae:	2a00      	cmp	r2, #0
 8001fb0:	d1f6      	bne.n	8001fa0 <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8001fb2:	791a      	ldrb	r2, [r3, #4]
 8001fb4:	2a00      	cmp	r2, #0
 8001fb6:	d1f3      	bne.n	8001fa0 <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8001fb8:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 8001fba:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001fbe:	0081      	lsls	r1, r0, #2
 8001fc0:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8001fc4:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001fc6:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8001fca:	bf56      	itet	pl
 8001fcc:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001fce:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8001fd0:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001fd4:	4c24      	ldr	r4, [pc, #144]	; (8002068 <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001fd6:	bf48      	it	mi
 8001fd8:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001fdc:	7824      	ldrb	r4, [r4, #0]
 8001fde:	42a0      	cmp	r0, r4
 8001fe0:	d2dd      	bcs.n	8001f9e <Standard_ClearFeature+0x12>
 8001fe2:	2d00      	cmp	r5, #0
 8001fe4:	d0db      	beq.n	8001f9e <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 8001fe6:	7a9b      	ldrb	r3, [r3, #10]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0d8      	beq.n	8001f9e <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001fec:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	b173      	cbz	r3, 8002012 <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001ff4:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8001ff8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002002:	2b10      	cmp	r3, #16
 8002004:	d021      	beq.n	800204a <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <Standard_ClearFeature+0xe0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	4798      	blx	r3
    return USB_SUCCESS;
 800200e:	2000      	movs	r0, #0
 8002010:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8002012:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002016:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002024:	d1ef      	bne.n	8002006 <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 8002026:	b9c8      	cbnz	r0, 800205c <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <Standard_ClearFeature+0xe4>)
 800202a:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <Standard_ClearFeature+0xe8>)
 8002030:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8002032:	6822      	ldr	r2, [r4, #0]
 8002034:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8002038:	4013      	ands	r3, r2
 800203a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800203e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002046:	6023      	str	r3, [r4, #0]
 8002048:	e7dd      	b.n	8002006 <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 800204a:	b2c4      	uxtb	r4, r0
 800204c:	4620      	mov	r0, r4
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <Standard_ClearFeature+0xec>)
 8002050:	4798      	blx	r3
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8002052:	4620      	mov	r0, r4
 8002054:	2130      	movs	r1, #48	; 0x30
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <Standard_ClearFeature+0xf0>)
 8002058:	4798      	blx	r3
 800205a:	e7d4      	b.n	8002006 <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <Standard_ClearFeature+0xf4>)
 800205e:	4798      	blx	r3
 8002060:	e7e7      	b.n	8002032 <Standard_ClearFeature+0xa6>
 8002062:	bf00      	nop
 8002064:	20001040 	.word	0x20001040
 8002068:	200000e0 	.word	0x200000e0
 800206c:	2000103c 	.word	0x2000103c
 8002070:	2000005c 	.word	0x2000005c
 8002074:	08002969 	.word	0x08002969
 8002078:	08002899 	.word	0x08002899
 800207c:	0800278d 	.word	0x0800278d
 8002080:	08002875 	.word	0x08002875

08002084 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8002084:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <Standard_SetEndPointFeature+0x8c>)
 8002088:	6819      	ldr	r1, [r3, #0]
 800208a:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 800208c:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8002090:	0090      	lsls	r0, r2, #2
 8002092:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8002096:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8002098:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 800209c:	bf56      	itet	pl
 800209e:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80020a0:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 80020a2:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80020a6:	4c1b      	ldr	r4, [pc, #108]	; (8002114 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80020a8:	bf48      	it	mi
 80020aa:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80020ae:	7824      	ldrb	r4, [r4, #0]
 80020b0:	42a2      	cmp	r2, r4
 80020b2:	d301      	bcc.n	80020b8 <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 80020b4:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 80020b6:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 80020b8:	884a      	ldrh	r2, [r1, #2]
 80020ba:	2a00      	cmp	r2, #0
 80020bc:	d1fa      	bne.n	80020b4 <Standard_SetEndPointFeature+0x30>
 80020be:	2d00      	cmp	r5, #0
 80020c0:	d0f8      	beq.n	80020b4 <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 80020c2:	7a8a      	ldrb	r2, [r1, #10]
 80020c4:	2a00      	cmp	r2, #0
 80020c6:	d0f5      	beq.n	80020b4 <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80020c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80020cc:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80020d0:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80020d4:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80020d6:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80020d8:	b17b      	cbz	r3, 80020fa <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80020da:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 80020de:	400b      	ands	r3, r1
 80020e0:	f083 0310 	eor.w	r3, r3, #16
 80020e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ec:	6013      	str	r3, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <Standard_SetEndPointFeature+0x94>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4798      	blx	r3
  return USB_SUCCESS;
 80020f6:	2000      	movs	r0, #0
 80020f8:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 80020fa:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80020fe:	400b      	ands	r3, r1
 8002100:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e7ee      	b.n	80020ee <Standard_SetEndPointFeature+0x6a>
 8002110:	20001040 	.word	0x20001040
 8002114:	200000e0 	.word	0x200000e0
 8002118:	2000103c 	.word	0x2000103c

0800211c <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <Standard_GetDescriptorData+0x18>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8002122:	b110      	cbz	r0, 800212a <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 8002124:	6808      	ldr	r0, [r1, #0]
 8002126:	1880      	adds	r0, r0, r2
}
 8002128:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800212a:	8889      	ldrh	r1, [r1, #4]
 800212c:	1a8a      	subs	r2, r1, r2
 800212e:	821a      	strh	r2, [r3, #16]
    return 0;
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20001040 	.word	0x20001040

08002138 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8002138:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <Post0_Process+0x34>)
 800213c:	2000      	movs	r0, #0
 800213e:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <Post0_Process+0x38>)
 8002144:	4798      	blx	r3

  if (pInformation->ControlState == STALLED)
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <Post0_Process+0x3c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	7a18      	ldrb	r0, [r3, #8]
 800214c:	2808      	cmp	r0, #8
 800214e:	d106      	bne.n	800215e <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <Post0_Process+0x40>)
 8002152:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002156:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <Post0_Process+0x44>)
 800215a:	2210      	movs	r2, #16
 800215c:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 800215e:	f1b0 0c09 	subs.w	ip, r0, #9
 8002162:	f1dc 0000 	rsbs	r0, ip, #0
 8002166:	eb50 000c 	adcs.w	r0, r0, ip
 800216a:	bd08      	pop	{r3, pc}
 800216c:	2000005c 	.word	0x2000005c
 8002170:	08002969 	.word	0x08002969
 8002174:	20001040 	.word	0x20001040
 8002178:	20001046 	.word	0x20001046
 800217c:	20001048 	.word	0x20001048

08002180 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8002180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t ControlState = pInformation->ControlState;
 8002184:	4d35      	ldr	r5, [pc, #212]	; (800225c <Out0_Process+0xdc>)
 8002186:	682c      	ldr	r4, [r5, #0]
 8002188:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800218a:	2b02      	cmp	r3, #2
 800218c:	bf18      	it	ne
 800218e:	2b04      	cmpne	r3, #4
 8002190:	bf14      	ite	ne
 8002192:	2600      	movne	r6, #0
 8002194:	2601      	moveq	r6, #1
 8002196:	d005      	beq.n	80021a4 <Out0_Process+0x24>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8002198:	2b03      	cmp	r3, #3
 800219a:	bf18      	it	ne
 800219c:	2b05      	cmpne	r3, #5
 800219e:	d007      	beq.n	80021b0 <Out0_Process+0x30>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 80021a0:	2b07      	cmp	r3, #7
 80021a2:	d00e      	beq.n	80021c2 <Out0_Process+0x42>
 80021a4:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 80021a6:	7223      	strb	r3, [r4, #8]

  return Post0_Process();
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <Out0_Process+0xe0>)
 80021aa:	4798      	blx	r3
 80021ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 80021b0:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 80021b2:	8a23      	ldrh	r3, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 80021b4:	b311      	cbz	r1, 80021fc <Out0_Process+0x7c>
 80021b6:	b95b      	cbnz	r3, 80021d0 <Out0_Process+0x50>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80021b8:	8aa3      	ldrh	r3, [r4, #20]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d049      	beq.n	8002252 <Out0_Process+0xd2>
 80021be:	4a29      	ldr	r2, [pc, #164]	; (8002264 <Out0_Process+0xe4>)
 80021c0:	e02e      	b.n	8002220 <Out0_Process+0xa0>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 80021c2:	4b29      	ldr	r3, [pc, #164]	; (8002268 <Out0_Process+0xe8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4798      	blx	r3
 80021ca:	682c      	ldr	r4, [r5, #0]
 80021cc:	2308      	movs	r3, #8
 80021ce:	e7ea      	b.n	80021a6 <Out0_Process+0x26>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 80021d0:	8aa7      	ldrh	r7, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80021d2:	429f      	cmp	r7, r3
 80021d4:	bf28      	it	cs
 80021d6:	461f      	movcs	r7, r3
 80021d8:	4638      	mov	r0, r7
 80021da:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
 80021dc:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80021de:	8a63      	ldrh	r3, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 80021e0:	1bd2      	subs	r2, r2, r7
    pEPinfo->Usb_rOffset += Length;
 80021e2:	18fb      	adds	r3, r7, r3
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80021e4:	4680      	mov	r8, r0
    pEPinfo->Usb_rLength -= Length;
 80021e6:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80021e8:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80021ea:	4630      	mov	r0, r6
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <Out0_Process+0xec>)
 80021ee:	4798      	blx	r3
 80021f0:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <Out0_Process+0xf0>)
 80021f2:	4601      	mov	r1, r0
 80021f4:	463a      	mov	r2, r7
 80021f6:	4640      	mov	r0, r8
 80021f8:	4798      	blx	r3
 80021fa:	8a23      	ldrh	r3, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0db      	beq.n	80021b8 <Out0_Process+0x38>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <Out0_Process+0xf4>)
    SetEPTxCount(ENDP0, 0);
 8002202:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8002204:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 8002208:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800220a:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800220c:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <Out0_Process+0xf8>)
 800220e:	4798      	blx	r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002210:	8a23      	ldrh	r3, [r4, #16]
 8002212:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8002214:	4a13      	ldr	r2, [pc, #76]	; (8002264 <Out0_Process+0xe4>)
 8002216:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002218:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800221a:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800221c:	d919      	bls.n	8002252 <Out0_Process+0xd2>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 800221e:	b9a3      	cbnz	r3, 800224a <Out0_Process+0xca>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8002220:	682c      	ldr	r4, [r5, #0]
 8002222:	2106      	movs	r1, #6
      USB_StatusIn();
 8002224:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8002228:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 800222a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800222e:	6819      	ldr	r1, [r3, #0]
 8002230:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8002234:	b289      	uxth	r1, r1
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 8002236:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800223a:	18cb      	adds	r3, r1, r3
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2100      	movs	r1, #0
 8002240:	6019      	str	r1, [r3, #0]
 8002242:	2330      	movs	r3, #48	; 0x30
 8002244:	8013      	strh	r3, [r2, #0]
 8002246:	7a23      	ldrb	r3, [r4, #8]
 8002248:	e7ad      	b.n	80021a6 <Out0_Process+0x26>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 800224a:	682c      	ldr	r4, [r5, #0]
 800224c:	2305      	movs	r3, #5
 800224e:	7223      	strb	r3, [r4, #8]
 8002250:	e7a9      	b.n	80021a6 <Out0_Process+0x26>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 8002252:	682c      	ldr	r4, [r5, #0]
 8002254:	2303      	movs	r3, #3
 8002256:	7223      	strb	r3, [r4, #8]
 8002258:	e7a5      	b.n	80021a6 <Out0_Process+0x26>
 800225a:	bf00      	nop
 800225c:	20001040 	.word	0x20001040
 8002260:	08002139 	.word	0x08002139
 8002264:	20001048 	.word	0x20001048
 8002268:	20001018 	.word	0x20001018
 800226c:	08002929 	.word	0x08002929
 8002270:	0800273d 	.word	0x0800273d
 8002274:	20001046 	.word	0x20001046
 8002278:	08002949 	.word	0x08002949

0800227c <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800227c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800227e:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002282:	f2c4 0300 	movt	r3, #16384	; 0x4000

  if (pInformation->ControlState != PAUSE)
 8002286:	4d9d      	ldr	r5, [pc, #628]	; (80024fc <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002288:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 800228a:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800228c:	f243 0304 	movw	r3, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8002290:	b292      	uxth	r2, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002292:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002296:	18d3      	adds	r3, r2, r3

  if (pInformation->ControlState != PAUSE)
 8002298:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800229a:	005b      	lsls	r3, r3, #1

  if (pInformation->ControlState != PAUSE)
 800229c:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800229e:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80022a0:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 80022a2:	d044      	beq.n	800232e <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80022a4:	b2b6      	uxth	r6, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80022a6:	0076      	lsls	r6, r6, #1
 80022a8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80022ac:	f506 46c0 	add.w	r6, r6, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80022b0:	7833      	ldrb	r3, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 80022b2:	4f93      	ldr	r7, [pc, #588]	; (8002500 <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80022b4:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 80022b6:	7873      	ldrb	r3, [r6, #1]
 80022b8:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 80022ba:	88b0      	ldrh	r0, [r6, #4]
 80022bc:	47b8      	blx	r7
 80022be:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 80022c0:	8930      	ldrh	r0, [r6, #8]
 80022c2:	682c      	ldr	r4, [r5, #0]
 80022c4:	47b8      	blx	r7
 80022c6:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 80022c8:	89b3      	ldrh	r3, [r6, #12]
 80022ca:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 80022cc:	2201      	movs	r2, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 80022ce:	80e3      	strh	r3, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 80022d0:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d030      	beq.n	8002338 <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 80022d6:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 80022d8:	2906      	cmp	r1, #6
 80022da:	f000 8087 	beq.w	80023ec <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80022de:	2900      	cmp	r1, #0
 80022e0:	d15e      	bne.n	80023a0 <Setup0_Process+0x124>
 80022e2:	8863      	ldrh	r3, [r4, #2]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 8094 	beq.w	8002412 <Setup0_Process+0x196>
 80022ea:	4e86      	ldr	r6, [pc, #536]	; (8002504 <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80022ec:	6833      	ldr	r3, [r6, #0]
 80022ee:	4608      	mov	r0, r1
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 80022f4:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 80022f6:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 80022f8:	d062      	beq.n	80023c0 <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80022fa:	8a1a      	ldrh	r2, [r3, #16]
 80022fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002300:	428a      	cmp	r2, r1
 8002302:	d05d      	beq.n	80023c0 <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8002304:	2802      	cmp	r0, #2
 8002306:	d00c      	beq.n	8002322 <Setup0_Process+0xa6>
 8002308:	b15a      	cbz	r2, 8002322 <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 800230a:	f993 1000 	ldrsb.w	r1, [r3]
 800230e:	2900      	cmp	r1, #0
 8002310:	f2c0 80b5 	blt.w	800247e <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8002314:	2203      	movs	r2, #3
 8002316:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8002318:	4b7b      	ldr	r3, [pc, #492]	; (8002508 <Setup0_Process+0x28c>)
 800231a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800231e:	801a      	strh	r2, [r3, #0]
 8002320:	e001      	b.n	8002326 <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8002322:	2208      	movs	r2, #8
 8002324:	721a      	strb	r2, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8002326:	4b79      	ldr	r3, [pc, #484]	; (800250c <Setup0_Process+0x290>)
 8002328:	4798      	blx	r3
}
 800232a:	b003      	add	sp, #12
 800232c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800232e:	88e3      	ldrh	r3, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8002330:	2201      	movs	r2, #1
 8002332:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1ce      	bne.n	80022d6 <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002338:	7823      	ldrb	r3, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 800233a:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800233c:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8002340:	d141      	bne.n	80023c6 <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8002342:	2e09      	cmp	r6, #9
 8002344:	f000 8108 	beq.w	8002558 <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8002348:	2e05      	cmp	r6, #5
 800234a:	f000 80bf 	beq.w	80024cc <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 800234e:	2e03      	cmp	r6, #3
 8002350:	f000 80f0 	beq.w	8002534 <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8002354:	2e01      	cmp	r6, #1
 8002356:	d13b      	bne.n	80023d0 <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8002358:	78e3      	ldrb	r3, [r4, #3]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d138      	bne.n	80023d0 <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 800235e:	88a3      	ldrh	r3, [r4, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d135      	bne.n	80023d0 <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 8002364:	7a63      	ldrb	r3, [r4, #9]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d02f      	beq.n	80023d0 <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 8002370:	4b67      	ldr	r3, [pc, #412]	; (8002510 <Setup0_Process+0x294>)
 8002372:	4798      	blx	r3
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8002374:	bb60      	cbnz	r0, 80023d0 <Setup0_Process+0x154>
 8002376:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8002378:	f645 4350 	movw	r3, #23632	; 0x5c50
 800237c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8002386:	b292      	uxth	r2, r2
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8002388:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800238c:	18d3      	adds	r3, r2, r3
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	4a5f      	ldr	r2, [pc, #380]	; (8002514 <Setup0_Process+0x298>)
 8002396:	2306      	movs	r3, #6
 8002398:	2130      	movs	r1, #48	; 0x30
 800239a:	8011      	strh	r1, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800239c:	7223      	strb	r3, [r4, #8]
 800239e:	e7c2      	b.n	8002326 <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 80023a0:	2908      	cmp	r1, #8
 80023a2:	d148      	bne.n	8002436 <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80023a4:	7823      	ldrb	r3, [r4, #0]
 80023a6:	065b      	lsls	r3, r3, #25
 80023a8:	d19f      	bne.n	80022ea <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 80023aa:	4b5b      	ldr	r3, [pc, #364]	; (8002518 <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 80023ac:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80023ae:	61a3      	str	r3, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 80023b0:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 80023b2:	4798      	blx	r3
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023ba:	8a1a      	ldrh	r2, [r3, #16]
 80023bc:	428a      	cmp	r2, r1
 80023be:	d1a3      	bne.n	8002308 <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 80023c0:	2209      	movs	r2, #9
 80023c2:	721a      	strb	r2, [r3, #8]
 80023c4:	e7af      	b.n	8002326 <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d071      	beq.n	80024ae <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	f000 808d 	beq.w	80024ea <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 80023d0:	4b4c      	ldr	r3, [pc, #304]	; (8002504 <Setup0_Process+0x288>)
 80023d2:	4630      	mov	r0, r6
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 80023da:	2803      	cmp	r0, #3
 80023dc:	f000 80c5 	beq.w	800256a <Setup0_Process+0x2ee>
 80023e0:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 80023e2:	2800      	cmp	r0, #0
 80023e4:	d0c8      	beq.n	8002378 <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 80023e6:	2308      	movs	r3, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80023e8:	7223      	strb	r3, [r4, #8]
 80023ea:	e79c      	b.n	8002326 <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80023ec:	7823      	ldrb	r3, [r4, #0]
 80023ee:	065b      	lsls	r3, r3, #25
 80023f0:	f47f af7b 	bne.w	80022ea <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 80023f4:	78a3      	ldrb	r3, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80023f6:	4e43      	ldr	r6, [pc, #268]	; (8002504 <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	f000 80b0 	beq.w	800255e <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d05e      	beq.n	80024c0 <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8002402:	2b03      	cmp	r3, #3
 8002404:	f47f af72 	bne.w	80022ec <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8002408:	6833      	ldr	r3, [r6, #0]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1cd      	bne.n	80023ac <Setup0_Process+0x130>
 8002410:	e76c      	b.n	80022ec <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8002412:	6863      	ldr	r3, [r4, #4]
 8002414:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002418:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800241c:	f47f af65 	bne.w	80022ea <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002420:	7823      	ldrb	r3, [r4, #0]
 8002422:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8002426:	f040 80a4 	bne.w	8002572 <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 800242a:	88a3      	ldrh	r3, [r4, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	f47f af5c 	bne.w	80022ea <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8002432:	4b3a      	ldr	r3, [pc, #232]	; (800251c <Setup0_Process+0x2a0>)
 8002434:	e7ba      	b.n	80023ac <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8002436:	290a      	cmp	r1, #10
 8002438:	f47f af57 	bne.w	80022ea <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800243c:	7823      	ldrb	r3, [r4, #0]
 800243e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002442:	2b01      	cmp	r3, #1
 8002444:	f47f af51 	bne.w	80022ea <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8002448:	7aa3      	ldrb	r3, [r4, #10]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f43f af4d 	beq.w	80022ea <Setup0_Process+0x6e>
 8002450:	8863      	ldrh	r3, [r4, #2]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f47f af49 	bne.w	80022ea <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8002458:	6862      	ldr	r2, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800245a:	4e2a      	ldr	r6, [pc, #168]	; (8002504 <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800245c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002460:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002464:	f47f af42 	bne.w	80022ec <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8002468:	6832      	ldr	r2, [r6, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	7960      	ldrb	r0, [r4, #5]
 800246e:	6993      	ldr	r3, [r2, #24]
 8002470:	4798      	blx	r3
 8002472:	2800      	cmp	r0, #0
 8002474:	f040 80be 	bne.w	80025f4 <Setup0_Process+0x378>
 8002478:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 800247a:	4b29      	ldr	r3, [pc, #164]	; (8002520 <Setup0_Process+0x2a4>)
 800247c:	e796      	b.n	80023ac <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 800247e:	88d9      	ldrh	r1, [r3, #6]
 8002480:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8002482:	9801      	ldr	r0, [sp, #4]
 8002484:	4282      	cmp	r2, r0
 8002486:	d817      	bhi.n	80024b8 <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8002488:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800248a:	4e1e      	ldr	r6, [pc, #120]	; (8002504 <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800248c:	d208      	bcs.n	80024a0 <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800248e:	6831      	ldr	r1, [r6, #0]
 8002490:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 8002494:	428a      	cmp	r2, r1
 8002496:	f080 8095 	bcs.w	80025c4 <Setup0_Process+0x348>
      {
        Data_Mul_MaxPacketSize = FALSE;
 800249a:	4a22      	ldr	r2, [pc, #136]	; (8002524 <Setup0_Process+0x2a8>)
 800249c:	2100      	movs	r1, #0
 800249e:	7011      	strb	r1, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 80024a0:	6832      	ldr	r2, [r6, #0]
 80024a2:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80024a6:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 80024a8:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <Setup0_Process+0x2ac>)
 80024aa:	4798      	blx	r3
 80024ac:	e73b      	b.n	8002326 <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 80024ae:	2e0b      	cmp	r6, #11
 80024b0:	d18e      	bne.n	80023d0 <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 80024b2:	4b1e      	ldr	r3, [pc, #120]	; (800252c <Setup0_Process+0x2b0>)
 80024b4:	4798      	blx	r3
 80024b6:	e75d      	b.n	8002374 <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 80024b8:	9a01      	ldr	r2, [sp, #4]
 80024ba:	4e12      	ldr	r6, [pc, #72]	; (8002504 <Setup0_Process+0x288>)
 80024bc:	821a      	strh	r2, [r3, #16]
 80024be:	e7ef      	b.n	80024a0 <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 80024c0:	6833      	ldr	r3, [r6, #0]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f47f af71 	bne.w	80023ac <Setup0_Process+0x130>
 80024ca:	e70f      	b.n	80022ec <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 80024cc:	f994 3003 	ldrsb.w	r3, [r4, #3]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db88      	blt.n	80023e6 <Setup0_Process+0x16a>
 80024d4:	78a3      	ldrb	r3, [r4, #2]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d185      	bne.n	80023e6 <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 80024da:	88a3      	ldrh	r3, [r4, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d182      	bne.n	80023e6 <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 80024e0:	7aa3      	ldrb	r3, [r4, #10]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f43f af48 	beq.w	8002378 <Setup0_Process+0xfc>
 80024e8:	e77d      	b.n	80023e6 <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 80024ea:	2e01      	cmp	r6, #1
 80024ec:	f43f af40 	beq.w	8002370 <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 80024f0:	2e03      	cmp	r6, #3
 80024f2:	f47f af6d 	bne.w	80023d0 <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <Setup0_Process+0x2b4>)
 80024f8:	4798      	blx	r3
 80024fa:	e73b      	b.n	8002374 <Setup0_Process+0xf8>
 80024fc:	20001040 	.word	0x20001040
 8002500:	080029d1 	.word	0x080029d1
 8002504:	20001018 	.word	0x20001018
 8002508:	20001046 	.word	0x20001046
 800250c:	08002139 	.word	0x08002139
 8002510:	08001f8d 	.word	0x08001f8d
 8002514:	20001048 	.word	0x20001048
 8002518:	08001d49 	.word	0x08001d49
 800251c:	08001d99 	.word	0x08001d99
 8002520:	08001d71 	.word	0x08001d71
 8002524:	200002e8 	.word	0x200002e8
 8002528:	08001e31 	.word	0x08001e31
 800252c:	08001f3d 	.word	0x08001f3d
 8002530:	08002085 	.word	0x08002085
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8002534:	78e3      	ldrb	r3, [r4, #3]
 8002536:	2b01      	cmp	r3, #1
 8002538:	f47f af4a 	bne.w	80023d0 <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 800253c:	88a3      	ldrh	r3, [r4, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f47f af46 	bne.w	80023d0 <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8002544:	7a62      	ldrb	r2, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8002546:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <Setup0_Process+0x380>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8002548:	f042 0220 	orr.w	r2, r2, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 800254c:	681b      	ldr	r3, [r3, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 800254e:	7262      	strb	r2, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4798      	blx	r3
 8002554:	682c      	ldr	r4, [r5, #0]
 8002556:	e70f      	b.n	8002378 <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 8002558:	4b29      	ldr	r3, [pc, #164]	; (8002600 <Setup0_Process+0x384>)
 800255a:	4798      	blx	r3
 800255c:	e70a      	b.n	8002374 <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800255e:	6833      	ldr	r3, [r6, #0]
 8002560:	69db      	ldr	r3, [r3, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8002562:	2b00      	cmp	r3, #0
 8002564:	f47f af22 	bne.w	80023ac <Setup0_Process+0x130>
 8002568:	e6c0      	b.n	80022ec <Setup0_Process+0x70>
 800256a:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 800256c:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800256e:	7223      	strb	r3, [r4, #8]
 8002570:	e6d9      	b.n	8002326 <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002572:	2b01      	cmp	r3, #1
 8002574:	d031      	beq.n	80025da <Setup0_Process+0x35e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002576:	2b02      	cmp	r3, #2
 8002578:	f47f aeb7 	bne.w	80022ea <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800257c:	7963      	ldrb	r3, [r4, #5]
 800257e:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002582:	0090      	lsls	r0, r2, #2
 8002584:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8002588:	061e      	lsls	r6, r3, #24
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800258a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800258e:	bf56      	itet	pl
 8002590:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002592:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8002594:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8002598:	481a      	ldr	r0, [pc, #104]	; (8002604 <Setup0_Process+0x388>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800259a:	bf48      	it	mi
 800259c:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80025a0:	7800      	ldrb	r0, [r0, #0]
 80025a2:	4282      	cmp	r2, r0
 80025a4:	f4bf aea1 	bcs.w	80022ea <Setup0_Process+0x6e>
 80025a8:	f013 0f70 	tst.w	r3, #112	; 0x70
 80025ac:	bf14      	ite	ne
 80025ae:	2300      	movne	r3, #0
 80025b0:	2301      	moveq	r3, #1
          && (Status != 0))
 80025b2:	2e00      	cmp	r6, #0
 80025b4:	bf0c      	ite	eq
 80025b6:	2600      	moveq	r6, #0
 80025b8:	f003 0601 	andne.w	r6, r3, #1
 80025bc:	2e00      	cmp	r6, #0
 80025be:	f47f af38 	bne.w	8002432 <Setup0_Process+0x1b6>
 80025c2:	e692      	b.n	80022ea <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 80025c4:	fb92 f0f1 	sdiv	r0, r2, r1
 80025c8:	fb01 2210 	mls	r2, r1, r0, r2
 80025cc:	2a00      	cmp	r2, #0
 80025ce:	f47f af67 	bne.w	80024a0 <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 80025d2:	4a0d      	ldr	r2, [pc, #52]	; (8002608 <Setup0_Process+0x38c>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	7011      	strb	r1, [r2, #0]
 80025d8:	e762      	b.n	80024a0 <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 80025da:	4e0c      	ldr	r6, [pc, #48]	; (800260c <Setup0_Process+0x390>)
 80025dc:	7960      	ldrb	r0, [r4, #5]
 80025de:	6833      	ldr	r3, [r6, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	4798      	blx	r3
 80025e4:	b930      	cbnz	r0, 80025f4 <Setup0_Process+0x378>
          && (pInformation->Current_Configuration != 0))
 80025e6:	682c      	ldr	r4, [r5, #0]
 80025e8:	7aa3      	ldrb	r3, [r4, #10]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f47f af21 	bne.w	8002432 <Setup0_Process+0x1b6>
 80025f0:	7861      	ldrb	r1, [r4, #1]
 80025f2:	e67b      	b.n	80022ec <Setup0_Process+0x70>
 80025f4:	682b      	ldr	r3, [r5, #0]
 80025f6:	7859      	ldrb	r1, [r3, #1]
 80025f8:	e678      	b.n	80022ec <Setup0_Process+0x70>
 80025fa:	bf00      	nop
 80025fc:	2000103c 	.word	0x2000103c
 8002600:	08001f01 	.word	0x08001f01
 8002604:	200000e0 	.word	0x200000e0
 8002608:	200002e8 	.word	0x200002e8
 800260c:	20001018 	.word	0x20001018

08002610 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8002610:	b470      	push	{r4, r5, r6}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <SetDeviceAddress+0x40>)
 8002614:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002616:	b196      	cbz	r6, 800263e <SetDeviceAddress+0x2e>
 8002618:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 800261c:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002620:	2300      	movs	r3, #0
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002622:	6825      	ldr	r5, [r4, #0]
 8002624:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8002628:	f640 720f 	movw	r2, #3855	; 0xf0f
 800262c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002630:	402a      	ands	r2, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002632:	3301      	adds	r3, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002634:	430a      	orrs	r2, r1
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002636:	429e      	cmp	r6, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002638:	f844 2b04 	str.w	r2, [r4], #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800263c:	d8f1      	bhi.n	8002622 <SetDeviceAddress+0x12>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 800263e:	f645 434c 	movw	r3, #23628	; 0x5c4c
 8002642:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002646:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800264a:	6018      	str	r0, [r3, #0]
}
 800264c:	bc70      	pop	{r4, r5, r6}
 800264e:	4770      	bx	lr
 8002650:	200000e0 	.word	0x200000e0

08002654 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8002654:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 8002656:	4c14      	ldr	r4, [pc, #80]	; (80026a8 <In0_Process+0x54>)
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800265c:	2a02      	cmp	r2, #2
 800265e:	bf18      	it	ne
 8002660:	2a04      	cmpne	r2, #4
 8002662:	d010      	beq.n	8002686 <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 8002664:	2a06      	cmp	r2, #6
 8002666:	d004      	beq.n	8002672 <In0_Process+0x1e>
 8002668:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800266a:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 800266c:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <In0_Process+0x58>)
 800266e:	4798      	blx	r3
}
 8002670:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8002672:	785a      	ldrb	r2, [r3, #1]
 8002674:	2a05      	cmp	r2, #5
 8002676:	d00b      	beq.n	8002690 <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 8002678:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <In0_Process+0x5c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	4798      	blx	r3
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	2208      	movs	r2, #8
 8002684:	e7f1      	b.n	800266a <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <In0_Process+0x60>)
 8002688:	4798      	blx	r3
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	7a1a      	ldrb	r2, [r3, #8]
 800268e:	e7ec      	b.n	800266a <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8002690:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8002692:	0652      	lsls	r2, r2, #25
 8002694:	d1f0      	bne.n	8002678 <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8002696:	78d8      	ldrb	r0, [r3, #3]
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <In0_Process+0x64>)
 800269a:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 800269c:	4b07      	ldr	r3, [pc, #28]	; (80026bc <In0_Process+0x68>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4798      	blx	r3
 80026a4:	e7e8      	b.n	8002678 <In0_Process+0x24>
 80026a6:	bf00      	nop
 80026a8:	20001040 	.word	0x20001040
 80026ac:	08002139 	.word	0x08002139
 80026b0:	20001018 	.word	0x20001018
 80026b4:	08001e31 	.word	0x08001e31
 80026b8:	08002611 	.word	0x08002611
 80026bc:	2000103c 	.word	0x2000103c

080026c0 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop

080026c4 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 80026c4:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 80026c6:	f241 0220 	movw	r2, #4128	; 0x1020
 80026ca:	f241 0440 	movw	r4, #4160	; 0x1040
 80026ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80026d2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80026d6:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 80026d8:	2402      	movs	r4, #2
 80026da:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 80026dc:	f241 0018 	movw	r0, #4120	; 0x1018
 80026e0:	f240 035c 	movw	r3, #92	; 0x5c
  pUser_Standard_Requests = &User_Standard_Requests;
 80026e4:	f241 013c 	movw	r1, #4156	; 0x103c
 80026e8:	f240 028c 	movw	r2, #140	; 0x8c
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 80026ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 80026f4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80026f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 80026fc:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 80026fe:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4798      	blx	r3
 8002704:	bd10      	pop	{r4, pc}
 8002706:	bf00      	nop

08002708 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8002708:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800270c:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8002710:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8002712:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8002714:	1053      	asrs	r3, r2, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002716:	b410      	push	{r4}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002718:	d00d      	beq.n	8002736 <UserToPMABufferCopy+0x2e>
 800271a:	1d0a      	adds	r2, r1, #4
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 800271c:	3002      	adds	r0, #2
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800271e:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8002722:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8002726:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002728:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 800272c:	f822 1c04 	strh.w	r1, [r2, #-4]
 8002730:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002732:	3b01      	subs	r3, #1
 8002734:	d1f3      	bne.n	800271e <UserToPMABufferCopy+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002736:	bc10      	pop	{r4}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop

0800273c <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800273c:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8002740:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8002744:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8002746:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8002748:	1053      	asrs	r3, r2, #1
 800274a:	d008      	beq.n	800275e <PMAToUserBufferCopy+0x22>
*                  - wPMABufAddr = address into PMA.
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 800274c:	3002      	adds	r0, #2
 800274e:	1f0a      	subs	r2, r1, #4
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002750:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8002754:	f820 1c02 	strh.w	r1, [r0, #-2]
 8002758:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800275a:	3b01      	subs	r3, #1
 800275c:	d1f8      	bne.n	8002750 <PMAToUserBufferCopy+0x14>
 800275e:	4770      	bx	lr

08002760 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8002760:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8002764:	f645 4250 	movw	r2, #23632	; 0x5c50
 8002768:	4003      	ands	r3, r0
 800276a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop

08002774 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8002774:	0080      	lsls	r0, r0, #2
 8002776:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800277a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800277e:	6810      	ldr	r0, [r2, #0]
 8002780:	f648 138f 	movw	r3, #35215	; 0x898f
 8002784:	4003      	ands	r3, r0
 8002786:	4319      	orrs	r1, r3
 8002788:	6011      	str	r1, [r2, #0]
 800278a:	4770      	bx	lr

0800278c <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800278c:	0080      	lsls	r0, r0, #2
 800278e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8002792:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 8002796:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 8002798:	f001 0010 	and.w	r0, r1, #16
 800279c:	6814      	ldr	r4, [r2, #0]
 800279e:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 80027a2:	b280      	uxth	r0, r0
 80027a4:	4023      	ands	r3, r4
 80027a6:	b968      	cbnz	r0, 80027c4 <SetEPTxStatus+0x38>
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	f001 0120 	and.w	r1, r1, #32
 80027ae:	b289      	uxth	r1, r1
 80027b0:	b109      	cbz	r1, 80027b6 <SetEPTxStatus+0x2a>
 80027b2:	f083 0320 	eor.w	r3, r3, #32
 80027b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bc10      	pop	{r4}
 80027c2:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 80027c4:	f083 0310 	eor.w	r3, r3, #16
 80027c8:	e7ef      	b.n	80027aa <SetEPTxStatus+0x1e>
 80027ca:	bf00      	nop

080027cc <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 80027cc:	0080      	lsls	r0, r0, #2
 80027ce:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80027d2:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 80027d6:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 80027d8:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 80027dc:	6814      	ldr	r4, [r2, #0]
 80027de:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80027e2:	b280      	uxth	r0, r0
 80027e4:	4023      	ands	r3, r4
 80027e6:	b968      	cbnz	r0, 8002804 <SetEPRxStatus+0x38>
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80027ee:	b289      	uxth	r1, r1
 80027f0:	b109      	cbz	r1, 80027f6 <SetEPRxStatus+0x2a>
 80027f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027fe:	6013      	str	r3, [r2, #0]
}
 8002800:	bc10      	pop	{r4}
 8002802:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8002804:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002808:	e7ef      	b.n	80027ea <SetEPRxStatus+0x1e>
 800280a:	bf00      	nop

0800280c <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 800280c:	0080      	lsls	r0, r0, #2
 800280e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8002812:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8002816:	6811      	ldr	r1, [r2, #0]
 8002818:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 800281c:	400b      	ands	r3, r1
 800281e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop

08002830 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8002830:	0080      	lsls	r0, r0, #2
 8002832:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8002836:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800283a:	6811      	ldr	r1, [r2, #0]
 800283c:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8002840:	400b      	ands	r3, r1
 8002842:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800284a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop

08002854 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8002854:	0080      	lsls	r0, r0, #2
 8002856:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800285a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800285e:	6811      	ldr	r1, [r2, #0]
 8002860:	f640 630f 	movw	r3, #3599	; 0xe0f
 8002864:	400b      	ands	r3, r1
 8002866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800286a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop

08002874 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8002874:	0080      	lsls	r0, r0, #2
 8002876:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800287a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	0451      	lsls	r1, r2, #17
 8002882:	d508      	bpl.n	8002896 <ClearDTOG_RX+0x22>
 8002884:	6819      	ldr	r1, [r3, #0]
 8002886:	f640 720f 	movw	r2, #3855	; 0xf0f
 800288a:	400a      	ands	r2, r1
 800288c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002890:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	4770      	bx	lr

08002898 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8002898:	0080      	lsls	r0, r0, #2
 800289a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800289e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	0650      	lsls	r0, r2, #25
 80028a6:	d508      	bpl.n	80028ba <ClearDTOG_TX+0x22>
 80028a8:	6819      	ldr	r1, [r3, #0]
 80028aa:	f640 720f 	movw	r2, #3855	; 0xf0f
 80028ae:	400a      	ands	r2, r1
 80028b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028b4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	4770      	bx	lr

080028bc <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 80028bc:	f645 4350 	movw	r3, #23632	; 0x5c50
 80028c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80028ca:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 80028cc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80028d0:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 80028d4:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80028d8:	0052      	lsls	r2, r2, #1
 80028da:	400b      	ands	r3, r1
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	4770      	bx	lr

080028e0 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 80028e0:	f645 4350 	movw	r3, #23632	; 0x5c50
 80028e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80028ee:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 80028f0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80028f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028f8:	18c3      	adds	r3, r0, r3
 80028fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	400a      	ands	r2, r1
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop

08002908 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8002908:	f645 4350 	movw	r3, #23632	; 0x5c50
 800290c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002910:	681b      	ldr	r3, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002912:	b29b      	uxth	r3, r3
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8002914:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002918:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 800291c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002920:	005b      	lsls	r3, r3, #1
}
 8002922:	8818      	ldrh	r0, [r3, #0]
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop

08002928 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8002928:	f645 4350 	movw	r3, #23632	; 0x5c50
 800292c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002936:	b292      	uxth	r2, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8002938:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800293c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002940:	18c3      	adds	r3, r0, r3
 8002942:	005b      	lsls	r3, r3, #1
}
 8002944:	8818      	ldrh	r0, [r3, #0]
 8002946:	4770      	bx	lr

08002948 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8002948:	f645 4350 	movw	r3, #23632	; 0x5c50
 800294c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002956:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8002958:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800295c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002960:	18c3      	adds	r3, r0, r3
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	6019      	str	r1, [r3, #0]
 8002966:	4770      	bx	lr

08002968 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8002968:	f645 4350 	movw	r3, #23632	; 0x5c50
 800296c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002976:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8002978:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800297c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002980:	18c3      	adds	r3, r0, r3
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	293e      	cmp	r1, #62	; 0x3e
 8002986:	d909      	bls.n	800299c <SetEPRxCount+0x34>
 8002988:	094a      	lsrs	r2, r1, #5
 800298a:	06c9      	lsls	r1, r1, #27
 800298c:	d101      	bne.n	8002992 <SetEPRxCount+0x2a>
 800298e:	3a01      	subs	r2, #1
 8002990:	b292      	uxth	r2, r2
 8002992:	0292      	lsls	r2, r2, #10
 8002994:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	4770      	bx	lr
 800299c:	084a      	lsrs	r2, r1, #1
 800299e:	07c8      	lsls	r0, r1, #31
 80029a0:	bf48      	it	mi
 80029a2:	3201      	addmi	r2, #1
 80029a4:	0292      	lsls	r2, r2, #10
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop

080029ac <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 80029ac:	f645 4350 	movw	r3, #23632	; 0x5c50
 80029b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80029ba:	b292      	uxth	r2, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 80029bc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80029c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029c4:	18c3      	adds	r3, r0, r3
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	6818      	ldr	r0, [r3, #0]
}
 80029ca:	0580      	lsls	r0, r0, #22
 80029cc:	0d80      	lsrs	r0, r0, #22
 80029ce:	4770      	bx	lr

080029d0 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 80029d0:	b2c3      	uxtb	r3, r0
 80029d2:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 80029d4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop

080029dc <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 80029dc:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 80029de:	f241 0344 	movw	r3, #4164	; 0x1044
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 80029e2:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 80029e6:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 80029ea:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 80029f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 80029f8:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 80029fc:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 80029fe:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8002a00:	6011      	str	r1, [r2, #0]
  return 0;
}
 8002a02:	bc10      	pop	{r4}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop

08002a08 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8002a08:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8002a0a:	f642 13ad 	movw	r3, #10669	; 0x29ad
 8002a0e:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8002a12:	4628      	mov	r0, r5
 8002a14:	f6c0 0300 	movt	r3, #2048	; 0x800
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8002a18:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8002a1a:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8002a1c:	f642 1329 	movw	r3, #10537	; 0x2929
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8002a20:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8002a22:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002a26:	4628      	mov	r0, r5
 8002a28:	4798      	blx	r3
 8002a2a:	f242 733d 	movw	r3, #10045	; 0x273d
 8002a2e:	4601      	mov	r1, r0
 8002a30:	4622      	mov	r2, r4
 8002a32:	4630      	mov	r0, r6
 8002a34:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002a38:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	bd70      	pop	{r4, r5, r6, pc}
 8002a3e:	bf00      	nop

08002a40 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8002a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a44:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8002bf4 <CTR_LP+0x1b4>
 8002a48:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002a4a:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8002a4e:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8002a50:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8002bf8 <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8002a54:	4d62      	ldr	r5, [pc, #392]	; (8002be0 <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8002a56:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002a5a:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 8002a5e:	46d0      	mov	r8, sl
 8002a60:	f8db 3000 	ldr.w	r3, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8002a64:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	041b      	lsls	r3, r3, #16
 8002a6c:	f8aa 2000 	strh.w	r2, [sl]
 8002a70:	f140 80ab 	bpl.w	8002bca <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8002a74:	f8b8 2000 	ldrh.w	r2, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8002a78:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8002a7c:	f002 020f 	and.w	r2, r2, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8002a80:	0090      	lsls	r0, r2, #2
 8002a82:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 8002a86:	4e57      	ldr	r6, [pc, #348]	; (8002be4 <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8002a88:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8002a8c:	4f54      	ldr	r7, [pc, #336]	; (8002be0 <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 8002a8e:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8002a90:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8002a94:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 8002a98:	2a00      	cmp	r2, #0
 8002a9a:	d133      	bne.n	8002b04 <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8002a9c:	6823      	ldr	r3, [r4, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8002aa2:	882b      	ldrh	r3, [r5, #0]
 8002aa4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002aa8:	8033      	strh	r3, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 8002aaa:	882b      	ldrh	r3, [r5, #0]
 8002aac:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002ab0:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	4019      	ands	r1, r3
 8002ab6:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8002aba:	f081 0120 	eor.w	r1, r1, #32
 8002abe:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002ac2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002ac6:	6021      	str	r1, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8002ac8:	f8b8 3000 	ldrh.w	r3, [r8]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d049      	beq.n	8002b6a <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 8002ade:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d171      	bne.n	8002bd0 <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8002aec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002af0:	b21b      	sxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	dab4      	bge.n	8002a60 <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 8002af6:	6822      	ldr	r2, [r4, #0]
 8002af8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002afc:	4013      	ands	r3, r2
 8002afe:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8002b00:	4b39      	ldr	r3, [pc, #228]	; (8002be8 <CTR_LP+0x1a8>)
 8002b02:	e038      	b.n	8002b76 <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8002b04:	6802      	ldr	r2, [r0, #0]
 8002b06:	b292      	uxth	r2, r2
 8002b08:	f8ad 2006 	strh.w	r2, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8002b0c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002b10:	b212      	sxth	r2, r2
 8002b12:	2a00      	cmp	r2, #0
 8002b14:	db1b      	blt.n	8002b4e <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8002b16:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d09d      	beq.n	8002a60 <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8002b24:	f899 1000 	ldrb.w	r1, [r9]
 8002b28:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8002b2c:	008a      	lsls	r2, r1, #2
 8002b2e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002b32:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8002b36:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8002b38:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8002b3a:	4003      	ands	r3, r0
 8002b3c:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8002b3e:	f240 021c 	movw	r2, #28
 8002b42:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002b46:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002b4a:	4798      	blx	r3
 8002b4c:	e788      	b.n	8002a60 <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8002b4e:	6801      	ldr	r1, [r0, #0]
 8002b50:	f640 728f 	movw	r2, #3983	; 0xf8f
 8002b54:	400a      	ands	r2, r1
 8002b56:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8002b58:	f240 0238 	movw	r2, #56	; 0x38
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b66:	4798      	blx	r3
 8002b68:	e7d5      	b.n	8002b16 <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8002b6a:	6822      	ldr	r2, [r4, #0]
 8002b6c:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8002b70:	4013      	ands	r3, r2
 8002b72:	6023      	str	r3, [r4, #0]
        In0_Process();
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <CTR_LP+0x1ac>)
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 8002b76:	4798      	blx	r3
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8002b78:	6821      	ldr	r1, [r4, #0]
 8002b7a:	883a      	ldrh	r2, [r7, #0]
 8002b7c:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 8002b80:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b84:	b292      	uxth	r2, r2
 8002b86:	400b      	ands	r3, r1
 8002b88:	b10a      	cbz	r2, 8002b8e <CTR_LP+0x14e>
 8002b8a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002b8e:	883a      	ldrh	r2, [r7, #0]
 8002b90:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b94:	b292      	uxth	r2, r2
 8002b96:	b10a      	cbz	r2, 8002b9c <CTR_LP+0x15c>
 8002b98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b9c:	8832      	ldrh	r2, [r6, #0]
 8002b9e:	f002 0210 	and.w	r2, r2, #16
 8002ba2:	b292      	uxth	r2, r2
 8002ba4:	b10a      	cbz	r2, 8002baa <CTR_LP+0x16a>
 8002ba6:	f083 0310 	eor.w	r3, r3, #16
 8002baa:	8832      	ldrh	r2, [r6, #0]
 8002bac:	f002 0220 	and.w	r2, r2, #32
 8002bb0:	b292      	uxth	r2, r2
 8002bb2:	b10a      	cbz	r2, 8002bb8 <CTR_LP+0x178>
 8002bb4:	f083 0320 	eor.w	r3, r3, #32
 8002bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bbc:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8002bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002bc8:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8002bca:	b003      	add	sp, #12
 8002bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8002bd0:	6822      	ldr	r2, [r4, #0]
 8002bd2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <CTR_LP+0x1b0>)
 8002bdc:	e7cb      	b.n	8002b76 <CTR_LP+0x136>
 8002bde:	bf00      	nop
 8002be0:	20001046 	.word	0x20001046
 8002be4:	20001048 	.word	0x20001048
 8002be8:	08002181 	.word	0x08002181
 8002bec:	08002655 	.word	0x08002655
 8002bf0:	0800227d 	.word	0x0800227d
 8002bf4:	200007e8 	.word	0x200007e8
 8002bf8:	2000101c 	.word	0x2000101c
 8002bfc:	206d7750 	.word	0x206d7750
 8002c00:	000a6425 	.word	0x000a6425
 8002c04:	78457a65 	.word	0x78457a65
 8002c08:	726f6c70 	.word	0x726f6c70
 8002c0c:	000a7265 	.word	0x000a7265

08002c10 <Virtual_Com_Port_StringVendor>:
 8002c10:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8002c20:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8002c30:	00630069 00000073                       i.c.s...

08002c38 <Virtual_Com_Port_DeviceDescriptor>:
 8002c38:	02000112 40000002 57400483 02010200     .......@..@W....
 8002c48:	00000103                                ....

08002c4c <Virtual_Com_Port_StringLangID>:
 8002c4c:	04090304                                ....

08002c50 <Virtual_Com_Port_StringProduct>:
 8002c50:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 8002c60:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8002c70:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 8002c80:	00000020                                 ...

08002c84 <Virtual_Com_Port_ConfigDescriptor>:
 8002c84:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8002c94:	24050001 05011000 01000124 02022404     ...$....$....$..
 8002ca4:	00062405 82050701 ff000803 00010409     .$..............
 8002cb4:	00000a02 03050700 00004002 02810507     .........@......
 8002cc4:	00000040                                @...
