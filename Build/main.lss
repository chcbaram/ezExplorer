
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000dfa4  08000000  08000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000009d0  20000000  0800dfa4  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001550  20000a00  0800ea00  00018a00  2**9
                  ALLOC
  3 ._usrstack    00000100  20001f50  0800ff50  00018a00  2**0
                  ALLOC
  4 .debug_info   0002863b  00000000  00000000  000189d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00008ad8  00000000  00000000  0004100b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    0001c3cd  00000000  00000000  00049ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00001160  00000000  00000000  00065eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 000018f8  00000000  00000000  00067010  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000d68f  00000000  00000000  00068908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000504e  00000000  00000000  00075f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  0007afe5  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000035  00000000  00000000  0007aff6  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00002b1c  00000000  00000000  0007b02c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 d9 aa 00 08                             .P. ....

08000008 <sscanf>:
 8000008:	b40e      	push	{r1, r2, r3}
 800000a:	b530      	push	{r4, r5, lr}
 800000c:	b09c      	sub	sp, #112	; 0x70
 800000e:	ad1f      	add	r5, sp, #124	; 0x7c
 8000010:	cd08      	ldmia	r5!, {r3}
 8000012:	2381      	movs	r3, #129	; 0x81
 8000014:	ac02      	add	r4, sp, #8
 8000016:	009b      	lsls	r3, r3, #2
 8000018:	81a3      	strh	r3, [r4, #12]
 800001a:	9002      	str	r0, [sp, #8]
 800001c:	9006      	str	r0, [sp, #24]
 800001e:	f000 f8a3 	bl	8000168 <strlen>
 8000022:	4b0b      	ldr	r3, [pc, #44]	; (8000050 <sscanf+0x48>)
 8000024:	6223      	str	r3, [r4, #32]
 8000026:	2300      	movs	r3, #0
 8000028:	6323      	str	r3, [r4, #48]	; 0x30
 800002a:	6463      	str	r3, [r4, #68]	; 0x44
 800002c:	2301      	movs	r3, #1
 800002e:	425b      	negs	r3, r3
 8000030:	81e3      	strh	r3, [r4, #14]
 8000032:	4b08      	ldr	r3, [pc, #32]	; (8000054 <sscanf+0x4c>)
 8000034:	6060      	str	r0, [r4, #4]
 8000036:	6160      	str	r0, [r4, #20]
 8000038:	1c21      	adds	r1, r4, #0
 800003a:	6818      	ldr	r0, [r3, #0]
 800003c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800003e:	1c2b      	adds	r3, r5, #0
 8000040:	9501      	str	r5, [sp, #4]
 8000042:	f000 f941 	bl	80002c8 <__ssvfscanf_r>
 8000046:	b01c      	add	sp, #112	; 0x70
 8000048:	bc30      	pop	{r4, r5}
 800004a:	bc08      	pop	{r3}
 800004c:	b003      	add	sp, #12
 800004e:	4718      	bx	r3
 8000050:	080000d5 	.word	0x080000d5
 8000054:	200000e8 	.word	0x200000e8

08000058 <_sscanf_r>:
 8000058:	b40c      	push	{r2, r3}
 800005a:	b570      	push	{r4, r5, r6, lr}
 800005c:	b09c      	sub	sp, #112	; 0x70
 800005e:	ad20      	add	r5, sp, #128	; 0x80
 8000060:	cd08      	ldmia	r5!, {r3}
 8000062:	2381      	movs	r3, #129	; 0x81
 8000064:	ac02      	add	r4, sp, #8
 8000066:	1c06      	adds	r6, r0, #0
 8000068:	009b      	lsls	r3, r3, #2
 800006a:	1c08      	adds	r0, r1, #0
 800006c:	81a3      	strh	r3, [r4, #12]
 800006e:	9102      	str	r1, [sp, #8]
 8000070:	9106      	str	r1, [sp, #24]
 8000072:	f000 f879 	bl	8000168 <strlen>
 8000076:	4b0b      	ldr	r3, [pc, #44]	; (80000a4 <_sscanf_r+0x4c>)
 8000078:	6223      	str	r3, [r4, #32]
 800007a:	2300      	movs	r3, #0
 800007c:	6323      	str	r3, [r4, #48]	; 0x30
 800007e:	6463      	str	r3, [r4, #68]	; 0x44
 8000080:	2301      	movs	r3, #1
 8000082:	425b      	negs	r3, r3
 8000084:	6060      	str	r0, [r4, #4]
 8000086:	6160      	str	r0, [r4, #20]
 8000088:	81e3      	strh	r3, [r4, #14]
 800008a:	1c30      	adds	r0, r6, #0
 800008c:	1c21      	adds	r1, r4, #0
 800008e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8000090:	1c2b      	adds	r3, r5, #0
 8000092:	9501      	str	r5, [sp, #4]
 8000094:	f000 f918 	bl	80002c8 <__ssvfscanf_r>
 8000098:	b01c      	add	sp, #112	; 0x70
 800009a:	bc70      	pop	{r4, r5, r6}
 800009c:	bc08      	pop	{r3}
 800009e:	b002      	add	sp, #8
 80000a0:	4718      	bx	r3
 80000a2:	46c0      	nop			; (mov r8, r8)
 80000a4:	080000d5 	.word	0x080000d5

080000a8 <__sread>:
 80000a8:	b538      	push	{r3, r4, r5, lr}
 80000aa:	1c0c      	adds	r4, r1, #0
 80000ac:	250e      	movs	r5, #14
 80000ae:	5f49      	ldrsh	r1, [r1, r5]
 80000b0:	f001 f9ae 	bl	8001410 <_read_r>
 80000b4:	2800      	cmp	r0, #0
 80000b6:	db05      	blt.n	80000c4 <__sread+0x1c>
 80000b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80000ba:	1813      	adds	r3, r2, r0
 80000bc:	6523      	str	r3, [r4, #80]	; 0x50
 80000be:	bc38      	pop	{r3, r4, r5}
 80000c0:	bc02      	pop	{r1}
 80000c2:	4708      	bx	r1
 80000c4:	89a2      	ldrh	r2, [r4, #12]
 80000c6:	4b02      	ldr	r3, [pc, #8]	; (80000d0 <__sread+0x28>)
 80000c8:	4013      	ands	r3, r2
 80000ca:	81a3      	strh	r3, [r4, #12]
 80000cc:	e7f7      	b.n	80000be <__sread+0x16>
 80000ce:	46c0      	nop			; (mov r8, r8)
 80000d0:	ffffefff 	.word	0xffffefff

080000d4 <__seofread>:
 80000d4:	2000      	movs	r0, #0
 80000d6:	4770      	bx	lr

080000d8 <__swrite>:
 80000d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80000da:	1c0c      	adds	r4, r1, #0
 80000dc:	8989      	ldrh	r1, [r1, #12]
 80000de:	1c05      	adds	r5, r0, #0
 80000e0:	1c17      	adds	r7, r2, #0
 80000e2:	1c1e      	adds	r6, r3, #0
 80000e4:	05cb      	lsls	r3, r1, #23
 80000e6:	d506      	bpl.n	80000f6 <__swrite+0x1e>
 80000e8:	230e      	movs	r3, #14
 80000ea:	5ee1      	ldrsh	r1, [r4, r3]
 80000ec:	2200      	movs	r2, #0
 80000ee:	2302      	movs	r3, #2
 80000f0:	f001 f87a 	bl	80011e8 <_lseek_r>
 80000f4:	89a1      	ldrh	r1, [r4, #12]
 80000f6:	4b06      	ldr	r3, [pc, #24]	; (8000110 <__swrite+0x38>)
 80000f8:	4019      	ands	r1, r3
 80000fa:	81a1      	strh	r1, [r4, #12]
 80000fc:	1c28      	adds	r0, r5, #0
 80000fe:	230e      	movs	r3, #14
 8000100:	5ee1      	ldrsh	r1, [r4, r3]
 8000102:	1c3a      	adds	r2, r7, #0
 8000104:	1c33      	adds	r3, r6, #0
 8000106:	f000 ffe5 	bl	80010d4 <_write_r>
 800010a:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800010c:	bc02      	pop	{r1}
 800010e:	4708      	bx	r1
 8000110:	ffffefff 	.word	0xffffefff

08000114 <__sseek>:
 8000114:	b538      	push	{r3, r4, r5, lr}
 8000116:	1c0c      	adds	r4, r1, #0
 8000118:	250e      	movs	r5, #14
 800011a:	5f49      	ldrsh	r1, [r1, r5]
 800011c:	f001 f864 	bl	80011e8 <_lseek_r>
 8000120:	89a2      	ldrh	r2, [r4, #12]
 8000122:	1c43      	adds	r3, r0, #1
 8000124:	d007      	beq.n	8000136 <__sseek+0x22>
 8000126:	2380      	movs	r3, #128	; 0x80
 8000128:	015b      	lsls	r3, r3, #5
 800012a:	4313      	orrs	r3, r2
 800012c:	81a3      	strh	r3, [r4, #12]
 800012e:	6520      	str	r0, [r4, #80]	; 0x50
 8000130:	bc38      	pop	{r3, r4, r5}
 8000132:	bc02      	pop	{r1}
 8000134:	4708      	bx	r1
 8000136:	4b02      	ldr	r3, [pc, #8]	; (8000140 <__sseek+0x2c>)
 8000138:	4013      	ands	r3, r2
 800013a:	81a3      	strh	r3, [r4, #12]
 800013c:	e7f8      	b.n	8000130 <__sseek+0x1c>
 800013e:	46c0      	nop			; (mov r8, r8)
 8000140:	ffffefff 	.word	0xffffefff

08000144 <__sclose>:
 8000144:	b508      	push	{r3, lr}
 8000146:	230e      	movs	r3, #14
 8000148:	5ec9      	ldrsh	r1, [r1, r3]
 800014a:	f000 ffd9 	bl	8001100 <_close_r>
 800014e:	bc08      	pop	{r3}
 8000150:	bc02      	pop	{r1}
 8000152:	4708      	bx	r1

08000154 <strcmp>:
 8000154:	7802      	ldrb	r2, [r0, #0]
 8000156:	780b      	ldrb	r3, [r1, #0]
 8000158:	3001      	adds	r0, #1
 800015a:	3101      	adds	r1, #1
 800015c:	2a00      	cmp	r2, #0
 800015e:	d001      	beq.n	8000164 <strcmp+0x10>
 8000160:	429a      	cmp	r2, r3
 8000162:	d0f7      	beq.n	8000154 <strcmp>
 8000164:	1ad0      	subs	r0, r2, r3
 8000166:	4770      	bx	lr

08000168 <strlen>:
 8000168:	2300      	movs	r3, #0
 800016a:	5cc2      	ldrb	r2, [r0, r3]
 800016c:	3301      	adds	r3, #1
 800016e:	2a00      	cmp	r2, #0
 8000170:	d1fb      	bne.n	800016a <strlen+0x2>
 8000172:	1e58      	subs	r0, r3, #1
 8000174:	4770      	bx	lr
 8000176:	46c0      	nop			; (mov r8, r8)

08000178 <strncmp>:
 8000178:	b570      	push	{r4, r5, r6, lr}
 800017a:	1c06      	adds	r6, r0, #0
 800017c:	2000      	movs	r0, #0
 800017e:	2a00      	cmp	r2, #0
 8000180:	d02f      	beq.n	80001e2 <strncmp+0x6a>
 8000182:	1c0b      	adds	r3, r1, #0
 8000184:	4333      	orrs	r3, r6
 8000186:	079c      	lsls	r4, r3, #30
 8000188:	d12e      	bne.n	80001e8 <strncmp+0x70>
 800018a:	2a03      	cmp	r2, #3
 800018c:	d92c      	bls.n	80001e8 <strncmp+0x70>
 800018e:	6834      	ldr	r4, [r6, #0]
 8000190:	680d      	ldr	r5, [r1, #0]
 8000192:	42ac      	cmp	r4, r5
 8000194:	d128      	bne.n	80001e8 <strncmp+0x70>
 8000196:	1f13      	subs	r3, r2, #4
 8000198:	2b00      	cmp	r3, #0
 800019a:	d022      	beq.n	80001e2 <strncmp+0x6a>
 800019c:	4d23      	ldr	r5, [pc, #140]	; (800022c <strncmp+0xb4>)
 800019e:	1962      	adds	r2, r4, r5
 80001a0:	43a2      	bics	r2, r4
 80001a2:	1c14      	adds	r4, r2, #0
 80001a4:	4a22      	ldr	r2, [pc, #136]	; (8000230 <strncmp+0xb8>)
 80001a6:	4214      	tst	r4, r2
 80001a8:	d11b      	bne.n	80001e2 <strncmp+0x6a>
 80001aa:	1c30      	adds	r0, r6, #0
 80001ac:	1c16      	adds	r6, r2, #0
 80001ae:	e00d      	b.n	80001cc <strncmp+0x54>
 80001b0:	6842      	ldr	r2, [r0, #4]
 80001b2:	6849      	ldr	r1, [r1, #4]
 80001b4:	428a      	cmp	r2, r1
 80001b6:	d130      	bne.n	800021a <strncmp+0xa2>
 80001b8:	3b04      	subs	r3, #4
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d010      	beq.n	80001e0 <strncmp+0x68>
 80001be:	1c29      	adds	r1, r5, #0
 80001c0:	4d1a      	ldr	r5, [pc, #104]	; (800022c <strncmp+0xb4>)
 80001c2:	1c20      	adds	r0, r4, #0
 80001c4:	1954      	adds	r4, r2, r5
 80001c6:	4394      	bics	r4, r2
 80001c8:	4234      	tst	r4, r6
 80001ca:	d109      	bne.n	80001e0 <strncmp+0x68>
 80001cc:	1d04      	adds	r4, r0, #4
 80001ce:	1d0d      	adds	r5, r1, #4
 80001d0:	2b03      	cmp	r3, #3
 80001d2:	d8ed      	bhi.n	80001b0 <strncmp+0x38>
 80001d4:	1e5a      	subs	r2, r3, #1
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d023      	beq.n	8000222 <strncmp+0xaa>
 80001da:	1c29      	adds	r1, r5, #0
 80001dc:	1c26      	adds	r6, r4, #0
 80001de:	e004      	b.n	80001ea <strncmp+0x72>
 80001e0:	2000      	movs	r0, #0
 80001e2:	bc70      	pop	{r4, r5, r6}
 80001e4:	bc02      	pop	{r1}
 80001e6:	4708      	bx	r1
 80001e8:	3a01      	subs	r2, #1
 80001ea:	7834      	ldrb	r4, [r6, #0]
 80001ec:	780d      	ldrb	r5, [r1, #0]
 80001ee:	42ac      	cmp	r4, r5
 80001f0:	d111      	bne.n	8000216 <strncmp+0x9e>
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d0f4      	beq.n	80001e0 <strncmp+0x68>
 80001f6:	2c00      	cmp	r4, #0
 80001f8:	d0f2      	beq.n	80001e0 <strncmp+0x68>
 80001fa:	1c73      	adds	r3, r6, #1
 80001fc:	3101      	adds	r1, #1
 80001fe:	18b0      	adds	r0, r6, r2
 8000200:	e005      	b.n	800020e <strncmp+0x96>
 8000202:	4283      	cmp	r3, r0
 8000204:	d0ec      	beq.n	80001e0 <strncmp+0x68>
 8000206:	2c00      	cmp	r4, #0
 8000208:	d0ea      	beq.n	80001e0 <strncmp+0x68>
 800020a:	3301      	adds	r3, #1
 800020c:	3101      	adds	r1, #1
 800020e:	781c      	ldrb	r4, [r3, #0]
 8000210:	780d      	ldrb	r5, [r1, #0]
 8000212:	42ac      	cmp	r4, r5
 8000214:	d0f5      	beq.n	8000202 <strncmp+0x8a>
 8000216:	1b60      	subs	r0, r4, r5
 8000218:	e7e3      	b.n	80001e2 <strncmp+0x6a>
 800021a:	1e5a      	subs	r2, r3, #1
 800021c:	1c29      	adds	r1, r5, #0
 800021e:	1c26      	adds	r6, r4, #0
 8000220:	e7e3      	b.n	80001ea <strncmp+0x72>
 8000222:	7904      	ldrb	r4, [r0, #4]
 8000224:	790d      	ldrb	r5, [r1, #4]
 8000226:	1b60      	subs	r0, r4, r5
 8000228:	e7db      	b.n	80001e2 <strncmp+0x6a>
 800022a:	46c0      	nop			; (mov r8, r8)
 800022c:	fefefeff 	.word	0xfefefeff
 8000230:	80808080 	.word	0x80808080

08000234 <strtok>:
 8000234:	b508      	push	{r3, lr}
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <strtok+0x14>)
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	2301      	movs	r3, #1
 800023c:	325c      	adds	r2, #92	; 0x5c
 800023e:	f000 f805 	bl	800024c <__strtok_r>
 8000242:	bc08      	pop	{r3}
 8000244:	bc02      	pop	{r1}
 8000246:	4708      	bx	r1
 8000248:	200000e8 	.word	0x200000e8

0800024c <__strtok_r>:
 800024c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800024e:	2800      	cmp	r0, #0
 8000250:	d029      	beq.n	80002a6 <__strtok_r+0x5a>
 8000252:	7807      	ldrb	r7, [r0, #0]
 8000254:	1c46      	adds	r6, r0, #1
 8000256:	1c0c      	adds	r4, r1, #0
 8000258:	7825      	ldrb	r5, [r4, #0]
 800025a:	3401      	adds	r4, #1
 800025c:	2d00      	cmp	r5, #0
 800025e:	d005      	beq.n	800026c <__strtok_r+0x20>
 8000260:	42af      	cmp	r7, r5
 8000262:	d1f9      	bne.n	8000258 <__strtok_r+0xc>
 8000264:	2b00      	cmp	r3, #0
 8000266:	d01a      	beq.n	800029e <__strtok_r+0x52>
 8000268:	1c30      	adds	r0, r6, #0
 800026a:	e7f2      	b.n	8000252 <__strtok_r+0x6>
 800026c:	1c30      	adds	r0, r6, #0
 800026e:	2f00      	cmp	r7, #0
 8000270:	d102      	bne.n	8000278 <__strtok_r+0x2c>
 8000272:	e01d      	b.n	80002b0 <__strtok_r+0x64>
 8000274:	2c00      	cmp	r4, #0
 8000276:	d102      	bne.n	800027e <__strtok_r+0x32>
 8000278:	7835      	ldrb	r5, [r6, #0]
 800027a:	1c0b      	adds	r3, r1, #0
 800027c:	3601      	adds	r6, #1
 800027e:	781c      	ldrb	r4, [r3, #0]
 8000280:	3301      	adds	r3, #1
 8000282:	42a5      	cmp	r5, r4
 8000284:	d1f6      	bne.n	8000274 <__strtok_r+0x28>
 8000286:	2d00      	cmp	r5, #0
 8000288:	d007      	beq.n	800029a <__strtok_r+0x4e>
 800028a:	1e73      	subs	r3, r6, #1
 800028c:	2100      	movs	r1, #0
 800028e:	7019      	strb	r1, [r3, #0]
 8000290:	6016      	str	r6, [r2, #0]
 8000292:	3801      	subs	r0, #1
 8000294:	bcf0      	pop	{r4, r5, r6, r7}
 8000296:	bc02      	pop	{r1}
 8000298:	4708      	bx	r1
 800029a:	2600      	movs	r6, #0
 800029c:	e7f8      	b.n	8000290 <__strtok_r+0x44>
 800029e:	6016      	str	r6, [r2, #0]
 80002a0:	3e01      	subs	r6, #1
 80002a2:	7033      	strb	r3, [r6, #0]
 80002a4:	e7f6      	b.n	8000294 <__strtok_r+0x48>
 80002a6:	6810      	ldr	r0, [r2, #0]
 80002a8:	2800      	cmp	r0, #0
 80002aa:	d1d2      	bne.n	8000252 <__strtok_r+0x6>
 80002ac:	2000      	movs	r0, #0
 80002ae:	e7f1      	b.n	8000294 <__strtok_r+0x48>
 80002b0:	6017      	str	r7, [r2, #0]
 80002b2:	2000      	movs	r0, #0
 80002b4:	e7ee      	b.n	8000294 <__strtok_r+0x48>
 80002b6:	46c0      	nop			; (mov r8, r8)

080002b8 <strtok_r>:
 80002b8:	b508      	push	{r3, lr}
 80002ba:	2301      	movs	r3, #1
 80002bc:	f7ff ffc6 	bl	800024c <__strtok_r>
 80002c0:	bc08      	pop	{r3}
 80002c2:	bc02      	pop	{r1}
 80002c4:	4708      	bx	r1
 80002c6:	46c0      	nop			; (mov r8, r8)

080002c8 <__ssvfscanf_r>:
 80002c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ca:	465f      	mov	r7, fp
 80002cc:	4656      	mov	r6, sl
 80002ce:	4644      	mov	r4, r8
 80002d0:	464d      	mov	r5, r9
 80002d2:	b4f0      	push	{r4, r5, r6, r7}
 80002d4:	4c91      	ldr	r4, [pc, #580]	; (800051c <__ssvfscanf_r+0x254>)
 80002d6:	44a5      	add	sp, r4
 80002d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80002da:	1c0e      	adds	r6, r1, #0
 80002dc:	898b      	ldrh	r3, [r1, #12]
 80002de:	2180      	movs	r1, #128	; 0x80
 80002e0:	0189      	lsls	r1, r1, #6
 80002e2:	4683      	mov	fp, r0
 80002e4:	420b      	tst	r3, r1
 80002e6:	d105      	bne.n	80002f4 <__ssvfscanf_r+0x2c>
 80002e8:	430b      	orrs	r3, r1
 80002ea:	6e70      	ldr	r0, [r6, #100]	; 0x64
 80002ec:	81b3      	strh	r3, [r6, #12]
 80002ee:	4b8c      	ldr	r3, [pc, #560]	; (8000520 <__ssvfscanf_r+0x258>)
 80002f0:	4003      	ands	r3, r0
 80002f2:	6673      	str	r3, [r6, #100]	; 0x64
 80002f4:	2500      	movs	r5, #0
 80002f6:	2000      	movs	r0, #0
 80002f8:	950f      	str	r5, [sp, #60]	; 0x3c
 80002fa:	950d      	str	r5, [sp, #52]	; 0x34
 80002fc:	900c      	str	r0, [sp, #48]	; 0x30
 80002fe:	4c89      	ldr	r4, [pc, #548]	; (8000524 <__ssvfscanf_r+0x25c>)
 8000300:	4692      	mov	sl, r2
 8000302:	2708      	movs	r7, #8
 8000304:	9502      	str	r5, [sp, #8]
 8000306:	4651      	mov	r1, sl
 8000308:	780a      	ldrb	r2, [r1, #0]
 800030a:	2301      	movs	r3, #1
 800030c:	9217      	str	r2, [sp, #92]	; 0x5c
 800030e:	449a      	add	sl, r3
 8000310:	2a00      	cmp	r2, #0
 8000312:	d039      	beq.n	8000388 <__ssvfscanf_r+0xc0>
 8000314:	6823      	ldr	r3, [r4, #0]
 8000316:	1899      	adds	r1, r3, r2
 8000318:	7849      	ldrb	r1, [r1, #1]
 800031a:	420f      	tst	r7, r1
 800031c:	d018      	beq.n	8000350 <__ssvfscanf_r+0x88>
 800031e:	6873      	ldr	r3, [r6, #4]
 8000320:	9d02      	ldr	r5, [sp, #8]
 8000322:	e00c      	b.n	800033e <__ssvfscanf_r+0x76>
 8000324:	6832      	ldr	r2, [r6, #0]
 8000326:	6820      	ldr	r0, [r4, #0]
 8000328:	7813      	ldrb	r3, [r2, #0]
 800032a:	18c3      	adds	r3, r0, r3
 800032c:	785b      	ldrb	r3, [r3, #1]
 800032e:	421f      	tst	r7, r3
 8000330:	d0e8      	beq.n	8000304 <__ssvfscanf_r+0x3c>
 8000332:	6873      	ldr	r3, [r6, #4]
 8000334:	3201      	adds	r2, #1
 8000336:	3b01      	subs	r3, #1
 8000338:	6073      	str	r3, [r6, #4]
 800033a:	6032      	str	r2, [r6, #0]
 800033c:	3501      	adds	r5, #1
 800033e:	2b00      	cmp	r3, #0
 8000340:	dcf0      	bgt.n	8000324 <__ssvfscanf_r+0x5c>
 8000342:	4658      	mov	r0, fp
 8000344:	1c31      	adds	r1, r6, #0
 8000346:	f002 fa8b 	bl	8002860 <__ssrefill_r>
 800034a:	2800      	cmp	r0, #0
 800034c:	d0ea      	beq.n	8000324 <__ssvfscanf_r+0x5c>
 800034e:	e7d9      	b.n	8000304 <__ssvfscanf_r+0x3c>
 8000350:	2a25      	cmp	r2, #37	; 0x25
 8000352:	d025      	beq.n	80003a0 <__ssvfscanf_r+0xd8>
 8000354:	6871      	ldr	r1, [r6, #4]
 8000356:	2900      	cmp	r1, #0
 8000358:	dc00      	bgt.n	800035c <__ssvfscanf_r+0x94>
 800035a:	e0a0      	b.n	800049e <__ssvfscanf_r+0x1d6>
 800035c:	6833      	ldr	r3, [r6, #0]
 800035e:	4652      	mov	r2, sl
 8000360:	3a01      	subs	r2, #1
 8000362:	7819      	ldrb	r1, [r3, #0]
 8000364:	7812      	ldrb	r2, [r2, #0]
 8000366:	4291      	cmp	r1, r2
 8000368:	d10e      	bne.n	8000388 <__ssvfscanf_r+0xc0>
 800036a:	6872      	ldr	r2, [r6, #4]
 800036c:	3301      	adds	r3, #1
 800036e:	3a01      	subs	r2, #1
 8000370:	6033      	str	r3, [r6, #0]
 8000372:	6072      	str	r2, [r6, #4]
 8000374:	9d02      	ldr	r5, [sp, #8]
 8000376:	4651      	mov	r1, sl
 8000378:	780a      	ldrb	r2, [r1, #0]
 800037a:	3501      	adds	r5, #1
 800037c:	2301      	movs	r3, #1
 800037e:	9502      	str	r5, [sp, #8]
 8000380:	9217      	str	r2, [sp, #92]	; 0x5c
 8000382:	449a      	add	sl, r3
 8000384:	2a00      	cmp	r2, #0
 8000386:	d1c5      	bne.n	8000314 <__ssvfscanf_r+0x4c>
 8000388:	980c      	ldr	r0, [sp, #48]	; 0x30
 800038a:	23b5      	movs	r3, #181	; 0xb5
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	449d      	add	sp, r3
 8000390:	bc3c      	pop	{r2, r3, r4, r5}
 8000392:	4690      	mov	r8, r2
 8000394:	4699      	mov	r9, r3
 8000396:	46a2      	mov	sl, r4
 8000398:	46ab      	mov	fp, r5
 800039a:	bcf0      	pop	{r4, r5, r6, r7}
 800039c:	bc02      	pop	{r1}
 800039e:	4708      	bx	r1
 80003a0:	2500      	movs	r5, #0
 80003a2:	9509      	str	r5, [sp, #36]	; 0x24
 80003a4:	46a9      	mov	r9, r5
 80003a6:	2102      	movs	r1, #2
 80003a8:	2201      	movs	r2, #1
 80003aa:	9d02      	ldr	r5, [sp, #8]
 80003ac:	9306      	str	r3, [sp, #24]
 80003ae:	4688      	mov	r8, r1
 80003b0:	4694      	mov	ip, r2
 80003b2:	4650      	mov	r0, sl
 80003b4:	7803      	ldrb	r3, [r0, #0]
 80003b6:	3001      	adds	r0, #1
 80003b8:	930a      	str	r3, [sp, #40]	; 0x28
 80003ba:	2b78      	cmp	r3, #120	; 0x78
 80003bc:	d96b      	bls.n	8000496 <__ssvfscanf_r+0x1ce>
 80003be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80003c0:	9b06      	ldr	r3, [sp, #24]
 80003c2:	189b      	adds	r3, r3, r2
 80003c4:	785b      	ldrb	r3, [r3, #1]
 80003c6:	2203      	movs	r2, #3
 80003c8:	9502      	str	r5, [sp, #8]
 80003ca:	4682      	mov	sl, r0
 80003cc:	4013      	ands	r3, r2
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d101      	bne.n	80003d6 <__ssvfscanf_r+0x10e>
 80003d2:	f000 fcd1 	bl	8000d78 <__ssvfscanf_r+0xab0>
 80003d6:	4d54      	ldr	r5, [pc, #336]	; (8000528 <__ssvfscanf_r+0x260>)
 80003d8:	950f      	str	r5, [sp, #60]	; 0x3c
 80003da:	250a      	movs	r5, #10
 80003dc:	2003      	movs	r0, #3
 80003de:	950d      	str	r5, [sp, #52]	; 0x34
 80003e0:	4680      	mov	r8, r0
 80003e2:	6871      	ldr	r1, [r6, #4]
 80003e4:	2900      	cmp	r1, #0
 80003e6:	dc00      	bgt.n	80003ea <__ssvfscanf_r+0x122>
 80003e8:	e2c7      	b.n	800097a <__ssvfscanf_r+0x6b2>
 80003ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80003ec:	066d      	lsls	r5, r5, #25
 80003ee:	d41e      	bmi.n	800042e <__ssvfscanf_r+0x166>
 80003f0:	6821      	ldr	r1, [r4, #0]
 80003f2:	6833      	ldr	r3, [r6, #0]
 80003f4:	9d02      	ldr	r5, [sp, #8]
 80003f6:	e001      	b.n	80003fc <__ssvfscanf_r+0x134>
 80003f8:	3301      	adds	r3, #1
 80003fa:	6033      	str	r3, [r6, #0]
 80003fc:	781a      	ldrb	r2, [r3, #0]
 80003fe:	188a      	adds	r2, r1, r2
 8000400:	7852      	ldrb	r2, [r2, #1]
 8000402:	4217      	tst	r7, r2
 8000404:	d012      	beq.n	800042c <__ssvfscanf_r+0x164>
 8000406:	6872      	ldr	r2, [r6, #4]
 8000408:	3a01      	subs	r2, #1
 800040a:	3501      	adds	r5, #1
 800040c:	6072      	str	r2, [r6, #4]
 800040e:	2a00      	cmp	r2, #0
 8000410:	dcf2      	bgt.n	80003f8 <__ssvfscanf_r+0x130>
 8000412:	4658      	mov	r0, fp
 8000414:	1c31      	adds	r1, r6, #0
 8000416:	f002 fa23 	bl	8002860 <__ssrefill_r>
 800041a:	2800      	cmp	r0, #0
 800041c:	d146      	bne.n	80004ac <__ssvfscanf_r+0x1e4>
 800041e:	6833      	ldr	r3, [r6, #0]
 8000420:	6821      	ldr	r1, [r4, #0]
 8000422:	781a      	ldrb	r2, [r3, #0]
 8000424:	188a      	adds	r2, r1, r2
 8000426:	7852      	ldrb	r2, [r2, #1]
 8000428:	4217      	tst	r7, r2
 800042a:	d1ec      	bne.n	8000406 <__ssvfscanf_r+0x13e>
 800042c:	9502      	str	r5, [sp, #8]
 800042e:	4640      	mov	r0, r8
 8000430:	2802      	cmp	r0, #2
 8000432:	d100      	bne.n	8000436 <__ssvfscanf_r+0x16e>
 8000434:	e24a      	b.n	80008cc <__ssvfscanf_r+0x604>
 8000436:	dc44      	bgt.n	80004c2 <__ssvfscanf_r+0x1fa>
 8000438:	2801      	cmp	r0, #1
 800043a:	d100      	bne.n	800043e <__ssvfscanf_r+0x176>
 800043c:	e273      	b.n	8000926 <__ssvfscanf_r+0x65e>
 800043e:	464a      	mov	r2, r9
 8000440:	2a00      	cmp	r2, #0
 8000442:	d100      	bne.n	8000446 <__ssvfscanf_r+0x17e>
 8000444:	e32a      	b.n	8000a9c <__ssvfscanf_r+0x7d4>
 8000446:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000448:	07ed      	lsls	r5, r5, #31
 800044a:	d500      	bpl.n	800044e <__ssvfscanf_r+0x186>
 800044c:	e32c      	b.n	8000aa8 <__ssvfscanf_r+0x7e0>
 800044e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000450:	06ed      	lsls	r5, r5, #27
 8000452:	d401      	bmi.n	8000458 <__ssvfscanf_r+0x190>
 8000454:	f000 fc76 	bl	8000d44 <__ssvfscanf_r+0xa7c>
 8000458:	9b02      	ldr	r3, [sp, #8]
 800045a:	2000      	movs	r0, #0
 800045c:	464d      	mov	r5, r9
 800045e:	4680      	mov	r8, r0
 8000460:	4699      	mov	r9, r3
 8000462:	6873      	ldr	r3, [r6, #4]
 8000464:	42ab      	cmp	r3, r5
 8000466:	db01      	blt.n	800046c <__ssvfscanf_r+0x1a4>
 8000468:	f000 fd62 	bl	8000f30 <__ssvfscanf_r+0xc68>
 800046c:	6831      	ldr	r1, [r6, #0]
 800046e:	4498      	add	r8, r3
 8000470:	1aed      	subs	r5, r5, r3
 8000472:	18cb      	adds	r3, r1, r3
 8000474:	6033      	str	r3, [r6, #0]
 8000476:	4658      	mov	r0, fp
 8000478:	1c31      	adds	r1, r6, #0
 800047a:	f002 f9f1 	bl	8002860 <__ssrefill_r>
 800047e:	2800      	cmp	r0, #0
 8000480:	d0ef      	beq.n	8000462 <__ssvfscanf_r+0x19a>
 8000482:	464d      	mov	r5, r9
 8000484:	4640      	mov	r0, r8
 8000486:	9502      	str	r5, [sp, #8]
 8000488:	2800      	cmp	r0, #0
 800048a:	d00f      	beq.n	80004ac <__ssvfscanf_r+0x1e4>
 800048c:	9a02      	ldr	r2, [sp, #8]
 800048e:	1c15      	adds	r5, r2, #0
 8000490:	4445      	add	r5, r8
 8000492:	9502      	str	r5, [sp, #8]
 8000494:	e737      	b.n	8000306 <__ssvfscanf_r+0x3e>
 8000496:	4925      	ldr	r1, [pc, #148]	; (800052c <__ssvfscanf_r+0x264>)
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	58ca      	ldr	r2, [r1, r3]
 800049c:	4697      	mov	pc, r2
 800049e:	4658      	mov	r0, fp
 80004a0:	1c31      	adds	r1, r6, #0
 80004a2:	f002 f9dd 	bl	8002860 <__ssrefill_r>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d100      	bne.n	80004ac <__ssvfscanf_r+0x1e4>
 80004aa:	e757      	b.n	800035c <__ssvfscanf_r+0x94>
 80004ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d003      	beq.n	80004ba <__ssvfscanf_r+0x1f2>
 80004b2:	89b3      	ldrh	r3, [r6, #12]
 80004b4:	0658      	lsls	r0, r3, #25
 80004b6:	d400      	bmi.n	80004ba <__ssvfscanf_r+0x1f2>
 80004b8:	e766      	b.n	8000388 <__ssvfscanf_r+0xc0>
 80004ba:	2301      	movs	r3, #1
 80004bc:	425b      	negs	r3, r3
 80004be:	930c      	str	r3, [sp, #48]	; 0x30
 80004c0:	e762      	b.n	8000388 <__ssvfscanf_r+0xc0>
 80004c2:	2803      	cmp	r0, #3
 80004c4:	d100      	bne.n	80004c8 <__ssvfscanf_r+0x200>
 80004c6:	e164      	b.n	8000792 <__ssvfscanf_r+0x4ca>
 80004c8:	2804      	cmp	r0, #4
 80004ca:	d1b8      	bne.n	800043e <__ssvfscanf_r+0x176>
 80004cc:	464a      	mov	r2, r9
 80004ce:	2500      	movs	r5, #0
 80004d0:	23ae      	movs	r3, #174	; 0xae
 80004d2:	3a01      	subs	r2, #1
 80004d4:	9513      	str	r5, [sp, #76]	; 0x4c
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	429a      	cmp	r2, r3
 80004da:	d900      	bls.n	80004de <__ssvfscanf_r+0x216>
 80004dc:	e342      	b.n	8000b64 <__ssvfscanf_r+0x89c>
 80004de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80004e0:	23f0      	movs	r3, #240	; 0xf0
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	431d      	orrs	r5, r3
 80004e6:	9509      	str	r5, [sp, #36]	; 0x24
 80004e8:	9b02      	ldr	r3, [sp, #8]
 80004ea:	2500      	movs	r5, #0
 80004ec:	950a      	str	r5, [sp, #40]	; 0x28
 80004ee:	9511      	str	r5, [sp, #68]	; 0x44
 80004f0:	9512      	str	r5, [sp, #72]	; 0x48
 80004f2:	9515      	str	r5, [sp, #84]	; 0x54
 80004f4:	950e      	str	r5, [sp, #56]	; 0x38
 80004f6:	9514      	str	r5, [sp, #80]	; 0x50
 80004f8:	ad5c      	add	r5, sp, #368	; 0x170
 80004fa:	9510      	str	r5, [sp, #64]	; 0x40
 80004fc:	46a8      	mov	r8, r5
 80004fe:	464d      	mov	r5, r9
 8000500:	4699      	mov	r9, r3
 8000502:	6832      	ldr	r2, [r6, #0]
 8000504:	7813      	ldrb	r3, [r2, #0]
 8000506:	1c19      	adds	r1, r3, #0
 8000508:	392b      	subs	r1, #43	; 0x2b
 800050a:	0609      	lsls	r1, r1, #24
 800050c:	0e09      	lsrs	r1, r1, #24
 800050e:	294e      	cmp	r1, #78	; 0x4e
 8000510:	d817      	bhi.n	8000542 <__ssvfscanf_r+0x27a>
 8000512:	4807      	ldr	r0, [pc, #28]	; (8000530 <__ssvfscanf_r+0x268>)
 8000514:	0089      	lsls	r1, r1, #2
 8000516:	5841      	ldr	r1, [r0, r1]
 8000518:	468f      	mov	pc, r1
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	fffffd2c 	.word	0xfffffd2c
 8000520:	ffffdfff 	.word	0xffffdfff
 8000524:	200000e4 	.word	0x200000e4
 8000528:	080024b1 	.word	0x080024b1
 800052c:	0800d21c 	.word	0x0800d21c
 8000530:	0800d400 	.word	0x0800d400
 8000534:	4658      	mov	r0, fp
 8000536:	1c31      	adds	r1, r6, #0
 8000538:	f002 f992 	bl	8002860 <__ssrefill_r>
 800053c:	2800      	cmp	r0, #0
 800053e:	d100      	bne.n	8000542 <__ssvfscanf_r+0x27a>
 8000540:	e09a      	b.n	8000678 <__ssvfscanf_r+0x3b0>
 8000542:	464d      	mov	r5, r9
 8000544:	9502      	str	r5, [sp, #8]
 8000546:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000548:	2d00      	cmp	r5, #0
 800054a:	d000      	beq.n	800054e <__ssvfscanf_r+0x286>
 800054c:	e2a1      	b.n	8000a92 <__ssvfscanf_r+0x7ca>
 800054e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000550:	3b01      	subs	r3, #1
 8000552:	2b01      	cmp	r3, #1
 8000554:	d801      	bhi.n	800055a <__ssvfscanf_r+0x292>
 8000556:	f000 fd69 	bl	800102c <__ssvfscanf_r+0xd64>
 800055a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800055c:	3b01      	subs	r3, #1
 800055e:	2b06      	cmp	r3, #6
 8000560:	d823      	bhi.n	80005aa <__ssvfscanf_r+0x2e2>
 8000562:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8000564:	2d02      	cmp	r5, #2
 8000566:	d801      	bhi.n	800056c <__ssvfscanf_r+0x2a4>
 8000568:	f000 fd79 	bl	800105e <__ssvfscanf_r+0xd96>
 800056c:	2d03      	cmp	r5, #3
 800056e:	d01c      	beq.n	80005aa <__ssvfscanf_r+0x2e2>
 8000570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000572:	3b04      	subs	r3, #4
 8000574:	061b      	lsls	r3, r3, #24
 8000576:	0e1b      	lsrs	r3, r3, #24
 8000578:	9306      	str	r3, [sp, #24]
 800057a:	43db      	mvns	r3, r3
 800057c:	4699      	mov	r9, r3
 800057e:	9a02      	ldr	r2, [sp, #8]
 8000580:	44c1      	add	r9, r8
 8000582:	1c33      	adds	r3, r6, #0
 8000584:	4645      	mov	r5, r8
 8000586:	464e      	mov	r6, r9
 8000588:	4698      	mov	r8, r3
 800058a:	4691      	mov	r9, r2
 800058c:	3d01      	subs	r5, #1
 800058e:	7829      	ldrb	r1, [r5, #0]
 8000590:	4658      	mov	r0, fp
 8000592:	4642      	mov	r2, r8
 8000594:	f002 f920 	bl	80027d8 <_sungetc_r>
 8000598:	42b5      	cmp	r5, r6
 800059a:	d1f7      	bne.n	800058c <__ssvfscanf_r+0x2c4>
 800059c:	4646      	mov	r6, r8
 800059e:	9806      	ldr	r0, [sp, #24]
 80005a0:	46a8      	mov	r8, r5
 80005a2:	464d      	mov	r5, r9
 80005a4:	3d01      	subs	r5, #1
 80005a6:	1a2d      	subs	r5, r5, r0
 80005a8:	9502      	str	r5, [sp, #8]
 80005aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80005ac:	05ed      	lsls	r5, r5, #23
 80005ae:	d516      	bpl.n	80005de <__ssvfscanf_r+0x316>
 80005b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80005b2:	056d      	lsls	r5, r5, #21
 80005b4:	d501      	bpl.n	80005ba <__ssvfscanf_r+0x2f2>
 80005b6:	f000 fd67 	bl	8001088 <__ssvfscanf_r+0xdc0>
 80005ba:	4643      	mov	r3, r8
 80005bc:	3b01      	subs	r3, #1
 80005be:	9d02      	ldr	r5, [sp, #8]
 80005c0:	7819      	ldrb	r1, [r3, #0]
 80005c2:	3d01      	subs	r5, #1
 80005c4:	2220      	movs	r2, #32
 80005c6:	1c08      	adds	r0, r1, #0
 80005c8:	9502      	str	r5, [sp, #8]
 80005ca:	4390      	bics	r0, r2
 80005cc:	2845      	cmp	r0, #69	; 0x45
 80005ce:	d001      	beq.n	80005d4 <__ssvfscanf_r+0x30c>
 80005d0:	f000 fc8f 	bl	8000ef2 <__ssvfscanf_r+0xc2a>
 80005d4:	4658      	mov	r0, fp
 80005d6:	1c32      	adds	r2, r6, #0
 80005d8:	4698      	mov	r8, r3
 80005da:	f002 f8fd 	bl	80027d8 <_sungetc_r>
 80005de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80005e0:	2310      	movs	r3, #16
 80005e2:	402b      	ands	r3, r5
 80005e4:	d000      	beq.n	80005e8 <__ssvfscanf_r+0x320>
 80005e6:	e68e      	b.n	8000306 <__ssvfscanf_r+0x3e>
 80005e8:	4640      	mov	r0, r8
 80005ea:	22c0      	movs	r2, #192	; 0xc0
 80005ec:	7003      	strb	r3, [r0, #0]
 80005ee:	00d2      	lsls	r2, r2, #3
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	402a      	ands	r2, r5
 80005f4:	00db      	lsls	r3, r3, #3
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d101      	bne.n	80005fe <__ssvfscanf_r+0x336>
 80005fa:	f000 fc70 	bl	8000ede <__ssvfscanf_r+0xc16>
 80005fe:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8000600:	2d00      	cmp	r5, #0
 8000602:	d001      	beq.n	8000608 <__ssvfscanf_r+0x340>
 8000604:	f000 fc55 	bl	8000eb2 <__ssvfscanf_r+0xbea>
 8000608:	4658      	mov	r0, fp
 800060a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800060c:	2200      	movs	r2, #0
 800060e:	f000 ffc7 	bl	80015a0 <_strtod_r>
 8000612:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000614:	9006      	str	r0, [sp, #24]
 8000616:	9107      	str	r1, [sp, #28]
 8000618:	07ed      	lsls	r5, r5, #31
 800061a:	d401      	bmi.n	8000620 <__ssvfscanf_r+0x358>
 800061c:	f000 fc29 	bl	8000e72 <__ssvfscanf_r+0xbaa>
 8000620:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000622:	6800      	ldr	r0, [r0, #0]
 8000624:	9906      	ldr	r1, [sp, #24]
 8000626:	9a07      	ldr	r2, [sp, #28]
 8000628:	6001      	str	r1, [r0, #0]
 800062a:	6042      	str	r2, [r0, #4]
 800062c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800062e:	3504      	adds	r5, #4
 8000630:	950b      	str	r5, [sp, #44]	; 0x2c
 8000632:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000634:	3501      	adds	r5, #1
 8000636:	950c      	str	r5, [sp, #48]	; 0x30
 8000638:	e665      	b.n	8000306 <__ssvfscanf_r+0x3e>
 800063a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800063c:	05c9      	lsls	r1, r1, #23
 800063e:	d500      	bpl.n	8000642 <__ssvfscanf_r+0x37a>
 8000640:	e2c3      	b.n	8000bca <__ssvfscanf_r+0x902>
 8000642:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000644:	4684      	mov	ip, r0
 8000646:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000648:	4484      	add	ip, r0
 800064a:	4661      	mov	r1, ip
 800064c:	2900      	cmp	r1, #0
 800064e:	d000      	beq.n	8000652 <__ssvfscanf_r+0x38a>
 8000650:	e777      	b.n	8000542 <__ssvfscanf_r+0x27a>
 8000652:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000654:	49cd      	ldr	r1, [pc, #820]	; (800098c <__ssvfscanf_r+0x6c4>)
 8000656:	4008      	ands	r0, r1
 8000658:	9009      	str	r0, [sp, #36]	; 0x24
 800065a:	4641      	mov	r1, r8
 800065c:	700b      	strb	r3, [r1, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	4498      	add	r8, r3
 8000662:	6873      	ldr	r3, [r6, #4]
 8000664:	2001      	movs	r0, #1
 8000666:	3b01      	subs	r3, #1
 8000668:	3d01      	subs	r5, #1
 800066a:	4481      	add	r9, r0
 800066c:	6073      	str	r3, [r6, #4]
 800066e:	2b00      	cmp	r3, #0
 8000670:	dc00      	bgt.n	8000674 <__ssvfscanf_r+0x3ac>
 8000672:	e75f      	b.n	8000534 <__ssvfscanf_r+0x26c>
 8000674:	3201      	adds	r2, #1
 8000676:	6032      	str	r2, [r6, #0]
 8000678:	2d00      	cmp	r5, #0
 800067a:	d000      	beq.n	800067e <__ssvfscanf_r+0x3b6>
 800067c:	e741      	b.n	8000502 <__ssvfscanf_r+0x23a>
 800067e:	464d      	mov	r5, r9
 8000680:	9502      	str	r5, [sp, #8]
 8000682:	e760      	b.n	8000546 <__ssvfscanf_r+0x27e>
 8000684:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000686:	2806      	cmp	r0, #6
 8000688:	d1f9      	bne.n	800067e <__ssvfscanf_r+0x3b6>
 800068a:	2107      	movs	r1, #7
 800068c:	910a      	str	r1, [sp, #40]	; 0x28
 800068e:	e7e4      	b.n	800065a <__ssvfscanf_r+0x392>
 8000690:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000692:	2900      	cmp	r1, #0
 8000694:	d000      	beq.n	8000698 <__ssvfscanf_r+0x3d0>
 8000696:	e2a7      	b.n	8000be8 <__ssvfscanf_r+0x920>
 8000698:	9811      	ldr	r0, [sp, #68]	; 0x44
 800069a:	2800      	cmp	r0, #0
 800069c:	d000      	beq.n	80006a0 <__ssvfscanf_r+0x3d8>
 800069e:	e2a3      	b.n	8000be8 <__ssvfscanf_r+0x920>
 80006a0:	21e0      	movs	r1, #224	; 0xe0
 80006a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80006a4:	00c9      	lsls	r1, r1, #3
 80006a6:	4008      	ands	r0, r1
 80006a8:	4288      	cmp	r0, r1
 80006aa:	d101      	bne.n	80006b0 <__ssvfscanf_r+0x3e8>
 80006ac:	f000 fc2d 	bl	8000f0a <__ssvfscanf_r+0xc42>
 80006b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80006b2:	2804      	cmp	r0, #4
 80006b4:	d067      	beq.n	8000786 <__ssvfscanf_r+0x4be>
 80006b6:	2801      	cmp	r0, #1
 80006b8:	d065      	beq.n	8000786 <__ssvfscanf_r+0x4be>
 80006ba:	e742      	b.n	8000542 <__ssvfscanf_r+0x27a>
 80006bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80006be:	2807      	cmp	r0, #7
 80006c0:	d1dd      	bne.n	800067e <__ssvfscanf_r+0x3b6>
 80006c2:	2008      	movs	r0, #8
 80006c4:	900a      	str	r0, [sp, #40]	; 0x28
 80006c6:	e7c8      	b.n	800065a <__ssvfscanf_r+0x392>
 80006c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80006ca:	0580      	lsls	r0, r0, #22
 80006cc:	d400      	bmi.n	80006d0 <__ssvfscanf_r+0x408>
 80006ce:	e738      	b.n	8000542 <__ssvfscanf_r+0x27a>
 80006d0:	49af      	ldr	r1, [pc, #700]	; (8000990 <__ssvfscanf_r+0x6c8>)
 80006d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80006d4:	4008      	ands	r0, r1
 80006d6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80006d8:	9009      	str	r0, [sp, #36]	; 0x24
 80006da:	9114      	str	r1, [sp, #80]	; 0x50
 80006dc:	e7bd      	b.n	800065a <__ssvfscanf_r+0x392>
 80006de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	4201      	tst	r1, r0
 80006e4:	d100      	bne.n	80006e8 <__ssvfscanf_r+0x420>
 80006e6:	e72c      	b.n	8000542 <__ssvfscanf_r+0x27a>
 80006e8:	4388      	bics	r0, r1
 80006ea:	9009      	str	r0, [sp, #36]	; 0x24
 80006ec:	e7b5      	b.n	800065a <__ssvfscanf_r+0x392>
 80006ee:	980e      	ldr	r0, [sp, #56]	; 0x38
 80006f0:	2800      	cmp	r0, #0
 80006f2:	d143      	bne.n	800077c <__ssvfscanf_r+0x4b4>
 80006f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80006f6:	2900      	cmp	r1, #0
 80006f8:	d140      	bne.n	800077c <__ssvfscanf_r+0x4b4>
 80006fa:	21e0      	movs	r1, #224	; 0xe0
 80006fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80006fe:	00c9      	lsls	r1, r1, #3
 8000700:	4008      	ands	r0, r1
 8000702:	4288      	cmp	r0, r1
 8000704:	d13a      	bne.n	800077c <__ssvfscanf_r+0x4b4>
 8000706:	49a3      	ldr	r1, [pc, #652]	; (8000994 <__ssvfscanf_r+0x6cc>)
 8000708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800070a:	4008      	ands	r0, r1
 800070c:	9009      	str	r0, [sp, #36]	; 0x24
 800070e:	2101      	movs	r1, #1
 8000710:	2000      	movs	r0, #0
 8000712:	910a      	str	r1, [sp, #40]	; 0x28
 8000714:	900e      	str	r0, [sp, #56]	; 0x38
 8000716:	e7a0      	b.n	800065a <__ssvfscanf_r+0x392>
 8000718:	980a      	ldr	r0, [sp, #40]	; 0x28
 800071a:	2802      	cmp	r0, #2
 800071c:	d1af      	bne.n	800067e <__ssvfscanf_r+0x3b6>
 800071e:	2003      	movs	r0, #3
 8000720:	900a      	str	r0, [sp, #40]	; 0x28
 8000722:	e79a      	b.n	800065a <__ssvfscanf_r+0x392>
 8000724:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000726:	20a0      	movs	r0, #160	; 0xa0
 8000728:	00c0      	lsls	r0, r0, #3
 800072a:	4001      	ands	r1, r0
 800072c:	2080      	movs	r0, #128	; 0x80
 800072e:	00c0      	lsls	r0, r0, #3
 8000730:	4281      	cmp	r1, r0
 8000732:	d008      	beq.n	8000746 <__ssvfscanf_r+0x47e>
 8000734:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000736:	4201      	tst	r1, r0
 8000738:	d100      	bne.n	800073c <__ssvfscanf_r+0x474>
 800073a:	e702      	b.n	8000542 <__ssvfscanf_r+0x27a>
 800073c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800073e:	2800      	cmp	r0, #0
 8000740:	d101      	bne.n	8000746 <__ssvfscanf_r+0x47e>
 8000742:	f000 fcb6 	bl	80010b2 <__ssvfscanf_r+0xdea>
 8000746:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000748:	0589      	lsls	r1, r1, #22
 800074a:	d405      	bmi.n	8000758 <__ssvfscanf_r+0x490>
 800074c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800074e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000750:	1a40      	subs	r0, r0, r1
 8000752:	4641      	mov	r1, r8
 8000754:	9015      	str	r0, [sp, #84]	; 0x54
 8000756:	9112      	str	r1, [sp, #72]	; 0x48
 8000758:	9809      	ldr	r0, [sp, #36]	; 0x24
 800075a:	498e      	ldr	r1, [pc, #568]	; (8000994 <__ssvfscanf_r+0x6cc>)
 800075c:	4001      	ands	r1, r0
 800075e:	20c0      	movs	r0, #192	; 0xc0
 8000760:	0040      	lsls	r0, r0, #1
 8000762:	4308      	orrs	r0, r1
 8000764:	2100      	movs	r1, #0
 8000766:	9009      	str	r0, [sp, #36]	; 0x24
 8000768:	910e      	str	r1, [sp, #56]	; 0x38
 800076a:	e776      	b.n	800065a <__ssvfscanf_r+0x392>
 800076c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800076e:	2901      	cmp	r1, #1
 8000770:	d001      	beq.n	8000776 <__ssvfscanf_r+0x4ae>
 8000772:	f000 fc70 	bl	8001056 <__ssvfscanf_r+0xd8e>
 8000776:	2102      	movs	r1, #2
 8000778:	9111      	str	r1, [sp, #68]	; 0x44
 800077a:	e76e      	b.n	800065a <__ssvfscanf_r+0x392>
 800077c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800077e:	2905      	cmp	r1, #5
 8000780:	d001      	beq.n	8000786 <__ssvfscanf_r+0x4be>
 8000782:	f000 fc4d 	bl	8001020 <__ssvfscanf_r+0xd58>
 8000786:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000788:	3101      	adds	r1, #1
 800078a:	0609      	lsls	r1, r1, #24
 800078c:	0e09      	lsrs	r1, r1, #24
 800078e:	910a      	str	r1, [sp, #40]	; 0x28
 8000790:	e763      	b.n	800065a <__ssvfscanf_r+0x392>
 8000792:	464a      	mov	r2, r9
 8000794:	2500      	movs	r5, #0
 8000796:	23ae      	movs	r3, #174	; 0xae
 8000798:	3a01      	subs	r2, #1
 800079a:	950a      	str	r5, [sp, #40]	; 0x28
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	429a      	cmp	r2, r3
 80007a0:	d900      	bls.n	80007a4 <__ssvfscanf_r+0x4dc>
 80007a2:	e16f      	b.n	8000a84 <__ssvfscanf_r+0x7bc>
 80007a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80007a6:	23d8      	movs	r3, #216	; 0xd8
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	431d      	orrs	r5, r3
 80007ac:	9509      	str	r5, [sp, #36]	; 0x24
 80007ae:	9b02      	ldr	r3, [sp, #8]
 80007b0:	2500      	movs	r5, #0
 80007b2:	950e      	str	r5, [sp, #56]	; 0x38
 80007b4:	ad5c      	add	r5, sp, #368	; 0x170
 80007b6:	9510      	str	r5, [sp, #64]	; 0x40
 80007b8:	46a8      	mov	r8, r5
 80007ba:	464d      	mov	r5, r9
 80007bc:	4699      	mov	r9, r3
 80007be:	6832      	ldr	r2, [r6, #0]
 80007c0:	7813      	ldrb	r3, [r2, #0]
 80007c2:	1c19      	adds	r1, r3, #0
 80007c4:	392b      	subs	r1, #43	; 0x2b
 80007c6:	0609      	lsls	r1, r1, #24
 80007c8:	0e09      	lsrs	r1, r1, #24
 80007ca:	294d      	cmp	r1, #77	; 0x4d
 80007cc:	d922      	bls.n	8000814 <__ssvfscanf_r+0x54c>
 80007ce:	464d      	mov	r5, r9
 80007d0:	9502      	str	r5, [sp, #8]
 80007d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80007d4:	05ed      	lsls	r5, r5, #23
 80007d6:	d50f      	bpl.n	80007f8 <__ssvfscanf_r+0x530>
 80007d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80007da:	45a8      	cmp	r8, r5
 80007dc:	d908      	bls.n	80007f0 <__ssvfscanf_r+0x528>
 80007de:	2001      	movs	r0, #1
 80007e0:	4240      	negs	r0, r0
 80007e2:	4480      	add	r8, r0
 80007e4:	4642      	mov	r2, r8
 80007e6:	7811      	ldrb	r1, [r2, #0]
 80007e8:	4658      	mov	r0, fp
 80007ea:	1c32      	adds	r2, r6, #0
 80007ec:	f001 fff4 	bl	80027d8 <_sungetc_r>
 80007f0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80007f2:	45a8      	cmp	r8, r5
 80007f4:	d100      	bne.n	80007f8 <__ssvfscanf_r+0x530>
 80007f6:	e5c7      	b.n	8000388 <__ssvfscanf_r+0xc0>
 80007f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80007fa:	2310      	movs	r3, #16
 80007fc:	402b      	ands	r3, r5
 80007fe:	d100      	bne.n	8000802 <__ssvfscanf_r+0x53a>
 8000800:	e2e2      	b.n	8000dc8 <__ssvfscanf_r+0xb00>
 8000802:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8000804:	4640      	mov	r0, r8
 8000806:	1b43      	subs	r3, r0, r5
 8000808:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800080a:	195b      	adds	r3, r3, r5
 800080c:	9d02      	ldr	r5, [sp, #8]
 800080e:	18ed      	adds	r5, r5, r3
 8000810:	9502      	str	r5, [sp, #8]
 8000812:	e578      	b.n	8000306 <__ssvfscanf_r+0x3e>
 8000814:	4860      	ldr	r0, [pc, #384]	; (8000998 <__ssvfscanf_r+0x6d0>)
 8000816:	0089      	lsls	r1, r1, #2
 8000818:	5841      	ldr	r1, [r0, r1]
 800081a:	468f      	mov	pc, r1
 800081c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800081e:	20c0      	movs	r0, #192	; 0xc0
 8000820:	00c0      	lsls	r0, r0, #3
 8000822:	4001      	ands	r1, r0
 8000824:	2080      	movs	r0, #128	; 0x80
 8000826:	0080      	lsls	r0, r0, #2
 8000828:	4281      	cmp	r1, r0
 800082a:	d1d0      	bne.n	80007ce <__ssvfscanf_r+0x506>
 800082c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800082e:	495b      	ldr	r1, [pc, #364]	; (800099c <__ssvfscanf_r+0x6d4>)
 8000830:	4001      	ands	r1, r0
 8000832:	20a0      	movs	r0, #160	; 0xa0
 8000834:	00c0      	lsls	r0, r0, #3
 8000836:	4308      	orrs	r0, r1
 8000838:	2110      	movs	r1, #16
 800083a:	9009      	str	r0, [sp, #36]	; 0x24
 800083c:	910d      	str	r1, [sp, #52]	; 0x34
 800083e:	4640      	mov	r0, r8
 8000840:	2101      	movs	r1, #1
 8000842:	7003      	strb	r3, [r0, #0]
 8000844:	4488      	add	r8, r1
 8000846:	6873      	ldr	r3, [r6, #4]
 8000848:	3b01      	subs	r3, #1
 800084a:	6073      	str	r3, [r6, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	dc00      	bgt.n	8000852 <__ssvfscanf_r+0x58a>
 8000850:	e0ac      	b.n	80009ac <__ssvfscanf_r+0x6e4>
 8000852:	3201      	adds	r2, #1
 8000854:	6032      	str	r2, [r6, #0]
 8000856:	3d01      	subs	r5, #1
 8000858:	2d00      	cmp	r5, #0
 800085a:	d1b0      	bne.n	80007be <__ssvfscanf_r+0x4f6>
 800085c:	e7b7      	b.n	80007ce <__ssvfscanf_r+0x506>
 800085e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000860:	290a      	cmp	r1, #10
 8000862:	ddb4      	ble.n	80007ce <__ssvfscanf_r+0x506>
 8000864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000866:	494e      	ldr	r1, [pc, #312]	; (80009a0 <__ssvfscanf_r+0x6d8>)
 8000868:	4008      	ands	r0, r1
 800086a:	9009      	str	r0, [sp, #36]	; 0x24
 800086c:	e7e7      	b.n	800083e <__ssvfscanf_r+0x576>
 800086e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000870:	484c      	ldr	r0, [pc, #304]	; (80009a4 <__ssvfscanf_r+0x6dc>)
 8000872:	0049      	lsls	r1, r1, #1
 8000874:	5e40      	ldrsh	r0, [r0, r1]
 8000876:	900d      	str	r0, [sp, #52]	; 0x34
 8000878:	2808      	cmp	r0, #8
 800087a:	dcf3      	bgt.n	8000864 <__ssvfscanf_r+0x59c>
 800087c:	e7a7      	b.n	80007ce <__ssvfscanf_r+0x506>
 800087e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000880:	4848      	ldr	r0, [pc, #288]	; (80009a4 <__ssvfscanf_r+0x6dc>)
 8000882:	0049      	lsls	r1, r1, #1
 8000884:	5e40      	ldrsh	r0, [r0, r1]
 8000886:	4946      	ldr	r1, [pc, #280]	; (80009a0 <__ssvfscanf_r+0x6d8>)
 8000888:	900d      	str	r0, [sp, #52]	; 0x34
 800088a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800088c:	4008      	ands	r0, r1
 800088e:	9009      	str	r0, [sp, #36]	; 0x24
 8000890:	e7d5      	b.n	800083e <__ssvfscanf_r+0x576>
 8000892:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000894:	0509      	lsls	r1, r1, #20
 8000896:	d5d2      	bpl.n	800083e <__ssvfscanf_r+0x576>
 8000898:	980d      	ldr	r0, [sp, #52]	; 0x34
 800089a:	2800      	cmp	r0, #0
 800089c:	d106      	bne.n	80008ac <__ssvfscanf_r+0x5e4>
 800089e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80008a0:	2080      	movs	r0, #128	; 0x80
 80008a2:	0080      	lsls	r0, r0, #2
 80008a4:	4301      	orrs	r1, r0
 80008a6:	9109      	str	r1, [sp, #36]	; 0x24
 80008a8:	2108      	movs	r1, #8
 80008aa:	910d      	str	r1, [sp, #52]	; 0x34
 80008ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80008ae:	0540      	lsls	r0, r0, #21
 80008b0:	d400      	bmi.n	80008b4 <__ssvfscanf_r+0x5ec>
 80008b2:	e2d0      	b.n	8000e56 <__ssvfscanf_r+0xb8e>
 80008b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80008b6:	493c      	ldr	r1, [pc, #240]	; (80009a8 <__ssvfscanf_r+0x6e0>)
 80008b8:	4008      	ands	r0, r1
 80008ba:	9009      	str	r0, [sp, #36]	; 0x24
 80008bc:	e7bf      	b.n	800083e <__ssvfscanf_r+0x576>
 80008be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	4201      	tst	r1, r0
 80008c4:	d083      	beq.n	80007ce <__ssvfscanf_r+0x506>
 80008c6:	4388      	bics	r0, r1
 80008c8:	9009      	str	r0, [sp, #36]	; 0x24
 80008ca:	e7b8      	b.n	800083e <__ssvfscanf_r+0x576>
 80008cc:	4648      	mov	r0, r9
 80008ce:	2800      	cmp	r0, #0
 80008d0:	d100      	bne.n	80008d4 <__ssvfscanf_r+0x60c>
 80008d2:	e0a0      	b.n	8000a16 <__ssvfscanf_r+0x74e>
 80008d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80008d6:	07ed      	lsls	r5, r5, #31
 80008d8:	d500      	bpl.n	80008dc <__ssvfscanf_r+0x614>
 80008da:	e0a3      	b.n	8000a24 <__ssvfscanf_r+0x75c>
 80008dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80008de:	06ed      	lsls	r5, r5, #27
 80008e0:	d400      	bmi.n	80008e4 <__ssvfscanf_r+0x61c>
 80008e2:	e146      	b.n	8000b72 <__ssvfscanf_r+0x8aa>
 80008e4:	9a02      	ldr	r2, [sp, #8]
 80008e6:	2000      	movs	r0, #0
 80008e8:	6821      	ldr	r1, [r4, #0]
 80008ea:	6833      	ldr	r3, [r6, #0]
 80008ec:	1c05      	adds	r5, r0, #0
 80008ee:	4690      	mov	r8, r2
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	188a      	adds	r2, r1, r2
 80008f4:	7852      	ldrb	r2, [r2, #1]
 80008f6:	4217      	tst	r7, r2
 80008f8:	d000      	beq.n	80008fc <__ssvfscanf_r+0x634>
 80008fa:	e256      	b.n	8000daa <__ssvfscanf_r+0xae2>
 80008fc:	6872      	ldr	r2, [r6, #4]
 80008fe:	3301      	adds	r3, #1
 8000900:	3a01      	subs	r2, #1
 8000902:	3501      	adds	r5, #1
 8000904:	6072      	str	r2, [r6, #4]
 8000906:	6033      	str	r3, [r6, #0]
 8000908:	45a9      	cmp	r9, r5
 800090a:	d100      	bne.n	800090e <__ssvfscanf_r+0x646>
 800090c:	e24d      	b.n	8000daa <__ssvfscanf_r+0xae2>
 800090e:	2a00      	cmp	r2, #0
 8000910:	dcee      	bgt.n	80008f0 <__ssvfscanf_r+0x628>
 8000912:	4658      	mov	r0, fp
 8000914:	1c31      	adds	r1, r6, #0
 8000916:	f001 ffa3 	bl	8002860 <__ssrefill_r>
 800091a:	2800      	cmp	r0, #0
 800091c:	d000      	beq.n	8000920 <__ssvfscanf_r+0x658>
 800091e:	e244      	b.n	8000daa <__ssvfscanf_r+0xae2>
 8000920:	6821      	ldr	r1, [r4, #0]
 8000922:	6833      	ldr	r3, [r6, #0]
 8000924:	e7e4      	b.n	80008f0 <__ssvfscanf_r+0x628>
 8000926:	4648      	mov	r0, r9
 8000928:	2800      	cmp	r0, #0
 800092a:	d102      	bne.n	8000932 <__ssvfscanf_r+0x66a>
 800092c:	2001      	movs	r0, #1
 800092e:	4240      	negs	r0, r0
 8000930:	4681      	mov	r9, r0
 8000932:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000934:	06ed      	lsls	r5, r5, #27
 8000936:	d541      	bpl.n	80009bc <__ssvfscanf_r+0x6f4>
 8000938:	9a02      	ldr	r2, [sp, #8]
 800093a:	ad1c      	add	r5, sp, #112	; 0x70
 800093c:	2000      	movs	r0, #0
 800093e:	6833      	ldr	r3, [r6, #0]
 8000940:	950a      	str	r5, [sp, #40]	; 0x28
 8000942:	4690      	mov	r8, r2
 8000944:	1c05      	adds	r5, r0, #0
 8000946:	781a      	ldrb	r2, [r3, #0]
 8000948:	980a      	ldr	r0, [sp, #40]	; 0x28
 800094a:	5c82      	ldrb	r2, [r0, r2]
 800094c:	2a00      	cmp	r2, #0
 800094e:	d100      	bne.n	8000952 <__ssvfscanf_r+0x68a>
 8000950:	e25c      	b.n	8000e0c <__ssvfscanf_r+0xb44>
 8000952:	6872      	ldr	r2, [r6, #4]
 8000954:	3301      	adds	r3, #1
 8000956:	3a01      	subs	r2, #1
 8000958:	3501      	adds	r5, #1
 800095a:	6072      	str	r2, [r6, #4]
 800095c:	6033      	str	r3, [r6, #0]
 800095e:	45a9      	cmp	r9, r5
 8000960:	d100      	bne.n	8000964 <__ssvfscanf_r+0x69c>
 8000962:	e228      	b.n	8000db6 <__ssvfscanf_r+0xaee>
 8000964:	2a00      	cmp	r2, #0
 8000966:	dcee      	bgt.n	8000946 <__ssvfscanf_r+0x67e>
 8000968:	4658      	mov	r0, fp
 800096a:	1c31      	adds	r1, r6, #0
 800096c:	f001 ff78 	bl	8002860 <__ssrefill_r>
 8000970:	2800      	cmp	r0, #0
 8000972:	d000      	beq.n	8000976 <__ssvfscanf_r+0x6ae>
 8000974:	e21f      	b.n	8000db6 <__ssvfscanf_r+0xaee>
 8000976:	6833      	ldr	r3, [r6, #0]
 8000978:	e7e5      	b.n	8000946 <__ssvfscanf_r+0x67e>
 800097a:	4658      	mov	r0, fp
 800097c:	1c31      	adds	r1, r6, #0
 800097e:	f001 ff6f 	bl	8002860 <__ssrefill_r>
 8000982:	2800      	cmp	r0, #0
 8000984:	d100      	bne.n	8000988 <__ssvfscanf_r+0x6c0>
 8000986:	e530      	b.n	80003ea <__ssvfscanf_r+0x122>
 8000988:	e590      	b.n	80004ac <__ssvfscanf_r+0x1e4>
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	fffffe7f 	.word	0xfffffe7f
 8000990:	fffffd7f 	.word	0xfffffd7f
 8000994:	fffff87f 	.word	0xfffff87f
 8000998:	0800d53c 	.word	0x0800d53c
 800099c:	fffffdff 	.word	0xfffffdff
 80009a0:	fffff47f 	.word	0xfffff47f
 80009a4:	0800d674 	.word	0x0800d674
 80009a8:	fffffa7f 	.word	0xfffffa7f
 80009ac:	4658      	mov	r0, fp
 80009ae:	1c31      	adds	r1, r6, #0
 80009b0:	f001 ff56 	bl	8002860 <__ssrefill_r>
 80009b4:	2800      	cmp	r0, #0
 80009b6:	d100      	bne.n	80009ba <__ssvfscanf_r+0x6f2>
 80009b8:	e74d      	b.n	8000856 <__ssvfscanf_r+0x58e>
 80009ba:	e708      	b.n	80007ce <__ssvfscanf_r+0x506>
 80009bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80009be:	3504      	adds	r5, #4
 80009c0:	950e      	str	r5, [sp, #56]	; 0x38
 80009c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80009c4:	6828      	ldr	r0, [r5, #0]
 80009c6:	9a02      	ldr	r2, [sp, #8]
 80009c8:	ad1c      	add	r5, sp, #112	; 0x70
 80009ca:	6833      	ldr	r3, [r6, #0]
 80009cc:	9006      	str	r0, [sp, #24]
 80009ce:	950a      	str	r5, [sp, #40]	; 0x28
 80009d0:	4680      	mov	r8, r0
 80009d2:	464d      	mov	r5, r9
 80009d4:	4691      	mov	r9, r2
 80009d6:	781a      	ldrb	r2, [r3, #0]
 80009d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80009da:	5c82      	ldrb	r2, [r0, r2]
 80009dc:	2a00      	cmp	r2, #0
 80009de:	d100      	bne.n	80009e2 <__ssvfscanf_r+0x71a>
 80009e0:	e236      	b.n	8000e50 <__ssvfscanf_r+0xb88>
 80009e2:	6872      	ldr	r2, [r6, #4]
 80009e4:	3a01      	subs	r2, #1
 80009e6:	6072      	str	r2, [r6, #4]
 80009e8:	9806      	ldr	r0, [sp, #24]
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	3d01      	subs	r5, #1
 80009ee:	7002      	strb	r2, [r0, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	3001      	adds	r0, #1
 80009f4:	9006      	str	r0, [sp, #24]
 80009f6:	6033      	str	r3, [r6, #0]
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	d100      	bne.n	80009fe <__ssvfscanf_r+0x736>
 80009fc:	e216      	b.n	8000e2c <__ssvfscanf_r+0xb64>
 80009fe:	6871      	ldr	r1, [r6, #4]
 8000a00:	2900      	cmp	r1, #0
 8000a02:	dce8      	bgt.n	80009d6 <__ssvfscanf_r+0x70e>
 8000a04:	4658      	mov	r0, fp
 8000a06:	1c31      	adds	r1, r6, #0
 8000a08:	f001 ff2a 	bl	8002860 <__ssrefill_r>
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	d000      	beq.n	8000a12 <__ssvfscanf_r+0x74a>
 8000a10:	e2d8      	b.n	8000fc4 <__ssvfscanf_r+0xcfc>
 8000a12:	6833      	ldr	r3, [r6, #0]
 8000a14:	e7df      	b.n	80009d6 <__ssvfscanf_r+0x70e>
 8000a16:	2001      	movs	r0, #1
 8000a18:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000a1a:	4240      	negs	r0, r0
 8000a1c:	4681      	mov	r9, r0
 8000a1e:	07ed      	lsls	r5, r5, #31
 8000a20:	d400      	bmi.n	8000a24 <__ssvfscanf_r+0x75c>
 8000a22:	e75b      	b.n	80008dc <__ssvfscanf_r+0x614>
 8000a24:	a81a      	add	r0, sp, #104	; 0x68
 8000a26:	2100      	movs	r1, #0
 8000a28:	2208      	movs	r2, #8
 8000a2a:	f000 fca5 	bl	8001378 <memset>
 8000a2e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000a30:	2310      	movs	r3, #16
 8000a32:	401d      	ands	r5, r3
 8000a34:	9509      	str	r5, [sp, #36]	; 0x24
 8000a36:	ad17      	add	r5, sp, #92	; 0x5c
 8000a38:	9506      	str	r5, [sp, #24]
 8000a3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000a3c:	2d00      	cmp	r5, #0
 8000a3e:	d105      	bne.n	8000a4c <__ssvfscanf_r+0x784>
 8000a40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000a42:	682d      	ldr	r5, [r5, #0]
 8000a44:	9506      	str	r5, [sp, #24]
 8000a46:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000a48:	3504      	adds	r5, #4
 8000a4a:	950b      	str	r5, [sp, #44]	; 0x2c
 8000a4c:	9b02      	ldr	r3, [sp, #8]
 8000a4e:	2000      	movs	r0, #0
 8000a50:	1c05      	adds	r5, r0, #0
 8000a52:	4698      	mov	r8, r3
 8000a54:	6831      	ldr	r1, [r6, #0]
 8000a56:	6822      	ldr	r2, [r4, #0]
 8000a58:	780b      	ldrb	r3, [r1, #0]
 8000a5a:	18d3      	adds	r3, r2, r3
 8000a5c:	785b      	ldrb	r3, [r3, #1]
 8000a5e:	421f      	tst	r7, r3
 8000a60:	d000      	beq.n	8000a64 <__ssvfscanf_r+0x79c>
 8000a62:	e223      	b.n	8000eac <__ssvfscanf_r+0xbe4>
 8000a64:	464b      	mov	r3, r9
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d000      	beq.n	8000a6c <__ssvfscanf_r+0x7a4>
 8000a6a:	e277      	b.n	8000f5c <__ssvfscanf_r+0xc94>
 8000a6c:	4640      	mov	r0, r8
 8000a6e:	9002      	str	r0, [sp, #8]
 8000a70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	d000      	beq.n	8000a78 <__ssvfscanf_r+0x7b0>
 8000a76:	e446      	b.n	8000306 <__ssvfscanf_r+0x3e>
 8000a78:	9806      	ldr	r0, [sp, #24]
 8000a7a:	6005      	str	r5, [r0, #0]
 8000a7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000a7e:	3501      	adds	r5, #1
 8000a80:	950c      	str	r5, [sp, #48]	; 0x30
 8000a82:	e440      	b.n	8000306 <__ssvfscanf_r+0x3e>
 8000a84:	464d      	mov	r5, r9
 8000a86:	3d5e      	subs	r5, #94	; 0x5e
 8000a88:	48e4      	ldr	r0, [pc, #912]	; (8000e1c <__ssvfscanf_r+0xb54>)
 8000a8a:	3dff      	subs	r5, #255	; 0xff
 8000a8c:	950a      	str	r5, [sp, #40]	; 0x28
 8000a8e:	4681      	mov	r9, r0
 8000a90:	e688      	b.n	80007a4 <__ssvfscanf_r+0x4dc>
 8000a92:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000a94:	4be2      	ldr	r3, [pc, #904]	; (8000e20 <__ssvfscanf_r+0xb58>)
 8000a96:	401d      	ands	r5, r3
 8000a98:	9509      	str	r5, [sp, #36]	; 0x24
 8000a9a:	e558      	b.n	800054e <__ssvfscanf_r+0x286>
 8000a9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	4699      	mov	r9, r3
 8000aa2:	07ed      	lsls	r5, r5, #31
 8000aa4:	d400      	bmi.n	8000aa8 <__ssvfscanf_r+0x7e0>
 8000aa6:	e4d2      	b.n	800044e <__ssvfscanf_r+0x186>
 8000aa8:	a818      	add	r0, sp, #96	; 0x60
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2208      	movs	r2, #8
 8000aae:	f000 fc63 	bl	8001378 <memset>
 8000ab2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	401d      	ands	r5, r3
 8000ab8:	9509      	str	r5, [sp, #36]	; 0x24
 8000aba:	2500      	movs	r5, #0
 8000abc:	9506      	str	r5, [sp, #24]
 8000abe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d105      	bne.n	8000ad0 <__ssvfscanf_r+0x808>
 8000ac4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000ac6:	682d      	ldr	r5, [r5, #0]
 8000ac8:	9506      	str	r5, [sp, #24]
 8000aca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000acc:	3504      	adds	r5, #4
 8000ace:	950b      	str	r5, [sp, #44]	; 0x2c
 8000ad0:	9b02      	ldr	r3, [sp, #8]
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	1c05      	adds	r5, r0, #0
 8000ad6:	4698      	mov	r8, r3
 8000ad8:	e017      	b.n	8000b0a <__ssvfscanf_r+0x842>
 8000ada:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000adc:	2800      	cmp	r0, #0
 8000ade:	d101      	bne.n	8000ae4 <__ssvfscanf_r+0x81c>
 8000ae0:	9906      	ldr	r1, [sp, #24]
 8000ae2:	6008      	str	r0, [r1, #0]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ae8:	4252      	negs	r2, r2
 8000aea:	44a8      	add	r8, r5
 8000aec:	4491      	add	r9, r2
 8000aee:	2500      	movs	r5, #0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d103      	bne.n	8000afc <__ssvfscanf_r+0x834>
 8000af4:	9d06      	ldr	r5, [sp, #24]
 8000af6:	3504      	adds	r5, #4
 8000af8:	9506      	str	r5, [sp, #24]
 8000afa:	1c1d      	adds	r5, r3, #0
 8000afc:	6870      	ldr	r0, [r6, #4]
 8000afe:	2800      	cmp	r0, #0
 8000b00:	dd24      	ble.n	8000b4c <__ssvfscanf_r+0x884>
 8000b02:	4648      	mov	r0, r9
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d100      	bne.n	8000b0a <__ssvfscanf_r+0x842>
 8000b08:	e21e      	b.n	8000f48 <__ssvfscanf_r+0xc80>
 8000b0a:	f000 fb45 	bl	8001198 <__locale_mb_cur_max>
 8000b0e:	42a8      	cmp	r0, r5
 8000b10:	d100      	bne.n	8000b14 <__ssvfscanf_r+0x84c>
 8000b12:	e4cb      	b.n	80004ac <__ssvfscanf_r+0x1e4>
 8000b14:	6833      	ldr	r3, [r6, #0]
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	a95c      	add	r1, sp, #368	; 0x170
 8000b1a:	554a      	strb	r2, [r1, r5]
 8000b1c:	6872      	ldr	r2, [r6, #4]
 8000b1e:	3a01      	subs	r2, #1
 8000b20:	6072      	str	r2, [r6, #4]
 8000b22:	3301      	adds	r3, #1
 8000b24:	aa18      	add	r2, sp, #96	; 0x60
 8000b26:	3501      	adds	r5, #1
 8000b28:	6033      	str	r3, [r6, #0]
 8000b2a:	4658      	mov	r0, fp
 8000b2c:	9200      	str	r2, [sp, #0]
 8000b2e:	1c2b      	adds	r3, r5, #0
 8000b30:	9906      	ldr	r1, [sp, #24]
 8000b32:	aa5c      	add	r2, sp, #368	; 0x170
 8000b34:	f000 fb6e 	bl	8001214 <_mbrtowc_r>
 8000b38:	1c43      	adds	r3, r0, #1
 8000b3a:	d100      	bne.n	8000b3e <__ssvfscanf_r+0x876>
 8000b3c:	e4b6      	b.n	80004ac <__ssvfscanf_r+0x1e4>
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	d0cb      	beq.n	8000ada <__ssvfscanf_r+0x812>
 8000b42:	3002      	adds	r0, #2
 8000b44:	d1ce      	bne.n	8000ae4 <__ssvfscanf_r+0x81c>
 8000b46:	6870      	ldr	r0, [r6, #4]
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	dcda      	bgt.n	8000b02 <__ssvfscanf_r+0x83a>
 8000b4c:	4658      	mov	r0, fp
 8000b4e:	1c31      	adds	r1, r6, #0
 8000b50:	f001 fe86 	bl	8002860 <__ssrefill_r>
 8000b54:	2800      	cmp	r0, #0
 8000b56:	d0d4      	beq.n	8000b02 <__ssvfscanf_r+0x83a>
 8000b58:	4643      	mov	r3, r8
 8000b5a:	9302      	str	r3, [sp, #8]
 8000b5c:	2d00      	cmp	r5, #0
 8000b5e:	d100      	bne.n	8000b62 <__ssvfscanf_r+0x89a>
 8000b60:	e1f4      	b.n	8000f4c <__ssvfscanf_r+0xc84>
 8000b62:	e4a3      	b.n	80004ac <__ssvfscanf_r+0x1e4>
 8000b64:	464d      	mov	r5, r9
 8000b66:	3d5e      	subs	r5, #94	; 0x5e
 8000b68:	48ac      	ldr	r0, [pc, #688]	; (8000e1c <__ssvfscanf_r+0xb54>)
 8000b6a:	3dff      	subs	r5, #255	; 0xff
 8000b6c:	9513      	str	r5, [sp, #76]	; 0x4c
 8000b6e:	4681      	mov	r9, r0
 8000b70:	e4b5      	b.n	80004de <__ssvfscanf_r+0x216>
 8000b72:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000b74:	3504      	adds	r5, #4
 8000b76:	950a      	str	r5, [sp, #40]	; 0x28
 8000b78:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000b7a:	9a02      	ldr	r2, [sp, #8]
 8000b7c:	682d      	ldr	r5, [r5, #0]
 8000b7e:	6833      	ldr	r3, [r6, #0]
 8000b80:	9509      	str	r5, [sp, #36]	; 0x24
 8000b82:	46a8      	mov	r8, r5
 8000b84:	464d      	mov	r5, r9
 8000b86:	4691      	mov	r9, r2
 8000b88:	781a      	ldrb	r2, [r3, #0]
 8000b8a:	6821      	ldr	r1, [r4, #0]
 8000b8c:	188a      	adds	r2, r1, r2
 8000b8e:	7852      	ldrb	r2, [r2, #1]
 8000b90:	4217      	tst	r7, r2
 8000b92:	d000      	beq.n	8000b96 <__ssvfscanf_r+0x8ce>
 8000b94:	e0fa      	b.n	8000d8c <__ssvfscanf_r+0xac4>
 8000b96:	6872      	ldr	r2, [r6, #4]
 8000b98:	3a01      	subs	r2, #1
 8000b9a:	6072      	str	r2, [r6, #4]
 8000b9c:	781a      	ldrb	r2, [r3, #0]
 8000b9e:	4641      	mov	r1, r8
 8000ba0:	700a      	strb	r2, [r1, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	3d01      	subs	r5, #1
 8000ba8:	4490      	add	r8, r2
 8000baa:	6033      	str	r3, [r6, #0]
 8000bac:	2d00      	cmp	r5, #0
 8000bae:	d100      	bne.n	8000bb2 <__ssvfscanf_r+0x8ea>
 8000bb0:	e0ec      	b.n	8000d8c <__ssvfscanf_r+0xac4>
 8000bb2:	6870      	ldr	r0, [r6, #4]
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	dce7      	bgt.n	8000b88 <__ssvfscanf_r+0x8c0>
 8000bb8:	4658      	mov	r0, fp
 8000bba:	1c31      	adds	r1, r6, #0
 8000bbc:	f001 fe50 	bl	8002860 <__ssrefill_r>
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	d000      	beq.n	8000bc6 <__ssvfscanf_r+0x8fe>
 8000bc4:	e0e2      	b.n	8000d8c <__ssvfscanf_r+0xac4>
 8000bc6:	6833      	ldr	r3, [r6, #0]
 8000bc8:	e7de      	b.n	8000b88 <__ssvfscanf_r+0x8c0>
 8000bca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000bd0:	4398      	bics	r0, r3
 8000bd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000bd4:	3101      	adds	r1, #1
 8000bd6:	9009      	str	r0, [sp, #36]	; 0x24
 8000bd8:	910e      	str	r1, [sp, #56]	; 0x38
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d100      	bne.n	8000be0 <__ssvfscanf_r+0x918>
 8000bde:	e540      	b.n	8000662 <__ssvfscanf_r+0x39a>
 8000be0:	3b01      	subs	r3, #1
 8000be2:	9313      	str	r3, [sp, #76]	; 0x4c
 8000be4:	3501      	adds	r5, #1
 8000be6:	e53c      	b.n	8000662 <__ssvfscanf_r+0x39a>
 8000be8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8000bea:	2902      	cmp	r1, #2
 8000bec:	d000      	beq.n	8000bf0 <__ssvfscanf_r+0x928>
 8000bee:	e55f      	b.n	80006b0 <__ssvfscanf_r+0x3e8>
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	9011      	str	r0, [sp, #68]	; 0x44
 8000bf4:	e531      	b.n	800065a <__ssvfscanf_r+0x392>
 8000bf6:	9502      	str	r5, [sp, #8]
 8000bf8:	4682      	mov	sl, r0
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	431d      	orrs	r5, r3
 8000c02:	9509      	str	r5, [sp, #36]	; 0x24
 8000c04:	4d87      	ldr	r5, [pc, #540]	; (8000e24 <__ssvfscanf_r+0xb5c>)
 8000c06:	2003      	movs	r0, #3
 8000c08:	950f      	str	r5, [sp, #60]	; 0x3c
 8000c0a:	2510      	movs	r5, #16
 8000c0c:	950d      	str	r5, [sp, #52]	; 0x34
 8000c0e:	4680      	mov	r8, r0
 8000c10:	f7ff fbe7 	bl	80003e2 <__ssvfscanf_r+0x11a>
 8000c14:	4682      	mov	sl, r0
 8000c16:	9502      	str	r5, [sp, #8]
 8000c18:	ad1c      	add	r5, sp, #112	; 0x70
 8000c1a:	1c28      	adds	r0, r5, #0
 8000c1c:	4651      	mov	r1, sl
 8000c1e:	950a      	str	r5, [sp, #40]	; 0x28
 8000c20:	f000 fc3a 	bl	8001498 <__sccl>
 8000c24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000c26:	2340      	movs	r3, #64	; 0x40
 8000c28:	4682      	mov	sl, r0
 8000c2a:	431d      	orrs	r5, r3
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	9509      	str	r5, [sp, #36]	; 0x24
 8000c30:	4680      	mov	r8, r0
 8000c32:	f7ff fbd6 	bl	80003e2 <__ssvfscanf_r+0x11a>
 8000c36:	9502      	str	r5, [sp, #8]
 8000c38:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000c3a:	2340      	movs	r3, #64	; 0x40
 8000c3c:	4682      	mov	sl, r0
 8000c3e:	431d      	orrs	r5, r3
 8000c40:	2000      	movs	r0, #0
 8000c42:	9509      	str	r5, [sp, #36]	; 0x24
 8000c44:	4680      	mov	r8, r0
 8000c46:	f7ff fbcc 	bl	80003e2 <__ssvfscanf_r+0x11a>
 8000c4a:	9502      	str	r5, [sp, #8]
 8000c4c:	4682      	mov	sl, r0
 8000c4e:	f7ff fbc2 	bl	80003d6 <__ssvfscanf_r+0x10e>
 8000c52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000c54:	2204      	movs	r2, #4
 8000c56:	4311      	orrs	r1, r2
 8000c58:	9109      	str	r1, [sp, #36]	; 0x24
 8000c5a:	f7ff fbab 	bl	80003b4 <__ssvfscanf_r+0xec>
 8000c5e:	9502      	str	r5, [sp, #8]
 8000c60:	4d71      	ldr	r5, [pc, #452]	; (8000e28 <__ssvfscanf_r+0xb60>)
 8000c62:	4682      	mov	sl, r0
 8000c64:	950f      	str	r5, [sp, #60]	; 0x3c
 8000c66:	2003      	movs	r0, #3
 8000c68:	2500      	movs	r5, #0
 8000c6a:	950d      	str	r5, [sp, #52]	; 0x34
 8000c6c:	4680      	mov	r8, r0
 8000c6e:	f7ff fbb8 	bl	80003e2 <__ssvfscanf_r+0x11a>
 8000c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c74:	4661      	mov	r1, ip
 8000c76:	430b      	orrs	r3, r1
 8000c78:	9309      	str	r3, [sp, #36]	; 0x24
 8000c7a:	f7ff fb9b 	bl	80003b4 <__ssvfscanf_r+0xec>
 8000c7e:	9502      	str	r5, [sp, #8]
 8000c80:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000c82:	4682      	mov	sl, r0
 8000c84:	06ed      	lsls	r5, r5, #27
 8000c86:	d501      	bpl.n	8000c8c <__ssvfscanf_r+0x9c4>
 8000c88:	f7ff fb3d 	bl	8000306 <__ssvfscanf_r+0x3e>
 8000c8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000c8e:	076d      	lsls	r5, r5, #29
 8000c90:	d400      	bmi.n	8000c94 <__ssvfscanf_r+0x9cc>
 8000c92:	e144      	b.n	8000f1e <__ssvfscanf_r+0xc56>
 8000c94:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000c96:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000c98:	4669      	mov	r1, sp
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	6800      	ldr	r0, [r0, #0]
 8000c9e:	5a52      	ldrh	r2, [r2, r1]
 8000ca0:	3504      	adds	r5, #4
 8000ca2:	9008      	str	r0, [sp, #32]
 8000ca4:	8002      	strh	r2, [r0, #0]
 8000ca6:	950b      	str	r5, [sp, #44]	; 0x2c
 8000ca8:	f7ff fb2d 	bl	8000306 <__ssvfscanf_r+0x3e>
 8000cac:	9502      	str	r5, [sp, #8]
 8000cae:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	431d      	orrs	r5, r3
 8000cb4:	4682      	mov	sl, r0
 8000cb6:	9509      	str	r5, [sp, #36]	; 0x24
 8000cb8:	f7ff fb8d 	bl	80003d6 <__ssvfscanf_r+0x10e>
 8000cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	9209      	str	r2, [sp, #36]	; 0x24
 8000cc4:	f7ff fb76 	bl	80003b4 <__ssvfscanf_r+0xec>
 8000cc8:	9502      	str	r5, [sp, #8]
 8000cca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000ccc:	2301      	movs	r3, #1
 8000cce:	431d      	orrs	r5, r3
 8000cd0:	9509      	str	r5, [sp, #36]	; 0x24
 8000cd2:	4682      	mov	sl, r0
 8000cd4:	4d53      	ldr	r5, [pc, #332]	; (8000e24 <__ssvfscanf_r+0xb5c>)
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	950f      	str	r5, [sp, #60]	; 0x3c
 8000cda:	2508      	movs	r5, #8
 8000cdc:	950d      	str	r5, [sp, #52]	; 0x34
 8000cde:	4680      	mov	r8, r0
 8000ce0:	f7ff fb7f 	bl	80003e2 <__ssvfscanf_r+0x11a>
 8000ce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000ce6:	2210      	movs	r2, #16
 8000ce8:	4311      	orrs	r1, r2
 8000cea:	9109      	str	r1, [sp, #36]	; 0x24
 8000cec:	f7ff fb62 	bl	80003b4 <__ssvfscanf_r+0xec>
 8000cf0:	464b      	mov	r3, r9
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	469a      	mov	sl, r3
 8000cf6:	44d1      	add	r9, sl
 8000cf8:	4649      	mov	r1, r9
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	2230      	movs	r2, #48	; 0x30
 8000cfe:	4689      	mov	r9, r1
 8000d00:	4252      	negs	r2, r2
 8000d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d04:	4491      	add	r9, r2
 8000d06:	4499      	add	r9, r3
 8000d08:	f7ff fb54 	bl	80003b4 <__ssvfscanf_r+0xec>
 8000d0c:	9502      	str	r5, [sp, #8]
 8000d0e:	4682      	mov	sl, r0
 8000d10:	e7e0      	b.n	8000cd4 <__ssvfscanf_r+0xa0c>
 8000d12:	9502      	str	r5, [sp, #8]
 8000d14:	4682      	mov	sl, r0
 8000d16:	2388      	movs	r3, #136	; 0x88
 8000d18:	e770      	b.n	8000bfc <__ssvfscanf_r+0x934>
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	9502      	str	r5, [sp, #8]
 8000d1e:	4682      	mov	sl, r0
 8000d20:	4690      	mov	r8, r2
 8000d22:	f7ff fb5e 	bl	80003e2 <__ssvfscanf_r+0x11a>
 8000d26:	9502      	str	r5, [sp, #8]
 8000d28:	4682      	mov	sl, r0
 8000d2a:	4d3e      	ldr	r5, [pc, #248]	; (8000e24 <__ssvfscanf_r+0xb5c>)
 8000d2c:	f7ff fb54 	bl	80003d8 <__ssvfscanf_r+0x110>
 8000d30:	2104      	movs	r1, #4
 8000d32:	9502      	str	r5, [sp, #8]
 8000d34:	4682      	mov	sl, r0
 8000d36:	4688      	mov	r8, r1
 8000d38:	f7ff fb53 	bl	80003e2 <__ssvfscanf_r+0x11a>
 8000d3c:	9502      	str	r5, [sp, #8]
 8000d3e:	4682      	mov	sl, r0
 8000d40:	f7ff fb08 	bl	8000354 <__ssvfscanf_r+0x8c>
 8000d44:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000d46:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000d48:	4680      	mov	r8, r0
 8000d4a:	2004      	movs	r0, #4
 8000d4c:	4480      	add	r8, r0
 8000d4e:	6829      	ldr	r1, [r5, #0]
 8000d50:	4658      	mov	r0, fp
 8000d52:	9600      	str	r6, [sp, #0]
 8000d54:	2201      	movs	r2, #1
 8000d56:	464b      	mov	r3, r9
 8000d58:	f001 fda4 	bl	80028a4 <_sfread_r>
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	d101      	bne.n	8000d64 <__ssvfscanf_r+0xa9c>
 8000d60:	f7ff fba4 	bl	80004ac <__ssvfscanf_r+0x1e4>
 8000d64:	9d02      	ldr	r5, [sp, #8]
 8000d66:	1945      	adds	r5, r0, r5
 8000d68:	9502      	str	r5, [sp, #8]
 8000d6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d6c:	3501      	adds	r5, #1
 8000d6e:	950c      	str	r5, [sp, #48]	; 0x30
 8000d70:	4645      	mov	r5, r8
 8000d72:	950b      	str	r5, [sp, #44]	; 0x2c
 8000d74:	f7ff fac7 	bl	8000306 <__ssvfscanf_r+0x3e>
 8000d78:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000d7a:	431d      	orrs	r5, r3
 8000d7c:	9509      	str	r5, [sp, #36]	; 0x24
 8000d7e:	4d2a      	ldr	r5, [pc, #168]	; (8000e28 <__ssvfscanf_r+0xb60>)
 8000d80:	950f      	str	r5, [sp, #60]	; 0x3c
 8000d82:	250a      	movs	r5, #10
 8000d84:	950d      	str	r5, [sp, #52]	; 0x34
 8000d86:	4690      	mov	r8, r2
 8000d88:	f7ff fb2b 	bl	80003e2 <__ssvfscanf_r+0x11a>
 8000d8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000d8e:	4640      	mov	r0, r8
 8000d90:	464a      	mov	r2, r9
 8000d92:	1b43      	subs	r3, r0, r5
 8000d94:	18d5      	adds	r5, r2, r3
 8000d96:	9502      	str	r5, [sp, #8]
 8000d98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d9a:	3501      	adds	r5, #1
 8000d9c:	950c      	str	r5, [sp, #48]	; 0x30
 8000d9e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8000da0:	2100      	movs	r1, #0
 8000da2:	7001      	strb	r1, [r0, #0]
 8000da4:	950b      	str	r5, [sp, #44]	; 0x2c
 8000da6:	f7ff faae 	bl	8000306 <__ssvfscanf_r+0x3e>
 8000daa:	4643      	mov	r3, r8
 8000dac:	46a8      	mov	r8, r5
 8000dae:	4443      	add	r3, r8
 8000db0:	9302      	str	r3, [sp, #8]
 8000db2:	f7ff faa8 	bl	8000306 <__ssvfscanf_r+0x3e>
 8000db6:	4643      	mov	r3, r8
 8000db8:	9302      	str	r3, [sp, #8]
 8000dba:	46a8      	mov	r8, r5
 8000dbc:	9802      	ldr	r0, [sp, #8]
 8000dbe:	1c05      	adds	r5, r0, #0
 8000dc0:	4445      	add	r5, r8
 8000dc2:	9502      	str	r5, [sp, #8]
 8000dc4:	f7ff fa9f 	bl	8000306 <__ssvfscanf_r+0x3e>
 8000dc8:	4640      	mov	r0, r8
 8000dca:	7003      	strb	r3, [r0, #0]
 8000dcc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8000dce:	4658      	mov	r0, fp
 8000dd0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000dd6:	f000 f97b 	bl	80010d0 <__ssvfscanf_r+0xe08>
 8000dda:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000ddc:	06ad      	lsls	r5, r5, #26
 8000dde:	d40c      	bmi.n	8000dfa <__ssvfscanf_r+0xb32>
 8000de0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000de2:	076d      	lsls	r5, r5, #29
 8000de4:	d509      	bpl.n	8000dfa <__ssvfscanf_r+0xb32>
 8000de6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000de8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000dea:	3504      	adds	r5, #4
 8000dec:	950b      	str	r5, [sp, #44]	; 0x2c
 8000dee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000df0:	6809      	ldr	r1, [r1, #0]
 8000df2:	3501      	adds	r5, #1
 8000df4:	8008      	strh	r0, [r1, #0]
 8000df6:	950c      	str	r5, [sp, #48]	; 0x30
 8000df8:	e503      	b.n	8000802 <__ssvfscanf_r+0x53a>
 8000dfa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000dfc:	682b      	ldr	r3, [r5, #0]
 8000dfe:	3504      	adds	r5, #4
 8000e00:	6018      	str	r0, [r3, #0]
 8000e02:	950b      	str	r5, [sp, #44]	; 0x2c
 8000e04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e06:	3501      	adds	r5, #1
 8000e08:	950c      	str	r5, [sp, #48]	; 0x30
 8000e0a:	e4fa      	b.n	8000802 <__ssvfscanf_r+0x53a>
 8000e0c:	4643      	mov	r3, r8
 8000e0e:	9302      	str	r3, [sp, #8]
 8000e10:	46a8      	mov	r8, r5
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d1d2      	bne.n	8000dbc <__ssvfscanf_r+0xaf4>
 8000e16:	f7ff fab7 	bl	8000388 <__ssvfscanf_r+0xc0>
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	0000015d 	.word	0x0000015d
 8000e20:	fffffeff 	.word	0xfffffeff
 8000e24:	08002641 	.word	0x08002641
 8000e28:	080024b1 	.word	0x080024b1
 8000e2c:	464d      	mov	r5, r9
 8000e2e:	9502      	str	r5, [sp, #8]
 8000e30:	9d06      	ldr	r5, [sp, #24]
 8000e32:	4640      	mov	r0, r8
 8000e34:	1a2d      	subs	r5, r5, r0
 8000e36:	46a8      	mov	r8, r5
 8000e38:	d101      	bne.n	8000e3e <__ssvfscanf_r+0xb76>
 8000e3a:	f7ff faa5 	bl	8000388 <__ssvfscanf_r+0xc0>
 8000e3e:	9d06      	ldr	r5, [sp, #24]
 8000e40:	2000      	movs	r0, #0
 8000e42:	7028      	strb	r0, [r5, #0]
 8000e44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e46:	3501      	adds	r5, #1
 8000e48:	950c      	str	r5, [sp, #48]	; 0x30
 8000e4a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000e4c:	950b      	str	r5, [sp, #44]	; 0x2c
 8000e4e:	e7b5      	b.n	8000dbc <__ssvfscanf_r+0xaf4>
 8000e50:	464d      	mov	r5, r9
 8000e52:	9502      	str	r5, [sp, #8]
 8000e54:	e7ec      	b.n	8000e30 <__ssvfscanf_r+0xb68>
 8000e56:	4b99      	ldr	r3, [pc, #612]	; (80010bc <__ssvfscanf_r+0xdf4>)
 8000e58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000e5a:	4019      	ands	r1, r3
 8000e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000e5e:	9109      	str	r1, [sp, #36]	; 0x24
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <__ssvfscanf_r+0xba2>
 8000e64:	3b01      	subs	r3, #1
 8000e66:	930a      	str	r3, [sp, #40]	; 0x28
 8000e68:	3501      	adds	r5, #1
 8000e6a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e6c:	3001      	adds	r0, #1
 8000e6e:	900e      	str	r0, [sp, #56]	; 0x38
 8000e70:	e4e9      	b.n	8000846 <__ssvfscanf_r+0x57e>
 8000e72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000e74:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000e76:	07ad      	lsls	r5, r5, #30
 8000e78:	d501      	bpl.n	8000e7e <__ssvfscanf_r+0xbb6>
 8000e7a:	f7ff fbd2 	bl	8000622 <__ssvfscanf_r+0x35a>
 8000e7e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000e80:	6829      	ldr	r1, [r5, #0]
 8000e82:	4681      	mov	r9, r0
 8000e84:	2004      	movs	r0, #4
 8000e86:	4481      	add	r9, r0
 8000e88:	4688      	mov	r8, r1
 8000e8a:	9806      	ldr	r0, [sp, #24]
 8000e8c:	9907      	ldr	r1, [sp, #28]
 8000e8e:	f000 fad5 	bl	800143c <__fpclassifyd>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	d100      	bne.n	8000e98 <__ssvfscanf_r+0xbd0>
 8000e96:	e0c0      	b.n	800101a <__ssvfscanf_r+0xd52>
 8000e98:	9806      	ldr	r0, [sp, #24]
 8000e9a:	9907      	ldr	r1, [sp, #28]
 8000e9c:	f008 edcc 	blx	8009a38 <__aeabi_d2f>
 8000ea0:	4641      	mov	r1, r8
 8000ea2:	464d      	mov	r5, r9
 8000ea4:	6008      	str	r0, [r1, #0]
 8000ea6:	950b      	str	r5, [sp, #44]	; 0x2c
 8000ea8:	f7ff fbc3 	bl	8000632 <__ssvfscanf_r+0x36a>
 8000eac:	4645      	mov	r5, r8
 8000eae:	9502      	str	r5, [sp, #8]
 8000eb0:	e5de      	b.n	8000a70 <__ssvfscanf_r+0x7a8>
 8000eb2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	3101      	adds	r1, #1
 8000eb8:	4658      	mov	r0, fp
 8000eba:	230a      	movs	r3, #10
 8000ebc:	f001 faf8 	bl	80024b0 <_strtol_r>
 8000ec0:	1b42      	subs	r2, r0, r5
 8000ec2:	4b7f      	ldr	r3, [pc, #508]	; (80010c0 <__ssvfscanf_r+0xdf8>)
 8000ec4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8000ec6:	446b      	add	r3, sp
 8000ec8:	429d      	cmp	r5, r3
 8000eca:	d302      	bcc.n	8000ed2 <__ssvfscanf_r+0xc0a>
 8000ecc:	4d7d      	ldr	r5, [pc, #500]	; (80010c4 <__ssvfscanf_r+0xdfc>)
 8000ece:	446d      	add	r5, sp
 8000ed0:	9512      	str	r5, [sp, #72]	; 0x48
 8000ed2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8000ed4:	497c      	ldr	r1, [pc, #496]	; (80010c8 <__ssvfscanf_r+0xe00>)
 8000ed6:	f000 fb41 	bl	800155c <sprintf>
 8000eda:	f7ff fb95 	bl	8000608 <__ssvfscanf_r+0x340>
 8000ede:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000ee0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8000ee2:	1a2b      	subs	r3, r5, r0
 8000ee4:	4645      	mov	r5, r8
 8000ee6:	425a      	negs	r2, r3
 8000ee8:	9512      	str	r5, [sp, #72]	; 0x48
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1e9      	bne.n	8000ec2 <__ssvfscanf_r+0xbfa>
 8000eee:	f7ff fb8b 	bl	8000608 <__ssvfscanf_r+0x340>
 8000ef2:	4658      	mov	r0, fp
 8000ef4:	1c32      	adds	r2, r6, #0
 8000ef6:	f001 fc6f 	bl	80027d8 <_sungetc_r>
 8000efa:	9d02      	ldr	r5, [sp, #8]
 8000efc:	4643      	mov	r3, r8
 8000efe:	3b02      	subs	r3, #2
 8000f00:	3d01      	subs	r5, #1
 8000f02:	7819      	ldrb	r1, [r3, #0]
 8000f04:	9502      	str	r5, [sp, #8]
 8000f06:	f7ff fb65 	bl	80005d4 <__ssvfscanf_r+0x30c>
 8000f0a:	4970      	ldr	r1, [pc, #448]	; (80010cc <__ssvfscanf_r+0xe04>)
 8000f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f0e:	4008      	ands	r0, r1
 8000f10:	9009      	str	r0, [sp, #36]	; 0x24
 8000f12:	2101      	movs	r1, #1
 8000f14:	2000      	movs	r0, #0
 8000f16:	9111      	str	r1, [sp, #68]	; 0x44
 8000f18:	900e      	str	r0, [sp, #56]	; 0x38
 8000f1a:	f7ff fb9e 	bl	800065a <__ssvfscanf_r+0x392>
 8000f1e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000f20:	682b      	ldr	r3, [r5, #0]
 8000f22:	9d02      	ldr	r5, [sp, #8]
 8000f24:	601d      	str	r5, [r3, #0]
 8000f26:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000f28:	3504      	adds	r5, #4
 8000f2a:	950b      	str	r5, [sp, #44]	; 0x2c
 8000f2c:	f7ff f9eb 	bl	8000306 <__ssvfscanf_r+0x3e>
 8000f30:	6831      	ldr	r1, [r6, #0]
 8000f32:	464a      	mov	r2, r9
 8000f34:	1c08      	adds	r0, r1, #0
 8000f36:	46a9      	mov	r9, r5
 8000f38:	1b5b      	subs	r3, r3, r5
 8000f3a:	4448      	add	r0, r9
 8000f3c:	9202      	str	r2, [sp, #8]
 8000f3e:	44c8      	add	r8, r9
 8000f40:	6073      	str	r3, [r6, #4]
 8000f42:	6030      	str	r0, [r6, #0]
 8000f44:	f7ff faa2 	bl	800048c <__ssvfscanf_r+0x1c4>
 8000f48:	4645      	mov	r5, r8
 8000f4a:	9502      	str	r5, [sp, #8]
 8000f4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000f4e:	426b      	negs	r3, r5
 8000f50:	416b      	adcs	r3, r5
 8000f52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000f54:	18ed      	adds	r5, r5, r3
 8000f56:	950c      	str	r5, [sp, #48]	; 0x30
 8000f58:	f7ff f9d5 	bl	8000306 <__ssvfscanf_r+0x3e>
 8000f5c:	f000 f91c 	bl	8001198 <__locale_mb_cur_max>
 8000f60:	42a8      	cmp	r0, r5
 8000f62:	d101      	bne.n	8000f68 <__ssvfscanf_r+0xca0>
 8000f64:	f7ff faa2 	bl	80004ac <__ssvfscanf_r+0x1e4>
 8000f68:	6833      	ldr	r3, [r6, #0]
 8000f6a:	781a      	ldrb	r2, [r3, #0]
 8000f6c:	a95c      	add	r1, sp, #368	; 0x170
 8000f6e:	554a      	strb	r2, [r1, r5]
 8000f70:	6872      	ldr	r2, [r6, #4]
 8000f72:	3a01      	subs	r2, #1
 8000f74:	6072      	str	r2, [r6, #4]
 8000f76:	3301      	adds	r3, #1
 8000f78:	aa1a      	add	r2, sp, #104	; 0x68
 8000f7a:	3501      	adds	r5, #1
 8000f7c:	6033      	str	r3, [r6, #0]
 8000f7e:	4658      	mov	r0, fp
 8000f80:	9200      	str	r2, [sp, #0]
 8000f82:	1c2b      	adds	r3, r5, #0
 8000f84:	9906      	ldr	r1, [sp, #24]
 8000f86:	aa5c      	add	r2, sp, #368	; 0x170
 8000f88:	f000 f944 	bl	8001214 <_mbrtowc_r>
 8000f8c:	1c43      	adds	r3, r0, #1
 8000f8e:	d101      	bne.n	8000f94 <__ssvfscanf_r+0xccc>
 8000f90:	f7ff fa8c 	bl	80004ac <__ssvfscanf_r+0x1e4>
 8000f94:	2800      	cmp	r0, #0
 8000f96:	d11d      	bne.n	8000fd4 <__ssvfscanf_r+0xd0c>
 8000f98:	9906      	ldr	r1, [sp, #24]
 8000f9a:	6008      	str	r0, [r1, #0]
 8000f9c:	f000 f8c4 	bl	8001128 <iswspace>
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d01c      	beq.n	8000fde <__ssvfscanf_r+0xd16>
 8000fa4:	4643      	mov	r3, r8
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	2d00      	cmp	r5, #0
 8000faa:	d100      	bne.n	8000fae <__ssvfscanf_r+0xce6>
 8000fac:	e560      	b.n	8000a70 <__ssvfscanf_r+0x7a8>
 8000fae:	4698      	mov	r8, r3
 8000fb0:	3d01      	subs	r5, #1
 8000fb2:	ab5c      	add	r3, sp, #368	; 0x170
 8000fb4:	5d59      	ldrb	r1, [r3, r5]
 8000fb6:	4658      	mov	r0, fp
 8000fb8:	1c32      	adds	r2, r6, #0
 8000fba:	f001 fc0d 	bl	80027d8 <_sungetc_r>
 8000fbe:	2d00      	cmp	r5, #0
 8000fc0:	d1f6      	bne.n	8000fb0 <__ssvfscanf_r+0xce8>
 8000fc2:	e553      	b.n	8000a6c <__ssvfscanf_r+0x7a4>
 8000fc4:	464d      	mov	r5, r9
 8000fc6:	9502      	str	r5, [sp, #8]
 8000fc8:	9d06      	ldr	r5, [sp, #24]
 8000fca:	45a8      	cmp	r8, r5
 8000fcc:	d000      	beq.n	8000fd0 <__ssvfscanf_r+0xd08>
 8000fce:	e72f      	b.n	8000e30 <__ssvfscanf_r+0xb68>
 8000fd0:	f7ff fa6c 	bl	80004ac <__ssvfscanf_r+0x1e4>
 8000fd4:	3002      	adds	r0, #2
 8000fd6:	d00e      	beq.n	8000ff6 <__ssvfscanf_r+0xd2e>
 8000fd8:	9a06      	ldr	r2, [sp, #24]
 8000fda:	6810      	ldr	r0, [r2, #0]
 8000fdc:	e7de      	b.n	8000f9c <__ssvfscanf_r+0xcd4>
 8000fde:	2101      	movs	r1, #1
 8000fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000fe2:	4249      	negs	r1, r1
 8000fe4:	44a8      	add	r8, r5
 8000fe6:	4489      	add	r9, r1
 8000fe8:	2500      	movs	r5, #0
 8000fea:	2a00      	cmp	r2, #0
 8000fec:	d103      	bne.n	8000ff6 <__ssvfscanf_r+0xd2e>
 8000fee:	9d06      	ldr	r5, [sp, #24]
 8000ff0:	3504      	adds	r5, #4
 8000ff2:	9506      	str	r5, [sp, #24]
 8000ff4:	1c15      	adds	r5, r2, #0
 8000ff6:	6870      	ldr	r0, [r6, #4]
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	dd00      	ble.n	8000ffe <__ssvfscanf_r+0xd36>
 8000ffc:	e52a      	b.n	8000a54 <__ssvfscanf_r+0x78c>
 8000ffe:	4658      	mov	r0, fp
 8001000:	1c31      	adds	r1, r6, #0
 8001002:	f001 fc2d 	bl	8002860 <__ssrefill_r>
 8001006:	2800      	cmp	r0, #0
 8001008:	d100      	bne.n	800100c <__ssvfscanf_r+0xd44>
 800100a:	e523      	b.n	8000a54 <__ssvfscanf_r+0x78c>
 800100c:	4643      	mov	r3, r8
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2d00      	cmp	r5, #0
 8001012:	d001      	beq.n	8001018 <__ssvfscanf_r+0xd50>
 8001014:	f7ff fa4a 	bl	80004ac <__ssvfscanf_r+0x1e4>
 8001018:	e52a      	b.n	8000a70 <__ssvfscanf_r+0x7a8>
 800101a:	f000 fa7b 	bl	8001514 <nanf>
 800101e:	e73f      	b.n	8000ea0 <__ssvfscanf_r+0xbd8>
 8001020:	2903      	cmp	r1, #3
 8001022:	d101      	bne.n	8001028 <__ssvfscanf_r+0xd60>
 8001024:	f7ff fbaf 	bl	8000786 <__ssvfscanf_r+0x4be>
 8001028:	f7ff fa8b 	bl	8000542 <__ssvfscanf_r+0x27a>
 800102c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800102e:	45a8      	cmp	r8, r5
 8001030:	d801      	bhi.n	8001036 <__ssvfscanf_r+0xd6e>
 8001032:	f7ff f9a9 	bl	8000388 <__ssvfscanf_r+0xc0>
 8001036:	466d      	mov	r5, sp
 8001038:	4644      	mov	r4, r8
 800103a:	3570      	adds	r5, #112	; 0x70
 800103c:	3c01      	subs	r4, #1
 800103e:	35ff      	adds	r5, #255	; 0xff
 8001040:	465f      	mov	r7, fp
 8001042:	7821      	ldrb	r1, [r4, #0]
 8001044:	1c38      	adds	r0, r7, #0
 8001046:	1c32      	adds	r2, r6, #0
 8001048:	3c01      	subs	r4, #1
 800104a:	f001 fbc5 	bl	80027d8 <_sungetc_r>
 800104e:	42ac      	cmp	r4, r5
 8001050:	d1f7      	bne.n	8001042 <__ssvfscanf_r+0xd7a>
 8001052:	f7ff f999 	bl	8000388 <__ssvfscanf_r+0xc0>
 8001056:	464d      	mov	r5, r9
 8001058:	9502      	str	r5, [sp, #8]
 800105a:	f7ff fa74 	bl	8000546 <__ssvfscanf_r+0x27e>
 800105e:	466d      	mov	r5, sp
 8001060:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001062:	4644      	mov	r4, r8
 8001064:	3570      	adds	r5, #112	; 0x70
 8001066:	3c01      	subs	r4, #1
 8001068:	35ff      	adds	r5, #255	; 0xff
 800106a:	465f      	mov	r7, fp
 800106c:	4580      	cmp	r8, r0
 800106e:	d801      	bhi.n	8001074 <__ssvfscanf_r+0xdac>
 8001070:	f7ff f98a 	bl	8000388 <__ssvfscanf_r+0xc0>
 8001074:	7821      	ldrb	r1, [r4, #0]
 8001076:	1c38      	adds	r0, r7, #0
 8001078:	1c32      	adds	r2, r6, #0
 800107a:	3c01      	subs	r4, #1
 800107c:	f001 fbac 	bl	80027d8 <_sungetc_r>
 8001080:	42ac      	cmp	r4, r5
 8001082:	d1f7      	bne.n	8001074 <__ssvfscanf_r+0xdac>
 8001084:	f7ff f980 	bl	8000388 <__ssvfscanf_r+0xc0>
 8001088:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800108a:	45a8      	cmp	r8, r5
 800108c:	d801      	bhi.n	8001092 <__ssvfscanf_r+0xdca>
 800108e:	f7ff f97b 	bl	8000388 <__ssvfscanf_r+0xc0>
 8001092:	466d      	mov	r5, sp
 8001094:	4644      	mov	r4, r8
 8001096:	3570      	adds	r5, #112	; 0x70
 8001098:	3c01      	subs	r4, #1
 800109a:	35ff      	adds	r5, #255	; 0xff
 800109c:	465f      	mov	r7, fp
 800109e:	7821      	ldrb	r1, [r4, #0]
 80010a0:	1c38      	adds	r0, r7, #0
 80010a2:	1c32      	adds	r2, r6, #0
 80010a4:	3c01      	subs	r4, #1
 80010a6:	f001 fb97 	bl	80027d8 <_sungetc_r>
 80010aa:	42ac      	cmp	r4, r5
 80010ac:	d1f7      	bne.n	800109e <__ssvfscanf_r+0xdd6>
 80010ae:	f7ff f96b 	bl	8000388 <__ssvfscanf_r+0xc0>
 80010b2:	464d      	mov	r5, r9
 80010b4:	9502      	str	r5, [sp, #8]
 80010b6:	f7ff fa4a 	bl	800054e <__ssvfscanf_r+0x286>
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	fffffc7f 	.word	0xfffffc7f
 80010c0:	000002c3 	.word	0x000002c3
 80010c4:	000002c2 	.word	0x000002c2
 80010c8:	0800d698 	.word	0x0800d698
 80010cc:	fffff87f 	.word	0xfffff87f
 80010d0:	4728      	bx	r5
 80010d2:	46c0      	nop			; (mov r8, r8)

080010d4 <_write_r>:
 80010d4:	b570      	push	{r4, r5, r6, lr}
 80010d6:	4c09      	ldr	r4, [pc, #36]	; (80010fc <_write_r+0x28>)
 80010d8:	1c06      	adds	r6, r0, #0
 80010da:	2500      	movs	r5, #0
 80010dc:	1c08      	adds	r0, r1, #0
 80010de:	1c11      	adds	r1, r2, #0
 80010e0:	1c1a      	adds	r2, r3, #0
 80010e2:	6025      	str	r5, [r4, #0]
 80010e4:	f003 fbe8 	bl	80048b8 <_write>
 80010e8:	1c43      	adds	r3, r0, #1
 80010ea:	d002      	beq.n	80010f2 <_write_r+0x1e>
 80010ec:	bc70      	pop	{r4, r5, r6}
 80010ee:	bc02      	pop	{r1}
 80010f0:	4708      	bx	r1
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f9      	beq.n	80010ec <_write_r+0x18>
 80010f8:	6033      	str	r3, [r6, #0]
 80010fa:	e7f7      	b.n	80010ec <_write_r+0x18>
 80010fc:	20001e4c 	.word	0x20001e4c

08001100 <_close_r>:
 8001100:	b538      	push	{r3, r4, r5, lr}
 8001102:	4c08      	ldr	r4, [pc, #32]	; (8001124 <_close_r+0x24>)
 8001104:	2300      	movs	r3, #0
 8001106:	1c05      	adds	r5, r0, #0
 8001108:	1c08      	adds	r0, r1, #0
 800110a:	6023      	str	r3, [r4, #0]
 800110c:	f003 fc84 	bl	8004a18 <_close>
 8001110:	1c43      	adds	r3, r0, #1
 8001112:	d002      	beq.n	800111a <_close_r+0x1a>
 8001114:	bc38      	pop	{r3, r4, r5}
 8001116:	bc02      	pop	{r1}
 8001118:	4708      	bx	r1
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f9      	beq.n	8001114 <_close_r+0x14>
 8001120:	602b      	str	r3, [r5, #0]
 8001122:	e7f7      	b.n	8001114 <_close_r+0x14>
 8001124:	20001e4c 	.word	0x20001e4c

08001128 <iswspace>:
 8001128:	1c03      	adds	r3, r0, #0
 800112a:	b500      	push	{lr}
 800112c:	2000      	movs	r0, #0
 800112e:	2bff      	cmp	r3, #255	; 0xff
 8001130:	d805      	bhi.n	800113e <iswspace+0x16>
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <iswspace+0x1c>)
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	18d3      	adds	r3, r2, r3
 8001138:	785b      	ldrb	r3, [r3, #1]
 800113a:	2008      	movs	r0, #8
 800113c:	4018      	ands	r0, r3
 800113e:	bc02      	pop	{r1}
 8001140:	4708      	bx	r1
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	200000e4 	.word	0x200000e4

08001148 <_setlocale_r>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	1e14      	subs	r4, r2, #0
 800114c:	d005      	beq.n	800115a <_setlocale_r+0x12>
 800114e:	1c20      	adds	r0, r4, #0
 8001150:	490c      	ldr	r1, [pc, #48]	; (8001184 <_setlocale_r+0x3c>)
 8001152:	f7fe ffff 	bl	8000154 <strcmp>
 8001156:	2800      	cmp	r0, #0
 8001158:	d104      	bne.n	8001164 <_setlocale_r+0x1c>
 800115a:	4d0b      	ldr	r5, [pc, #44]	; (8001188 <_setlocale_r+0x40>)
 800115c:	1c28      	adds	r0, r5, #0
 800115e:	bc38      	pop	{r3, r4, r5}
 8001160:	bc02      	pop	{r1}
 8001162:	4708      	bx	r1
 8001164:	4d08      	ldr	r5, [pc, #32]	; (8001188 <_setlocale_r+0x40>)
 8001166:	1c20      	adds	r0, r4, #0
 8001168:	1c29      	adds	r1, r5, #0
 800116a:	f7fe fff3 	bl	8000154 <strcmp>
 800116e:	2800      	cmp	r0, #0
 8001170:	d0f4      	beq.n	800115c <_setlocale_r+0x14>
 8001172:	1c20      	adds	r0, r4, #0
 8001174:	4905      	ldr	r1, [pc, #20]	; (800118c <_setlocale_r+0x44>)
 8001176:	f7fe ffed 	bl	8000154 <strcmp>
 800117a:	4243      	negs	r3, r0
 800117c:	4158      	adcs	r0, r3
 800117e:	4240      	negs	r0, r0
 8001180:	4028      	ands	r0, r5
 8001182:	e7ec      	b.n	800115e <_setlocale_r+0x16>
 8001184:	0800d6a8 	.word	0x0800d6a8
 8001188:	0800d6a4 	.word	0x0800d6a4
 800118c:	0800cf48 	.word	0x0800cf48

08001190 <__locale_charset>:
 8001190:	4800      	ldr	r0, [pc, #0]	; (8001194 <__locale_charset+0x4>)
 8001192:	4770      	bx	lr
 8001194:	20000518 	.word	0x20000518

08001198 <__locale_mb_cur_max>:
 8001198:	4b01      	ldr	r3, [pc, #4]	; (80011a0 <__locale_mb_cur_max+0x8>)
 800119a:	6a18      	ldr	r0, [r3, #32]
 800119c:	4770      	bx	lr
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	20000518 	.word	0x20000518

080011a4 <__locale_msgcharset>:
 80011a4:	4801      	ldr	r0, [pc, #4]	; (80011ac <__locale_msgcharset+0x8>)
 80011a6:	3024      	adds	r0, #36	; 0x24
 80011a8:	4770      	bx	lr
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	20000518 	.word	0x20000518

080011b0 <__locale_cjk_lang>:
 80011b0:	2000      	movs	r0, #0
 80011b2:	4770      	bx	lr

080011b4 <_localeconv_r>:
 80011b4:	4801      	ldr	r0, [pc, #4]	; (80011bc <_localeconv_r+0x8>)
 80011b6:	3044      	adds	r0, #68	; 0x44
 80011b8:	4770      	bx	lr
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	20000518 	.word	0x20000518

080011c0 <setlocale>:
 80011c0:	b508      	push	{r3, lr}
 80011c2:	1c0a      	adds	r2, r1, #0
 80011c4:	4904      	ldr	r1, [pc, #16]	; (80011d8 <setlocale+0x18>)
 80011c6:	1c03      	adds	r3, r0, #0
 80011c8:	6808      	ldr	r0, [r1, #0]
 80011ca:	1c19      	adds	r1, r3, #0
 80011cc:	f7ff ffbc 	bl	8001148 <_setlocale_r>
 80011d0:	bc08      	pop	{r3}
 80011d2:	bc02      	pop	{r1}
 80011d4:	4708      	bx	r1
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	200000e8 	.word	0x200000e8

080011dc <localeconv>:
 80011dc:	4801      	ldr	r0, [pc, #4]	; (80011e4 <localeconv+0x8>)
 80011de:	3044      	adds	r0, #68	; 0x44
 80011e0:	4770      	bx	lr
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	20000518 	.word	0x20000518

080011e8 <_lseek_r>:
 80011e8:	b570      	push	{r4, r5, r6, lr}
 80011ea:	4c09      	ldr	r4, [pc, #36]	; (8001210 <_lseek_r+0x28>)
 80011ec:	1c06      	adds	r6, r0, #0
 80011ee:	2500      	movs	r5, #0
 80011f0:	1c08      	adds	r0, r1, #0
 80011f2:	1c11      	adds	r1, r2, #0
 80011f4:	1c1a      	adds	r2, r3, #0
 80011f6:	6025      	str	r5, [r4, #0]
 80011f8:	f003 fb3e 	bl	8004878 <_lseek>
 80011fc:	1c43      	adds	r3, r0, #1
 80011fe:	d002      	beq.n	8001206 <_lseek_r+0x1e>
 8001200:	bc70      	pop	{r4, r5, r6}
 8001202:	bc02      	pop	{r1}
 8001204:	4708      	bx	r1
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f9      	beq.n	8001200 <_lseek_r+0x18>
 800120c:	6033      	str	r3, [r6, #0]
 800120e:	e7f7      	b.n	8001200 <_lseek_r+0x18>
 8001210:	20001e4c 	.word	0x20001e4c

08001214 <_mbrtowc_r>:
 8001214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001216:	4647      	mov	r7, r8
 8001218:	b480      	push	{r7}
 800121a:	1c1e      	adds	r6, r3, #0
 800121c:	b082      	sub	sp, #8
 800121e:	1c05      	adds	r5, r0, #0
 8001220:	1c0f      	adds	r7, r1, #0
 8001222:	1c14      	adds	r4, r2, #0
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <_mbrtowc_r+0x64>)
 8001226:	2a00      	cmp	r2, #0
 8001228:	d019      	beq.n	800125e <_mbrtowc_r+0x4a>
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4690      	mov	r8, r2
 800122e:	f7ff ffaf 	bl	8001190 <__locale_charset>
 8001232:	9b08      	ldr	r3, [sp, #32]
 8001234:	9000      	str	r0, [sp, #0]
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	1c28      	adds	r0, r5, #0
 800123a:	1c39      	adds	r1, r7, #0
 800123c:	1c22      	adds	r2, r4, #0
 800123e:	1c33      	adds	r3, r6, #0
 8001240:	f000 f85f 	bl	8001302 <mbrtowc+0x82>
 8001244:	1c42      	adds	r2, r0, #1
 8001246:	d104      	bne.n	8001252 <_mbrtowc_r+0x3e>
 8001248:	9a08      	ldr	r2, [sp, #32]
 800124a:	2300      	movs	r3, #0
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	238a      	movs	r3, #138	; 0x8a
 8001250:	602b      	str	r3, [r5, #0]
 8001252:	b002      	add	sp, #8
 8001254:	bc04      	pop	{r2}
 8001256:	4690      	mov	r8, r2
 8001258:	bcf0      	pop	{r4, r5, r6, r7}
 800125a:	bc02      	pop	{r1}
 800125c:	4708      	bx	r1
 800125e:	681c      	ldr	r4, [r3, #0]
 8001260:	f7ff ff96 	bl	8001190 <__locale_charset>
 8001264:	9a08      	ldr	r2, [sp, #32]
 8001266:	9000      	str	r0, [sp, #0]
 8001268:	9201      	str	r2, [sp, #4]
 800126a:	1c28      	adds	r0, r5, #0
 800126c:	2100      	movs	r1, #0
 800126e:	4a03      	ldr	r2, [pc, #12]	; (800127c <_mbrtowc_r+0x68>)
 8001270:	2301      	movs	r3, #1
 8001272:	f000 f845 	bl	8001300 <mbrtowc+0x80>
 8001276:	e7e5      	b.n	8001244 <_mbrtowc_r+0x30>
 8001278:	20000594 	.word	0x20000594
 800127c:	0800cf48 	.word	0x0800cf48

08001280 <mbrtowc>:
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	4657      	mov	r7, sl
 8001284:	464e      	mov	r6, r9
 8001286:	4645      	mov	r5, r8
 8001288:	b4e0      	push	{r5, r6, r7}
 800128a:	4680      	mov	r8, r0
 800128c:	1c1e      	adds	r6, r3, #0
 800128e:	b082      	sub	sp, #8
 8001290:	1c0c      	adds	r4, r1, #0
 8001292:	1c17      	adds	r7, r2, #0
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <mbrtowc+0x74>)
 8001296:	2900      	cmp	r1, #0
 8001298:	d01d      	beq.n	80012d6 <mbrtowc+0x56>
 800129a:	4d17      	ldr	r5, [pc, #92]	; (80012f8 <mbrtowc+0x78>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	682b      	ldr	r3, [r5, #0]
 80012a0:	4691      	mov	r9, r2
 80012a2:	469a      	mov	sl, r3
 80012a4:	f7ff ff74 	bl	8001190 <__locale_charset>
 80012a8:	9601      	str	r6, [sp, #4]
 80012aa:	9000      	str	r0, [sp, #0]
 80012ac:	4641      	mov	r1, r8
 80012ae:	4650      	mov	r0, sl
 80012b0:	1c22      	adds	r2, r4, #0
 80012b2:	1c3b      	adds	r3, r7, #0
 80012b4:	f000 f826 	bl	8001304 <mbrtowc+0x84>
 80012b8:	1c42      	adds	r2, r0, #1
 80012ba:	d104      	bne.n	80012c6 <mbrtowc+0x46>
 80012bc:	2300      	movs	r3, #0
 80012be:	6033      	str	r3, [r6, #0]
 80012c0:	682b      	ldr	r3, [r5, #0]
 80012c2:	228a      	movs	r2, #138	; 0x8a
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	b002      	add	sp, #8
 80012c8:	bc1c      	pop	{r2, r3, r4}
 80012ca:	4690      	mov	r8, r2
 80012cc:	4699      	mov	r9, r3
 80012ce:	46a2      	mov	sl, r4
 80012d0:	bcf0      	pop	{r4, r5, r6, r7}
 80012d2:	bc02      	pop	{r1}
 80012d4:	4708      	bx	r1
 80012d6:	4d08      	ldr	r5, [pc, #32]	; (80012f8 <mbrtowc+0x78>)
 80012d8:	681c      	ldr	r4, [r3, #0]
 80012da:	682f      	ldr	r7, [r5, #0]
 80012dc:	f7ff ff58 	bl	8001190 <__locale_charset>
 80012e0:	9601      	str	r6, [sp, #4]
 80012e2:	9000      	str	r0, [sp, #0]
 80012e4:	2100      	movs	r1, #0
 80012e6:	1c38      	adds	r0, r7, #0
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <mbrtowc+0x7c>)
 80012ea:	2301      	movs	r3, #1
 80012ec:	f000 f808 	bl	8001300 <mbrtowc+0x80>
 80012f0:	e7e2      	b.n	80012b8 <mbrtowc+0x38>
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	20000594 	.word	0x20000594
 80012f8:	200000e8 	.word	0x200000e8
 80012fc:	0800cf48 	.word	0x0800cf48
 8001300:	4720      	bx	r4
 8001302:	4740      	bx	r8
 8001304:	4748      	bx	r9
 8001306:	46c0      	nop			; (mov r8, r8)

08001308 <__ascii_mbtowc>:
 8001308:	b500      	push	{lr}
 800130a:	b083      	sub	sp, #12
 800130c:	2900      	cmp	r1, #0
 800130e:	d00b      	beq.n	8001328 <__ascii_mbtowc+0x20>
 8001310:	2a00      	cmp	r2, #0
 8001312:	d00c      	beq.n	800132e <__ascii_mbtowc+0x26>
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00c      	beq.n	8001332 <__ascii_mbtowc+0x2a>
 8001318:	7813      	ldrb	r3, [r2, #0]
 800131a:	600b      	str	r3, [r1, #0]
 800131c:	7810      	ldrb	r0, [r2, #0]
 800131e:	1e43      	subs	r3, r0, #1
 8001320:	4198      	sbcs	r0, r3
 8001322:	b003      	add	sp, #12
 8001324:	bc02      	pop	{r1}
 8001326:	4708      	bx	r1
 8001328:	a901      	add	r1, sp, #4
 800132a:	2a00      	cmp	r2, #0
 800132c:	d1f2      	bne.n	8001314 <__ascii_mbtowc+0xc>
 800132e:	2000      	movs	r0, #0
 8001330:	e7f7      	b.n	8001322 <__ascii_mbtowc+0x1a>
 8001332:	2002      	movs	r0, #2
 8001334:	4240      	negs	r0, r0
 8001336:	e7f4      	b.n	8001322 <__ascii_mbtowc+0x1a>

08001338 <_mbtowc_r>:
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	4647      	mov	r7, r8
 800133c:	b480      	push	{r7}
 800133e:	1c1d      	adds	r5, r3, #0
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <_mbtowc_r+0x38>)
 8001342:	b082      	sub	sp, #8
 8001344:	681c      	ldr	r4, [r3, #0]
 8001346:	4680      	mov	r8, r0
 8001348:	1c0f      	adds	r7, r1, #0
 800134a:	1c16      	adds	r6, r2, #0
 800134c:	f7ff ff20 	bl	8001190 <__locale_charset>
 8001350:	9b08      	ldr	r3, [sp, #32]
 8001352:	9000      	str	r0, [sp, #0]
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	4640      	mov	r0, r8
 8001358:	1c39      	adds	r1, r7, #0
 800135a:	1c32      	adds	r2, r6, #0
 800135c:	1c2b      	adds	r3, r5, #0
 800135e:	f000 f809 	bl	8001374 <_mbtowc_r+0x3c>
 8001362:	b002      	add	sp, #8
 8001364:	bc04      	pop	{r2}
 8001366:	4690      	mov	r8, r2
 8001368:	bcf0      	pop	{r4, r5, r6, r7}
 800136a:	bc02      	pop	{r1}
 800136c:	4708      	bx	r1
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	20000594 	.word	0x20000594
 8001374:	4720      	bx	r4
 8001376:	46c0      	nop			; (mov r8, r8)

08001378 <memset>:
 8001378:	b570      	push	{r4, r5, r6, lr}
 800137a:	0783      	lsls	r3, r0, #30
 800137c:	d042      	beq.n	8001404 <memset+0x8c>
 800137e:	1e54      	subs	r4, r2, #1
 8001380:	2a00      	cmp	r2, #0
 8001382:	d03c      	beq.n	80013fe <memset+0x86>
 8001384:	060e      	lsls	r6, r1, #24
 8001386:	0e36      	lsrs	r6, r6, #24
 8001388:	1c03      	adds	r3, r0, #0
 800138a:	2503      	movs	r5, #3
 800138c:	e003      	b.n	8001396 <memset+0x1e>
 800138e:	1e62      	subs	r2, r4, #1
 8001390:	2c00      	cmp	r4, #0
 8001392:	d034      	beq.n	80013fe <memset+0x86>
 8001394:	1c14      	adds	r4, r2, #0
 8001396:	701e      	strb	r6, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	422b      	tst	r3, r5
 800139c:	d1f7      	bne.n	800138e <memset+0x16>
 800139e:	2c03      	cmp	r4, #3
 80013a0:	d924      	bls.n	80013ec <memset+0x74>
 80013a2:	22ff      	movs	r2, #255	; 0xff
 80013a4:	400a      	ands	r2, r1
 80013a6:	0215      	lsls	r5, r2, #8
 80013a8:	432a      	orrs	r2, r5
 80013aa:	0415      	lsls	r5, r2, #16
 80013ac:	432a      	orrs	r2, r5
 80013ae:	2c0f      	cmp	r4, #15
 80013b0:	d92b      	bls.n	800140a <memset+0x92>
 80013b2:	1c26      	adds	r6, r4, #0
 80013b4:	3e10      	subs	r6, #16
 80013b6:	0936      	lsrs	r6, r6, #4
 80013b8:	3601      	adds	r6, #1
 80013ba:	0136      	lsls	r6, r6, #4
 80013bc:	199e      	adds	r6, r3, r6
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	3310      	adds	r3, #16
 80013c8:	429e      	cmp	r6, r3
 80013ca:	d1f8      	bne.n	80013be <memset+0x46>
 80013cc:	230f      	movs	r3, #15
 80013ce:	401c      	ands	r4, r3
 80013d0:	1c35      	adds	r5, r6, #0
 80013d2:	1c33      	adds	r3, r6, #0
 80013d4:	2c03      	cmp	r4, #3
 80013d6:	d909      	bls.n	80013ec <memset+0x74>
 80013d8:	1f23      	subs	r3, r4, #4
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3301      	adds	r3, #1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	18eb      	adds	r3, r5, r3
 80013e2:	c504      	stmia	r5!, {r2}
 80013e4:	429d      	cmp	r5, r3
 80013e6:	d1fc      	bne.n	80013e2 <memset+0x6a>
 80013e8:	2203      	movs	r2, #3
 80013ea:	4014      	ands	r4, r2
 80013ec:	2c00      	cmp	r4, #0
 80013ee:	d006      	beq.n	80013fe <memset+0x86>
 80013f0:	060a      	lsls	r2, r1, #24
 80013f2:	0e12      	lsrs	r2, r2, #24
 80013f4:	191c      	adds	r4, r3, r4
 80013f6:	701a      	strb	r2, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	42a3      	cmp	r3, r4
 80013fc:	d1fb      	bne.n	80013f6 <memset+0x7e>
 80013fe:	bc70      	pop	{r4, r5, r6}
 8001400:	bc02      	pop	{r1}
 8001402:	4708      	bx	r1
 8001404:	1c03      	adds	r3, r0, #0
 8001406:	1c14      	adds	r4, r2, #0
 8001408:	e7c9      	b.n	800139e <memset+0x26>
 800140a:	1c1d      	adds	r5, r3, #0
 800140c:	e7e4      	b.n	80013d8 <memset+0x60>
 800140e:	46c0      	nop			; (mov r8, r8)

08001410 <_read_r>:
 8001410:	b570      	push	{r4, r5, r6, lr}
 8001412:	4c09      	ldr	r4, [pc, #36]	; (8001438 <_read_r+0x28>)
 8001414:	1c06      	adds	r6, r0, #0
 8001416:	2500      	movs	r5, #0
 8001418:	1c08      	adds	r0, r1, #0
 800141a:	1c11      	adds	r1, r2, #0
 800141c:	1c1a      	adds	r2, r3, #0
 800141e:	6025      	str	r5, [r4, #0]
 8001420:	f003 f99e 	bl	8004760 <_read>
 8001424:	1c43      	adds	r3, r0, #1
 8001426:	d002      	beq.n	800142e <_read_r+0x1e>
 8001428:	bc70      	pop	{r4, r5, r6}
 800142a:	bc02      	pop	{r1}
 800142c:	4708      	bx	r1
 800142e:	6823      	ldr	r3, [r4, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f9      	beq.n	8001428 <_read_r+0x18>
 8001434:	6033      	str	r3, [r6, #0]
 8001436:	e7f7      	b.n	8001428 <_read_r+0x18>
 8001438:	20001e4c 	.word	0x20001e4c

0800143c <__fpclassifyd>:
 800143c:	1c0b      	adds	r3, r1, #0
 800143e:	1c01      	adds	r1, r0, #0
 8001440:	b510      	push	{r4, lr}
 8001442:	4319      	orrs	r1, r3
 8001444:	2202      	movs	r2, #2
 8001446:	2900      	cmp	r1, #0
 8001448:	d103      	bne.n	8001452 <__fpclassifyd+0x16>
 800144a:	1c10      	adds	r0, r2, #0
 800144c:	bc10      	pop	{r4}
 800144e:	bc02      	pop	{r1}
 8001450:	4708      	bx	r1
 8001452:	4241      	negs	r1, r0
 8001454:	4141      	adcs	r1, r0
 8001456:	2900      	cmp	r1, #0
 8001458:	d004      	beq.n	8001464 <__fpclassifyd+0x28>
 800145a:	2480      	movs	r4, #128	; 0x80
 800145c:	0624      	lsls	r4, r4, #24
 800145e:	1918      	adds	r0, r3, r4
 8001460:	2800      	cmp	r0, #0
 8001462:	d0f2      	beq.n	800144a <__fpclassifyd+0xe>
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <__fpclassifyd+0x4c>)
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	181c      	adds	r4, r3, r0
 800146c:	4807      	ldr	r0, [pc, #28]	; (800148c <__fpclassifyd+0x50>)
 800146e:	2204      	movs	r2, #4
 8001470:	4284      	cmp	r4, r0
 8001472:	d9ea      	bls.n	800144a <__fpclassifyd+0xe>
 8001474:	4806      	ldr	r0, [pc, #24]	; (8001490 <__fpclassifyd+0x54>)
 8001476:	2203      	movs	r2, #3
 8001478:	4283      	cmp	r3, r0
 800147a:	d9e6      	bls.n	800144a <__fpclassifyd+0xe>
 800147c:	4c05      	ldr	r4, [pc, #20]	; (8001494 <__fpclassifyd+0x58>)
 800147e:	191a      	adds	r2, r3, r4
 8001480:	4253      	negs	r3, r2
 8001482:	415a      	adcs	r2, r3
 8001484:	400a      	ands	r2, r1
 8001486:	e7e0      	b.n	800144a <__fpclassifyd+0xe>
 8001488:	fff00000 	.word	0xfff00000
 800148c:	7fdfffff 	.word	0x7fdfffff
 8001490:	000fffff 	.word	0x000fffff
 8001494:	80100000 	.word	0x80100000

08001498 <__sccl>:
 8001498:	b570      	push	{r4, r5, r6, lr}
 800149a:	780e      	ldrb	r6, [r1, #0]
 800149c:	1c02      	adds	r2, r0, #0
 800149e:	2e5e      	cmp	r6, #94	; 0x5e
 80014a0:	d02e      	beq.n	8001500 <__sccl+0x68>
 80014a2:	1c48      	adds	r0, r1, #1
 80014a4:	2500      	movs	r5, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	2480      	movs	r4, #128	; 0x80
 80014aa:	2300      	movs	r3, #0
 80014ac:	0064      	lsls	r4, r4, #1
 80014ae:	54d5      	strb	r5, [r2, r3]
 80014b0:	3301      	adds	r3, #1
 80014b2:	42a3      	cmp	r3, r4
 80014b4:	d1fb      	bne.n	80014ae <__sccl+0x16>
 80014b6:	2e00      	cmp	r6, #0
 80014b8:	d010      	beq.n	80014dc <__sccl+0x44>
 80014ba:	2301      	movs	r3, #1
 80014bc:	4059      	eors	r1, r3
 80014be:	5591      	strb	r1, [r2, r6]
 80014c0:	7803      	ldrb	r3, [r0, #0]
 80014c2:	1c44      	adds	r4, r0, #1
 80014c4:	2b2d      	cmp	r3, #45	; 0x2d
 80014c6:	d00d      	beq.n	80014e4 <__sccl+0x4c>
 80014c8:	2b5d      	cmp	r3, #93	; 0x5d
 80014ca:	d009      	beq.n	80014e0 <__sccl+0x48>
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <__sccl+0x3e>
 80014d0:	bc70      	pop	{r4, r5, r6}
 80014d2:	bc02      	pop	{r1}
 80014d4:	4708      	bx	r1
 80014d6:	1c1e      	adds	r6, r3, #0
 80014d8:	1c20      	adds	r0, r4, #0
 80014da:	e7f0      	b.n	80014be <__sccl+0x26>
 80014dc:	3801      	subs	r0, #1
 80014de:	e7f7      	b.n	80014d0 <__sccl+0x38>
 80014e0:	1c20      	adds	r0, r4, #0
 80014e2:	e7f5      	b.n	80014d0 <__sccl+0x38>
 80014e4:	7843      	ldrb	r3, [r0, #1]
 80014e6:	2501      	movs	r5, #1
 80014e8:	42b3      	cmp	r3, r6
 80014ea:	da0e      	bge.n	800150a <__sccl+0x72>
 80014ec:	062d      	lsls	r5, r5, #24
 80014ee:	d10e      	bne.n	800150e <__sccl+0x76>
 80014f0:	2b5d      	cmp	r3, #93	; 0x5d
 80014f2:	d00c      	beq.n	800150e <__sccl+0x76>
 80014f4:	3002      	adds	r0, #2
 80014f6:	3601      	adds	r6, #1
 80014f8:	5591      	strb	r1, [r2, r6]
 80014fa:	42b3      	cmp	r3, r6
 80014fc:	dcfb      	bgt.n	80014f6 <__sccl+0x5e>
 80014fe:	e7df      	b.n	80014c0 <__sccl+0x28>
 8001500:	784e      	ldrb	r6, [r1, #1]
 8001502:	1c88      	adds	r0, r1, #2
 8001504:	2501      	movs	r5, #1
 8001506:	2101      	movs	r1, #1
 8001508:	e7ce      	b.n	80014a8 <__sccl+0x10>
 800150a:	2500      	movs	r5, #0
 800150c:	e7ee      	b.n	80014ec <__sccl+0x54>
 800150e:	262d      	movs	r6, #45	; 0x2d
 8001510:	1c20      	adds	r0, r4, #0
 8001512:	e7d4      	b.n	80014be <__sccl+0x26>

08001514 <nanf>:
 8001514:	4800      	ldr	r0, [pc, #0]	; (8001518 <nanf+0x4>)
 8001516:	4770      	bx	lr
 8001518:	7fc00000 	.word	0x7fc00000

0800151c <_sprintf_r>:
 800151c:	b40c      	push	{r2, r3}
 800151e:	b510      	push	{r4, lr}
 8001520:	b09c      	sub	sp, #112	; 0x70
 8001522:	9102      	str	r1, [sp, #8]
 8001524:	9106      	str	r1, [sp, #24]
 8001526:	490c      	ldr	r1, [pc, #48]	; (8001558 <_sprintf_r+0x3c>)
 8001528:	ab1e      	add	r3, sp, #120	; 0x78
 800152a:	9104      	str	r1, [sp, #16]
 800152c:	9107      	str	r1, [sp, #28]
 800152e:	2482      	movs	r4, #130	; 0x82
 8001530:	2101      	movs	r1, #1
 8001532:	cb04      	ldmia	r3!, {r2}
 8001534:	00a4      	lsls	r4, r4, #2
 8001536:	aa02      	add	r2, sp, #8
 8001538:	4249      	negs	r1, r1
 800153a:	8194      	strh	r4, [r2, #12]
 800153c:	81d1      	strh	r1, [r2, #14]
 800153e:	1c11      	adds	r1, r2, #0
 8001540:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	f001 feac 	bl	80032a0 <_svfprintf_r>
 8001548:	9a02      	ldr	r2, [sp, #8]
 800154a:	2300      	movs	r3, #0
 800154c:	7013      	strb	r3, [r2, #0]
 800154e:	b01c      	add	sp, #112	; 0x70
 8001550:	bc10      	pop	{r4}
 8001552:	bc08      	pop	{r3}
 8001554:	b002      	add	sp, #8
 8001556:	4718      	bx	r3
 8001558:	7fffffff 	.word	0x7fffffff

0800155c <sprintf>:
 800155c:	b40e      	push	{r1, r2, r3}
 800155e:	b500      	push	{lr}
 8001560:	b09c      	sub	sp, #112	; 0x70
 8001562:	ab1d      	add	r3, sp, #116	; 0x74
 8001564:	cb04      	ldmia	r3!, {r2}
 8001566:	2282      	movs	r2, #130	; 0x82
 8001568:	a902      	add	r1, sp, #8
 800156a:	0092      	lsls	r2, r2, #2
 800156c:	818a      	strh	r2, [r1, #12]
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <sprintf+0x3c>)
 8001570:	608a      	str	r2, [r1, #8]
 8001572:	614a      	str	r2, [r1, #20]
 8001574:	2201      	movs	r2, #1
 8001576:	4252      	negs	r2, r2
 8001578:	81ca      	strh	r2, [r1, #14]
 800157a:	4a08      	ldr	r2, [pc, #32]	; (800159c <sprintf+0x40>)
 800157c:	9002      	str	r0, [sp, #8]
 800157e:	6108      	str	r0, [r1, #16]
 8001580:	6810      	ldr	r0, [r2, #0]
 8001582:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	f001 fe8b 	bl	80032a0 <_svfprintf_r>
 800158a:	9a02      	ldr	r2, [sp, #8]
 800158c:	2300      	movs	r3, #0
 800158e:	7013      	strb	r3, [r2, #0]
 8001590:	b01c      	add	sp, #112	; 0x70
 8001592:	bc08      	pop	{r3}
 8001594:	b003      	add	sp, #12
 8001596:	4718      	bx	r3
 8001598:	7fffffff 	.word	0x7fffffff
 800159c:	200000e8 	.word	0x200000e8

080015a0 <_strtod_r>:
 80015a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a2:	465f      	mov	r7, fp
 80015a4:	4656      	mov	r6, sl
 80015a6:	464d      	mov	r5, r9
 80015a8:	4644      	mov	r4, r8
 80015aa:	b4f0      	push	{r4, r5, r6, r7}
 80015ac:	4682      	mov	sl, r0
 80015ae:	1c0f      	adds	r7, r1, #0
 80015b0:	49c4      	ldr	r1, [pc, #784]	; (80018c4 <_strtod_r+0x324>)
 80015b2:	48c3      	ldr	r0, [pc, #780]	; (80018c0 <_strtod_r+0x320>)
 80015b4:	b09b      	sub	sp, #108	; 0x6c
 80015b6:	9006      	str	r0, [sp, #24]
 80015b8:	9107      	str	r1, [sp, #28]
 80015ba:	9715      	str	r7, [sp, #84]	; 0x54
 80015bc:	49c2      	ldr	r1, [pc, #776]	; (80018c8 <_strtod_r+0x328>)
 80015be:	920d      	str	r2, [sp, #52]	; 0x34
 80015c0:	1c3a      	adds	r2, r7, #0
 80015c2:	7813      	ldrb	r3, [r2, #0]
 80015c4:	2b2d      	cmp	r3, #45	; 0x2d
 80015c6:	d800      	bhi.n	80015ca <_strtod_r+0x2a>
 80015c8:	e07f      	b.n	80016ca <_strtod_r+0x12a>
 80015ca:	2400      	movs	r4, #0
 80015cc:	940f      	str	r4, [sp, #60]	; 0x3c
 80015ce:	1c16      	adds	r6, r2, #0
 80015d0:	2400      	movs	r4, #0
 80015d2:	9404      	str	r4, [sp, #16]
 80015d4:	2b30      	cmp	r3, #48	; 0x30
 80015d6:	d100      	bne.n	80015da <_strtod_r+0x3a>
 80015d8:	e10b      	b.n	80017f2 <_strtod_r+0x252>
 80015da:	1c1d      	adds	r5, r3, #0
 80015dc:	2b2f      	cmp	r3, #47	; 0x2f
 80015de:	dc01      	bgt.n	80015e4 <_strtod_r+0x44>
 80015e0:	f000 fe0f 	bl	8002202 <_strtod_r+0xc62>
 80015e4:	2b39      	cmp	r3, #57	; 0x39
 80015e6:	dd01      	ble.n	80015ec <_strtod_r+0x4c>
 80015e8:	f000 fe12 	bl	8002210 <_strtod_r+0xc70>
 80015ec:	2000      	movs	r0, #0
 80015ee:	1c72      	adds	r2, r6, #1
 80015f0:	46b4      	mov	ip, r6
 80015f2:	2400      	movs	r4, #0
 80015f4:	1c06      	adds	r6, r0, #0
 80015f6:	e00f      	b.n	8001618 <_strtod_r+0x78>
 80015f8:	0081      	lsls	r1, r0, #2
 80015fa:	1808      	adds	r0, r1, r0
 80015fc:	0040      	lsls	r0, r0, #1
 80015fe:	18c3      	adds	r3, r0, r3
 8001600:	1c18      	adds	r0, r3, #0
 8001602:	3830      	subs	r0, #48	; 0x30
 8001604:	9215      	str	r2, [sp, #84]	; 0x54
 8001606:	7813      	ldrb	r3, [r2, #0]
 8001608:	3401      	adds	r4, #1
 800160a:	1c11      	adds	r1, r2, #0
 800160c:	1c1d      	adds	r5, r3, #0
 800160e:	2b2f      	cmp	r3, #47	; 0x2f
 8001610:	dd13      	ble.n	800163a <_strtod_r+0x9a>
 8001612:	3201      	adds	r2, #1
 8001614:	2b39      	cmp	r3, #57	; 0x39
 8001616:	dc10      	bgt.n	800163a <_strtod_r+0x9a>
 8001618:	2c0f      	cmp	r4, #15
 800161a:	dcf3      	bgt.n	8001604 <_strtod_r+0x64>
 800161c:	2c08      	cmp	r4, #8
 800161e:	ddeb      	ble.n	80015f8 <_strtod_r+0x58>
 8001620:	00b1      	lsls	r1, r6, #2
 8001622:	1989      	adds	r1, r1, r6
 8001624:	0049      	lsls	r1, r1, #1
 8001626:	9215      	str	r2, [sp, #84]	; 0x54
 8001628:	18cb      	adds	r3, r1, r3
 800162a:	1c1e      	adds	r6, r3, #0
 800162c:	7813      	ldrb	r3, [r2, #0]
 800162e:	3e30      	subs	r6, #48	; 0x30
 8001630:	3401      	adds	r4, #1
 8001632:	1c11      	adds	r1, r2, #0
 8001634:	1c1d      	adds	r5, r3, #0
 8001636:	2b2f      	cmp	r3, #47	; 0x2f
 8001638:	dceb      	bgt.n	8001612 <_strtod_r+0x72>
 800163a:	46b0      	mov	r8, r6
 800163c:	4683      	mov	fp, r0
 800163e:	4689      	mov	r9, r1
 8001640:	4666      	mov	r6, ip
 8001642:	4650      	mov	r0, sl
 8001644:	f7ff fdb6 	bl	80011b4 <_localeconv_r>
 8001648:	6800      	ldr	r0, [r0, #0]
 800164a:	9008      	str	r0, [sp, #32]
 800164c:	4650      	mov	r0, sl
 800164e:	f7ff fdb1 	bl	80011b4 <_localeconv_r>
 8001652:	6800      	ldr	r0, [r0, #0]
 8001654:	f7fe fd88 	bl	8000168 <strlen>
 8001658:	9908      	ldr	r1, [sp, #32]
 800165a:	1c02      	adds	r2, r0, #0
 800165c:	4648      	mov	r0, r9
 800165e:	f7fe fd8b 	bl	8000178 <strncmp>
 8001662:	2800      	cmp	r0, #0
 8001664:	d100      	bne.n	8001668 <_strtod_r+0xc8>
 8001666:	e139      	b.n	80018dc <_strtod_r+0x33c>
 8001668:	2300      	movs	r3, #0
 800166a:	9608      	str	r6, [sp, #32]
 800166c:	2000      	movs	r0, #0
 800166e:	1c26      	adds	r6, r4, #0
 8001670:	4699      	mov	r9, r3
 8001672:	2220      	movs	r2, #32
 8001674:	1c29      	adds	r1, r5, #0
 8001676:	4391      	bics	r1, r2
 8001678:	2945      	cmp	r1, #69	; 0x45
 800167a:	d05b      	beq.n	8001734 <_strtod_r+0x194>
 800167c:	2100      	movs	r1, #0
 800167e:	2e00      	cmp	r6, #0
 8001680:	d000      	beq.n	8001684 <_strtod_r+0xe4>
 8001682:	e0ca      	b.n	800181a <_strtod_r+0x27a>
 8001684:	9c04      	ldr	r4, [sp, #16]
 8001686:	4323      	orrs	r3, r4
 8001688:	d000      	beq.n	800168c <_strtod_r+0xec>
 800168a:	e114      	b.n	80018b6 <_strtod_r+0x316>
 800168c:	2800      	cmp	r0, #0
 800168e:	d117      	bne.n	80016c0 <_strtod_r+0x120>
 8001690:	2d4e      	cmp	r5, #78	; 0x4e
 8001692:	d100      	bne.n	8001696 <_strtod_r+0xf6>
 8001694:	e156      	b.n	8001944 <_strtod_r+0x3a4>
 8001696:	dd00      	ble.n	800169a <_strtod_r+0xfa>
 8001698:	e14e      	b.n	8001938 <_strtod_r+0x398>
 800169a:	2d49      	cmp	r5, #73	; 0x49
 800169c:	d110      	bne.n	80016c0 <_strtod_r+0x120>
 800169e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80016a0:	498a      	ldr	r1, [pc, #552]	; (80018cc <_strtod_r+0x32c>)
 80016a2:	7808      	ldrb	r0, [r1, #0]
 80016a4:	3101      	adds	r1, #1
 80016a6:	2800      	cmp	r0, #0
 80016a8:	d101      	bne.n	80016ae <_strtod_r+0x10e>
 80016aa:	f000 fe78 	bl	800239e <_strtod_r+0xdfe>
 80016ae:	3301      	adds	r3, #1
 80016b0:	781a      	ldrb	r2, [r3, #0]
 80016b2:	2a40      	cmp	r2, #64	; 0x40
 80016b4:	dd02      	ble.n	80016bc <_strtod_r+0x11c>
 80016b6:	2a5a      	cmp	r2, #90	; 0x5a
 80016b8:	dc00      	bgt.n	80016bc <_strtod_r+0x11c>
 80016ba:	3220      	adds	r2, #32
 80016bc:	4282      	cmp	r2, r0
 80016be:	d0f0      	beq.n	80016a2 <_strtod_r+0x102>
 80016c0:	9806      	ldr	r0, [sp, #24]
 80016c2:	9c07      	ldr	r4, [sp, #28]
 80016c4:	4681      	mov	r9, r0
 80016c6:	9404      	str	r4, [sp, #16]
 80016c8:	e00e      	b.n	80016e8 <_strtod_r+0x148>
 80016ca:	0098      	lsls	r0, r3, #2
 80016cc:	5808      	ldr	r0, [r1, r0]
 80016ce:	4687      	mov	pc, r0
 80016d0:	2401      	movs	r4, #1
 80016d2:	940f      	str	r4, [sp, #60]	; 0x3c
 80016d4:	1c56      	adds	r6, r2, #1
 80016d6:	9615      	str	r6, [sp, #84]	; 0x54
 80016d8:	7853      	ldrb	r3, [r2, #1]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d000      	beq.n	80016e0 <_strtod_r+0x140>
 80016de:	e777      	b.n	80015d0 <_strtod_r+0x30>
 80016e0:	2400      	movs	r4, #0
 80016e2:	2000      	movs	r0, #0
 80016e4:	9404      	str	r4, [sp, #16]
 80016e6:	4681      	mov	r9, r0
 80016e8:	2400      	movs	r4, #0
 80016ea:	9715      	str	r7, [sp, #84]	; 0x54
 80016ec:	940f      	str	r4, [sp, #60]	; 0x3c
 80016ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80016f0:	2c00      	cmp	r4, #0
 80016f2:	d001      	beq.n	80016f8 <_strtod_r+0x158>
 80016f4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80016f6:	6020      	str	r0, [r4, #0]
 80016f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	d004      	beq.n	8001708 <_strtod_r+0x168>
 80016fe:	9c04      	ldr	r4, [sp, #16]
 8001700:	2080      	movs	r0, #128	; 0x80
 8001702:	0600      	lsls	r0, r0, #24
 8001704:	1824      	adds	r4, r4, r0
 8001706:	9404      	str	r4, [sp, #16]
 8001708:	9904      	ldr	r1, [sp, #16]
 800170a:	4648      	mov	r0, r9
 800170c:	b01b      	add	sp, #108	; 0x6c
 800170e:	bc3c      	pop	{r2, r3, r4, r5}
 8001710:	4690      	mov	r8, r2
 8001712:	4699      	mov	r9, r3
 8001714:	46a2      	mov	sl, r4
 8001716:	46ab      	mov	fp, r5
 8001718:	bcf0      	pop	{r4, r5, r6, r7}
 800171a:	bc04      	pop	{r2}
 800171c:	4710      	bx	r2
 800171e:	2400      	movs	r4, #0
 8001720:	940f      	str	r4, [sp, #60]	; 0x3c
 8001722:	e7d7      	b.n	80016d4 <_strtod_r+0x134>
 8001724:	3201      	adds	r2, #1
 8001726:	9215      	str	r2, [sp, #84]	; 0x54
 8001728:	e74b      	b.n	80015c2 <_strtod_r+0x22>
 800172a:	2300      	movs	r3, #0
 800172c:	2400      	movs	r4, #0
 800172e:	4699      	mov	r9, r3
 8001730:	9404      	str	r4, [sp, #16]
 8001732:	e7d9      	b.n	80016e8 <_strtod_r+0x148>
 8001734:	1c32      	adds	r2, r6, #0
 8001736:	9904      	ldr	r1, [sp, #16]
 8001738:	431a      	orrs	r2, r3
 800173a:	430a      	orrs	r2, r1
 800173c:	d100      	bne.n	8001740 <_strtod_r+0x1a0>
 800173e:	e110      	b.n	8001962 <_strtod_r+0x3c2>
 8001740:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8001742:	1c7a      	adds	r2, r7, #1
 8001744:	9215      	str	r2, [sp, #84]	; 0x54
 8001746:	787d      	ldrb	r5, [r7, #1]
 8001748:	2d2b      	cmp	r5, #43	; 0x2b
 800174a:	d101      	bne.n	8001750 <_strtod_r+0x1b0>
 800174c:	f000 fbe2 	bl	8001f14 <_strtod_r+0x974>
 8001750:	2d2d      	cmp	r5, #45	; 0x2d
 8001752:	d100      	bne.n	8001756 <_strtod_r+0x1b6>
 8001754:	e2d4      	b.n	8001d00 <_strtod_r+0x760>
 8001756:	2200      	movs	r2, #0
 8001758:	9209      	str	r2, [sp, #36]	; 0x24
 800175a:	1c2a      	adds	r2, r5, #0
 800175c:	3a30      	subs	r2, #48	; 0x30
 800175e:	2a09      	cmp	r2, #9
 8001760:	d900      	bls.n	8001764 <_strtod_r+0x1c4>
 8001762:	e3bd      	b.n	8001ee0 <_strtod_r+0x940>
 8001764:	2d30      	cmp	r5, #48	; 0x30
 8001766:	d106      	bne.n	8001776 <_strtod_r+0x1d6>
 8001768:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800176a:	3201      	adds	r2, #1
 800176c:	9215      	str	r2, [sp, #84]	; 0x54
 800176e:	7815      	ldrb	r5, [r2, #0]
 8001770:	3201      	adds	r2, #1
 8001772:	2d30      	cmp	r5, #48	; 0x30
 8001774:	d0fa      	beq.n	800176c <_strtod_r+0x1cc>
 8001776:	1c2a      	adds	r2, r5, #0
 8001778:	3a31      	subs	r2, #49	; 0x31
 800177a:	2100      	movs	r1, #0
 800177c:	2a08      	cmp	r2, #8
 800177e:	d900      	bls.n	8001782 <_strtod_r+0x1e2>
 8001780:	e77d      	b.n	800167e <_strtod_r+0xde>
 8001782:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001784:	2101      	movs	r1, #1
 8001786:	4694      	mov	ip, r2
 8001788:	448c      	add	ip, r1
 800178a:	9202      	str	r2, [sp, #8]
 800178c:	4662      	mov	r2, ip
 800178e:	9215      	str	r2, [sp, #84]	; 0x54
 8001790:	9902      	ldr	r1, [sp, #8]
 8001792:	3d30      	subs	r5, #48	; 0x30
 8001794:	950a      	str	r5, [sp, #40]	; 0x28
 8001796:	784d      	ldrb	r5, [r1, #1]
 8001798:	2d2f      	cmp	r5, #47	; 0x2f
 800179a:	dd18      	ble.n	80017ce <_strtod_r+0x22e>
 800179c:	2d39      	cmp	r5, #57	; 0x39
 800179e:	dc16      	bgt.n	80017ce <_strtod_r+0x22e>
 80017a0:	1c0a      	adds	r2, r1, #0
 80017a2:	3202      	adds	r2, #2
 80017a4:	469c      	mov	ip, r3
 80017a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80017a8:	e002      	b.n	80017b0 <_strtod_r+0x210>
 80017aa:	3201      	adds	r2, #1
 80017ac:	2d39      	cmp	r5, #57	; 0x39
 80017ae:	dc0a      	bgt.n	80017c6 <_strtod_r+0x226>
 80017b0:	008b      	lsls	r3, r1, #2
 80017b2:	1859      	adds	r1, r3, r1
 80017b4:	0049      	lsls	r1, r1, #1
 80017b6:	9215      	str	r2, [sp, #84]	; 0x54
 80017b8:	194d      	adds	r5, r1, r5
 80017ba:	1c29      	adds	r1, r5, #0
 80017bc:	7815      	ldrb	r5, [r2, #0]
 80017be:	3930      	subs	r1, #48	; 0x30
 80017c0:	1c13      	adds	r3, r2, #0
 80017c2:	2d2f      	cmp	r5, #47	; 0x2f
 80017c4:	dcf1      	bgt.n	80017aa <_strtod_r+0x20a>
 80017c6:	1c1a      	adds	r2, r3, #0
 80017c8:	910a      	str	r1, [sp, #40]	; 0x28
 80017ca:	4663      	mov	r3, ip
 80017cc:	4694      	mov	ip, r2
 80017ce:	9902      	ldr	r1, [sp, #8]
 80017d0:	4662      	mov	r2, ip
 80017d2:	1a52      	subs	r2, r2, r1
 80017d4:	2a08      	cmp	r2, #8
 80017d6:	dd01      	ble.n	80017dc <_strtod_r+0x23c>
 80017d8:	f000 fda2 	bl	8002320 <_strtod_r+0xd80>
 80017dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80017de:	4a3c      	ldr	r2, [pc, #240]	; (80018d0 <_strtod_r+0x330>)
 80017e0:	4291      	cmp	r1, r2
 80017e2:	dd00      	ble.n	80017e6 <_strtod_r+0x246>
 80017e4:	1c11      	adds	r1, r2, #0
 80017e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017e8:	2a00      	cmp	r2, #0
 80017ea:	d100      	bne.n	80017ee <_strtod_r+0x24e>
 80017ec:	e747      	b.n	800167e <_strtod_r+0xde>
 80017ee:	4249      	negs	r1, r1
 80017f0:	e745      	b.n	800167e <_strtod_r+0xde>
 80017f2:	7873      	ldrb	r3, [r6, #1]
 80017f4:	2b58      	cmp	r3, #88	; 0x58
 80017f6:	d100      	bne.n	80017fa <_strtod_r+0x25a>
 80017f8:	e376      	b.n	8001ee8 <_strtod_r+0x948>
 80017fa:	1c72      	adds	r2, r6, #1
 80017fc:	2b78      	cmp	r3, #120	; 0x78
 80017fe:	d100      	bne.n	8001802 <_strtod_r+0x262>
 8001800:	e372      	b.n	8001ee8 <_strtod_r+0x948>
 8001802:	9215      	str	r2, [sp, #84]	; 0x54
 8001804:	1c16      	adds	r6, r2, #0
 8001806:	7833      	ldrb	r3, [r6, #0]
 8001808:	3201      	adds	r2, #1
 800180a:	2b30      	cmp	r3, #48	; 0x30
 800180c:	d0f9      	beq.n	8001802 <_strtod_r+0x262>
 800180e:	2b00      	cmp	r3, #0
 8001810:	d100      	bne.n	8001814 <_strtod_r+0x274>
 8001812:	e20f      	b.n	8001c34 <_strtod_r+0x694>
 8001814:	2401      	movs	r4, #1
 8001816:	9404      	str	r4, [sp, #16]
 8001818:	e6df      	b.n	80015da <_strtod_r+0x3a>
 800181a:	4648      	mov	r0, r9
 800181c:	1a08      	subs	r0, r1, r0
 800181e:	9010      	str	r0, [sp, #64]	; 0x40
 8001820:	9602      	str	r6, [sp, #8]
 8001822:	2c00      	cmp	r4, #0
 8001824:	d000      	beq.n	8001828 <_strtod_r+0x288>
 8001826:	9402      	str	r4, [sp, #8]
 8001828:	1c37      	adds	r7, r6, #0
 800182a:	2e10      	cmp	r6, #16
 800182c:	dd00      	ble.n	8001830 <_strtod_r+0x290>
 800182e:	2710      	movs	r7, #16
 8001830:	4658      	mov	r0, fp
 8001832:	f007 ed3a 	blx	80092a8 <__aeabi_ui2d>
 8001836:	9006      	str	r0, [sp, #24]
 8001838:	9107      	str	r1, [sp, #28]
 800183a:	2f09      	cmp	r7, #9
 800183c:	dd15      	ble.n	800186a <_strtod_r+0x2ca>
 800183e:	1c3b      	adds	r3, r7, #0
 8001840:	4a24      	ldr	r2, [pc, #144]	; (80018d4 <_strtod_r+0x334>)
 8001842:	3b09      	subs	r3, #9
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	18d3      	adds	r3, r2, r3
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f007 edac 	blx	80093a8 <__aeabi_dmul>
 8001850:	1c04      	adds	r4, r0, #0
 8001852:	4640      	mov	r0, r8
 8001854:	1c0d      	adds	r5, r1, #0
 8001856:	f007 ed28 	blx	80092a8 <__aeabi_ui2d>
 800185a:	1c02      	adds	r2, r0, #0
 800185c:	1c0b      	adds	r3, r1, #0
 800185e:	1c20      	adds	r0, r4, #0
 8001860:	1c29      	adds	r1, r5, #0
 8001862:	f007 eb9a 	blx	8008f98 <__adddf3>
 8001866:	9006      	str	r0, [sp, #24]
 8001868:	9107      	str	r1, [sp, #28]
 800186a:	2e0f      	cmp	r6, #15
 800186c:	dd00      	ble.n	8001870 <_strtod_r+0x2d0>
 800186e:	e07d      	b.n	800196c <_strtod_r+0x3cc>
 8001870:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001872:	2c00      	cmp	r4, #0
 8001874:	d01f      	beq.n	80018b6 <_strtod_r+0x316>
 8001876:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001878:	2c00      	cmp	r4, #0
 800187a:	dc01      	bgt.n	8001880 <_strtod_r+0x2e0>
 800187c:	f000 fd53 	bl	8002326 <_strtod_r+0xd86>
 8001880:	2c16      	cmp	r4, #22
 8001882:	dd01      	ble.n	8001888 <_strtod_r+0x2e8>
 8001884:	f000 fcf3 	bl	800226e <_strtod_r+0xcce>
 8001888:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <_strtod_r+0x334>)
 800188a:	00e3      	lsls	r3, r4, #3
 800188c:	18d3      	adds	r3, r2, r3
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	6859      	ldr	r1, [r3, #4]
 8001892:	9a06      	ldr	r2, [sp, #24]
 8001894:	9b07      	ldr	r3, [sp, #28]
 8001896:	f007 ed88 	blx	80093a8 <__aeabi_dmul>
 800189a:	4681      	mov	r9, r0
 800189c:	9104      	str	r1, [sp, #16]
 800189e:	e726      	b.n	80016ee <_strtod_r+0x14e>
 80018a0:	1c53      	adds	r3, r2, #1
 80018a2:	9315      	str	r3, [sp, #84]	; 0x54
 80018a4:	7853      	ldrb	r3, [r2, #1]
 80018a6:	2b28      	cmp	r3, #40	; 0x28
 80018a8:	d101      	bne.n	80018ae <_strtod_r+0x30e>
 80018aa:	f000 fda2 	bl	80023f2 <_strtod_r+0xe52>
 80018ae:	490a      	ldr	r1, [pc, #40]	; (80018d8 <_strtod_r+0x338>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	9107      	str	r1, [sp, #28]
 80018b4:	9206      	str	r2, [sp, #24]
 80018b6:	9806      	ldr	r0, [sp, #24]
 80018b8:	9c07      	ldr	r4, [sp, #28]
 80018ba:	4681      	mov	r9, r0
 80018bc:	9404      	str	r4, [sp, #16]
 80018be:	e716      	b.n	80016ee <_strtod_r+0x14e>
	...
 80018c8:	0800d6b8 	.word	0x0800d6b8
 80018cc:	0800d7b0 	.word	0x0800d7b0
 80018d0:	00004e1f 	.word	0x00004e1f
 80018d4:	0800dd08 	.word	0x0800dd08
 80018d8:	fff80000 	.word	0xfff80000
 80018dc:	4650      	mov	r0, sl
 80018de:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80018e0:	f7ff fc68 	bl	80011b4 <_localeconv_r>
 80018e4:	6800      	ldr	r0, [r0, #0]
 80018e6:	f7fe fc3f 	bl	8000168 <strlen>
 80018ea:	1828      	adds	r0, r5, r0
 80018ec:	9015      	str	r0, [sp, #84]	; 0x54
 80018ee:	7805      	ldrb	r5, [r0, #0]
 80018f0:	2c00      	cmp	r4, #0
 80018f2:	d000      	beq.n	80018f6 <_strtod_r+0x356>
 80018f4:	e16f      	b.n	8001bd6 <_strtod_r+0x636>
 80018f6:	2d30      	cmp	r5, #48	; 0x30
 80018f8:	d001      	beq.n	80018fe <_strtod_r+0x35e>
 80018fa:	f000 fd2f 	bl	800235c <_strtod_r+0xdbc>
 80018fe:	1c42      	adds	r2, r0, #1
 8001900:	9215      	str	r2, [sp, #84]	; 0x54
 8001902:	7815      	ldrb	r5, [r2, #0]
 8001904:	1a13      	subs	r3, r2, r0
 8001906:	3201      	adds	r2, #1
 8001908:	2d30      	cmp	r5, #48	; 0x30
 800190a:	d0f9      	beq.n	8001900 <_strtod_r+0x360>
 800190c:	1c2a      	adds	r2, r5, #0
 800190e:	3a31      	subs	r2, #49	; 0x31
 8001910:	2a08      	cmp	r2, #8
 8001912:	d900      	bls.n	8001916 <_strtod_r+0x376>
 8001914:	e192      	b.n	8001c3c <_strtod_r+0x69c>
 8001916:	9915      	ldr	r1, [sp, #84]	; 0x54
 8001918:	3d30      	subs	r5, #48	; 0x30
 800191a:	9108      	str	r1, [sp, #32]
 800191c:	2d00      	cmp	r5, #0
 800191e:	d001      	beq.n	8001924 <_strtod_r+0x384>
 8001920:	f000 fc7c 	bl	800221c <_strtod_r+0xc7c>
 8001924:	4699      	mov	r9, r3
 8001926:	468c      	mov	ip, r1
 8001928:	2600      	movs	r6, #0
 800192a:	2301      	movs	r3, #1
 800192c:	4662      	mov	r2, ip
 800192e:	3201      	adds	r2, #1
 8001930:	9215      	str	r2, [sp, #84]	; 0x54
 8001932:	4661      	mov	r1, ip
 8001934:	784d      	ldrb	r5, [r1, #1]
 8001936:	e152      	b.n	8001bde <_strtod_r+0x63e>
 8001938:	2d69      	cmp	r5, #105	; 0x69
 800193a:	d100      	bne.n	800193e <_strtod_r+0x39e>
 800193c:	e6af      	b.n	800169e <_strtod_r+0xfe>
 800193e:	2d6e      	cmp	r5, #110	; 0x6e
 8001940:	d000      	beq.n	8001944 <_strtod_r+0x3a4>
 8001942:	e6bd      	b.n	80016c0 <_strtod_r+0x120>
 8001944:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001946:	49c6      	ldr	r1, [pc, #792]	; (8001c60 <_strtod_r+0x6c0>)
 8001948:	7808      	ldrb	r0, [r1, #0]
 800194a:	3101      	adds	r1, #1
 800194c:	2800      	cmp	r0, #0
 800194e:	d0a7      	beq.n	80018a0 <_strtod_r+0x300>
 8001950:	3201      	adds	r2, #1
 8001952:	7813      	ldrb	r3, [r2, #0]
 8001954:	2b40      	cmp	r3, #64	; 0x40
 8001956:	dd02      	ble.n	800195e <_strtod_r+0x3be>
 8001958:	2b5a      	cmp	r3, #90	; 0x5a
 800195a:	dc00      	bgt.n	800195e <_strtod_r+0x3be>
 800195c:	3320      	adds	r3, #32
 800195e:	4283      	cmp	r3, r0
 8001960:	d0f2      	beq.n	8001948 <_strtod_r+0x3a8>
 8001962:	9a06      	ldr	r2, [sp, #24]
 8001964:	9c07      	ldr	r4, [sp, #28]
 8001966:	4691      	mov	r9, r2
 8001968:	9404      	str	r4, [sp, #16]
 800196a:	e6bd      	b.n	80016e8 <_strtod_r+0x148>
 800196c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800196e:	1bf5      	subs	r5, r6, r7
 8001970:	1965      	adds	r5, r4, r5
 8001972:	2d00      	cmp	r5, #0
 8001974:	dc00      	bgt.n	8001978 <_strtod_r+0x3d8>
 8001976:	e3b0      	b.n	80020da <_strtod_r+0xb3a>
 8001978:	230f      	movs	r3, #15
 800197a:	402b      	ands	r3, r5
 800197c:	d00a      	beq.n	8001994 <_strtod_r+0x3f4>
 800197e:	4ab9      	ldr	r2, [pc, #740]	; (8001c64 <_strtod_r+0x6c4>)
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	18d3      	adds	r3, r2, r3
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	6859      	ldr	r1, [r3, #4]
 8001988:	9a06      	ldr	r2, [sp, #24]
 800198a:	9b07      	ldr	r3, [sp, #28]
 800198c:	f007 ed0c 	blx	80093a8 <__aeabi_dmul>
 8001990:	9006      	str	r0, [sp, #24]
 8001992:	9107      	str	r1, [sp, #28]
 8001994:	230f      	movs	r3, #15
 8001996:	439d      	bics	r5, r3
 8001998:	d000      	beq.n	800199c <_strtod_r+0x3fc>
 800199a:	e16f      	b.n	8001c7c <_strtod_r+0x6dc>
 800199c:	9c07      	ldr	r4, [sp, #28]
 800199e:	9806      	ldr	r0, [sp, #24]
 80019a0:	9404      	str	r4, [sp, #16]
 80019a2:	2400      	movs	r4, #0
 80019a4:	9409      	str	r4, [sp, #36]	; 0x24
 80019a6:	4681      	mov	r9, r0
 80019a8:	4658      	mov	r0, fp
 80019aa:	9000      	str	r0, [sp, #0]
 80019ac:	9a02      	ldr	r2, [sp, #8]
 80019ae:	1c33      	adds	r3, r6, #0
 80019b0:	4650      	mov	r0, sl
 80019b2:	9908      	ldr	r1, [sp, #32]
 80019b4:	f005 fd9c 	bl	80074f0 <__s2b>
 80019b8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80019ba:	17e2      	asrs	r2, r4, #31
 80019bc:	4263      	negs	r3, r4
 80019be:	1c04      	adds	r4, r0, #0
 80019c0:	340c      	adds	r4, #12
 80019c2:	401a      	ands	r2, r3
 80019c4:	9411      	str	r4, [sp, #68]	; 0x44
 80019c6:	464c      	mov	r4, r9
 80019c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80019ca:	4683      	mov	fp, r0
 80019cc:	9408      	str	r4, [sp, #32]
 80019ce:	e0ce      	b.n	8001b6e <_strtod_r+0x5ce>
 80019d0:	48a5      	ldr	r0, [pc, #660]	; (8001c68 <_strtod_r+0x6c8>)
 80019d2:	180a      	adds	r2, r1, r0
 80019d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80019d6:	189c      	adds	r4, r3, r2
 80019d8:	18ba      	adds	r2, r7, r2
 80019da:	1855      	adds	r5, r2, r1
 80019dc:	1c27      	adds	r7, r4, #0
 80019de:	429c      	cmp	r4, r3
 80019e0:	dd00      	ble.n	80019e4 <_strtod_r+0x444>
 80019e2:	1c1f      	adds	r7, r3, #0
 80019e4:	42af      	cmp	r7, r5
 80019e6:	dd00      	ble.n	80019ea <_strtod_r+0x44a>
 80019e8:	1c2f      	adds	r7, r5, #0
 80019ea:	2f00      	cmp	r7, #0
 80019ec:	dc00      	bgt.n	80019f0 <_strtod_r+0x450>
 80019ee:	e1da      	b.n	8001da6 <_strtod_r+0x806>
 80019f0:	1be4      	subs	r4, r4, r7
 80019f2:	1bed      	subs	r5, r5, r7
 80019f4:	1bdf      	subs	r7, r3, r7
 80019f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80019f8:	2a00      	cmp	r2, #0
 80019fa:	d010      	beq.n	8001a1e <_strtod_r+0x47e>
 80019fc:	4649      	mov	r1, r9
 80019fe:	4650      	mov	r0, sl
 8001a00:	f005 fece 	bl	80077a0 <__pow5mult>
 8001a04:	4681      	mov	r9, r0
 8001a06:	4649      	mov	r1, r9
 8001a08:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8001a0a:	4650      	mov	r0, sl
 8001a0c:	f005 fe16 	bl	800763c <__multiply>
 8001a10:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001a12:	9002      	str	r0, [sp, #8]
 8001a14:	4650      	mov	r0, sl
 8001a16:	f005 fd09 	bl	800742c <_Bfree>
 8001a1a:	9b02      	ldr	r3, [sp, #8]
 8001a1c:	9316      	str	r3, [sp, #88]	; 0x58
 8001a1e:	2c00      	cmp	r4, #0
 8001a20:	dd05      	ble.n	8001a2e <_strtod_r+0x48e>
 8001a22:	4650      	mov	r0, sl
 8001a24:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001a26:	1c22      	adds	r2, r4, #0
 8001a28:	f005 ff12 	bl	8007850 <__lshift>
 8001a2c:	9016      	str	r0, [sp, #88]	; 0x58
 8001a2e:	2e00      	cmp	r6, #0
 8001a30:	d005      	beq.n	8001a3e <_strtod_r+0x49e>
 8001a32:	4641      	mov	r1, r8
 8001a34:	4650      	mov	r0, sl
 8001a36:	1c32      	adds	r2, r6, #0
 8001a38:	f005 feb2 	bl	80077a0 <__pow5mult>
 8001a3c:	4680      	mov	r8, r0
 8001a3e:	2d00      	cmp	r5, #0
 8001a40:	dd05      	ble.n	8001a4e <_strtod_r+0x4ae>
 8001a42:	4641      	mov	r1, r8
 8001a44:	4650      	mov	r0, sl
 8001a46:	1c2a      	adds	r2, r5, #0
 8001a48:	f005 ff02 	bl	8007850 <__lshift>
 8001a4c:	4680      	mov	r8, r0
 8001a4e:	2f00      	cmp	r7, #0
 8001a50:	dd05      	ble.n	8001a5e <_strtod_r+0x4be>
 8001a52:	4649      	mov	r1, r9
 8001a54:	4650      	mov	r0, sl
 8001a56:	1c3a      	adds	r2, r7, #0
 8001a58:	f005 fefa 	bl	8007850 <__lshift>
 8001a5c:	4681      	mov	r9, r0
 8001a5e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001a60:	4650      	mov	r0, sl
 8001a62:	4642      	mov	r2, r8
 8001a64:	f005 ff7a 	bl	800795c <__mdiff>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	68c4      	ldr	r4, [r0, #12]
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	60c3      	str	r3, [r0, #12]
 8001a70:	1c06      	adds	r6, r0, #0
 8001a72:	940c      	str	r4, [sp, #48]	; 0x30
 8001a74:	f005 ff54 	bl	8007920 <__mcmp>
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	da00      	bge.n	8001a7e <_strtod_r+0x4de>
 8001a7c:	e27c      	b.n	8001f78 <_strtod_r+0x9d8>
 8001a7e:	d100      	bne.n	8001a82 <_strtod_r+0x4e2>
 8001a80:	e2ef      	b.n	8002062 <_strtod_r+0xac2>
 8001a82:	1c30      	adds	r0, r6, #0
 8001a84:	4649      	mov	r1, r9
 8001a86:	f006 f8b3 	bl	8007bf0 <__ratio>
 8001a8a:	4b70      	ldr	r3, [pc, #448]	; (8001c4c <_strtod_r+0x6ac>)
 8001a8c:	4a6e      	ldr	r2, [pc, #440]	; (8001c48 <_strtod_r+0x6a8>)
 8001a8e:	1c04      	adds	r4, r0, #0
 8001a90:	1c0d      	adds	r5, r1, #0
 8001a92:	f007 ef56 	blx	8009940 <__aeabi_dcmple>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d100      	bne.n	8001a9c <_strtod_r+0x4fc>
 8001a9a:	e137      	b.n	8001d0c <_strtod_r+0x76c>
 8001a9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001a9e:	2a00      	cmp	r2, #0
 8001aa0:	d100      	bne.n	8001aa4 <_strtod_r+0x504>
 8001aa2:	e185      	b.n	8001db0 <_strtod_r+0x810>
 8001aa4:	9b07      	ldr	r3, [sp, #28]
 8001aa6:	4971      	ldr	r1, [pc, #452]	; (8001c6c <_strtod_r+0x6cc>)
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	4c69      	ldr	r4, [pc, #420]	; (8001c50 <_strtod_r+0x6b0>)
 8001aac:	4d69      	ldr	r5, [pc, #420]	; (8001c54 <_strtod_r+0x6b4>)
 8001aae:	930e      	str	r3, [sp, #56]	; 0x38
 8001ab0:	900a      	str	r0, [sp, #40]	; 0x28
 8001ab2:	9102      	str	r1, [sp, #8]
 8001ab4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8001ab6:	4a6e      	ldr	r2, [pc, #440]	; (8001c70 <_strtod_r+0x6d0>)
 8001ab8:	4b6e      	ldr	r3, [pc, #440]	; (8001c74 <_strtod_r+0x6d4>)
 8001aba:	4017      	ands	r7, r2
 8001abc:	429f      	cmp	r7, r3
 8001abe:	d100      	bne.n	8001ac2 <_strtod_r+0x522>
 8001ac0:	e13e      	b.n	8001d40 <_strtod_r+0x7a0>
 8001ac2:	23d4      	movs	r3, #212	; 0xd4
 8001ac4:	04db      	lsls	r3, r3, #19
 8001ac6:	42bb      	cmp	r3, r7
 8001ac8:	d322      	bcc.n	8001b10 <_strtod_r+0x570>
 8001aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001acc:	2a00      	cmp	r2, #0
 8001ace:	d01f      	beq.n	8001b10 <_strtod_r+0x570>
 8001ad0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001ad2:	9902      	ldr	r1, [sp, #8]
 8001ad4:	4a60      	ldr	r2, [pc, #384]	; (8001c58 <_strtod_r+0x6b8>)
 8001ad6:	4b61      	ldr	r3, [pc, #388]	; (8001c5c <_strtod_r+0x6bc>)
 8001ad8:	f007 ef32 	blx	8009940 <__aeabi_dcmple>
 8001adc:	2800      	cmp	r0, #0
 8001ade:	d013      	beq.n	8001b08 <_strtod_r+0x568>
 8001ae0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001ae2:	9902      	ldr	r1, [sp, #8]
 8001ae4:	f007 ef7e 	blx	80099e4 <__aeabi_d2uiz>
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	d100      	bne.n	8001aee <_strtod_r+0x54e>
 8001aec:	e1eb      	b.n	8001ec6 <_strtod_r+0x926>
 8001aee:	f007 ebdc 	blx	80092a8 <__aeabi_ui2d>
 8001af2:	900a      	str	r0, [sp, #40]	; 0x28
 8001af4:	9102      	str	r1, [sp, #8]
 8001af6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8001af8:	9b02      	ldr	r3, [sp, #8]
 8001afa:	2c00      	cmp	r4, #0
 8001afc:	d102      	bne.n	8001b04 <_strtod_r+0x564>
 8001afe:	2080      	movs	r0, #128	; 0x80
 8001b00:	0600      	lsls	r0, r0, #24
 8001b02:	181b      	adds	r3, r3, r0
 8001b04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001b06:	1c1d      	adds	r5, r3, #0
 8001b08:	21d6      	movs	r1, #214	; 0xd6
 8001b0a:	04c9      	lsls	r1, r1, #19
 8001b0c:	186b      	adds	r3, r5, r1
 8001b0e:	1bdd      	subs	r5, r3, r7
 8001b10:	9808      	ldr	r0, [sp, #32]
 8001b12:	9904      	ldr	r1, [sp, #16]
 8001b14:	f005 ff9a 	bl	8007a4c <__ulp>
 8001b18:	1c02      	adds	r2, r0, #0
 8001b1a:	1c0b      	adds	r3, r1, #0
 8001b1c:	1c20      	adds	r0, r4, #0
 8001b1e:	1c29      	adds	r1, r5, #0
 8001b20:	f007 ec42 	blx	80093a8 <__aeabi_dmul>
 8001b24:	1c02      	adds	r2, r0, #0
 8001b26:	1c0b      	adds	r3, r1, #0
 8001b28:	9808      	ldr	r0, [sp, #32]
 8001b2a:	9904      	ldr	r1, [sp, #16]
 8001b2c:	f007 ea34 	blx	8008f98 <__adddf3>
 8001b30:	1c02      	adds	r2, r0, #0
 8001b32:	1c0b      	adds	r3, r1, #0
 8001b34:	9206      	str	r2, [sp, #24]
 8001b36:	9307      	str	r3, [sp, #28]
 8001b38:	9008      	str	r0, [sp, #32]
 8001b3a:	9104      	str	r1, [sp, #16]
 8001b3c:	9c07      	ldr	r4, [sp, #28]
 8001b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b40:	2a00      	cmp	r2, #0
 8001b42:	d104      	bne.n	8001b4e <_strtod_r+0x5ae>
 8001b44:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <_strtod_r+0x6d0>)
 8001b46:	4023      	ands	r3, r4
 8001b48:	429f      	cmp	r7, r3
 8001b4a:	d100      	bne.n	8001b4e <_strtod_r+0x5ae>
 8001b4c:	e156      	b.n	8001dfc <_strtod_r+0x85c>
 8001b4e:	4650      	mov	r0, sl
 8001b50:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001b52:	f005 fc6b 	bl	800742c <_Bfree>
 8001b56:	4650      	mov	r0, sl
 8001b58:	4641      	mov	r1, r8
 8001b5a:	f005 fc67 	bl	800742c <_Bfree>
 8001b5e:	4650      	mov	r0, sl
 8001b60:	4649      	mov	r1, r9
 8001b62:	f005 fc63 	bl	800742c <_Bfree>
 8001b66:	4650      	mov	r0, sl
 8001b68:	1c31      	adds	r1, r6, #0
 8001b6a:	f005 fc5f 	bl	800742c <_Bfree>
 8001b6e:	465a      	mov	r2, fp
 8001b70:	6851      	ldr	r1, [r2, #4]
 8001b72:	4650      	mov	r0, sl
 8001b74:	f005 fc30 	bl	80073d8 <_Balloc>
 8001b78:	465b      	mov	r3, fp
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	3202      	adds	r2, #2
 8001b7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001b80:	0092      	lsls	r2, r2, #2
 8001b82:	4680      	mov	r8, r0
 8001b84:	300c      	adds	r0, #12
 8001b86:	f005 fbd9 	bl	800733c <memcpy>
 8001b8a:	ac14      	add	r4, sp, #80	; 0x50
 8001b8c:	a817      	add	r0, sp, #92	; 0x5c
 8001b8e:	9400      	str	r4, [sp, #0]
 8001b90:	9001      	str	r0, [sp, #4]
 8001b92:	9a08      	ldr	r2, [sp, #32]
 8001b94:	9b04      	ldr	r3, [sp, #16]
 8001b96:	4650      	mov	r0, sl
 8001b98:	f005 ffce 	bl	8007b38 <__d2b>
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	9016      	str	r0, [sp, #88]	; 0x58
 8001ba0:	4650      	mov	r0, sl
 8001ba2:	f005 fd3f 	bl	8007624 <__i2b>
 8001ba6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001ba8:	2600      	movs	r6, #0
 8001baa:	4681      	mov	r9, r0
 8001bac:	42a6      	cmp	r6, r4
 8001bae:	da00      	bge.n	8001bb2 <_strtod_r+0x612>
 8001bb0:	1c26      	adds	r6, r4, #0
 8001bb2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8001bb4:	2900      	cmp	r1, #0
 8001bb6:	da00      	bge.n	8001bba <_strtod_r+0x61a>
 8001bb8:	e0f7      	b.n	8001daa <_strtod_r+0x80a>
 8001bba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8001bbc:	1c37      	adds	r7, r6, #0
 8001bbe:	1863      	adds	r3, r4, r1
 8001bc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001bc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001bc4:	1b09      	subs	r1, r1, r4
 8001bc6:	482c      	ldr	r0, [pc, #176]	; (8001c78 <_strtod_r+0x6d8>)
 8001bc8:	188c      	adds	r4, r1, r2
 8001bca:	4284      	cmp	r4, r0
 8001bcc:	da00      	bge.n	8001bd0 <_strtod_r+0x630>
 8001bce:	e6ff      	b.n	80019d0 <_strtod_r+0x430>
 8001bd0:	2136      	movs	r1, #54	; 0x36
 8001bd2:	1a8a      	subs	r2, r1, r2
 8001bd4:	e6fe      	b.n	80019d4 <_strtod_r+0x434>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	9608      	str	r6, [sp, #32]
 8001bda:	4699      	mov	r9, r3
 8001bdc:	1c26      	adds	r6, r4, #0
 8001bde:	1c2a      	adds	r2, r5, #0
 8001be0:	3a30      	subs	r2, #48	; 0x30
 8001be2:	2001      	movs	r0, #1
 8001be4:	2a09      	cmp	r2, #9
 8001be6:	d900      	bls.n	8001bea <_strtod_r+0x64a>
 8001be8:	e543      	b.n	8001672 <_strtod_r+0xd2>
 8001bea:	1c59      	adds	r1, r3, #1
 8001bec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001bee:	1c15      	adds	r5, r2, #0
 8001bf0:	469c      	mov	ip, r3
 8001bf2:	1c0b      	adds	r3, r1, #0
 8001bf4:	2a00      	cmp	r2, #0
 8001bf6:	d100      	bne.n	8001bfa <_strtod_r+0x65a>
 8001bf8:	e698      	b.n	800192c <_strtod_r+0x38c>
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <_strtod_r+0x662>
 8001bfe:	f000 fbf2 	bl	80023e6 <_strtod_r+0xe46>
 8001c02:	4658      	mov	r0, fp
 8001c04:	468b      	mov	fp, r1
 8001c06:	1c72      	adds	r2, r6, #1
 8001c08:	4641      	mov	r1, r8
 8001c0a:	199b      	adds	r3, r3, r6
 8001c0c:	9402      	str	r4, [sp, #8]
 8001c0e:	46d8      	mov	r8, fp
 8001c10:	e007      	b.n	8001c22 <_strtod_r+0x682>
 8001c12:	0084      	lsls	r4, r0, #2
 8001c14:	46a3      	mov	fp, r4
 8001c16:	4458      	add	r0, fp
 8001c18:	0040      	lsls	r0, r0, #1
 8001c1a:	3201      	adds	r2, #1
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d100      	bne.n	8001c22 <_strtod_r+0x682>
 8001c20:	e316      	b.n	8002250 <_strtod_r+0xcb0>
 8001c22:	2e10      	cmp	r6, #16
 8001c24:	dcf9      	bgt.n	8001c1a <_strtod_r+0x67a>
 8001c26:	2a09      	cmp	r2, #9
 8001c28:	ddf3      	ble.n	8001c12 <_strtod_r+0x672>
 8001c2a:	008c      	lsls	r4, r1, #2
 8001c2c:	46a3      	mov	fp, r4
 8001c2e:	4459      	add	r1, fp
 8001c30:	0049      	lsls	r1, r1, #1
 8001c32:	e7f2      	b.n	8001c1a <_strtod_r+0x67a>
 8001c34:	2400      	movs	r4, #0
 8001c36:	46a1      	mov	r9, r4
 8001c38:	9404      	str	r4, [sp, #16]
 8001c3a:	e558      	b.n	80016ee <_strtod_r+0x14e>
 8001c3c:	9608      	str	r6, [sp, #32]
 8001c3e:	2600      	movs	r6, #0
 8001c40:	46b1      	mov	r9, r6
 8001c42:	2001      	movs	r0, #1
 8001c44:	e515      	b.n	8001672 <_strtod_r+0xd2>
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	40000000 	.word	0x40000000
 8001c50:	00000000 	.word	0x00000000
 8001c54:	3ff00000 	.word	0x3ff00000
 8001c58:	ffc00000 	.word	0xffc00000
 8001c5c:	41dfffff 	.word	0x41dfffff
 8001c60:	0800d7bc 	.word	0x0800d7bc
 8001c64:	0800dd08 	.word	0x0800dd08
 8001c68:	00000433 	.word	0x00000433
 8001c6c:	3ff00000 	.word	0x3ff00000
 8001c70:	7ff00000 	.word	0x7ff00000
 8001c74:	7fe00000 	.word	0x7fe00000
 8001c78:	fffffc03 	.word	0xfffffc03
 8001c7c:	239a      	movs	r3, #154	; 0x9a
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	429d      	cmp	r5, r3
 8001c82:	dd00      	ble.n	8001c86 <_strtod_r+0x6e6>
 8001c84:	e21f      	b.n	80020c6 <_strtod_r+0xb26>
 8001c86:	112d      	asrs	r5, r5, #4
 8001c88:	2d01      	cmp	r5, #1
 8001c8a:	dc00      	bgt.n	8001c8e <_strtod_r+0x6ee>
 8001c8c:	e3ad      	b.n	80023ea <_strtod_r+0xe4a>
 8001c8e:	4ab0      	ldr	r2, [pc, #704]	; (8001f50 <_strtod_r+0x9b0>)
 8001c90:	2301      	movs	r3, #1
 8001c92:	9806      	ldr	r0, [sp, #24]
 8001c94:	9907      	ldr	r1, [sp, #28]
 8001c96:	4691      	mov	r9, r2
 8001c98:	1c14      	adds	r4, r2, #0
 8001c9a:	2700      	movs	r7, #0
 8001c9c:	4698      	mov	r8, r3
 8001c9e:	4642      	mov	r2, r8
 8001ca0:	422a      	tst	r2, r5
 8001ca2:	d003      	beq.n	8001cac <_strtod_r+0x70c>
 8001ca4:	6822      	ldr	r2, [r4, #0]
 8001ca6:	6863      	ldr	r3, [r4, #4]
 8001ca8:	f007 eb7e 	blx	80093a8 <__aeabi_dmul>
 8001cac:	3701      	adds	r7, #1
 8001cae:	106d      	asrs	r5, r5, #1
 8001cb0:	3408      	adds	r4, #8
 8001cb2:	2d01      	cmp	r5, #1
 8001cb4:	dcf3      	bgt.n	8001c9e <_strtod_r+0x6fe>
 8001cb6:	9006      	str	r0, [sp, #24]
 8001cb8:	9107      	str	r1, [sp, #28]
 8001cba:	9c07      	ldr	r4, [sp, #28]
 8001cbc:	48a5      	ldr	r0, [pc, #660]	; (8001f54 <_strtod_r+0x9b4>)
 8001cbe:	00ff      	lsls	r7, r7, #3
 8001cc0:	1820      	adds	r0, r4, r0
 8001cc2:	9007      	str	r0, [sp, #28]
 8001cc4:	444f      	add	r7, r9
 8001cc6:	9a06      	ldr	r2, [sp, #24]
 8001cc8:	9b07      	ldr	r3, [sp, #28]
 8001cca:	6838      	ldr	r0, [r7, #0]
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	f007 eb6c 	blx	80093a8 <__aeabi_dmul>
 8001cd2:	9006      	str	r0, [sp, #24]
 8001cd4:	9107      	str	r1, [sp, #28]
 8001cd6:	9b07      	ldr	r3, [sp, #28]
 8001cd8:	4a9f      	ldr	r2, [pc, #636]	; (8001f58 <_strtod_r+0x9b8>)
 8001cda:	49a0      	ldr	r1, [pc, #640]	; (8001f5c <_strtod_r+0x9bc>)
 8001cdc:	401a      	ands	r2, r3
 8001cde:	428a      	cmp	r2, r1
 8001ce0:	d900      	bls.n	8001ce4 <_strtod_r+0x744>
 8001ce2:	e1f0      	b.n	80020c6 <_strtod_r+0xb26>
 8001ce4:	499e      	ldr	r1, [pc, #632]	; (8001f60 <_strtod_r+0x9c0>)
 8001ce6:	428a      	cmp	r2, r1
 8001ce8:	d800      	bhi.n	8001cec <_strtod_r+0x74c>
 8001cea:	e341      	b.n	8002370 <_strtod_r+0xdd0>
 8001cec:	499d      	ldr	r1, [pc, #628]	; (8001f64 <_strtod_r+0x9c4>)
 8001cee:	2301      	movs	r3, #1
 8001cf0:	425b      	negs	r3, r3
 8001cf2:	2400      	movs	r4, #0
 8001cf4:	9107      	str	r1, [sp, #28]
 8001cf6:	9306      	str	r3, [sp, #24]
 8001cf8:	4699      	mov	r9, r3
 8001cfa:	9104      	str	r1, [sp, #16]
 8001cfc:	9409      	str	r4, [sp, #36]	; 0x24
 8001cfe:	e653      	b.n	80019a8 <_strtod_r+0x408>
 8001d00:	2101      	movs	r1, #1
 8001d02:	9109      	str	r1, [sp, #36]	; 0x24
 8001d04:	1cba      	adds	r2, r7, #2
 8001d06:	9215      	str	r2, [sp, #84]	; 0x54
 8001d08:	78bd      	ldrb	r5, [r7, #2]
 8001d0a:	e526      	b.n	800175a <_strtod_r+0x1ba>
 8001d0c:	1c20      	adds	r0, r4, #0
 8001d0e:	4b85      	ldr	r3, [pc, #532]	; (8001f24 <_strtod_r+0x984>)
 8001d10:	4a83      	ldr	r2, [pc, #524]	; (8001f20 <_strtod_r+0x980>)
 8001d12:	1c29      	adds	r1, r5, #0
 8001d14:	f007 eb48 	blx	80093a8 <__aeabi_dmul>
 8001d18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8001d1a:	900a      	str	r0, [sp, #40]	; 0x28
 8001d1c:	9102      	str	r1, [sp, #8]
 8001d1e:	1c0b      	adds	r3, r1, #0
 8001d20:	2c00      	cmp	r4, #0
 8001d22:	d102      	bne.n	8001d2a <_strtod_r+0x78a>
 8001d24:	2080      	movs	r0, #128	; 0x80
 8001d26:	0600      	lsls	r0, r0, #24
 8001d28:	180b      	adds	r3, r1, r0
 8001d2a:	9907      	ldr	r1, [sp, #28]
 8001d2c:	910e      	str	r1, [sp, #56]	; 0x38
 8001d2e:	1c1d      	adds	r5, r3, #0
 8001d30:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8001d32:	4a89      	ldr	r2, [pc, #548]	; (8001f58 <_strtod_r+0x9b8>)
 8001d34:	4b8c      	ldr	r3, [pc, #560]	; (8001f68 <_strtod_r+0x9c8>)
 8001d36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001d38:	4017      	ands	r7, r2
 8001d3a:	429f      	cmp	r7, r3
 8001d3c:	d000      	beq.n	8001d40 <_strtod_r+0x7a0>
 8001d3e:	e6c0      	b.n	8001ac2 <_strtod_r+0x522>
 8001d40:	9b04      	ldr	r3, [sp, #16]
 8001d42:	9a08      	ldr	r2, [sp, #32]
 8001d44:	4883      	ldr	r0, [pc, #524]	; (8001f54 <_strtod_r+0x9b4>)
 8001d46:	9212      	str	r2, [sp, #72]	; 0x48
 8001d48:	9313      	str	r3, [sp, #76]	; 0x4c
 8001d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001d4c:	1818      	adds	r0, r3, r0
 8001d4e:	9007      	str	r0, [sp, #28]
 8001d50:	9404      	str	r4, [sp, #16]
 8001d52:	9505      	str	r5, [sp, #20]
 8001d54:	9c06      	ldr	r4, [sp, #24]
 8001d56:	9d07      	ldr	r5, [sp, #28]
 8001d58:	1c20      	adds	r0, r4, #0
 8001d5a:	1c29      	adds	r1, r5, #0
 8001d5c:	f005 fe76 	bl	8007a4c <__ulp>
 8001d60:	1c02      	adds	r2, r0, #0
 8001d62:	1c0b      	adds	r3, r1, #0
 8001d64:	9804      	ldr	r0, [sp, #16]
 8001d66:	9905      	ldr	r1, [sp, #20]
 8001d68:	f007 eb1e 	blx	80093a8 <__aeabi_dmul>
 8001d6c:	1c02      	adds	r2, r0, #0
 8001d6e:	1c0b      	adds	r3, r1, #0
 8001d70:	1c20      	adds	r0, r4, #0
 8001d72:	1c29      	adds	r1, r5, #0
 8001d74:	f007 e910 	blx	8008f98 <__adddf3>
 8001d78:	9006      	str	r0, [sp, #24]
 8001d7a:	9107      	str	r1, [sp, #28]
 8001d7c:	9c07      	ldr	r4, [sp, #28]
 8001d7e:	4a76      	ldr	r2, [pc, #472]	; (8001f58 <_strtod_r+0x9b8>)
 8001d80:	4b7a      	ldr	r3, [pc, #488]	; (8001f6c <_strtod_r+0x9cc>)
 8001d82:	4022      	ands	r2, r4
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d800      	bhi.n	8001d8a <_strtod_r+0x7ea>
 8001d88:	e0a2      	b.n	8001ed0 <_strtod_r+0x930>
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <_strtod_r+0x9c4>)
 8001d8c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001d8e:	4299      	cmp	r1, r3
 8001d90:	d100      	bne.n	8001d94 <_strtod_r+0x7f4>
 8001d92:	e186      	b.n	80020a2 <_strtod_r+0xb02>
 8001d94:	4b73      	ldr	r3, [pc, #460]	; (8001f64 <_strtod_r+0x9c4>)
 8001d96:	9307      	str	r3, [sp, #28]
 8001d98:	9c07      	ldr	r4, [sp, #28]
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	425b      	negs	r3, r3
 8001d9e:	9306      	str	r3, [sp, #24]
 8001da0:	9308      	str	r3, [sp, #32]
 8001da2:	9404      	str	r4, [sp, #16]
 8001da4:	e6d3      	b.n	8001b4e <_strtod_r+0x5ae>
 8001da6:	1c1f      	adds	r7, r3, #0
 8001da8:	e625      	b.n	80019f6 <_strtod_r+0x456>
 8001daa:	1a77      	subs	r7, r6, r1
 8001dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001dae:	e707      	b.n	8001bc0 <_strtod_r+0x620>
 8001db0:	9b06      	ldr	r3, [sp, #24]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d15c      	bne.n	8001e70 <_strtod_r+0x8d0>
 8001db6:	9a07      	ldr	r2, [sp, #28]
 8001db8:	920e      	str	r2, [sp, #56]	; 0x38
 8001dba:	0313      	lsls	r3, r2, #12
 8001dbc:	d117      	bne.n	8001dee <_strtod_r+0x84e>
 8001dbe:	1c20      	adds	r0, r4, #0
 8001dc0:	1c29      	adds	r1, r5, #0
 8001dc2:	4a59      	ldr	r2, [pc, #356]	; (8001f28 <_strtod_r+0x988>)
 8001dc4:	4b59      	ldr	r3, [pc, #356]	; (8001f2c <_strtod_r+0x98c>)
 8001dc6:	f007 edb0 	blx	8009928 <__aeabi_dcmplt>
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	d000      	beq.n	8001dd0 <_strtod_r+0x830>
 8001dce:	e211      	b.n	80021f4 <_strtod_r+0xc54>
 8001dd0:	4b54      	ldr	r3, [pc, #336]	; (8001f24 <_strtod_r+0x984>)
 8001dd2:	4a53      	ldr	r2, [pc, #332]	; (8001f20 <_strtod_r+0x980>)
 8001dd4:	1c20      	adds	r0, r4, #0
 8001dd6:	1c29      	adds	r1, r5, #0
 8001dd8:	f007 eae6 	blx	80093a8 <__aeabi_dmul>
 8001ddc:	2480      	movs	r4, #128	; 0x80
 8001dde:	0624      	lsls	r4, r4, #24
 8001de0:	900a      	str	r0, [sp, #40]	; 0x28
 8001de2:	9102      	str	r1, [sp, #8]
 8001de4:	1c02      	adds	r2, r0, #0
 8001de6:	190b      	adds	r3, r1, r4
 8001de8:	1c14      	adds	r4, r2, #0
 8001dea:	1c1d      	adds	r5, r3, #0
 8001dec:	e662      	b.n	8001ab4 <_strtod_r+0x514>
 8001dee:	4960      	ldr	r1, [pc, #384]	; (8001f70 <_strtod_r+0x9d0>)
 8001df0:	2000      	movs	r0, #0
 8001df2:	4c4f      	ldr	r4, [pc, #316]	; (8001f30 <_strtod_r+0x990>)
 8001df4:	4d4f      	ldr	r5, [pc, #316]	; (8001f34 <_strtod_r+0x994>)
 8001df6:	900a      	str	r0, [sp, #40]	; 0x28
 8001df8:	9102      	str	r1, [sp, #8]
 8001dfa:	e65b      	b.n	8001ab4 <_strtod_r+0x514>
 8001dfc:	9902      	ldr	r1, [sp, #8]
 8001dfe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001e00:	f007 edc2 	blx	8009988 <__aeabi_d2iz>
 8001e04:	f007 ea62 	blx	80092cc <__aeabi_i2d>
 8001e08:	1c0b      	adds	r3, r1, #0
 8001e0a:	1c02      	adds	r2, r0, #0
 8001e0c:	9902      	ldr	r1, [sp, #8]
 8001e0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001e10:	f007 e8c0 	blx	8008f94 <__aeabi_dsub>
 8001e14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e16:	9002      	str	r0, [sp, #8]
 8001e18:	9103      	str	r1, [sp, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d13a      	bne.n	8001e94 <_strtod_r+0x8f4>
 8001e1e:	9806      	ldr	r0, [sp, #24]
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d137      	bne.n	8001e94 <_strtod_r+0x8f4>
 8001e24:	0324      	lsls	r4, r4, #12
 8001e26:	d135      	bne.n	8001e94 <_strtod_r+0x8f4>
 8001e28:	9802      	ldr	r0, [sp, #8]
 8001e2a:	9903      	ldr	r1, [sp, #12]
 8001e2c:	4a42      	ldr	r2, [pc, #264]	; (8001f38 <_strtod_r+0x998>)
 8001e2e:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <_strtod_r+0x99c>)
 8001e30:	f007 ed7a 	blx	8009928 <__aeabi_dcmplt>
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d100      	bne.n	8001e3a <_strtod_r+0x89a>
 8001e38:	e689      	b.n	8001b4e <_strtod_r+0x5ae>
 8001e3a:	9b08      	ldr	r3, [sp, #32]
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	464c      	mov	r4, r9
 8001e40:	46d8      	mov	r8, fp
 8001e42:	4699      	mov	r9, r3
 8001e44:	46b3      	mov	fp, r6
 8001e46:	4650      	mov	r0, sl
 8001e48:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001e4a:	f005 faef 	bl	800742c <_Bfree>
 8001e4e:	4650      	mov	r0, sl
 8001e50:	1c29      	adds	r1, r5, #0
 8001e52:	f005 faeb 	bl	800742c <_Bfree>
 8001e56:	4650      	mov	r0, sl
 8001e58:	1c21      	adds	r1, r4, #0
 8001e5a:	f005 fae7 	bl	800742c <_Bfree>
 8001e5e:	4650      	mov	r0, sl
 8001e60:	4641      	mov	r1, r8
 8001e62:	f005 fae3 	bl	800742c <_Bfree>
 8001e66:	4650      	mov	r0, sl
 8001e68:	4659      	mov	r1, fp
 8001e6a:	f005 fadf 	bl	800742c <_Bfree>
 8001e6e:	e43e      	b.n	80016ee <_strtod_r+0x14e>
 8001e70:	9c07      	ldr	r4, [sp, #28]
 8001e72:	940e      	str	r4, [sp, #56]	; 0x38
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d1ba      	bne.n	8001dee <_strtod_r+0x84e>
 8001e78:	2c00      	cmp	r4, #0
 8001e7a:	d1b8      	bne.n	8001dee <_strtod_r+0x84e>
 8001e7c:	4645      	mov	r5, r8
 8001e7e:	464c      	mov	r4, r9
 8001e80:	46d8      	mov	r8, fp
 8001e82:	46b3      	mov	fp, r6
 8001e84:	2322      	movs	r3, #34	; 0x22
 8001e86:	4650      	mov	r0, sl
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	6003      	str	r3, [r0, #0]
 8001e8e:	4689      	mov	r9, r1
 8001e90:	9204      	str	r2, [sp, #16]
 8001e92:	e7d8      	b.n	8001e46 <_strtod_r+0x8a6>
 8001e94:	9802      	ldr	r0, [sp, #8]
 8001e96:	9903      	ldr	r1, [sp, #12]
 8001e98:	4a29      	ldr	r2, [pc, #164]	; (8001f40 <_strtod_r+0x9a0>)
 8001e9a:	4b2a      	ldr	r3, [pc, #168]	; (8001f44 <_strtod_r+0x9a4>)
 8001e9c:	f007 ed44 	blx	8009928 <__aeabi_dcmplt>
 8001ea0:	2800      	cmp	r0, #0
 8001ea2:	d000      	beq.n	8001ea6 <_strtod_r+0x906>
 8001ea4:	e293      	b.n	80023ce <_strtod_r+0xe2e>
 8001ea6:	9802      	ldr	r0, [sp, #8]
 8001ea8:	9903      	ldr	r1, [sp, #12]
 8001eaa:	4a27      	ldr	r2, [pc, #156]	; (8001f48 <_strtod_r+0x9a8>)
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <_strtod_r+0x9ac>)
 8001eae:	f007 ed60 	blx	8009970 <__aeabi_dcmpgt>
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	d100      	bne.n	8001eb8 <_strtod_r+0x918>
 8001eb6:	e64a      	b.n	8001b4e <_strtod_r+0x5ae>
 8001eb8:	9908      	ldr	r1, [sp, #32]
 8001eba:	4645      	mov	r5, r8
 8001ebc:	464c      	mov	r4, r9
 8001ebe:	46d8      	mov	r8, fp
 8001ec0:	4689      	mov	r9, r1
 8001ec2:	46b3      	mov	fp, r6
 8001ec4:	e7bf      	b.n	8001e46 <_strtod_r+0x8a6>
 8001ec6:	2400      	movs	r4, #0
 8001ec8:	940a      	str	r4, [sp, #40]	; 0x28
 8001eca:	4c29      	ldr	r4, [pc, #164]	; (8001f70 <_strtod_r+0x9d0>)
 8001ecc:	9402      	str	r4, [sp, #8]
 8001ece:	e612      	b.n	8001af6 <_strtod_r+0x556>
 8001ed0:	20d4      	movs	r0, #212	; 0xd4
 8001ed2:	0480      	lsls	r0, r0, #18
 8001ed4:	9906      	ldr	r1, [sp, #24]
 8001ed6:	1824      	adds	r4, r4, r0
 8001ed8:	9407      	str	r4, [sp, #28]
 8001eda:	9108      	str	r1, [sp, #32]
 8001edc:	9404      	str	r4, [sp, #16]
 8001ede:	e62e      	b.n	8001b3e <_strtod_r+0x59e>
 8001ee0:	9715      	str	r7, [sp, #84]	; 0x54
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	f7ff fbcb 	bl	800167e <_strtod_r+0xde>
 8001ee8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8001eea:	4f22      	ldr	r7, [pc, #136]	; (8001f74 <_strtod_r+0x9d4>)
 8001eec:	ab16      	add	r3, sp, #88	; 0x58
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	9401      	str	r4, [sp, #4]
 8001ef2:	4650      	mov	r0, sl
 8001ef4:	a915      	add	r1, sp, #84	; 0x54
 8001ef6:	1c3a      	adds	r2, r7, #0
 8001ef8:	ab17      	add	r3, sp, #92	; 0x5c
 8001efa:	f004 fbaf 	bl	800665c <__gethex>
 8001efe:	2407      	movs	r4, #7
 8001f00:	1c05      	adds	r5, r0, #0
 8001f02:	4004      	ands	r4, r0
 8001f04:	d000      	beq.n	8001f08 <_strtod_r+0x968>
 8001f06:	e13d      	b.n	8002184 <_strtod_r+0xbe4>
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2400      	movs	r4, #0
 8001f0c:	4691      	mov	r9, r2
 8001f0e:	9404      	str	r4, [sp, #16]
 8001f10:	f7ff fbed 	bl	80016ee <_strtod_r+0x14e>
 8001f14:	2100      	movs	r1, #0
 8001f16:	9109      	str	r1, [sp, #36]	; 0x24
 8001f18:	e6f4      	b.n	8001d04 <_strtod_r+0x764>
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	00000000 	.word	0x00000000
 8001f24:	3fe00000 	.word	0x3fe00000
 8001f28:	00000000 	.word	0x00000000
 8001f2c:	3ff00000 	.word	0x3ff00000
 8001f30:	00000000 	.word	0x00000000
 8001f34:	bff00000 	.word	0xbff00000
 8001f38:	94a03595 	.word	0x94a03595
 8001f3c:	3fcfffff 	.word	0x3fcfffff
 8001f40:	94a03595 	.word	0x94a03595
 8001f44:	3fdfffff 	.word	0x3fdfffff
 8001f48:	35afe535 	.word	0x35afe535
 8001f4c:	3fe00000 	.word	0x3fe00000
 8001f50:	0800ddf8 	.word	0x0800ddf8
 8001f54:	fcb00000 	.word	0xfcb00000
 8001f58:	7ff00000 	.word	0x7ff00000
 8001f5c:	7ca00000 	.word	0x7ca00000
 8001f60:	7c900000 	.word	0x7c900000
 8001f64:	7fefffff 	.word	0x7fefffff
 8001f68:	7fe00000 	.word	0x7fe00000
 8001f6c:	7c9fffff 	.word	0x7c9fffff
 8001f70:	3ff00000 	.word	0x3ff00000
 8001f74:	20000598 	.word	0x20000598
 8001f78:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001f7a:	4645      	mov	r5, r8
 8001f7c:	464c      	mov	r4, r9
 8001f7e:	46d8      	mov	r8, fp
 8001f80:	46b3      	mov	fp, r6
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d165      	bne.n	8002052 <_strtod_r+0xab2>
 8001f86:	9906      	ldr	r1, [sp, #24]
 8001f88:	2900      	cmp	r1, #0
 8001f8a:	d162      	bne.n	8002052 <_strtod_r+0xab2>
 8001f8c:	9b07      	ldr	r3, [sp, #28]
 8001f8e:	031a      	lsls	r2, r3, #12
 8001f90:	d15f      	bne.n	8002052 <_strtod_r+0xab2>
 8001f92:	4ac9      	ldr	r2, [pc, #804]	; (80022b8 <_strtod_r+0xd18>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	22d6      	movs	r2, #214	; 0xd6
 8001f98:	04d2      	lsls	r2, r2, #19
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d959      	bls.n	8002052 <_strtod_r+0xab2>
 8001f9e:	6972      	ldr	r2, [r6, #20]
 8001fa0:	2a00      	cmp	r2, #0
 8001fa2:	d102      	bne.n	8001faa <_strtod_r+0xa0a>
 8001fa4:	6933      	ldr	r3, [r6, #16]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	dd53      	ble.n	8002052 <_strtod_r+0xab2>
 8001faa:	4659      	mov	r1, fp
 8001fac:	4650      	mov	r0, sl
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f005 fc4e 	bl	8007850 <__lshift>
 8001fb4:	1c21      	adds	r1, r4, #0
 8001fb6:	4683      	mov	fp, r0
 8001fb8:	f005 fcb2 	bl	8007920 <__mcmp>
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	dd48      	ble.n	8002052 <_strtod_r+0xab2>
 8001fc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001fc2:	2900      	cmp	r1, #0
 8001fc4:	d100      	bne.n	8001fc8 <_strtod_r+0xa28>
 8001fc6:	e1de      	b.n	8002386 <_strtod_r+0xde6>
 8001fc8:	9a07      	ldr	r2, [sp, #28]
 8001fca:	4bbb      	ldr	r3, [pc, #748]	; (80022b8 <_strtod_r+0xd18>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	22d6      	movs	r2, #214	; 0xd6
 8001fd0:	04d2      	lsls	r2, r2, #19
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d900      	bls.n	8001fd8 <_strtod_r+0xa38>
 8001fd6:	e1d6      	b.n	8002386 <_strtod_r+0xde6>
 8001fd8:	22dc      	movs	r2, #220	; 0xdc
 8001fda:	0492      	lsls	r2, r2, #18
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d800      	bhi.n	8001fe2 <_strtod_r+0xa42>
 8001fe0:	e750      	b.n	8001e84 <_strtod_r+0x8e4>
 8001fe2:	49b6      	ldr	r1, [pc, #728]	; (80022bc <_strtod_r+0xd1c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	9113      	str	r1, [sp, #76]	; 0x4c
 8001fe8:	9212      	str	r2, [sp, #72]	; 0x48
 8001fea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001fec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001fee:	9806      	ldr	r0, [sp, #24]
 8001ff0:	9907      	ldr	r1, [sp, #28]
 8001ff2:	f007 e9da 	blx	80093a8 <__aeabi_dmul>
 8001ff6:	1c0b      	adds	r3, r1, #0
 8001ff8:	1c02      	adds	r2, r0, #0
 8001ffa:	9206      	str	r2, [sp, #24]
 8001ffc:	9307      	str	r3, [sp, #28]
 8001ffe:	9b07      	ldr	r3, [sp, #28]
 8002000:	4681      	mov	r9, r0
 8002002:	9104      	str	r1, [sp, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d000      	beq.n	800200a <_strtod_r+0xa6a>
 8002008:	e71d      	b.n	8001e46 <_strtod_r+0x8a6>
 800200a:	9806      	ldr	r0, [sp, #24]
 800200c:	2800      	cmp	r0, #0
 800200e:	d000      	beq.n	8002012 <_strtod_r+0xa72>
 8002010:	e719      	b.n	8001e46 <_strtod_r+0x8a6>
 8002012:	2322      	movs	r3, #34	; 0x22
 8002014:	4651      	mov	r1, sl
 8002016:	600b      	str	r3, [r1, #0]
 8002018:	e715      	b.n	8001e46 <_strtod_r+0x8a6>
 800201a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800201c:	2800      	cmp	r0, #0
 800201e:	d100      	bne.n	8002022 <_strtod_r+0xa82>
 8002020:	e1dc      	b.n	80023dc <_strtod_r+0xe3c>
 8002022:	49a5      	ldr	r1, [pc, #660]	; (80022b8 <_strtod_r+0xd18>)
 8002024:	20d4      	movs	r0, #212	; 0xd4
 8002026:	4019      	ands	r1, r3
 8002028:	04c0      	lsls	r0, r0, #19
 800202a:	4281      	cmp	r1, r0
 800202c:	d900      	bls.n	8002030 <_strtod_r+0xa90>
 800202e:	e1d5      	b.n	80023dc <_strtod_r+0xe3c>
 8002030:	206b      	movs	r0, #107	; 0x6b
 8002032:	0d09      	lsrs	r1, r1, #20
 8002034:	1a41      	subs	r1, r0, r1
 8002036:	2001      	movs	r0, #1
 8002038:	4240      	negs	r0, r0
 800203a:	4088      	lsls	r0, r1
 800203c:	1c01      	adds	r1, r0, #0
 800203e:	428a      	cmp	r2, r1
 8002040:	d120      	bne.n	8002084 <_strtod_r+0xae4>
 8002042:	4a9d      	ldr	r2, [pc, #628]	; (80022b8 <_strtod_r+0xd18>)
 8002044:	2180      	movs	r1, #128	; 0x80
 8002046:	4013      	ands	r3, r2
 8002048:	0349      	lsls	r1, r1, #13
 800204a:	1859      	adds	r1, r3, r1
 800204c:	2200      	movs	r2, #0
 800204e:	9107      	str	r1, [sp, #28]
 8002050:	9206      	str	r2, [sp, #24]
 8002052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002054:	2a00      	cmp	r2, #0
 8002056:	d1c4      	bne.n	8001fe2 <_strtod_r+0xa42>
 8002058:	9b06      	ldr	r3, [sp, #24]
 800205a:	9807      	ldr	r0, [sp, #28]
 800205c:	4699      	mov	r9, r3
 800205e:	9004      	str	r0, [sp, #16]
 8002060:	e6f1      	b.n	8001e46 <_strtod_r+0x8a6>
 8002062:	9808      	ldr	r0, [sp, #32]
 8002064:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002066:	4645      	mov	r5, r8
 8002068:	464c      	mov	r4, r9
 800206a:	46d8      	mov	r8, fp
 800206c:	4681      	mov	r9, r0
 800206e:	46b3      	mov	fp, r6
 8002070:	2900      	cmp	r1, #0
 8002072:	d100      	bne.n	8002076 <_strtod_r+0xad6>
 8002074:	e136      	b.n	80022e4 <_strtod_r+0xd44>
 8002076:	9b07      	ldr	r3, [sp, #28]
 8002078:	4991      	ldr	r1, [pc, #580]	; (80022c0 <_strtod_r+0xd20>)
 800207a:	0318      	lsls	r0, r3, #12
 800207c:	0b00      	lsrs	r0, r0, #12
 800207e:	9a06      	ldr	r2, [sp, #24]
 8002080:	4288      	cmp	r0, r1
 8002082:	d0ca      	beq.n	800201a <_strtod_r+0xa7a>
 8002084:	07d1      	lsls	r1, r2, #31
 8002086:	d5e4      	bpl.n	8002052 <_strtod_r+0xab2>
 8002088:	4648      	mov	r0, r9
 800208a:	9904      	ldr	r1, [sp, #16]
 800208c:	f005 fcde 	bl	8007a4c <__ulp>
 8002090:	1c02      	adds	r2, r0, #0
 8002092:	1c0b      	adds	r3, r1, #0
 8002094:	4648      	mov	r0, r9
 8002096:	9904      	ldr	r1, [sp, #16]
 8002098:	f006 ef7e 	blx	8008f98 <__adddf3>
 800209c:	9006      	str	r0, [sp, #24]
 800209e:	9107      	str	r1, [sp, #28]
 80020a0:	e7d7      	b.n	8002052 <_strtod_r+0xab2>
 80020a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80020a4:	3201      	adds	r2, #1
 80020a6:	d000      	beq.n	80020aa <_strtod_r+0xb0a>
 80020a8:	e674      	b.n	8001d94 <_strtod_r+0x7f4>
 80020aa:	4983      	ldr	r1, [pc, #524]	; (80022b8 <_strtod_r+0xd18>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	2322      	movs	r3, #34	; 0x22
 80020b0:	4650      	mov	r0, sl
 80020b2:	4645      	mov	r5, r8
 80020b4:	464c      	mov	r4, r9
 80020b6:	46d8      	mov	r8, fp
 80020b8:	6003      	str	r3, [r0, #0]
 80020ba:	46b3      	mov	fp, r6
 80020bc:	9107      	str	r1, [sp, #28]
 80020be:	9206      	str	r2, [sp, #24]
 80020c0:	4691      	mov	r9, r2
 80020c2:	9104      	str	r1, [sp, #16]
 80020c4:	e6bf      	b.n	8001e46 <_strtod_r+0x8a6>
 80020c6:	2322      	movs	r3, #34	; 0x22
 80020c8:	4a7b      	ldr	r2, [pc, #492]	; (80022b8 <_strtod_r+0xd18>)
 80020ca:	4651      	mov	r1, sl
 80020cc:	600b      	str	r3, [r1, #0]
 80020ce:	2300      	movs	r3, #0
 80020d0:	9207      	str	r2, [sp, #28]
 80020d2:	4699      	mov	r9, r3
 80020d4:	9204      	str	r2, [sp, #16]
 80020d6:	f7ff fb0a 	bl	80016ee <_strtod_r+0x14e>
 80020da:	2d00      	cmp	r5, #0
 80020dc:	d100      	bne.n	80020e0 <_strtod_r+0xb40>
 80020de:	e45d      	b.n	800199c <_strtod_r+0x3fc>
 80020e0:	426d      	negs	r5, r5
 80020e2:	230f      	movs	r3, #15
 80020e4:	402b      	ands	r3, r5
 80020e6:	d00a      	beq.n	80020fe <_strtod_r+0xb5e>
 80020e8:	4a76      	ldr	r2, [pc, #472]	; (80022c4 <_strtod_r+0xd24>)
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	18d3      	adds	r3, r2, r3
 80020ee:	9806      	ldr	r0, [sp, #24]
 80020f0:	9907      	ldr	r1, [sp, #28]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f007 eaa0 	blx	8009638 <__aeabi_ddiv>
 80020fa:	9006      	str	r0, [sp, #24]
 80020fc:	9107      	str	r1, [sp, #28]
 80020fe:	112d      	asrs	r5, r5, #4
 8002100:	d100      	bne.n	8002104 <_strtod_r+0xb64>
 8002102:	e44b      	b.n	800199c <_strtod_r+0x3fc>
 8002104:	2d1f      	cmp	r5, #31
 8002106:	dc39      	bgt.n	800217c <_strtod_r+0xbdc>
 8002108:	06eb      	lsls	r3, r5, #27
 800210a:	246a      	movs	r4, #106	; 0x6a
 800210c:	17db      	asrs	r3, r3, #31
 800210e:	401c      	ands	r4, r3
 8002110:	9409      	str	r4, [sp, #36]	; 0x24
 8002112:	2d00      	cmp	r5, #0
 8002114:	dd0f      	ble.n	8002136 <_strtod_r+0xb96>
 8002116:	9806      	ldr	r0, [sp, #24]
 8002118:	9907      	ldr	r1, [sp, #28]
 800211a:	4c6b      	ldr	r4, [pc, #428]	; (80022c8 <_strtod_r+0xd28>)
 800211c:	2701      	movs	r7, #1
 800211e:	422f      	tst	r7, r5
 8002120:	d003      	beq.n	800212a <_strtod_r+0xb8a>
 8002122:	6822      	ldr	r2, [r4, #0]
 8002124:	6863      	ldr	r3, [r4, #4]
 8002126:	f007 e940 	blx	80093a8 <__aeabi_dmul>
 800212a:	106d      	asrs	r5, r5, #1
 800212c:	3408      	adds	r4, #8
 800212e:	2d00      	cmp	r5, #0
 8002130:	d1f5      	bne.n	800211e <_strtod_r+0xb7e>
 8002132:	9006      	str	r0, [sp, #24]
 8002134:	9107      	str	r1, [sp, #28]
 8002136:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002138:	2c00      	cmp	r4, #0
 800213a:	d011      	beq.n	8002160 <_strtod_r+0xbc0>
 800213c:	9a07      	ldr	r2, [sp, #28]
 800213e:	0053      	lsls	r3, r2, #1
 8002140:	0d5b      	lsrs	r3, r3, #21
 8002142:	216b      	movs	r1, #107	; 0x6b
 8002144:	1acb      	subs	r3, r1, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	dd0a      	ble.n	8002160 <_strtod_r+0xbc0>
 800214a:	2b1f      	cmp	r3, #31
 800214c:	dc00      	bgt.n	8002150 <_strtod_r+0xbb0>
 800214e:	e162      	b.n	8002416 <_strtod_r+0xe76>
 8002150:	2000      	movs	r0, #0
 8002152:	9006      	str	r0, [sp, #24]
 8002154:	2b34      	cmp	r3, #52	; 0x34
 8002156:	dc00      	bgt.n	800215a <_strtod_r+0xbba>
 8002158:	e164      	b.n	8002424 <_strtod_r+0xe84>
 800215a:	23dc      	movs	r3, #220	; 0xdc
 800215c:	049b      	lsls	r3, r3, #18
 800215e:	9307      	str	r3, [sp, #28]
 8002160:	9a06      	ldr	r2, [sp, #24]
 8002162:	9c07      	ldr	r4, [sp, #28]
 8002164:	4691      	mov	r9, r2
 8002166:	1c10      	adds	r0, r2, #0
 8002168:	1c21      	adds	r1, r4, #0
 800216a:	4b52      	ldr	r3, [pc, #328]	; (80022b4 <_strtod_r+0xd14>)
 800216c:	4a50      	ldr	r2, [pc, #320]	; (80022b0 <_strtod_r+0xd10>)
 800216e:	9404      	str	r4, [sp, #16]
 8002170:	f007 ebce 	blx	8009910 <__aeabi_dcmpeq>
 8002174:	2800      	cmp	r0, #0
 8002176:	d101      	bne.n	800217c <_strtod_r+0xbdc>
 8002178:	f7ff fc16 	bl	80019a8 <_strtod_r+0x408>
 800217c:	2322      	movs	r3, #34	; 0x22
 800217e:	4651      	mov	r1, sl
 8002180:	600b      	str	r3, [r1, #0]
 8002182:	e6c1      	b.n	8001f08 <_strtod_r+0x968>
 8002184:	2c06      	cmp	r4, #6
 8002186:	d06a      	beq.n	800225e <_strtod_r+0xcbe>
 8002188:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800218a:	2a00      	cmp	r2, #0
 800218c:	d007      	beq.n	800219e <_strtod_r+0xbfe>
 800218e:	6839      	ldr	r1, [r7, #0]
 8002190:	a818      	add	r0, sp, #96	; 0x60
 8002192:	f005 fd87 	bl	8007ca4 <__copybits>
 8002196:	4650      	mov	r0, sl
 8002198:	9916      	ldr	r1, [sp, #88]	; 0x58
 800219a:	f005 f947 	bl	800742c <_Bfree>
 800219e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80021a0:	2c05      	cmp	r4, #5
 80021a2:	d808      	bhi.n	80021b6 <_strtod_r+0xc16>
 80021a4:	4a49      	ldr	r2, [pc, #292]	; (80022cc <_strtod_r+0xd2c>)
 80021a6:	00a4      	lsls	r4, r4, #2
 80021a8:	5912      	ldr	r2, [r2, r4]
 80021aa:	4697      	mov	pc, r2
 80021ac:	4a48      	ldr	r2, [pc, #288]	; (80022d0 <_strtod_r+0xd30>)
 80021ae:	2301      	movs	r3, #1
 80021b0:	425b      	negs	r3, r3
 80021b2:	9207      	str	r2, [sp, #28]
 80021b4:	9306      	str	r3, [sp, #24]
 80021b6:	072b      	lsls	r3, r5, #28
 80021b8:	d400      	bmi.n	80021bc <_strtod_r+0xc1c>
 80021ba:	e0c9      	b.n	8002350 <_strtod_r+0xdb0>
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	9807      	ldr	r0, [sp, #28]
 80021c0:	061b      	lsls	r3, r3, #24
 80021c2:	9906      	ldr	r1, [sp, #24]
 80021c4:	4303      	orrs	r3, r0
 80021c6:	4689      	mov	r9, r1
 80021c8:	9304      	str	r3, [sp, #16]
 80021ca:	f7ff fa90 	bl	80016ee <_strtod_r+0x14e>
 80021ce:	493a      	ldr	r1, [pc, #232]	; (80022b8 <_strtod_r+0xd18>)
 80021d0:	9107      	str	r1, [sp, #28]
 80021d2:	e7f0      	b.n	80021b6 <_strtod_r+0xc16>
 80021d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80021d6:	4c3f      	ldr	r4, [pc, #252]	; (80022d4 <_strtod_r+0xd34>)
 80021d8:	9206      	str	r2, [sp, #24]
 80021da:	9819      	ldr	r0, [sp, #100]	; 0x64
 80021dc:	4a3e      	ldr	r2, [pc, #248]	; (80022d8 <_strtod_r+0xd38>)
 80021de:	191b      	adds	r3, r3, r4
 80021e0:	051b      	lsls	r3, r3, #20
 80021e2:	4002      	ands	r2, r0
 80021e4:	4313      	orrs	r3, r2
 80021e6:	9307      	str	r3, [sp, #28]
 80021e8:	e7e5      	b.n	80021b6 <_strtod_r+0xc16>
 80021ea:	9818      	ldr	r0, [sp, #96]	; 0x60
 80021ec:	9919      	ldr	r1, [sp, #100]	; 0x64
 80021ee:	9006      	str	r0, [sp, #24]
 80021f0:	9107      	str	r1, [sp, #28]
 80021f2:	e7e0      	b.n	80021b6 <_strtod_r+0xc16>
 80021f4:	2400      	movs	r4, #0
 80021f6:	940a      	str	r4, [sp, #40]	; 0x28
 80021f8:	4c38      	ldr	r4, [pc, #224]	; (80022dc <_strtod_r+0xd3c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	4b38      	ldr	r3, [pc, #224]	; (80022e0 <_strtod_r+0xd40>)
 80021fe:	9402      	str	r4, [sp, #8]
 8002200:	e5f2      	b.n	8001de8 <_strtod_r+0x848>
 8002202:	2200      	movs	r2, #0
 8002204:	46b1      	mov	r9, r6
 8002206:	4690      	mov	r8, r2
 8002208:	4693      	mov	fp, r2
 800220a:	2400      	movs	r4, #0
 800220c:	f7ff fa19 	bl	8001642 <_strtod_r+0xa2>
 8002210:	2400      	movs	r4, #0
 8002212:	46b1      	mov	r9, r6
 8002214:	46a0      	mov	r8, r4
 8002216:	46a3      	mov	fp, r4
 8002218:	f7ff fa13 	bl	8001642 <_strtod_r+0xa2>
 800221c:	9808      	ldr	r0, [sp, #32]
 800221e:	4699      	mov	r9, r3
 8002220:	4684      	mov	ip, r0
 8002222:	2600      	movs	r6, #0
 8002224:	2201      	movs	r2, #1
 8002226:	2101      	movs	r1, #1
 8002228:	2300      	movs	r3, #0
 800222a:	2e10      	cmp	r6, #16
 800222c:	dd01      	ble.n	8002232 <_strtod_r+0xc92>
 800222e:	f7ff fb7d 	bl	800192c <_strtod_r+0x38c>
 8002232:	1871      	adds	r1, r6, r1
 8002234:	2909      	cmp	r1, #9
 8002236:	dd00      	ble.n	800223a <_strtod_r+0xc9a>
 8002238:	e093      	b.n	8002362 <_strtod_r+0xdc2>
 800223a:	4659      	mov	r1, fp
 800223c:	008b      	lsls	r3, r1, #2
 800223e:	445b      	add	r3, fp
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	195b      	adds	r3, r3, r5
 8002244:	469b      	mov	fp, r3
 8002246:	4491      	add	r9, r2
 8002248:	18b6      	adds	r6, r6, r2
 800224a:	2300      	movs	r3, #0
 800224c:	f7ff fb6e 	bl	800192c <_strtod_r+0x38c>
 8002250:	4643      	mov	r3, r8
 8002252:	4683      	mov	fp, r0
 8002254:	4688      	mov	r8, r1
 8002256:	9c02      	ldr	r4, [sp, #8]
 8002258:	1c19      	adds	r1, r3, #0
 800225a:	1c1a      	adds	r2, r3, #0
 800225c:	e7e4      	b.n	8002228 <_strtod_r+0xc88>
 800225e:	3601      	adds	r6, #1
 8002260:	2000      	movs	r0, #0
 8002262:	2400      	movs	r4, #0
 8002264:	9615      	str	r6, [sp, #84]	; 0x54
 8002266:	4681      	mov	r9, r0
 8002268:	9404      	str	r4, [sp, #16]
 800226a:	f7ff fa40 	bl	80016ee <_strtod_r+0x14e>
 800226e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002270:	2325      	movs	r3, #37	; 0x25
 8002272:	1b9b      	subs	r3, r3, r6
 8002274:	429c      	cmp	r4, r3
 8002276:	dd01      	ble.n	800227c <_strtod_r+0xcdc>
 8002278:	f7ff fb78 	bl	800196c <_strtod_r+0x3cc>
 800227c:	230f      	movs	r3, #15
 800227e:	1b9e      	subs	r6, r3, r6
 8002280:	4c10      	ldr	r4, [pc, #64]	; (80022c4 <_strtod_r+0xd24>)
 8002282:	00f3      	lsls	r3, r6, #3
 8002284:	18e3      	adds	r3, r4, r3
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	6859      	ldr	r1, [r3, #4]
 800228a:	9a06      	ldr	r2, [sp, #24]
 800228c:	9b07      	ldr	r3, [sp, #28]
 800228e:	f007 e88c 	blx	80093a8 <__aeabi_dmul>
 8002292:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002294:	1b96      	subs	r6, r2, r6
 8002296:	00f6      	lsls	r6, r6, #3
 8002298:	19a4      	adds	r4, r4, r6
 800229a:	6822      	ldr	r2, [r4, #0]
 800229c:	6863      	ldr	r3, [r4, #4]
 800229e:	f007 e884 	blx	80093a8 <__aeabi_dmul>
 80022a2:	4681      	mov	r9, r0
 80022a4:	9104      	str	r1, [sp, #16]
 80022a6:	f7ff fa22 	bl	80016ee <_strtod_r+0x14e>
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46c0      	nop			; (mov r8, r8)
	...
 80022b8:	7ff00000 	.word	0x7ff00000
 80022bc:	39500000 	.word	0x39500000
 80022c0:	000fffff 	.word	0x000fffff
 80022c4:	0800dd08 	.word	0x0800dd08
 80022c8:	0800d788 	.word	0x0800d788
 80022cc:	0800d770 	.word	0x0800d770
 80022d0:	7fffffff 	.word	0x7fffffff
 80022d4:	00000433 	.word	0x00000433
 80022d8:	ffefffff 	.word	0xffefffff
 80022dc:	3fe00000 	.word	0x3fe00000
 80022e0:	bfe00000 	.word	0xbfe00000
 80022e4:	9807      	ldr	r0, [sp, #28]
 80022e6:	0303      	lsls	r3, r0, #12
 80022e8:	d130      	bne.n	800234c <_strtod_r+0xdac>
 80022ea:	9b06      	ldr	r3, [sp, #24]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d100      	bne.n	80022f2 <_strtod_r+0xd52>
 80022f0:	e666      	b.n	8001fc0 <_strtod_r+0xa20>
 80022f2:	07d8      	lsls	r0, r3, #31
 80022f4:	d400      	bmi.n	80022f8 <_strtod_r+0xd58>
 80022f6:	e6ac      	b.n	8002052 <_strtod_r+0xab2>
 80022f8:	4648      	mov	r0, r9
 80022fa:	9904      	ldr	r1, [sp, #16]
 80022fc:	f005 fba6 	bl	8007a4c <__ulp>
 8002300:	1c02      	adds	r2, r0, #0
 8002302:	1c0b      	adds	r3, r1, #0
 8002304:	4648      	mov	r0, r9
 8002306:	9904      	ldr	r1, [sp, #16]
 8002308:	f006 ee44 	blx	8008f94 <__aeabi_dsub>
 800230c:	4b4b      	ldr	r3, [pc, #300]	; (800243c <_strtod_r+0xe9c>)
 800230e:	4a4a      	ldr	r2, [pc, #296]	; (8002438 <_strtod_r+0xe98>)
 8002310:	9006      	str	r0, [sp, #24]
 8002312:	9107      	str	r1, [sp, #28]
 8002314:	f007 eafc 	blx	8009910 <__aeabi_dcmpeq>
 8002318:	2800      	cmp	r0, #0
 800231a:	d000      	beq.n	800231e <_strtod_r+0xd7e>
 800231c:	e5b2      	b.n	8001e84 <_strtod_r+0x8e4>
 800231e:	e698      	b.n	8002052 <_strtod_r+0xab2>
 8002320:	4947      	ldr	r1, [pc, #284]	; (8002440 <_strtod_r+0xea0>)
 8002322:	f7ff fa60 	bl	80017e6 <_strtod_r+0x246>
 8002326:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002328:	3416      	adds	r4, #22
 800232a:	da01      	bge.n	8002330 <_strtod_r+0xd90>
 800232c:	f7ff fb1e 	bl	800196c <_strtod_r+0x3cc>
 8002330:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002332:	4a44      	ldr	r2, [pc, #272]	; (8002444 <_strtod_r+0xea4>)
 8002334:	00e3      	lsls	r3, r4, #3
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	9806      	ldr	r0, [sp, #24]
 800233a:	9907      	ldr	r1, [sp, #28]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f007 e97a 	blx	8009638 <__aeabi_ddiv>
 8002344:	4681      	mov	r9, r0
 8002346:	9104      	str	r1, [sp, #16]
 8002348:	f7ff f9d1 	bl	80016ee <_strtod_r+0x14e>
 800234c:	9b06      	ldr	r3, [sp, #24]
 800234e:	e7d0      	b.n	80022f2 <_strtod_r+0xd52>
 8002350:	9c06      	ldr	r4, [sp, #24]
 8002352:	46a1      	mov	r9, r4
 8002354:	9c07      	ldr	r4, [sp, #28]
 8002356:	9404      	str	r4, [sp, #16]
 8002358:	f7ff f9c9 	bl	80016ee <_strtod_r+0x14e>
 800235c:	2300      	movs	r3, #0
 800235e:	f7ff fad5 	bl	800190c <_strtod_r+0x36c>
 8002362:	4640      	mov	r0, r8
 8002364:	0083      	lsls	r3, r0, #2
 8002366:	4443      	add	r3, r8
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	195b      	adds	r3, r3, r5
 800236c:	4698      	mov	r8, r3
 800236e:	e76a      	b.n	8002246 <_strtod_r+0xca6>
 8002370:	20d4      	movs	r0, #212	; 0xd4
 8002372:	0480      	lsls	r0, r0, #18
 8002374:	9906      	ldr	r1, [sp, #24]
 8002376:	181b      	adds	r3, r3, r0
 8002378:	2400      	movs	r4, #0
 800237a:	9307      	str	r3, [sp, #28]
 800237c:	4689      	mov	r9, r1
 800237e:	9304      	str	r3, [sp, #16]
 8002380:	9409      	str	r4, [sp, #36]	; 0x24
 8002382:	f7ff fb11 	bl	80019a8 <_strtod_r+0x408>
 8002386:	9807      	ldr	r0, [sp, #28]
 8002388:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <_strtod_r+0xea8>)
 800238a:	4930      	ldr	r1, [pc, #192]	; (800244c <_strtod_r+0xeac>)
 800238c:	4003      	ands	r3, r0
 800238e:	4a30      	ldr	r2, [pc, #192]	; (8002450 <_strtod_r+0xeb0>)
 8002390:	185b      	adds	r3, r3, r1
 8002392:	431a      	orrs	r2, r3
 8002394:	2301      	movs	r3, #1
 8002396:	425b      	negs	r3, r3
 8002398:	9207      	str	r2, [sp, #28]
 800239a:	9306      	str	r3, [sp, #24]
 800239c:	e659      	b.n	8002052 <_strtod_r+0xab2>
 800239e:	9315      	str	r3, [sp, #84]	; 0x54
 80023a0:	492c      	ldr	r1, [pc, #176]	; (8002454 <_strtod_r+0xeb4>)
 80023a2:	1c1c      	adds	r4, r3, #0
 80023a4:	7808      	ldrb	r0, [r1, #0]
 80023a6:	3301      	adds	r3, #1
 80023a8:	3101      	adds	r1, #1
 80023aa:	2800      	cmp	r0, #0
 80023ac:	d019      	beq.n	80023e2 <_strtod_r+0xe42>
 80023ae:	781a      	ldrb	r2, [r3, #0]
 80023b0:	2a40      	cmp	r2, #64	; 0x40
 80023b2:	dd02      	ble.n	80023ba <_strtod_r+0xe1a>
 80023b4:	2a5a      	cmp	r2, #90	; 0x5a
 80023b6:	dc00      	bgt.n	80023ba <_strtod_r+0xe1a>
 80023b8:	3220      	adds	r2, #32
 80023ba:	4282      	cmp	r2, r0
 80023bc:	d0f2      	beq.n	80023a4 <_strtod_r+0xe04>
 80023be:	1c63      	adds	r3, r4, #1
 80023c0:	9315      	str	r3, [sp, #84]	; 0x54
 80023c2:	4821      	ldr	r0, [pc, #132]	; (8002448 <_strtod_r+0xea8>)
 80023c4:	2100      	movs	r1, #0
 80023c6:	9007      	str	r0, [sp, #28]
 80023c8:	9106      	str	r1, [sp, #24]
 80023ca:	f7ff fa74 	bl	80018b6 <_strtod_r+0x316>
 80023ce:	9a08      	ldr	r2, [sp, #32]
 80023d0:	4645      	mov	r5, r8
 80023d2:	464c      	mov	r4, r9
 80023d4:	46d8      	mov	r8, fp
 80023d6:	4691      	mov	r9, r2
 80023d8:	46b3      	mov	fp, r6
 80023da:	e534      	b.n	8001e46 <_strtod_r+0x8a6>
 80023dc:	2101      	movs	r1, #1
 80023de:	4249      	negs	r1, r1
 80023e0:	e62d      	b.n	800203e <_strtod_r+0xa9e>
 80023e2:	9315      	str	r3, [sp, #84]	; 0x54
 80023e4:	e7ed      	b.n	80023c2 <_strtod_r+0xe22>
 80023e6:	2201      	movs	r2, #1
 80023e8:	e71e      	b.n	8002228 <_strtod_r+0xc88>
 80023ea:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <_strtod_r+0xeb8>)
 80023ec:	2700      	movs	r7, #0
 80023ee:	4699      	mov	r9, r3
 80023f0:	e463      	b.n	8001cba <_strtod_r+0x71a>
 80023f2:	491a      	ldr	r1, [pc, #104]	; (800245c <_strtod_r+0xebc>)
 80023f4:	a815      	add	r0, sp, #84	; 0x54
 80023f6:	3114      	adds	r1, #20
 80023f8:	aa18      	add	r2, sp, #96	; 0x60
 80023fa:	f004 fbd7 	bl	8006bac <__hexnan>
 80023fe:	2805      	cmp	r0, #5
 8002400:	d001      	beq.n	8002406 <_strtod_r+0xe66>
 8002402:	f7ff fa54 	bl	80018ae <_strtod_r+0x30e>
 8002406:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002408:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <_strtod_r+0xea8>)
 800240a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800240c:	431a      	orrs	r2, r3
 800240e:	9207      	str	r2, [sp, #28]
 8002410:	9006      	str	r0, [sp, #24]
 8002412:	f7ff fa50 	bl	80018b6 <_strtod_r+0x316>
 8002416:	2201      	movs	r2, #1
 8002418:	9906      	ldr	r1, [sp, #24]
 800241a:	4252      	negs	r2, r2
 800241c:	409a      	lsls	r2, r3
 800241e:	4011      	ands	r1, r2
 8002420:	9106      	str	r1, [sp, #24]
 8002422:	e69d      	b.n	8002160 <_strtod_r+0xbc0>
 8002424:	2101      	movs	r1, #1
 8002426:	3b20      	subs	r3, #32
 8002428:	4249      	negs	r1, r1
 800242a:	4099      	lsls	r1, r3
 800242c:	400a      	ands	r2, r1
 800242e:	9207      	str	r2, [sp, #28]
 8002430:	e696      	b.n	8002160 <_strtod_r+0xbc0>
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46c0      	nop			; (mov r8, r8)
	...
 8002440:	00004e1f 	.word	0x00004e1f
 8002444:	0800dd08 	.word	0x0800dd08
 8002448:	7ff00000 	.word	0x7ff00000
 800244c:	fff00000 	.word	0xfff00000
 8002450:	000fffff 	.word	0x000fffff
 8002454:	0800d7b4 	.word	0x0800d7b4
 8002458:	0800ddf8 	.word	0x0800ddf8
 800245c:	20000598 	.word	0x20000598

08002460 <strtod>:
 8002460:	b508      	push	{r3, lr}
 8002462:	1c0a      	adds	r2, r1, #0
 8002464:	4904      	ldr	r1, [pc, #16]	; (8002478 <strtod+0x18>)
 8002466:	1c03      	adds	r3, r0, #0
 8002468:	6808      	ldr	r0, [r1, #0]
 800246a:	1c19      	adds	r1, r3, #0
 800246c:	f7ff f898 	bl	80015a0 <_strtod_r>
 8002470:	bc08      	pop	{r3}
 8002472:	bc04      	pop	{r2}
 8002474:	4710      	bx	r2
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	200000e8 	.word	0x200000e8

0800247c <strtof>:
 800247c:	1c0a      	adds	r2, r1, #0
 800247e:	490b      	ldr	r1, [pc, #44]	; (80024ac <strtof+0x30>)
 8002480:	b538      	push	{r3, r4, r5, lr}
 8002482:	1c03      	adds	r3, r0, #0
 8002484:	6808      	ldr	r0, [r1, #0]
 8002486:	1c19      	adds	r1, r3, #0
 8002488:	f7ff f88a 	bl	80015a0 <_strtod_r>
 800248c:	1c04      	adds	r4, r0, #0
 800248e:	1c0d      	adds	r5, r1, #0
 8002490:	f7fe ffd4 	bl	800143c <__fpclassifyd>
 8002494:	2800      	cmp	r0, #0
 8002496:	d006      	beq.n	80024a6 <strtof+0x2a>
 8002498:	1c20      	adds	r0, r4, #0
 800249a:	1c29      	adds	r1, r5, #0
 800249c:	f007 eacc 	blx	8009a38 <__aeabi_d2f>
 80024a0:	bc38      	pop	{r3, r4, r5}
 80024a2:	bc02      	pop	{r1}
 80024a4:	4708      	bx	r1
 80024a6:	f7ff f835 	bl	8001514 <nanf>
 80024aa:	e7f9      	b.n	80024a0 <strtof+0x24>
 80024ac:	200000e8 	.word	0x200000e8

080024b0 <_strtol_r>:
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b2:	4644      	mov	r4, r8
 80024b4:	465f      	mov	r7, fp
 80024b6:	4656      	mov	r6, sl
 80024b8:	464d      	mov	r5, r9
 80024ba:	b4f0      	push	{r4, r5, r6, r7}
 80024bc:	4698      	mov	r8, r3
 80024be:	4b57      	ldr	r3, [pc, #348]	; (800261c <_strtol_r+0x16c>)
 80024c0:	b087      	sub	sp, #28
 80024c2:	9005      	str	r0, [sp, #20]
 80024c4:	9102      	str	r1, [sp, #8]
 80024c6:	681f      	ldr	r7, [r3, #0]
 80024c8:	9203      	str	r2, [sp, #12]
 80024ca:	1c0c      	adds	r4, r1, #0
 80024cc:	2208      	movs	r2, #8
 80024ce:	7825      	ldrb	r5, [r4, #0]
 80024d0:	197b      	adds	r3, r7, r5
 80024d2:	785b      	ldrb	r3, [r3, #1]
 80024d4:	3401      	adds	r4, #1
 80024d6:	421a      	tst	r2, r3
 80024d8:	d1f9      	bne.n	80024ce <_strtol_r+0x1e>
 80024da:	2d2d      	cmp	r5, #45	; 0x2d
 80024dc:	d100      	bne.n	80024e0 <_strtol_r+0x30>
 80024de:	e082      	b.n	80025e6 <_strtol_r+0x136>
 80024e0:	2200      	movs	r2, #0
 80024e2:	9204      	str	r2, [sp, #16]
 80024e4:	2d2b      	cmp	r5, #43	; 0x2b
 80024e6:	d100      	bne.n	80024ea <_strtol_r+0x3a>
 80024e8:	e082      	b.n	80025f0 <_strtol_r+0x140>
 80024ea:	2310      	movs	r3, #16
 80024ec:	4641      	mov	r1, r8
 80024ee:	4399      	bics	r1, r3
 80024f0:	46c2      	mov	sl, r8
 80024f2:	d10b      	bne.n	800250c <_strtol_r+0x5c>
 80024f4:	4641      	mov	r1, r8
 80024f6:	424b      	negs	r3, r1
 80024f8:	414b      	adcs	r3, r1
 80024fa:	2d30      	cmp	r5, #48	; 0x30
 80024fc:	d100      	bne.n	8002500 <_strtol_r+0x50>
 80024fe:	e07a      	b.n	80025f6 <_strtol_r+0x146>
 8002500:	2b00      	cmp	r3, #0
 8002502:	d100      	bne.n	8002506 <_strtol_r+0x56>
 8002504:	e088      	b.n	8002618 <_strtol_r+0x168>
 8002506:	210a      	movs	r1, #10
 8002508:	468a      	mov	sl, r1
 800250a:	4688      	mov	r8, r1
 800250c:	9904      	ldr	r1, [sp, #16]
 800250e:	2680      	movs	r6, #128	; 0x80
 8002510:	424b      	negs	r3, r1
 8002512:	414b      	adcs	r3, r1
 8002514:	0636      	lsls	r6, r6, #24
 8002516:	1af6      	subs	r6, r6, r3
 8002518:	1c30      	adds	r0, r6, #0
 800251a:	4651      	mov	r1, sl
 800251c:	f006 ec7c 	blx	8008e18 <__aeabi_uidivmod>
 8002520:	1c30      	adds	r0, r6, #0
 8002522:	4689      	mov	r9, r1
 8002524:	4651      	mov	r1, sl
 8002526:	f006 ebfa 	blx	8008d1c <__aeabi_uidiv>
 800252a:	2103      	movs	r1, #3
 800252c:	2304      	movs	r3, #4
 800252e:	468b      	mov	fp, r1
 8002530:	4641      	mov	r1, r8
 8002532:	2600      	movs	r6, #0
 8002534:	2200      	movs	r2, #0
 8002536:	469c      	mov	ip, r3
 8002538:	9101      	str	r1, [sp, #4]
 800253a:	e016      	b.n	800256a <_strtol_r+0xba>
 800253c:	9b01      	ldr	r3, [sp, #4]
 800253e:	3d30      	subs	r5, #48	; 0x30
 8002540:	42ab      	cmp	r3, r5
 8002542:	dd23      	ble.n	800258c <_strtol_r+0xdc>
 8002544:	4290      	cmp	r0, r2
 8002546:	d338      	bcc.n	80025ba <_strtol_r+0x10a>
 8002548:	2e00      	cmp	r6, #0
 800254a:	db36      	blt.n	80025ba <_strtol_r+0x10a>
 800254c:	2301      	movs	r3, #1
 800254e:	454d      	cmp	r5, r9
 8002550:	dc00      	bgt.n	8002554 <_strtol_r+0xa4>
 8002552:	2300      	movs	r3, #0
 8002554:	061b      	lsls	r3, r3, #24
 8002556:	d001      	beq.n	800255c <_strtol_r+0xac>
 8002558:	4282      	cmp	r2, r0
 800255a:	d02e      	beq.n	80025ba <_strtol_r+0x10a>
 800255c:	1c11      	adds	r1, r2, #0
 800255e:	4652      	mov	r2, sl
 8002560:	434a      	muls	r2, r1
 8002562:	2601      	movs	r6, #1
 8002564:	18aa      	adds	r2, r5, r2
 8002566:	7825      	ldrb	r5, [r4, #0]
 8002568:	3401      	adds	r4, #1
 800256a:	197b      	adds	r3, r7, r5
 800256c:	785b      	ldrb	r3, [r3, #1]
 800256e:	4661      	mov	r1, ip
 8002570:	4219      	tst	r1, r3
 8002572:	d1e3      	bne.n	800253c <_strtol_r+0x8c>
 8002574:	4659      	mov	r1, fp
 8002576:	400b      	ands	r3, r1
 8002578:	d008      	beq.n	800258c <_strtol_r+0xdc>
 800257a:	2157      	movs	r1, #87	; 0x57
 800257c:	4688      	mov	r8, r1
 800257e:	2b01      	cmp	r3, #1
 8002580:	d01e      	beq.n	80025c0 <_strtol_r+0x110>
 8002582:	9b01      	ldr	r3, [sp, #4]
 8002584:	4641      	mov	r1, r8
 8002586:	1a6d      	subs	r5, r5, r1
 8002588:	42ab      	cmp	r3, r5
 800258a:	dcdb      	bgt.n	8002544 <_strtol_r+0x94>
 800258c:	9904      	ldr	r1, [sp, #16]
 800258e:	1c73      	adds	r3, r6, #1
 8002590:	d019      	beq.n	80025c6 <_strtol_r+0x116>
 8002592:	2900      	cmp	r1, #0
 8002594:	d125      	bne.n	80025e2 <_strtol_r+0x132>
 8002596:	9b03      	ldr	r3, [sp, #12]
 8002598:	1c10      	adds	r0, r2, #0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <_strtol_r+0xf8>
 800259e:	2e00      	cmp	r6, #0
 80025a0:	d11c      	bne.n	80025dc <_strtol_r+0x12c>
 80025a2:	9902      	ldr	r1, [sp, #8]
 80025a4:	9a03      	ldr	r2, [sp, #12]
 80025a6:	6011      	str	r1, [r2, #0]
 80025a8:	b007      	add	sp, #28
 80025aa:	bc3c      	pop	{r2, r3, r4, r5}
 80025ac:	4690      	mov	r8, r2
 80025ae:	4699      	mov	r9, r3
 80025b0:	46a2      	mov	sl, r4
 80025b2:	46ab      	mov	fp, r5
 80025b4:	bcf0      	pop	{r4, r5, r6, r7}
 80025b6:	bc02      	pop	{r1}
 80025b8:	4708      	bx	r1
 80025ba:	2601      	movs	r6, #1
 80025bc:	4276      	negs	r6, r6
 80025be:	e7d2      	b.n	8002566 <_strtol_r+0xb6>
 80025c0:	2337      	movs	r3, #55	; 0x37
 80025c2:	4698      	mov	r8, r3
 80025c4:	e7dd      	b.n	8002582 <_strtol_r+0xd2>
 80025c6:	2080      	movs	r0, #128	; 0x80
 80025c8:	424b      	negs	r3, r1
 80025ca:	414b      	adcs	r3, r1
 80025cc:	0600      	lsls	r0, r0, #24
 80025ce:	9a05      	ldr	r2, [sp, #20]
 80025d0:	1ac0      	subs	r0, r0, r3
 80025d2:	2322      	movs	r3, #34	; 0x22
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	9b03      	ldr	r3, [sp, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0e5      	beq.n	80025a8 <_strtol_r+0xf8>
 80025dc:	3c01      	subs	r4, #1
 80025de:	9402      	str	r4, [sp, #8]
 80025e0:	e7df      	b.n	80025a2 <_strtol_r+0xf2>
 80025e2:	4252      	negs	r2, r2
 80025e4:	e7d7      	b.n	8002596 <_strtol_r+0xe6>
 80025e6:	2101      	movs	r1, #1
 80025e8:	7825      	ldrb	r5, [r4, #0]
 80025ea:	9104      	str	r1, [sp, #16]
 80025ec:	3401      	adds	r4, #1
 80025ee:	e77c      	b.n	80024ea <_strtol_r+0x3a>
 80025f0:	7825      	ldrb	r5, [r4, #0]
 80025f2:	3401      	adds	r4, #1
 80025f4:	e779      	b.n	80024ea <_strtol_r+0x3a>
 80025f6:	7822      	ldrb	r2, [r4, #0]
 80025f8:	2120      	movs	r1, #32
 80025fa:	438a      	bics	r2, r1
 80025fc:	2a58      	cmp	r2, #88	; 0x58
 80025fe:	d005      	beq.n	800260c <_strtol_r+0x15c>
 8002600:	2b00      	cmp	r3, #0
 8002602:	d009      	beq.n	8002618 <_strtol_r+0x168>
 8002604:	2308      	movs	r3, #8
 8002606:	469a      	mov	sl, r3
 8002608:	4698      	mov	r8, r3
 800260a:	e77f      	b.n	800250c <_strtol_r+0x5c>
 800260c:	2210      	movs	r2, #16
 800260e:	7865      	ldrb	r5, [r4, #1]
 8002610:	4692      	mov	sl, r2
 8002612:	3402      	adds	r4, #2
 8002614:	4690      	mov	r8, r2
 8002616:	e779      	b.n	800250c <_strtol_r+0x5c>
 8002618:	46c2      	mov	sl, r8
 800261a:	e777      	b.n	800250c <_strtol_r+0x5c>
 800261c:	200000e4 	.word	0x200000e4

08002620 <strtol>:
 8002620:	b538      	push	{r3, r4, r5, lr}
 8002622:	1c13      	adds	r3, r2, #0
 8002624:	4a05      	ldr	r2, [pc, #20]	; (800263c <strtol+0x1c>)
 8002626:	1c05      	adds	r5, r0, #0
 8002628:	1c0c      	adds	r4, r1, #0
 800262a:	6810      	ldr	r0, [r2, #0]
 800262c:	1c29      	adds	r1, r5, #0
 800262e:	1c22      	adds	r2, r4, #0
 8002630:	f7ff ff3e 	bl	80024b0 <_strtol_r>
 8002634:	bc38      	pop	{r3, r4, r5}
 8002636:	bc02      	pop	{r1}
 8002638:	4708      	bx	r1
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	200000e8 	.word	0x200000e8

08002640 <_strtoul_r>:
 8002640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002642:	465f      	mov	r7, fp
 8002644:	4656      	mov	r6, sl
 8002646:	464d      	mov	r5, r9
 8002648:	4644      	mov	r4, r8
 800264a:	b4f0      	push	{r4, r5, r6, r7}
 800264c:	1c1f      	adds	r7, r3, #0
 800264e:	4b56      	ldr	r3, [pc, #344]	; (80027a8 <_strtoul_r+0x168>)
 8002650:	b085      	sub	sp, #20
 8002652:	9003      	str	r0, [sp, #12]
 8002654:	9101      	str	r1, [sp, #4]
 8002656:	681e      	ldr	r6, [r3, #0]
 8002658:	4691      	mov	r9, r2
 800265a:	1c0c      	adds	r4, r1, #0
 800265c:	2208      	movs	r2, #8
 800265e:	7825      	ldrb	r5, [r4, #0]
 8002660:	1973      	adds	r3, r6, r5
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	3401      	adds	r4, #1
 8002666:	421a      	tst	r2, r3
 8002668:	d1f9      	bne.n	800265e <_strtoul_r+0x1e>
 800266a:	2d2d      	cmp	r5, #45	; 0x2d
 800266c:	d100      	bne.n	8002670 <_strtoul_r+0x30>
 800266e:	e081      	b.n	8002774 <_strtoul_r+0x134>
 8002670:	2200      	movs	r2, #0
 8002672:	9202      	str	r2, [sp, #8]
 8002674:	2d2b      	cmp	r5, #43	; 0x2b
 8002676:	d100      	bne.n	800267a <_strtoul_r+0x3a>
 8002678:	e081      	b.n	800277e <_strtoul_r+0x13e>
 800267a:	2310      	movs	r3, #16
 800267c:	1c39      	adds	r1, r7, #0
 800267e:	4399      	bics	r1, r3
 8002680:	1e0b      	subs	r3, r1, #0
 8002682:	d115      	bne.n	80026b0 <_strtoul_r+0x70>
 8002684:	427b      	negs	r3, r7
 8002686:	417b      	adcs	r3, r7
 8002688:	2d30      	cmp	r5, #48	; 0x30
 800268a:	d009      	beq.n	80026a0 <_strtoul_r+0x60>
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00f      	beq.n	80026b0 <_strtoul_r+0x70>
 8002690:	4b46      	ldr	r3, [pc, #280]	; (80027ac <_strtoul_r+0x16c>)
 8002692:	2205      	movs	r2, #5
 8002694:	210a      	movs	r1, #10
 8002696:	4693      	mov	fp, r2
 8002698:	4698      	mov	r8, r3
 800269a:	9100      	str	r1, [sp, #0]
 800269c:	270a      	movs	r7, #10
 800269e:	e014      	b.n	80026ca <_strtoul_r+0x8a>
 80026a0:	7822      	ldrb	r2, [r4, #0]
 80026a2:	2120      	movs	r1, #32
 80026a4:	438a      	bics	r2, r1
 80026a6:	2a58      	cmp	r2, #88	; 0x58
 80026a8:	d06c      	beq.n	8002784 <_strtoul_r+0x144>
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d000      	beq.n	80026b0 <_strtoul_r+0x70>
 80026ae:	e073      	b.n	8002798 <_strtoul_r+0x158>
 80026b0:	2001      	movs	r0, #1
 80026b2:	1c39      	adds	r1, r7, #0
 80026b4:	4240      	negs	r0, r0
 80026b6:	9700      	str	r7, [sp, #0]
 80026b8:	f006 eb30 	blx	8008d1c <__aeabi_uidiv>
 80026bc:	4680      	mov	r8, r0
 80026be:	2001      	movs	r0, #1
 80026c0:	4240      	negs	r0, r0
 80026c2:	1c39      	adds	r1, r7, #0
 80026c4:	f006 eba8 	blx	8008e18 <__aeabi_uidivmod>
 80026c8:	468b      	mov	fp, r1
 80026ca:	2103      	movs	r1, #3
 80026cc:	2304      	movs	r3, #4
 80026ce:	468a      	mov	sl, r1
 80026d0:	2200      	movs	r2, #0
 80026d2:	4641      	mov	r1, r8
 80026d4:	2000      	movs	r0, #0
 80026d6:	46b8      	mov	r8, r7
 80026d8:	469c      	mov	ip, r3
 80026da:	1c37      	adds	r7, r6, #0
 80026dc:	e014      	b.n	8002708 <_strtoul_r+0xc8>
 80026de:	3d30      	subs	r5, #48	; 0x30
 80026e0:	45a8      	cmp	r8, r5
 80026e2:	dd1f      	ble.n	8002724 <_strtoul_r+0xe4>
 80026e4:	4281      	cmp	r1, r0
 80026e6:	d336      	bcc.n	8002756 <_strtoul_r+0x116>
 80026e8:	2a00      	cmp	r2, #0
 80026ea:	db34      	blt.n	8002756 <_strtoul_r+0x116>
 80026ec:	2301      	movs	r3, #1
 80026ee:	455d      	cmp	r5, fp
 80026f0:	dc00      	bgt.n	80026f4 <_strtoul_r+0xb4>
 80026f2:	2300      	movs	r3, #0
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	d001      	beq.n	80026fc <_strtoul_r+0xbc>
 80026f8:	4288      	cmp	r0, r1
 80026fa:	d02c      	beq.n	8002756 <_strtoul_r+0x116>
 80026fc:	9e00      	ldr	r6, [sp, #0]
 80026fe:	4370      	muls	r0, r6
 8002700:	2201      	movs	r2, #1
 8002702:	1828      	adds	r0, r5, r0
 8002704:	7825      	ldrb	r5, [r4, #0]
 8002706:	3401      	adds	r4, #1
 8002708:	197b      	adds	r3, r7, r5
 800270a:	785b      	ldrb	r3, [r3, #1]
 800270c:	4666      	mov	r6, ip
 800270e:	421e      	tst	r6, r3
 8002710:	d1e5      	bne.n	80026de <_strtoul_r+0x9e>
 8002712:	4656      	mov	r6, sl
 8002714:	4033      	ands	r3, r6
 8002716:	d005      	beq.n	8002724 <_strtoul_r+0xe4>
 8002718:	2657      	movs	r6, #87	; 0x57
 800271a:	2b01      	cmp	r3, #1
 800271c:	d018      	beq.n	8002750 <_strtoul_r+0x110>
 800271e:	1bad      	subs	r5, r5, r6
 8002720:	45a8      	cmp	r8, r5
 8002722:	dcdf      	bgt.n	80026e4 <_strtoul_r+0xa4>
 8002724:	1c51      	adds	r1, r2, #1
 8002726:	d019      	beq.n	800275c <_strtoul_r+0x11c>
 8002728:	9e02      	ldr	r6, [sp, #8]
 800272a:	2e00      	cmp	r6, #0
 800272c:	d120      	bne.n	8002770 <_strtoul_r+0x130>
 800272e:	4649      	mov	r1, r9
 8002730:	2900      	cmp	r1, #0
 8002732:	d004      	beq.n	800273e <_strtoul_r+0xfe>
 8002734:	2a00      	cmp	r2, #0
 8002736:	d118      	bne.n	800276a <_strtoul_r+0x12a>
 8002738:	9e01      	ldr	r6, [sp, #4]
 800273a:	4649      	mov	r1, r9
 800273c:	600e      	str	r6, [r1, #0]
 800273e:	b005      	add	sp, #20
 8002740:	bc3c      	pop	{r2, r3, r4, r5}
 8002742:	4690      	mov	r8, r2
 8002744:	4699      	mov	r9, r3
 8002746:	46a2      	mov	sl, r4
 8002748:	46ab      	mov	fp, r5
 800274a:	bcf0      	pop	{r4, r5, r6, r7}
 800274c:	bc02      	pop	{r1}
 800274e:	4708      	bx	r1
 8002750:	2637      	movs	r6, #55	; 0x37
 8002752:	1bad      	subs	r5, r5, r6
 8002754:	e7e4      	b.n	8002720 <_strtoul_r+0xe0>
 8002756:	2201      	movs	r2, #1
 8002758:	4252      	negs	r2, r2
 800275a:	e7d3      	b.n	8002704 <_strtoul_r+0xc4>
 800275c:	9e03      	ldr	r6, [sp, #12]
 800275e:	2322      	movs	r3, #34	; 0x22
 8002760:	4649      	mov	r1, r9
 8002762:	6033      	str	r3, [r6, #0]
 8002764:	1c10      	adds	r0, r2, #0
 8002766:	2900      	cmp	r1, #0
 8002768:	d0e9      	beq.n	800273e <_strtoul_r+0xfe>
 800276a:	3c01      	subs	r4, #1
 800276c:	9401      	str	r4, [sp, #4]
 800276e:	e7e3      	b.n	8002738 <_strtoul_r+0xf8>
 8002770:	4240      	negs	r0, r0
 8002772:	e7dc      	b.n	800272e <_strtoul_r+0xee>
 8002774:	2101      	movs	r1, #1
 8002776:	7825      	ldrb	r5, [r4, #0]
 8002778:	9102      	str	r1, [sp, #8]
 800277a:	3401      	adds	r4, #1
 800277c:	e77d      	b.n	800267a <_strtoul_r+0x3a>
 800277e:	7825      	ldrb	r5, [r4, #0]
 8002780:	3401      	adds	r4, #1
 8002782:	e77a      	b.n	800267a <_strtoul_r+0x3a>
 8002784:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <_strtoul_r+0x170>)
 8002786:	220f      	movs	r2, #15
 8002788:	2110      	movs	r1, #16
 800278a:	7865      	ldrb	r5, [r4, #1]
 800278c:	4693      	mov	fp, r2
 800278e:	3402      	adds	r4, #2
 8002790:	4698      	mov	r8, r3
 8002792:	9100      	str	r1, [sp, #0]
 8002794:	2710      	movs	r7, #16
 8002796:	e798      	b.n	80026ca <_strtoul_r+0x8a>
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <_strtoul_r+0x174>)
 800279a:	2207      	movs	r2, #7
 800279c:	2108      	movs	r1, #8
 800279e:	4693      	mov	fp, r2
 80027a0:	4698      	mov	r8, r3
 80027a2:	9100      	str	r1, [sp, #0]
 80027a4:	2708      	movs	r7, #8
 80027a6:	e790      	b.n	80026ca <_strtoul_r+0x8a>
 80027a8:	200000e4 	.word	0x200000e4
 80027ac:	19999999 	.word	0x19999999
 80027b0:	0fffffff 	.word	0x0fffffff
 80027b4:	1fffffff 	.word	0x1fffffff

080027b8 <strtoul>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	1c13      	adds	r3, r2, #0
 80027bc:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <strtoul+0x1c>)
 80027be:	1c05      	adds	r5, r0, #0
 80027c0:	1c0c      	adds	r4, r1, #0
 80027c2:	6810      	ldr	r0, [r2, #0]
 80027c4:	1c29      	adds	r1, r5, #0
 80027c6:	1c22      	adds	r2, r4, #0
 80027c8:	f7ff ff3a 	bl	8002640 <_strtoul_r>
 80027cc:	bc38      	pop	{r3, r4, r5}
 80027ce:	bc02      	pop	{r1}
 80027d0:	4708      	bx	r1
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	200000e8 	.word	0x200000e8

080027d8 <_sungetc_r>:
 80027d8:	b538      	push	{r3, r4, r5, lr}
 80027da:	1c14      	adds	r4, r2, #0
 80027dc:	1c4a      	adds	r2, r1, #1
 80027de:	d01c      	beq.n	800281a <_sungetc_r+0x42>
 80027e0:	89a3      	ldrh	r3, [r4, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	4393      	bics	r3, r2
 80027e6:	81a3      	strh	r3, [r4, #12]
 80027e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027ea:	25ff      	movs	r5, #255	; 0xff
 80027ec:	400d      	ands	r5, r1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d016      	beq.n	8002820 <_sungetc_r+0x48>
 80027f2:	6862      	ldr	r2, [r4, #4]
 80027f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027f6:	429a      	cmp	r2, r3
 80027f8:	da0a      	bge.n	8002810 <_sungetc_r+0x38>
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	6023      	str	r3, [r4, #0]
 8002800:	701d      	strb	r5, [r3, #0]
 8002802:	6863      	ldr	r3, [r4, #4]
 8002804:	3301      	adds	r3, #1
 8002806:	6063      	str	r3, [r4, #4]
 8002808:	1c28      	adds	r0, r5, #0
 800280a:	bc38      	pop	{r3, r4, r5}
 800280c:	bc02      	pop	{r1}
 800280e:	4708      	bx	r1
 8002810:	1c21      	adds	r1, r4, #0
 8002812:	f002 fa25 	bl	8004c60 <__submore>
 8002816:	2800      	cmp	r0, #0
 8002818:	d0ef      	beq.n	80027fa <_sungetc_r+0x22>
 800281a:	2501      	movs	r5, #1
 800281c:	426d      	negs	r5, r5
 800281e:	e7f3      	b.n	8002808 <_sungetc_r+0x30>
 8002820:	6922      	ldr	r2, [r4, #16]
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	2a00      	cmp	r2, #0
 8002826:	d005      	beq.n	8002834 <_sungetc_r+0x5c>
 8002828:	429a      	cmp	r2, r3
 800282a:	d203      	bcs.n	8002834 <_sungetc_r+0x5c>
 800282c:	1e5a      	subs	r2, r3, #1
 800282e:	7811      	ldrb	r1, [r2, #0]
 8002830:	42a9      	cmp	r1, r5
 8002832:	d00f      	beq.n	8002854 <_sungetc_r+0x7c>
 8002834:	63a3      	str	r3, [r4, #56]	; 0x38
 8002836:	1c23      	adds	r3, r4, #0
 8002838:	3340      	adds	r3, #64	; 0x40
 800283a:	6323      	str	r3, [r4, #48]	; 0x30
 800283c:	2303      	movs	r3, #3
 800283e:	6363      	str	r3, [r4, #52]	; 0x34
 8002840:	2342      	movs	r3, #66	; 0x42
 8002842:	54e5      	strb	r5, [r4, r3]
 8002844:	1c23      	adds	r3, r4, #0
 8002846:	6862      	ldr	r2, [r4, #4]
 8002848:	3342      	adds	r3, #66	; 0x42
 800284a:	6023      	str	r3, [r4, #0]
 800284c:	2301      	movs	r3, #1
 800284e:	63e2      	str	r2, [r4, #60]	; 0x3c
 8002850:	6063      	str	r3, [r4, #4]
 8002852:	e7d9      	b.n	8002808 <_sungetc_r+0x30>
 8002854:	6863      	ldr	r3, [r4, #4]
 8002856:	3301      	adds	r3, #1
 8002858:	6022      	str	r2, [r4, #0]
 800285a:	6063      	str	r3, [r4, #4]
 800285c:	e7d4      	b.n	8002808 <_sungetc_r+0x30>
 800285e:	46c0      	nop			; (mov r8, r8)

08002860 <__ssrefill_r>:
 8002860:	b510      	push	{r4, lr}
 8002862:	1c0c      	adds	r4, r1, #0
 8002864:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002866:	2900      	cmp	r1, #0
 8002868:	d011      	beq.n	800288e <__ssrefill_r+0x2e>
 800286a:	1c23      	adds	r3, r4, #0
 800286c:	3340      	adds	r3, #64	; 0x40
 800286e:	4299      	cmp	r1, r3
 8002870:	d001      	beq.n	8002876 <__ssrefill_r+0x16>
 8002872:	f003 fd41 	bl	80062f8 <_free_r>
 8002876:	2300      	movs	r3, #0
 8002878:	6323      	str	r3, [r4, #48]	; 0x30
 800287a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800287c:	6063      	str	r3, [r4, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <__ssrefill_r+0x2e>
 8002882:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002884:	6023      	str	r3, [r4, #0]
 8002886:	2000      	movs	r0, #0
 8002888:	bc10      	pop	{r4}
 800288a:	bc02      	pop	{r1}
 800288c:	4708      	bx	r1
 800288e:	6923      	ldr	r3, [r4, #16]
 8002890:	89a2      	ldrh	r2, [r4, #12]
 8002892:	6023      	str	r3, [r4, #0]
 8002894:	2300      	movs	r3, #0
 8002896:	6063      	str	r3, [r4, #4]
 8002898:	2320      	movs	r3, #32
 800289a:	4313      	orrs	r3, r2
 800289c:	2001      	movs	r0, #1
 800289e:	81a3      	strh	r3, [r4, #12]
 80028a0:	4240      	negs	r0, r0
 80028a2:	e7f1      	b.n	8002888 <__ssrefill_r+0x28>

080028a4 <_sfread_r>:
 80028a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a6:	4656      	mov	r6, sl
 80028a8:	469a      	mov	sl, r3
 80028aa:	4653      	mov	r3, sl
 80028ac:	4353      	muls	r3, r2
 80028ae:	4644      	mov	r4, r8
 80028b0:	465f      	mov	r7, fp
 80028b2:	464d      	mov	r5, r9
 80028b4:	b4f0      	push	{r4, r5, r6, r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	4680      	mov	r8, r0
 80028ba:	9201      	str	r2, [sp, #4]
 80028bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80028be:	469b      	mov	fp, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d028      	beq.n	8002916 <_sfread_r+0x72>
 80028c4:	2200      	movs	r2, #0
 80028c6:	1c0f      	adds	r7, r1, #0
 80028c8:	1c1e      	adds	r6, r3, #0
 80028ca:	4691      	mov	r9, r2
 80028cc:	6865      	ldr	r5, [r4, #4]
 80028ce:	1c38      	adds	r0, r7, #0
 80028d0:	6821      	ldr	r1, [r4, #0]
 80028d2:	42ae      	cmp	r6, r5
 80028d4:	d922      	bls.n	800291c <_sfread_r+0x78>
 80028d6:	1c2a      	adds	r2, r5, #0
 80028d8:	f004 fd30 	bl	800733c <memcpy>
 80028dc:	6822      	ldr	r2, [r4, #0]
 80028de:	1953      	adds	r3, r2, r5
 80028e0:	6023      	str	r3, [r4, #0]
 80028e2:	464b      	mov	r3, r9
 80028e4:	6063      	str	r3, [r4, #4]
 80028e6:	4640      	mov	r0, r8
 80028e8:	1c21      	adds	r1, r4, #0
 80028ea:	197f      	adds	r7, r7, r5
 80028ec:	1b76      	subs	r6, r6, r5
 80028ee:	f7ff ffb7 	bl	8002860 <__ssrefill_r>
 80028f2:	2800      	cmp	r0, #0
 80028f4:	d0ea      	beq.n	80028cc <_sfread_r+0x28>
 80028f6:	465a      	mov	r2, fp
 80028f8:	1b90      	subs	r0, r2, r6
 80028fa:	9901      	ldr	r1, [sp, #4]
 80028fc:	f006 ea0e 	blx	8008d1c <__aeabi_uidiv>
 8002900:	4682      	mov	sl, r0
 8002902:	4650      	mov	r0, sl
 8002904:	b003      	add	sp, #12
 8002906:	bc3c      	pop	{r2, r3, r4, r5}
 8002908:	4690      	mov	r8, r2
 800290a:	4699      	mov	r9, r3
 800290c:	46a2      	mov	sl, r4
 800290e:	46ab      	mov	fp, r5
 8002910:	bcf0      	pop	{r4, r5, r6, r7}
 8002912:	bc02      	pop	{r1}
 8002914:	4708      	bx	r1
 8002916:	2200      	movs	r2, #0
 8002918:	4692      	mov	sl, r2
 800291a:	e7f2      	b.n	8002902 <_sfread_r+0x5e>
 800291c:	1c32      	adds	r2, r6, #0
 800291e:	f004 fd0d 	bl	800733c <memcpy>
 8002922:	6862      	ldr	r2, [r4, #4]
 8002924:	1b93      	subs	r3, r2, r6
 8002926:	6063      	str	r3, [r4, #4]
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	199e      	adds	r6, r3, r6
 800292c:	6026      	str	r6, [r4, #0]
 800292e:	e7e8      	b.n	8002902 <_sfread_r+0x5e>

08002930 <__ssvfiscanf_r>:
 8002930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002932:	464d      	mov	r5, r9
 8002934:	4644      	mov	r4, r8
 8002936:	465f      	mov	r7, fp
 8002938:	4656      	mov	r6, sl
 800293a:	b4f0      	push	{r4, r5, r6, r7}
 800293c:	b0df      	sub	sp, #380	; 0x17c
 800293e:	9308      	str	r3, [sp, #32]
 8002940:	1c0c      	adds	r4, r1, #0
 8002942:	898b      	ldrh	r3, [r1, #12]
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	0189      	lsls	r1, r1, #6
 8002948:	4681      	mov	r9, r0
 800294a:	420b      	tst	r3, r1
 800294c:	d105      	bne.n	800295a <__ssvfiscanf_r+0x2a>
 800294e:	430b      	orrs	r3, r1
 8002950:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002952:	81a3      	strh	r3, [r4, #12]
 8002954:	4bc2      	ldr	r3, [pc, #776]	; (8002c60 <__ssvfiscanf_r+0x330>)
 8002956:	4003      	ands	r3, r0
 8002958:	6663      	str	r3, [r4, #100]	; 0x64
 800295a:	2600      	movs	r6, #0
 800295c:	2000      	movs	r0, #0
 800295e:	960c      	str	r6, [sp, #48]	; 0x30
 8002960:	960a      	str	r6, [sp, #40]	; 0x28
 8002962:	9009      	str	r0, [sp, #36]	; 0x24
 8002964:	4dbf      	ldr	r5, [pc, #764]	; (8002c64 <__ssvfiscanf_r+0x334>)
 8002966:	4693      	mov	fp, r2
 8002968:	2708      	movs	r7, #8
 800296a:	9603      	str	r6, [sp, #12]
 800296c:	4659      	mov	r1, fp
 800296e:	780a      	ldrb	r2, [r1, #0]
 8002970:	2301      	movs	r3, #1
 8002972:	920f      	str	r2, [sp, #60]	; 0x3c
 8002974:	449b      	add	fp, r3
 8002976:	2a00      	cmp	r2, #0
 8002978:	d039      	beq.n	80029ee <__ssvfiscanf_r+0xbe>
 800297a:	682b      	ldr	r3, [r5, #0]
 800297c:	1899      	adds	r1, r3, r2
 800297e:	7849      	ldrb	r1, [r1, #1]
 8002980:	420f      	tst	r7, r1
 8002982:	d018      	beq.n	80029b6 <__ssvfiscanf_r+0x86>
 8002984:	6863      	ldr	r3, [r4, #4]
 8002986:	9e03      	ldr	r6, [sp, #12]
 8002988:	e00c      	b.n	80029a4 <__ssvfiscanf_r+0x74>
 800298a:	6822      	ldr	r2, [r4, #0]
 800298c:	6828      	ldr	r0, [r5, #0]
 800298e:	7813      	ldrb	r3, [r2, #0]
 8002990:	18c3      	adds	r3, r0, r3
 8002992:	785b      	ldrb	r3, [r3, #1]
 8002994:	421f      	tst	r7, r3
 8002996:	d0e8      	beq.n	800296a <__ssvfiscanf_r+0x3a>
 8002998:	6863      	ldr	r3, [r4, #4]
 800299a:	3201      	adds	r2, #1
 800299c:	3b01      	subs	r3, #1
 800299e:	6063      	str	r3, [r4, #4]
 80029a0:	6022      	str	r2, [r4, #0]
 80029a2:	3601      	adds	r6, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	dcf0      	bgt.n	800298a <__ssvfiscanf_r+0x5a>
 80029a8:	4648      	mov	r0, r9
 80029aa:	1c21      	adds	r1, r4, #0
 80029ac:	f7ff ff58 	bl	8002860 <__ssrefill_r>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	d0ea      	beq.n	800298a <__ssvfiscanf_r+0x5a>
 80029b4:	e7d9      	b.n	800296a <__ssvfiscanf_r+0x3a>
 80029b6:	2a25      	cmp	r2, #37	; 0x25
 80029b8:	d023      	beq.n	8002a02 <__ssvfiscanf_r+0xd2>
 80029ba:	6860      	ldr	r0, [r4, #4]
 80029bc:	2800      	cmp	r0, #0
 80029be:	dc00      	bgt.n	80029c2 <__ssvfiscanf_r+0x92>
 80029c0:	e099      	b.n	8002af6 <__ssvfiscanf_r+0x1c6>
 80029c2:	6823      	ldr	r3, [r4, #0]
 80029c4:	465a      	mov	r2, fp
 80029c6:	3a01      	subs	r2, #1
 80029c8:	7819      	ldrb	r1, [r3, #0]
 80029ca:	7812      	ldrb	r2, [r2, #0]
 80029cc:	4291      	cmp	r1, r2
 80029ce:	d10e      	bne.n	80029ee <__ssvfiscanf_r+0xbe>
 80029d0:	6862      	ldr	r2, [r4, #4]
 80029d2:	3301      	adds	r3, #1
 80029d4:	3a01      	subs	r2, #1
 80029d6:	6023      	str	r3, [r4, #0]
 80029d8:	6062      	str	r2, [r4, #4]
 80029da:	9e03      	ldr	r6, [sp, #12]
 80029dc:	4659      	mov	r1, fp
 80029de:	780a      	ldrb	r2, [r1, #0]
 80029e0:	3601      	adds	r6, #1
 80029e2:	2301      	movs	r3, #1
 80029e4:	9603      	str	r6, [sp, #12]
 80029e6:	920f      	str	r2, [sp, #60]	; 0x3c
 80029e8:	449b      	add	fp, r3
 80029ea:	2a00      	cmp	r2, #0
 80029ec:	d1c5      	bne.n	800297a <__ssvfiscanf_r+0x4a>
 80029ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029f0:	b05f      	add	sp, #380	; 0x17c
 80029f2:	bc3c      	pop	{r2, r3, r4, r5}
 80029f4:	4690      	mov	r8, r2
 80029f6:	4699      	mov	r9, r3
 80029f8:	46a2      	mov	sl, r4
 80029fa:	46ab      	mov	fp, r5
 80029fc:	bcf0      	pop	{r4, r5, r6, r7}
 80029fe:	bc02      	pop	{r1}
 8002a00:	4708      	bx	r1
 8002a02:	2602      	movs	r6, #2
 8002a04:	2100      	movs	r1, #0
 8002a06:	46b4      	mov	ip, r6
 8002a08:	9306      	str	r3, [sp, #24]
 8002a0a:	9e03      	ldr	r6, [sp, #12]
 8002a0c:	4688      	mov	r8, r1
 8002a0e:	468a      	mov	sl, r1
 8002a10:	4658      	mov	r0, fp
 8002a12:	7801      	ldrb	r1, [r0, #0]
 8002a14:	3001      	adds	r0, #1
 8002a16:	9107      	str	r1, [sp, #28]
 8002a18:	2978      	cmp	r1, #120	; 0x78
 8002a1a:	d968      	bls.n	8002aee <__ssvfiscanf_r+0x1be>
 8002a1c:	9a07      	ldr	r2, [sp, #28]
 8002a1e:	9b06      	ldr	r3, [sp, #24]
 8002a20:	189b      	adds	r3, r3, r2
 8002a22:	785b      	ldrb	r3, [r3, #1]
 8002a24:	2203      	movs	r2, #3
 8002a26:	9603      	str	r6, [sp, #12]
 8002a28:	4683      	mov	fp, r0
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d100      	bne.n	8002a32 <__ssvfiscanf_r+0x102>
 8002a30:	e2f1      	b.n	8003016 <__ssvfiscanf_r+0x6e6>
 8002a32:	4e8d      	ldr	r6, [pc, #564]	; (8002c68 <__ssvfiscanf_r+0x338>)
 8002a34:	960c      	str	r6, [sp, #48]	; 0x30
 8002a36:	260a      	movs	r6, #10
 8002a38:	960a      	str	r6, [sp, #40]	; 0x28
 8002a3a:	2603      	movs	r6, #3
 8002a3c:	9607      	str	r6, [sp, #28]
 8002a3e:	6860      	ldr	r0, [r4, #4]
 8002a40:	2800      	cmp	r0, #0
 8002a42:	dc00      	bgt.n	8002a46 <__ssvfiscanf_r+0x116>
 8002a44:	e1db      	b.n	8002dfe <__ssvfiscanf_r+0x4ce>
 8002a46:	4641      	mov	r1, r8
 8002a48:	0649      	lsls	r1, r1, #25
 8002a4a:	d41e      	bmi.n	8002a8a <__ssvfiscanf_r+0x15a>
 8002a4c:	6829      	ldr	r1, [r5, #0]
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	9e03      	ldr	r6, [sp, #12]
 8002a52:	e001      	b.n	8002a58 <__ssvfiscanf_r+0x128>
 8002a54:	3301      	adds	r3, #1
 8002a56:	6023      	str	r3, [r4, #0]
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	188a      	adds	r2, r1, r2
 8002a5c:	7852      	ldrb	r2, [r2, #1]
 8002a5e:	4217      	tst	r7, r2
 8002a60:	d012      	beq.n	8002a88 <__ssvfiscanf_r+0x158>
 8002a62:	6862      	ldr	r2, [r4, #4]
 8002a64:	3a01      	subs	r2, #1
 8002a66:	3601      	adds	r6, #1
 8002a68:	6062      	str	r2, [r4, #4]
 8002a6a:	2a00      	cmp	r2, #0
 8002a6c:	dcf2      	bgt.n	8002a54 <__ssvfiscanf_r+0x124>
 8002a6e:	4648      	mov	r0, r9
 8002a70:	1c21      	adds	r1, r4, #0
 8002a72:	f7ff fef5 	bl	8002860 <__ssrefill_r>
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d144      	bne.n	8002b04 <__ssvfiscanf_r+0x1d4>
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	6829      	ldr	r1, [r5, #0]
 8002a7e:	781a      	ldrb	r2, [r3, #0]
 8002a80:	188a      	adds	r2, r1, r2
 8002a82:	7852      	ldrb	r2, [r2, #1]
 8002a84:	4217      	tst	r7, r2
 8002a86:	d1ec      	bne.n	8002a62 <__ssvfiscanf_r+0x132>
 8002a88:	9603      	str	r6, [sp, #12]
 8002a8a:	9e07      	ldr	r6, [sp, #28]
 8002a8c:	2e02      	cmp	r6, #2
 8002a8e:	d100      	bne.n	8002a92 <__ssvfiscanf_r+0x162>
 8002a90:	e186      	b.n	8002da0 <__ssvfiscanf_r+0x470>
 8002a92:	2e03      	cmp	r6, #3
 8002a94:	d100      	bne.n	8002a98 <__ssvfiscanf_r+0x168>
 8002a96:	e0eb      	b.n	8002c70 <__ssvfiscanf_r+0x340>
 8002a98:	4650      	mov	r0, sl
 8002a9a:	2e01      	cmp	r6, #1
 8002a9c:	d100      	bne.n	8002aa0 <__ssvfiscanf_r+0x170>
 8002a9e:	e0a9      	b.n	8002bf4 <__ssvfiscanf_r+0x2c4>
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	d03a      	beq.n	8002b1a <__ssvfiscanf_r+0x1ea>
 8002aa4:	4642      	mov	r2, r8
 8002aa6:	07d2      	lsls	r2, r2, #31
 8002aa8:	d43c      	bmi.n	8002b24 <__ssvfiscanf_r+0x1f4>
 8002aaa:	4641      	mov	r1, r8
 8002aac:	06c9      	lsls	r1, r1, #27
 8002aae:	d400      	bmi.n	8002ab2 <__ssvfiscanf_r+0x182>
 8002ab0:	e33e      	b.n	8003130 <__ssvfiscanf_r+0x800>
 8002ab2:	9b03      	ldr	r3, [sp, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4656      	mov	r6, sl
 8002ab8:	4690      	mov	r8, r2
 8002aba:	469a      	mov	sl, r3
 8002abc:	6863      	ldr	r3, [r4, #4]
 8002abe:	42b3      	cmp	r3, r6
 8002ac0:	db00      	blt.n	8002ac4 <__ssvfiscanf_r+0x194>
 8002ac2:	e362      	b.n	800318a <__ssvfiscanf_r+0x85a>
 8002ac4:	6820      	ldr	r0, [r4, #0]
 8002ac6:	4498      	add	r8, r3
 8002ac8:	1af6      	subs	r6, r6, r3
 8002aca:	18c3      	adds	r3, r0, r3
 8002acc:	6023      	str	r3, [r4, #0]
 8002ace:	4648      	mov	r0, r9
 8002ad0:	1c21      	adds	r1, r4, #0
 8002ad2:	f7ff fec5 	bl	8002860 <__ssrefill_r>
 8002ad6:	2800      	cmp	r0, #0
 8002ad8:	d0f0      	beq.n	8002abc <__ssvfiscanf_r+0x18c>
 8002ada:	4656      	mov	r6, sl
 8002adc:	4640      	mov	r0, r8
 8002ade:	9603      	str	r6, [sp, #12]
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	d00f      	beq.n	8002b04 <__ssvfiscanf_r+0x1d4>
 8002ae4:	9a03      	ldr	r2, [sp, #12]
 8002ae6:	1c16      	adds	r6, r2, #0
 8002ae8:	4446      	add	r6, r8
 8002aea:	9603      	str	r6, [sp, #12]
 8002aec:	e73e      	b.n	800296c <__ssvfiscanf_r+0x3c>
 8002aee:	4a5f      	ldr	r2, [pc, #380]	; (8002c6c <__ssvfiscanf_r+0x33c>)
 8002af0:	0089      	lsls	r1, r1, #2
 8002af2:	5853      	ldr	r3, [r2, r1]
 8002af4:	469f      	mov	pc, r3
 8002af6:	4648      	mov	r0, r9
 8002af8:	1c21      	adds	r1, r4, #0
 8002afa:	f7ff feb1 	bl	8002860 <__ssrefill_r>
 8002afe:	2800      	cmp	r0, #0
 8002b00:	d100      	bne.n	8002b04 <__ssvfiscanf_r+0x1d4>
 8002b02:	e75e      	b.n	80029c2 <__ssvfiscanf_r+0x92>
 8002b04:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002b06:	2e00      	cmp	r6, #0
 8002b08:	d003      	beq.n	8002b12 <__ssvfiscanf_r+0x1e2>
 8002b0a:	89a3      	ldrh	r3, [r4, #12]
 8002b0c:	0658      	lsls	r0, r3, #25
 8002b0e:	d400      	bmi.n	8002b12 <__ssvfiscanf_r+0x1e2>
 8002b10:	e76d      	b.n	80029ee <__ssvfiscanf_r+0xbe>
 8002b12:	2301      	movs	r3, #1
 8002b14:	425b      	negs	r3, r3
 8002b16:	9309      	str	r3, [sp, #36]	; 0x24
 8002b18:	e769      	b.n	80029ee <__ssvfiscanf_r+0xbe>
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	4642      	mov	r2, r8
 8002b1e:	468a      	mov	sl, r1
 8002b20:	07d2      	lsls	r2, r2, #31
 8002b22:	d5c2      	bpl.n	8002aaa <__ssvfiscanf_r+0x17a>
 8002b24:	a810      	add	r0, sp, #64	; 0x40
 8002b26:	2100      	movs	r1, #0
 8002b28:	2208      	movs	r2, #8
 8002b2a:	f7fe fc25 	bl	8001378 <memset>
 8002b2e:	4646      	mov	r6, r8
 8002b30:	2310      	movs	r3, #16
 8002b32:	401e      	ands	r6, r3
 8002b34:	9606      	str	r6, [sp, #24]
 8002b36:	2600      	movs	r6, #0
 8002b38:	9607      	str	r6, [sp, #28]
 8002b3a:	9e06      	ldr	r6, [sp, #24]
 8002b3c:	2e00      	cmp	r6, #0
 8002b3e:	d105      	bne.n	8002b4c <__ssvfiscanf_r+0x21c>
 8002b40:	9e08      	ldr	r6, [sp, #32]
 8002b42:	6836      	ldr	r6, [r6, #0]
 8002b44:	9607      	str	r6, [sp, #28]
 8002b46:	9e08      	ldr	r6, [sp, #32]
 8002b48:	3604      	adds	r6, #4
 8002b4a:	9608      	str	r6, [sp, #32]
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	4680      	mov	r8, r0
 8002b50:	9907      	ldr	r1, [sp, #28]
 8002b52:	9803      	ldr	r0, [sp, #12]
 8002b54:	465e      	mov	r6, fp
 8002b56:	960b      	str	r6, [sp, #44]	; 0x2c
 8002b58:	4683      	mov	fp, r0
 8002b5a:	1c26      	adds	r6, r4, #0
 8002b5c:	4644      	mov	r4, r8
 8002b5e:	4688      	mov	r8, r1
 8002b60:	e016      	b.n	8002b90 <__ssvfiscanf_r+0x260>
 8002b62:	9b06      	ldr	r3, [sp, #24]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <__ssvfiscanf_r+0x23c>
 8002b68:	4640      	mov	r0, r8
 8002b6a:	6003      	str	r3, [r0, #0]
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	9a06      	ldr	r2, [sp, #24]
 8002b70:	4249      	negs	r1, r1
 8002b72:	44a3      	add	fp, r4
 8002b74:	448a      	add	sl, r1
 8002b76:	2400      	movs	r4, #0
 8002b78:	2a00      	cmp	r2, #0
 8002b7a:	d102      	bne.n	8002b82 <__ssvfiscanf_r+0x252>
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	4498      	add	r8, r3
 8002b80:	1c14      	adds	r4, r2, #0
 8002b82:	6870      	ldr	r0, [r6, #4]
 8002b84:	2800      	cmp	r0, #0
 8002b86:	dd24      	ble.n	8002bd2 <__ssvfiscanf_r+0x2a2>
 8002b88:	4650      	mov	r0, sl
 8002b8a:	2800      	cmp	r0, #0
 8002b8c:	d100      	bne.n	8002b90 <__ssvfiscanf_r+0x260>
 8002b8e:	e307      	b.n	80031a0 <__ssvfiscanf_r+0x870>
 8002b90:	f7fe fb02 	bl	8001198 <__locale_mb_cur_max>
 8002b94:	42a0      	cmp	r0, r4
 8002b96:	d100      	bne.n	8002b9a <__ssvfiscanf_r+0x26a>
 8002b98:	e2e7      	b.n	800316a <__ssvfiscanf_r+0x83a>
 8002b9a:	6833      	ldr	r3, [r6, #0]
 8002b9c:	781a      	ldrb	r2, [r3, #0]
 8002b9e:	a814      	add	r0, sp, #80	; 0x50
 8002ba0:	5502      	strb	r2, [r0, r4]
 8002ba2:	6872      	ldr	r2, [r6, #4]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	3a01      	subs	r2, #1
 8002ba8:	a910      	add	r1, sp, #64	; 0x40
 8002baa:	3401      	adds	r4, #1
 8002bac:	6072      	str	r2, [r6, #4]
 8002bae:	6033      	str	r3, [r6, #0]
 8002bb0:	aa14      	add	r2, sp, #80	; 0x50
 8002bb2:	9100      	str	r1, [sp, #0]
 8002bb4:	4648      	mov	r0, r9
 8002bb6:	4641      	mov	r1, r8
 8002bb8:	1c23      	adds	r3, r4, #0
 8002bba:	f7fe fb2b 	bl	8001214 <_mbrtowc_r>
 8002bbe:	1c42      	adds	r2, r0, #1
 8002bc0:	d100      	bne.n	8002bc4 <__ssvfiscanf_r+0x294>
 8002bc2:	e2d2      	b.n	800316a <__ssvfiscanf_r+0x83a>
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	d0cc      	beq.n	8002b62 <__ssvfiscanf_r+0x232>
 8002bc8:	3002      	adds	r0, #2
 8002bca:	d1cf      	bne.n	8002b6c <__ssvfiscanf_r+0x23c>
 8002bcc:	6870      	ldr	r0, [r6, #4]
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	dcda      	bgt.n	8002b88 <__ssvfiscanf_r+0x258>
 8002bd2:	4648      	mov	r0, r9
 8002bd4:	1c31      	adds	r1, r6, #0
 8002bd6:	f7ff fe43 	bl	8002860 <__ssrefill_r>
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	d0d4      	beq.n	8002b88 <__ssvfiscanf_r+0x258>
 8002bde:	46a0      	mov	r8, r4
 8002be0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002be2:	1c34      	adds	r4, r6, #0
 8002be4:	4641      	mov	r1, r8
 8002be6:	465e      	mov	r6, fp
 8002be8:	9603      	str	r6, [sp, #12]
 8002bea:	4683      	mov	fp, r0
 8002bec:	2900      	cmp	r1, #0
 8002bee:	d100      	bne.n	8002bf2 <__ssvfiscanf_r+0x2c2>
 8002bf0:	e2db      	b.n	80031aa <__ssvfiscanf_r+0x87a>
 8002bf2:	e787      	b.n	8002b04 <__ssvfiscanf_r+0x1d4>
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d102      	bne.n	8002bfe <__ssvfiscanf_r+0x2ce>
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	4240      	negs	r0, r0
 8002bfc:	4682      	mov	sl, r0
 8002bfe:	4641      	mov	r1, r8
 8002c00:	06c9      	lsls	r1, r1, #27
 8002c02:	d400      	bmi.n	8002c06 <__ssvfiscanf_r+0x2d6>
 8002c04:	e10a      	b.n	8002e1c <__ssvfiscanf_r+0x4ec>
 8002c06:	2200      	movs	r2, #0
 8002c08:	4690      	mov	r8, r2
 8002c0a:	9a03      	ldr	r2, [sp, #12]
 8002c0c:	ae1e      	add	r6, sp, #120	; 0x78
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	9607      	str	r6, [sp, #28]
 8002c12:	4646      	mov	r6, r8
 8002c14:	4690      	mov	r8, r2
 8002c16:	781a      	ldrb	r2, [r3, #0]
 8002c18:	9807      	ldr	r0, [sp, #28]
 8002c1a:	5c82      	ldrb	r2, [r0, r2]
 8002c1c:	2a00      	cmp	r2, #0
 8002c1e:	d017      	beq.n	8002c50 <__ssvfiscanf_r+0x320>
 8002c20:	6862      	ldr	r2, [r4, #4]
 8002c22:	3301      	adds	r3, #1
 8002c24:	3a01      	subs	r2, #1
 8002c26:	3601      	adds	r6, #1
 8002c28:	6062      	str	r2, [r4, #4]
 8002c2a:	6023      	str	r3, [r4, #0]
 8002c2c:	45b2      	cmp	sl, r6
 8002c2e:	d100      	bne.n	8002c32 <__ssvfiscanf_r+0x302>
 8002c30:	e223      	b.n	800307a <__ssvfiscanf_r+0x74a>
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	dcef      	bgt.n	8002c16 <__ssvfiscanf_r+0x2e6>
 8002c36:	4648      	mov	r0, r9
 8002c38:	1c21      	adds	r1, r4, #0
 8002c3a:	f7ff fe11 	bl	8002860 <__ssrefill_r>
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	d000      	beq.n	8002c44 <__ssvfiscanf_r+0x314>
 8002c42:	e21a      	b.n	800307a <__ssvfiscanf_r+0x74a>
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	9807      	ldr	r0, [sp, #28]
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	5c82      	ldrb	r2, [r0, r2]
 8002c4c:	2a00      	cmp	r2, #0
 8002c4e:	d1e7      	bne.n	8002c20 <__ssvfiscanf_r+0x2f0>
 8002c50:	4643      	mov	r3, r8
 8002c52:	9303      	str	r3, [sp, #12]
 8002c54:	46b0      	mov	r8, r6
 8002c56:	2e00      	cmp	r6, #0
 8002c58:	d000      	beq.n	8002c5c <__ssvfiscanf_r+0x32c>
 8002c5a:	e211      	b.n	8003080 <__ssvfiscanf_r+0x750>
 8002c5c:	e6c7      	b.n	80029ee <__ssvfiscanf_r+0xbe>
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	ffffdfff 	.word	0xffffdfff
 8002c64:	200000e4 	.word	0x200000e4
 8002c68:	080024b1 	.word	0x080024b1
 8002c6c:	0800d7c0 	.word	0x0800d7c0
 8002c70:	4653      	mov	r3, sl
 8002c72:	2600      	movs	r6, #0
 8002c74:	3b01      	subs	r3, #1
 8002c76:	960b      	str	r6, [sp, #44]	; 0x2c
 8002c78:	2b26      	cmp	r3, #38	; 0x26
 8002c7a:	d904      	bls.n	8002c86 <__ssvfiscanf_r+0x356>
 8002c7c:	4656      	mov	r6, sl
 8002c7e:	3e27      	subs	r6, #39	; 0x27
 8002c80:	2027      	movs	r0, #39	; 0x27
 8002c82:	960b      	str	r6, [sp, #44]	; 0x2c
 8002c84:	4682      	mov	sl, r0
 8002c86:	23d8      	movs	r3, #216	; 0xd8
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	4641      	mov	r1, r8
 8002c8c:	4319      	orrs	r1, r3
 8002c8e:	2600      	movs	r6, #0
 8002c90:	9b03      	ldr	r3, [sp, #12]
 8002c92:	960d      	str	r6, [sp, #52]	; 0x34
 8002c94:	ae14      	add	r6, sp, #80	; 0x50
 8002c96:	9607      	str	r6, [sp, #28]
 8002c98:	9606      	str	r6, [sp, #24]
 8002c9a:	4688      	mov	r8, r1
 8002c9c:	4656      	mov	r6, sl
 8002c9e:	469a      	mov	sl, r3
 8002ca0:	6822      	ldr	r2, [r4, #0]
 8002ca2:	7813      	ldrb	r3, [r2, #0]
 8002ca4:	1c19      	adds	r1, r3, #0
 8002ca6:	392b      	subs	r1, #43	; 0x2b
 8002ca8:	0609      	lsls	r1, r1, #24
 8002caa:	0e09      	lsrs	r1, r1, #24
 8002cac:	294d      	cmp	r1, #77	; 0x4d
 8002cae:	d91c      	bls.n	8002cea <__ssvfiscanf_r+0x3ba>
 8002cb0:	4656      	mov	r6, sl
 8002cb2:	4640      	mov	r0, r8
 8002cb4:	9603      	str	r6, [sp, #12]
 8002cb6:	05c0      	lsls	r0, r0, #23
 8002cb8:	d509      	bpl.n	8002cce <__ssvfiscanf_r+0x39e>
 8002cba:	9e06      	ldr	r6, [sp, #24]
 8002cbc:	9807      	ldr	r0, [sp, #28]
 8002cbe:	4286      	cmp	r6, r0
 8002cc0:	d900      	bls.n	8002cc4 <__ssvfiscanf_r+0x394>
 8002cc2:	e1ac      	b.n	800301e <__ssvfiscanf_r+0x6ee>
 8002cc4:	9e06      	ldr	r6, [sp, #24]
 8002cc6:	9807      	ldr	r0, [sp, #28]
 8002cc8:	4286      	cmp	r6, r0
 8002cca:	d100      	bne.n	8002cce <__ssvfiscanf_r+0x39e>
 8002ccc:	e68f      	b.n	80029ee <__ssvfiscanf_r+0xbe>
 8002cce:	2310      	movs	r3, #16
 8002cd0:	4641      	mov	r1, r8
 8002cd2:	400b      	ands	r3, r1
 8002cd4:	d100      	bne.n	8002cd8 <__ssvfiscanf_r+0x3a8>
 8002cd6:	e209      	b.n	80030ec <__ssvfiscanf_r+0x7bc>
 8002cd8:	9e06      	ldr	r6, [sp, #24]
 8002cda:	9807      	ldr	r0, [sp, #28]
 8002cdc:	1a33      	subs	r3, r6, r0
 8002cde:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8002ce0:	199b      	adds	r3, r3, r6
 8002ce2:	9e03      	ldr	r6, [sp, #12]
 8002ce4:	18f6      	adds	r6, r6, r3
 8002ce6:	9603      	str	r6, [sp, #12]
 8002ce8:	e640      	b.n	800296c <__ssvfiscanf_r+0x3c>
 8002cea:	48d3      	ldr	r0, [pc, #844]	; (8003038 <__ssvfiscanf_r+0x708>)
 8002cec:	0089      	lsls	r1, r1, #2
 8002cee:	5841      	ldr	r1, [r0, r1]
 8002cf0:	468f      	mov	pc, r1
 8002cf2:	20c0      	movs	r0, #192	; 0xc0
 8002cf4:	00c0      	lsls	r0, r0, #3
 8002cf6:	4641      	mov	r1, r8
 8002cf8:	4001      	ands	r1, r0
 8002cfa:	2080      	movs	r0, #128	; 0x80
 8002cfc:	0080      	lsls	r0, r0, #2
 8002cfe:	4281      	cmp	r1, r0
 8002d00:	d1d6      	bne.n	8002cb0 <__ssvfiscanf_r+0x380>
 8002d02:	49ce      	ldr	r1, [pc, #824]	; (800303c <__ssvfiscanf_r+0x70c>)
 8002d04:	4640      	mov	r0, r8
 8002d06:	4001      	ands	r1, r0
 8002d08:	20a0      	movs	r0, #160	; 0xa0
 8002d0a:	00c0      	lsls	r0, r0, #3
 8002d0c:	4308      	orrs	r0, r1
 8002d0e:	2110      	movs	r1, #16
 8002d10:	910a      	str	r1, [sp, #40]	; 0x28
 8002d12:	4680      	mov	r8, r0
 8002d14:	9806      	ldr	r0, [sp, #24]
 8002d16:	7003      	strb	r3, [r0, #0]
 8002d18:	3001      	adds	r0, #1
 8002d1a:	9006      	str	r0, [sp, #24]
 8002d1c:	6863      	ldr	r3, [r4, #4]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	6063      	str	r3, [r4, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	dd73      	ble.n	8002e0e <__ssvfiscanf_r+0x4de>
 8002d26:	3201      	adds	r2, #1
 8002d28:	6022      	str	r2, [r4, #0]
 8002d2a:	3e01      	subs	r6, #1
 8002d2c:	2e00      	cmp	r6, #0
 8002d2e:	d1b7      	bne.n	8002ca0 <__ssvfiscanf_r+0x370>
 8002d30:	e7be      	b.n	8002cb0 <__ssvfiscanf_r+0x380>
 8002d32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d34:	290a      	cmp	r1, #10
 8002d36:	ddbb      	ble.n	8002cb0 <__ssvfiscanf_r+0x380>
 8002d38:	49c1      	ldr	r1, [pc, #772]	; (8003040 <__ssvfiscanf_r+0x710>)
 8002d3a:	4640      	mov	r0, r8
 8002d3c:	4008      	ands	r0, r1
 8002d3e:	4680      	mov	r8, r0
 8002d40:	e7e8      	b.n	8002d14 <__ssvfiscanf_r+0x3e4>
 8002d42:	2180      	movs	r1, #128	; 0x80
 8002d44:	4640      	mov	r0, r8
 8002d46:	4201      	tst	r1, r0
 8002d48:	d0b2      	beq.n	8002cb0 <__ssvfiscanf_r+0x380>
 8002d4a:	4388      	bics	r0, r1
 8002d4c:	4680      	mov	r8, r0
 8002d4e:	e7e1      	b.n	8002d14 <__ssvfiscanf_r+0x3e4>
 8002d50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d52:	48bc      	ldr	r0, [pc, #752]	; (8003044 <__ssvfiscanf_r+0x714>)
 8002d54:	0049      	lsls	r1, r1, #1
 8002d56:	5e40      	ldrsh	r0, [r0, r1]
 8002d58:	49b9      	ldr	r1, [pc, #740]	; (8003040 <__ssvfiscanf_r+0x710>)
 8002d5a:	900a      	str	r0, [sp, #40]	; 0x28
 8002d5c:	4640      	mov	r0, r8
 8002d5e:	4008      	ands	r0, r1
 8002d60:	4680      	mov	r8, r0
 8002d62:	e7d7      	b.n	8002d14 <__ssvfiscanf_r+0x3e4>
 8002d64:	4641      	mov	r1, r8
 8002d66:	0509      	lsls	r1, r1, #20
 8002d68:	d5d4      	bpl.n	8002d14 <__ssvfiscanf_r+0x3e4>
 8002d6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	d106      	bne.n	8002d7e <__ssvfiscanf_r+0x44e>
 8002d70:	2080      	movs	r0, #128	; 0x80
 8002d72:	4641      	mov	r1, r8
 8002d74:	0080      	lsls	r0, r0, #2
 8002d76:	4301      	orrs	r1, r0
 8002d78:	4688      	mov	r8, r1
 8002d7a:	2108      	movs	r1, #8
 8002d7c:	910a      	str	r1, [sp, #40]	; 0x28
 8002d7e:	4640      	mov	r0, r8
 8002d80:	0540      	lsls	r0, r0, #21
 8002d82:	d400      	bmi.n	8002d86 <__ssvfiscanf_r+0x456>
 8002d84:	e1f3      	b.n	800316e <__ssvfiscanf_r+0x83e>
 8002d86:	49b0      	ldr	r1, [pc, #704]	; (8003048 <__ssvfiscanf_r+0x718>)
 8002d88:	4640      	mov	r0, r8
 8002d8a:	4008      	ands	r0, r1
 8002d8c:	4680      	mov	r8, r0
 8002d8e:	e7c1      	b.n	8002d14 <__ssvfiscanf_r+0x3e4>
 8002d90:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d92:	48ac      	ldr	r0, [pc, #688]	; (8003044 <__ssvfiscanf_r+0x714>)
 8002d94:	0049      	lsls	r1, r1, #1
 8002d96:	5e40      	ldrsh	r0, [r0, r1]
 8002d98:	900a      	str	r0, [sp, #40]	; 0x28
 8002d9a:	2808      	cmp	r0, #8
 8002d9c:	dccc      	bgt.n	8002d38 <__ssvfiscanf_r+0x408>
 8002d9e:	e787      	b.n	8002cb0 <__ssvfiscanf_r+0x380>
 8002da0:	4650      	mov	r0, sl
 8002da2:	2800      	cmp	r0, #0
 8002da4:	d102      	bne.n	8002dac <__ssvfiscanf_r+0x47c>
 8002da6:	2001      	movs	r0, #1
 8002da8:	4240      	negs	r0, r0
 8002daa:	4682      	mov	sl, r0
 8002dac:	4641      	mov	r1, r8
 8002dae:	07c9      	lsls	r1, r1, #31
 8002db0:	d500      	bpl.n	8002db4 <__ssvfiscanf_r+0x484>
 8002db2:	e16a      	b.n	800308a <__ssvfiscanf_r+0x75a>
 8002db4:	4640      	mov	r0, r8
 8002db6:	06c0      	lsls	r0, r0, #27
 8002db8:	d571      	bpl.n	8002e9e <__ssvfiscanf_r+0x56e>
 8002dba:	2200      	movs	r2, #0
 8002dbc:	4690      	mov	r8, r2
 8002dbe:	9a03      	ldr	r2, [sp, #12]
 8002dc0:	6829      	ldr	r1, [r5, #0]
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	4646      	mov	r6, r8
 8002dc6:	4690      	mov	r8, r2
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	188a      	adds	r2, r1, r2
 8002dcc:	7852      	ldrb	r2, [r2, #1]
 8002dce:	4217      	tst	r7, r2
 8002dd0:	d000      	beq.n	8002dd4 <__ssvfiscanf_r+0x4a4>
 8002dd2:	e13f      	b.n	8003054 <__ssvfiscanf_r+0x724>
 8002dd4:	6862      	ldr	r2, [r4, #4]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	3a01      	subs	r2, #1
 8002dda:	3601      	adds	r6, #1
 8002ddc:	6062      	str	r2, [r4, #4]
 8002dde:	6023      	str	r3, [r4, #0]
 8002de0:	45b2      	cmp	sl, r6
 8002de2:	d100      	bne.n	8002de6 <__ssvfiscanf_r+0x4b6>
 8002de4:	e136      	b.n	8003054 <__ssvfiscanf_r+0x724>
 8002de6:	2a00      	cmp	r2, #0
 8002de8:	dcee      	bgt.n	8002dc8 <__ssvfiscanf_r+0x498>
 8002dea:	4648      	mov	r0, r9
 8002dec:	1c21      	adds	r1, r4, #0
 8002dee:	f7ff fd37 	bl	8002860 <__ssrefill_r>
 8002df2:	2800      	cmp	r0, #0
 8002df4:	d000      	beq.n	8002df8 <__ssvfiscanf_r+0x4c8>
 8002df6:	e12d      	b.n	8003054 <__ssvfiscanf_r+0x724>
 8002df8:	6829      	ldr	r1, [r5, #0]
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	e7e4      	b.n	8002dc8 <__ssvfiscanf_r+0x498>
 8002dfe:	4648      	mov	r0, r9
 8002e00:	1c21      	adds	r1, r4, #0
 8002e02:	f7ff fd2d 	bl	8002860 <__ssrefill_r>
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d100      	bne.n	8002e0c <__ssvfiscanf_r+0x4dc>
 8002e0a:	e61c      	b.n	8002a46 <__ssvfiscanf_r+0x116>
 8002e0c:	e67a      	b.n	8002b04 <__ssvfiscanf_r+0x1d4>
 8002e0e:	4648      	mov	r0, r9
 8002e10:	1c21      	adds	r1, r4, #0
 8002e12:	f7ff fd25 	bl	8002860 <__ssrefill_r>
 8002e16:	2800      	cmp	r0, #0
 8002e18:	d087      	beq.n	8002d2a <__ssvfiscanf_r+0x3fa>
 8002e1a:	e749      	b.n	8002cb0 <__ssvfiscanf_r+0x380>
 8002e1c:	9e08      	ldr	r6, [sp, #32]
 8002e1e:	3604      	adds	r6, #4
 8002e20:	960b      	str	r6, [sp, #44]	; 0x2c
 8002e22:	9e08      	ldr	r6, [sp, #32]
 8002e24:	6830      	ldr	r0, [r6, #0]
 8002e26:	9a03      	ldr	r2, [sp, #12]
 8002e28:	ae1e      	add	r6, sp, #120	; 0x78
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	9006      	str	r0, [sp, #24]
 8002e2e:	9607      	str	r6, [sp, #28]
 8002e30:	4680      	mov	r8, r0
 8002e32:	4656      	mov	r6, sl
 8002e34:	4692      	mov	sl, r2
 8002e36:	781a      	ldrb	r2, [r3, #0]
 8002e38:	9807      	ldr	r0, [sp, #28]
 8002e3a:	5c82      	ldrb	r2, [r0, r2]
 8002e3c:	2a00      	cmp	r2, #0
 8002e3e:	d01d      	beq.n	8002e7c <__ssvfiscanf_r+0x54c>
 8002e40:	6862      	ldr	r2, [r4, #4]
 8002e42:	3a01      	subs	r2, #1
 8002e44:	6062      	str	r2, [r4, #4]
 8002e46:	9806      	ldr	r0, [sp, #24]
 8002e48:	781a      	ldrb	r2, [r3, #0]
 8002e4a:	3e01      	subs	r6, #1
 8002e4c:	7002      	strb	r2, [r0, #0]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	3001      	adds	r0, #1
 8002e52:	9006      	str	r0, [sp, #24]
 8002e54:	6023      	str	r3, [r4, #0]
 8002e56:	2e00      	cmp	r6, #0
 8002e58:	d100      	bne.n	8002e5c <__ssvfiscanf_r+0x52c>
 8002e5a:	e160      	b.n	800311e <__ssvfiscanf_r+0x7ee>
 8002e5c:	6861      	ldr	r1, [r4, #4]
 8002e5e:	2900      	cmp	r1, #0
 8002e60:	dce9      	bgt.n	8002e36 <__ssvfiscanf_r+0x506>
 8002e62:	4648      	mov	r0, r9
 8002e64:	1c21      	adds	r1, r4, #0
 8002e66:	f7ff fcfb 	bl	8002860 <__ssrefill_r>
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	d000      	beq.n	8002e70 <__ssvfiscanf_r+0x540>
 8002e6e:	e1e4      	b.n	800323a <__ssvfiscanf_r+0x90a>
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	9807      	ldr	r0, [sp, #28]
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	5c82      	ldrb	r2, [r0, r2]
 8002e78:	2a00      	cmp	r2, #0
 8002e7a:	d1e1      	bne.n	8002e40 <__ssvfiscanf_r+0x510>
 8002e7c:	4656      	mov	r6, sl
 8002e7e:	9603      	str	r6, [sp, #12]
 8002e80:	9e06      	ldr	r6, [sp, #24]
 8002e82:	4640      	mov	r0, r8
 8002e84:	1a36      	subs	r6, r6, r0
 8002e86:	46b0      	mov	r8, r6
 8002e88:	d100      	bne.n	8002e8c <__ssvfiscanf_r+0x55c>
 8002e8a:	e5b0      	b.n	80029ee <__ssvfiscanf_r+0xbe>
 8002e8c:	9e06      	ldr	r6, [sp, #24]
 8002e8e:	2000      	movs	r0, #0
 8002e90:	7030      	strb	r0, [r6, #0]
 8002e92:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002e94:	3601      	adds	r6, #1
 8002e96:	9609      	str	r6, [sp, #36]	; 0x24
 8002e98:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002e9a:	9608      	str	r6, [sp, #32]
 8002e9c:	e0f0      	b.n	8003080 <__ssvfiscanf_r+0x750>
 8002e9e:	9e08      	ldr	r6, [sp, #32]
 8002ea0:	3604      	adds	r6, #4
 8002ea2:	9607      	str	r6, [sp, #28]
 8002ea4:	9e08      	ldr	r6, [sp, #32]
 8002ea6:	9a03      	ldr	r2, [sp, #12]
 8002ea8:	6836      	ldr	r6, [r6, #0]
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	9608      	str	r6, [sp, #32]
 8002eae:	46b0      	mov	r8, r6
 8002eb0:	4656      	mov	r6, sl
 8002eb2:	4692      	mov	sl, r2
 8002eb4:	781a      	ldrb	r2, [r3, #0]
 8002eb6:	6829      	ldr	r1, [r5, #0]
 8002eb8:	188a      	adds	r2, r1, r2
 8002eba:	7852      	ldrb	r2, [r2, #1]
 8002ebc:	4217      	tst	r7, r2
 8002ebe:	d000      	beq.n	8002ec2 <__ssvfiscanf_r+0x592>
 8002ec0:	e0cd      	b.n	800305e <__ssvfiscanf_r+0x72e>
 8002ec2:	6862      	ldr	r2, [r4, #4]
 8002ec4:	3a01      	subs	r2, #1
 8002ec6:	6062      	str	r2, [r4, #4]
 8002ec8:	781a      	ldrb	r2, [r3, #0]
 8002eca:	4641      	mov	r1, r8
 8002ecc:	700a      	strb	r2, [r1, #0]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	3e01      	subs	r6, #1
 8002ed4:	4490      	add	r8, r2
 8002ed6:	6023      	str	r3, [r4, #0]
 8002ed8:	2e00      	cmp	r6, #0
 8002eda:	d100      	bne.n	8002ede <__ssvfiscanf_r+0x5ae>
 8002edc:	e0bf      	b.n	800305e <__ssvfiscanf_r+0x72e>
 8002ede:	6860      	ldr	r0, [r4, #4]
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	dce7      	bgt.n	8002eb4 <__ssvfiscanf_r+0x584>
 8002ee4:	4648      	mov	r0, r9
 8002ee6:	1c21      	adds	r1, r4, #0
 8002ee8:	f7ff fcba 	bl	8002860 <__ssrefill_r>
 8002eec:	2800      	cmp	r0, #0
 8002eee:	d000      	beq.n	8002ef2 <__ssvfiscanf_r+0x5c2>
 8002ef0:	e0b5      	b.n	800305e <__ssvfiscanf_r+0x72e>
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	e7de      	b.n	8002eb4 <__ssvfiscanf_r+0x584>
 8002ef6:	4683      	mov	fp, r0
 8002ef8:	9603      	str	r6, [sp, #12]
 8002efa:	ae1e      	add	r6, sp, #120	; 0x78
 8002efc:	1c30      	adds	r0, r6, #0
 8002efe:	4659      	mov	r1, fp
 8002f00:	9607      	str	r6, [sp, #28]
 8002f02:	f7fe fac9 	bl	8001498 <__sccl>
 8002f06:	2340      	movs	r3, #64	; 0x40
 8002f08:	4683      	mov	fp, r0
 8002f0a:	4640      	mov	r0, r8
 8002f0c:	4318      	orrs	r0, r3
 8002f0e:	2601      	movs	r6, #1
 8002f10:	4680      	mov	r8, r0
 8002f12:	9607      	str	r6, [sp, #28]
 8002f14:	e593      	b.n	8002a3e <__ssvfiscanf_r+0x10e>
 8002f16:	4683      	mov	fp, r0
 8002f18:	2340      	movs	r3, #64	; 0x40
 8002f1a:	4640      	mov	r0, r8
 8002f1c:	9603      	str	r6, [sp, #12]
 8002f1e:	4318      	orrs	r0, r3
 8002f20:	2600      	movs	r6, #0
 8002f22:	4680      	mov	r8, r0
 8002f24:	9607      	str	r6, [sp, #28]
 8002f26:	e58a      	b.n	8002a3e <__ssvfiscanf_r+0x10e>
 8002f28:	9603      	str	r6, [sp, #12]
 8002f2a:	4683      	mov	fp, r0
 8002f2c:	e581      	b.n	8002a32 <__ssvfiscanf_r+0x102>
 8002f2e:	4641      	mov	r1, r8
 8002f30:	2204      	movs	r2, #4
 8002f32:	4311      	orrs	r1, r2
 8002f34:	4688      	mov	r8, r1
 8002f36:	e56c      	b.n	8002a12 <__ssvfiscanf_r+0xe2>
 8002f38:	9603      	str	r6, [sp, #12]
 8002f3a:	4e44      	ldr	r6, [pc, #272]	; (800304c <__ssvfiscanf_r+0x71c>)
 8002f3c:	960c      	str	r6, [sp, #48]	; 0x30
 8002f3e:	2600      	movs	r6, #0
 8002f40:	960a      	str	r6, [sp, #40]	; 0x28
 8002f42:	2603      	movs	r6, #3
 8002f44:	4683      	mov	fp, r0
 8002f46:	9607      	str	r6, [sp, #28]
 8002f48:	e579      	b.n	8002a3e <__ssvfiscanf_r+0x10e>
 8002f4a:	4643      	mov	r3, r8
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	4698      	mov	r8, r3
 8002f52:	e55e      	b.n	8002a12 <__ssvfiscanf_r+0xe2>
 8002f54:	4683      	mov	fp, r0
 8002f56:	4640      	mov	r0, r8
 8002f58:	9603      	str	r6, [sp, #12]
 8002f5a:	06c0      	lsls	r0, r0, #27
 8002f5c:	d500      	bpl.n	8002f60 <__ssvfiscanf_r+0x630>
 8002f5e:	e505      	b.n	800296c <__ssvfiscanf_r+0x3c>
 8002f60:	4641      	mov	r1, r8
 8002f62:	0749      	lsls	r1, r1, #29
 8002f64:	d400      	bmi.n	8002f68 <__ssvfiscanf_r+0x638>
 8002f66:	e128      	b.n	80031ba <__ssvfiscanf_r+0x88a>
 8002f68:	9a08      	ldr	r2, [sp, #32]
 8002f6a:	466b      	mov	r3, sp
 8002f6c:	260c      	movs	r6, #12
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	5af6      	ldrh	r6, [r6, r3]
 8002f72:	8016      	strh	r6, [r2, #0]
 8002f74:	9e08      	ldr	r6, [sp, #32]
 8002f76:	3604      	adds	r6, #4
 8002f78:	9205      	str	r2, [sp, #20]
 8002f7a:	9608      	str	r6, [sp, #32]
 8002f7c:	e4f6      	b.n	800296c <__ssvfiscanf_r+0x3c>
 8002f7e:	9603      	str	r6, [sp, #12]
 8002f80:	4683      	mov	fp, r0
 8002f82:	4e33      	ldr	r6, [pc, #204]	; (8003050 <__ssvfiscanf_r+0x720>)
 8002f84:	960c      	str	r6, [sp, #48]	; 0x30
 8002f86:	2608      	movs	r6, #8
 8002f88:	960a      	str	r6, [sp, #40]	; 0x28
 8002f8a:	2603      	movs	r6, #3
 8002f8c:	9607      	str	r6, [sp, #28]
 8002f8e:	e556      	b.n	8002a3e <__ssvfiscanf_r+0x10e>
 8002f90:	4642      	mov	r2, r8
 8002f92:	4663      	mov	r3, ip
 8002f94:	431a      	orrs	r2, r3
 8002f96:	4690      	mov	r8, r2
 8002f98:	e53b      	b.n	8002a12 <__ssvfiscanf_r+0xe2>
 8002f9a:	4683      	mov	fp, r0
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	4640      	mov	r0, r8
 8002fa0:	4318      	orrs	r0, r3
 8002fa2:	9603      	str	r6, [sp, #12]
 8002fa4:	4680      	mov	r8, r0
 8002fa6:	e7ec      	b.n	8002f82 <__ssvfiscanf_r+0x652>
 8002fa8:	9603      	str	r6, [sp, #12]
 8002faa:	2301      	movs	r3, #1
 8002fac:	4646      	mov	r6, r8
 8002fae:	431e      	orrs	r6, r3
 8002fb0:	4683      	mov	fp, r0
 8002fb2:	46b0      	mov	r8, r6
 8002fb4:	e53d      	b.n	8002a32 <__ssvfiscanf_r+0x102>
 8002fb6:	9603      	str	r6, [sp, #12]
 8002fb8:	4683      	mov	fp, r0
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	4e24      	ldr	r6, [pc, #144]	; (8003050 <__ssvfiscanf_r+0x720>)
 8002fbe:	4640      	mov	r0, r8
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	960c      	str	r6, [sp, #48]	; 0x30
 8002fc4:	2610      	movs	r6, #16
 8002fc6:	4318      	orrs	r0, r3
 8002fc8:	960a      	str	r6, [sp, #40]	; 0x28
 8002fca:	2603      	movs	r6, #3
 8002fcc:	4680      	mov	r8, r0
 8002fce:	9607      	str	r6, [sp, #28]
 8002fd0:	e535      	b.n	8002a3e <__ssvfiscanf_r+0x10e>
 8002fd2:	4641      	mov	r1, r8
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	4311      	orrs	r1, r2
 8002fd8:	4688      	mov	r8, r1
 8002fda:	e51a      	b.n	8002a12 <__ssvfiscanf_r+0xe2>
 8002fdc:	4653      	mov	r3, sl
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	469b      	mov	fp, r3
 8002fe2:	44da      	add	sl, fp
 8002fe4:	4651      	mov	r1, sl
 8002fe6:	0049      	lsls	r1, r1, #1
 8002fe8:	2230      	movs	r2, #48	; 0x30
 8002fea:	468a      	mov	sl, r1
 8002fec:	4252      	negs	r2, r2
 8002fee:	9b07      	ldr	r3, [sp, #28]
 8002ff0:	4492      	add	sl, r2
 8002ff2:	449a      	add	sl, r3
 8002ff4:	e50d      	b.n	8002a12 <__ssvfiscanf_r+0xe2>
 8002ff6:	9603      	str	r6, [sp, #12]
 8002ff8:	4683      	mov	fp, r0
 8002ffa:	2388      	movs	r3, #136	; 0x88
 8002ffc:	e7de      	b.n	8002fbc <__ssvfiscanf_r+0x68c>
 8002ffe:	9603      	str	r6, [sp, #12]
 8003000:	2602      	movs	r6, #2
 8003002:	4683      	mov	fp, r0
 8003004:	9607      	str	r6, [sp, #28]
 8003006:	e51a      	b.n	8002a3e <__ssvfiscanf_r+0x10e>
 8003008:	9603      	str	r6, [sp, #12]
 800300a:	4683      	mov	fp, r0
 800300c:	4e10      	ldr	r6, [pc, #64]	; (8003050 <__ssvfiscanf_r+0x720>)
 800300e:	e511      	b.n	8002a34 <__ssvfiscanf_r+0x104>
 8003010:	9603      	str	r6, [sp, #12]
 8003012:	4683      	mov	fp, r0
 8003014:	e4d1      	b.n	80029ba <__ssvfiscanf_r+0x8a>
 8003016:	4640      	mov	r0, r8
 8003018:	4318      	orrs	r0, r3
 800301a:	4680      	mov	r8, r0
 800301c:	e509      	b.n	8002a32 <__ssvfiscanf_r+0x102>
 800301e:	2101      	movs	r1, #1
 8003020:	46b2      	mov	sl, r6
 8003022:	4249      	negs	r1, r1
 8003024:	448a      	add	sl, r1
 8003026:	4652      	mov	r2, sl
 8003028:	7811      	ldrb	r1, [r2, #0]
 800302a:	4648      	mov	r0, r9
 800302c:	1c22      	adds	r2, r4, #0
 800302e:	4656      	mov	r6, sl
 8003030:	f7ff fbd2 	bl	80027d8 <_sungetc_r>
 8003034:	9606      	str	r6, [sp, #24]
 8003036:	e645      	b.n	8002cc4 <__ssvfiscanf_r+0x394>
 8003038:	0800d9a4 	.word	0x0800d9a4
 800303c:	fffffdff 	.word	0xfffffdff
 8003040:	fffff47f 	.word	0xfffff47f
 8003044:	0800dadc 	.word	0x0800dadc
 8003048:	fffffa7f 	.word	0xfffffa7f
 800304c:	080024b1 	.word	0x080024b1
 8003050:	08002641 	.word	0x08002641
 8003054:	4643      	mov	r3, r8
 8003056:	46b0      	mov	r8, r6
 8003058:	4443      	add	r3, r8
 800305a:	9303      	str	r3, [sp, #12]
 800305c:	e486      	b.n	800296c <__ssvfiscanf_r+0x3c>
 800305e:	9e08      	ldr	r6, [sp, #32]
 8003060:	4640      	mov	r0, r8
 8003062:	4652      	mov	r2, sl
 8003064:	1b83      	subs	r3, r0, r6
 8003066:	18d6      	adds	r6, r2, r3
 8003068:	9603      	str	r6, [sp, #12]
 800306a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800306c:	3601      	adds	r6, #1
 800306e:	9609      	str	r6, [sp, #36]	; 0x24
 8003070:	9e07      	ldr	r6, [sp, #28]
 8003072:	2100      	movs	r1, #0
 8003074:	7001      	strb	r1, [r0, #0]
 8003076:	9608      	str	r6, [sp, #32]
 8003078:	e478      	b.n	800296c <__ssvfiscanf_r+0x3c>
 800307a:	4643      	mov	r3, r8
 800307c:	9303      	str	r3, [sp, #12]
 800307e:	46b0      	mov	r8, r6
 8003080:	9803      	ldr	r0, [sp, #12]
 8003082:	1c06      	adds	r6, r0, #0
 8003084:	4446      	add	r6, r8
 8003086:	9603      	str	r6, [sp, #12]
 8003088:	e470      	b.n	800296c <__ssvfiscanf_r+0x3c>
 800308a:	a812      	add	r0, sp, #72	; 0x48
 800308c:	2100      	movs	r1, #0
 800308e:	2208      	movs	r2, #8
 8003090:	f7fe f972 	bl	8001378 <memset>
 8003094:	4646      	mov	r6, r8
 8003096:	2310      	movs	r3, #16
 8003098:	401e      	ands	r6, r3
 800309a:	9607      	str	r6, [sp, #28]
 800309c:	ae0f      	add	r6, sp, #60	; 0x3c
 800309e:	9606      	str	r6, [sp, #24]
 80030a0:	9e07      	ldr	r6, [sp, #28]
 80030a2:	2e00      	cmp	r6, #0
 80030a4:	d105      	bne.n	80030b2 <__ssvfiscanf_r+0x782>
 80030a6:	9e08      	ldr	r6, [sp, #32]
 80030a8:	6836      	ldr	r6, [r6, #0]
 80030aa:	9606      	str	r6, [sp, #24]
 80030ac:	9e08      	ldr	r6, [sp, #32]
 80030ae:	3604      	adds	r6, #4
 80030b0:	9608      	str	r6, [sp, #32]
 80030b2:	9903      	ldr	r1, [sp, #12]
 80030b4:	1c23      	adds	r3, r4, #0
 80030b6:	2000      	movs	r0, #0
 80030b8:	1c04      	adds	r4, r0, #0
 80030ba:	4688      	mov	r8, r1
 80030bc:	1c1e      	adds	r6, r3, #0
 80030be:	6832      	ldr	r2, [r6, #0]
 80030c0:	6828      	ldr	r0, [r5, #0]
 80030c2:	7813      	ldrb	r3, [r2, #0]
 80030c4:	18c3      	adds	r3, r0, r3
 80030c6:	785b      	ldrb	r3, [r3, #1]
 80030c8:	421f      	tst	r7, r3
 80030ca:	d14a      	bne.n	8003162 <__ssvfiscanf_r+0x832>
 80030cc:	4651      	mov	r1, sl
 80030ce:	2900      	cmp	r1, #0
 80030d0:	d17c      	bne.n	80031cc <__ssvfiscanf_r+0x89c>
 80030d2:	1c34      	adds	r4, r6, #0
 80030d4:	4646      	mov	r6, r8
 80030d6:	9603      	str	r6, [sp, #12]
 80030d8:	9e07      	ldr	r6, [sp, #28]
 80030da:	2e00      	cmp	r6, #0
 80030dc:	d000      	beq.n	80030e0 <__ssvfiscanf_r+0x7b0>
 80030de:	e445      	b.n	800296c <__ssvfiscanf_r+0x3c>
 80030e0:	9806      	ldr	r0, [sp, #24]
 80030e2:	6006      	str	r6, [r0, #0]
 80030e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80030e6:	3601      	adds	r6, #1
 80030e8:	9609      	str	r6, [sp, #36]	; 0x24
 80030ea:	e43f      	b.n	800296c <__ssvfiscanf_r+0x3c>
 80030ec:	9e06      	ldr	r6, [sp, #24]
 80030ee:	a914      	add	r1, sp, #80	; 0x50
 80030f0:	7033      	strb	r3, [r6, #0]
 80030f2:	4648      	mov	r0, r9
 80030f4:	2200      	movs	r2, #0
 80030f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80030fa:	f000 f8cd 	bl	8003298 <__ssvfiscanf_r+0x968>
 80030fe:	4641      	mov	r1, r8
 8003100:	0689      	lsls	r1, r1, #26
 8003102:	d40f      	bmi.n	8003124 <__ssvfiscanf_r+0x7f4>
 8003104:	4641      	mov	r1, r8
 8003106:	0749      	lsls	r1, r1, #29
 8003108:	d50c      	bpl.n	8003124 <__ssvfiscanf_r+0x7f4>
 800310a:	9a08      	ldr	r2, [sp, #32]
 800310c:	9e08      	ldr	r6, [sp, #32]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	3604      	adds	r6, #4
 8003112:	8010      	strh	r0, [r2, #0]
 8003114:	9608      	str	r6, [sp, #32]
 8003116:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003118:	3601      	adds	r6, #1
 800311a:	9609      	str	r6, [sp, #36]	; 0x24
 800311c:	e5dc      	b.n	8002cd8 <__ssvfiscanf_r+0x3a8>
 800311e:	4656      	mov	r6, sl
 8003120:	9603      	str	r6, [sp, #12]
 8003122:	e6ad      	b.n	8002e80 <__ssvfiscanf_r+0x550>
 8003124:	9e08      	ldr	r6, [sp, #32]
 8003126:	6833      	ldr	r3, [r6, #0]
 8003128:	3604      	adds	r6, #4
 800312a:	6018      	str	r0, [r3, #0]
 800312c:	9608      	str	r6, [sp, #32]
 800312e:	e7f2      	b.n	8003116 <__ssvfiscanf_r+0x7e6>
 8003130:	9808      	ldr	r0, [sp, #32]
 8003132:	9e08      	ldr	r6, [sp, #32]
 8003134:	4680      	mov	r8, r0
 8003136:	2004      	movs	r0, #4
 8003138:	4480      	add	r8, r0
 800313a:	6831      	ldr	r1, [r6, #0]
 800313c:	4648      	mov	r0, r9
 800313e:	9400      	str	r4, [sp, #0]
 8003140:	2201      	movs	r2, #1
 8003142:	4653      	mov	r3, sl
 8003144:	f7ff fbae 	bl	80028a4 <_sfread_r>
 8003148:	2800      	cmp	r0, #0
 800314a:	d100      	bne.n	800314e <__ssvfiscanf_r+0x81e>
 800314c:	e4da      	b.n	8002b04 <__ssvfiscanf_r+0x1d4>
 800314e:	9e03      	ldr	r6, [sp, #12]
 8003150:	1986      	adds	r6, r0, r6
 8003152:	9603      	str	r6, [sp, #12]
 8003154:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003156:	3601      	adds	r6, #1
 8003158:	9609      	str	r6, [sp, #36]	; 0x24
 800315a:	4646      	mov	r6, r8
 800315c:	9608      	str	r6, [sp, #32]
 800315e:	f7ff fc05 	bl	800296c <__ssvfiscanf_r+0x3c>
 8003162:	1c34      	adds	r4, r6, #0
 8003164:	4646      	mov	r6, r8
 8003166:	9603      	str	r6, [sp, #12]
 8003168:	e7b6      	b.n	80030d8 <__ssvfiscanf_r+0x7a8>
 800316a:	1c34      	adds	r4, r6, #0
 800316c:	e4ca      	b.n	8002b04 <__ssvfiscanf_r+0x1d4>
 800316e:	4b49      	ldr	r3, [pc, #292]	; (8003294 <__ssvfiscanf_r+0x964>)
 8003170:	4641      	mov	r1, r8
 8003172:	4019      	ands	r1, r3
 8003174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003176:	4688      	mov	r8, r1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <__ssvfiscanf_r+0x852>
 800317c:	3b01      	subs	r3, #1
 800317e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003180:	3601      	adds	r6, #1
 8003182:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003184:	3001      	adds	r0, #1
 8003186:	900d      	str	r0, [sp, #52]	; 0x34
 8003188:	e5c8      	b.n	8002d1c <__ssvfiscanf_r+0x3ec>
 800318a:	6821      	ldr	r1, [r4, #0]
 800318c:	4652      	mov	r2, sl
 800318e:	1c08      	adds	r0, r1, #0
 8003190:	46b2      	mov	sl, r6
 8003192:	1b9b      	subs	r3, r3, r6
 8003194:	4450      	add	r0, sl
 8003196:	9203      	str	r2, [sp, #12]
 8003198:	44d0      	add	r8, sl
 800319a:	6063      	str	r3, [r4, #4]
 800319c:	6020      	str	r0, [r4, #0]
 800319e:	e4a1      	b.n	8002ae4 <__ssvfiscanf_r+0x1b4>
 80031a0:	1c34      	adds	r4, r6, #0
 80031a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80031a4:	465e      	mov	r6, fp
 80031a6:	9603      	str	r6, [sp, #12]
 80031a8:	4683      	mov	fp, r0
 80031aa:	9e06      	ldr	r6, [sp, #24]
 80031ac:	4273      	negs	r3, r6
 80031ae:	4173      	adcs	r3, r6
 80031b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80031b2:	18f6      	adds	r6, r6, r3
 80031b4:	9609      	str	r6, [sp, #36]	; 0x24
 80031b6:	f7ff fbd9 	bl	800296c <__ssvfiscanf_r+0x3c>
 80031ba:	9e08      	ldr	r6, [sp, #32]
 80031bc:	6833      	ldr	r3, [r6, #0]
 80031be:	9e03      	ldr	r6, [sp, #12]
 80031c0:	601e      	str	r6, [r3, #0]
 80031c2:	9e08      	ldr	r6, [sp, #32]
 80031c4:	3604      	adds	r6, #4
 80031c6:	9608      	str	r6, [sp, #32]
 80031c8:	f7ff fbd0 	bl	800296c <__ssvfiscanf_r+0x3c>
 80031cc:	f7fd ffe4 	bl	8001198 <__locale_mb_cur_max>
 80031d0:	42a0      	cmp	r0, r4
 80031d2:	d0ca      	beq.n	800316a <__ssvfiscanf_r+0x83a>
 80031d4:	6833      	ldr	r3, [r6, #0]
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	a814      	add	r0, sp, #80	; 0x50
 80031da:	5502      	strb	r2, [r0, r4]
 80031dc:	6872      	ldr	r2, [r6, #4]
 80031de:	3301      	adds	r3, #1
 80031e0:	3a01      	subs	r2, #1
 80031e2:	a912      	add	r1, sp, #72	; 0x48
 80031e4:	3401      	adds	r4, #1
 80031e6:	6072      	str	r2, [r6, #4]
 80031e8:	6033      	str	r3, [r6, #0]
 80031ea:	aa14      	add	r2, sp, #80	; 0x50
 80031ec:	9100      	str	r1, [sp, #0]
 80031ee:	4648      	mov	r0, r9
 80031f0:	9906      	ldr	r1, [sp, #24]
 80031f2:	1c23      	adds	r3, r4, #0
 80031f4:	f7fe f80e 	bl	8001214 <_mbrtowc_r>
 80031f8:	1c42      	adds	r2, r0, #1
 80031fa:	d0b6      	beq.n	800316a <__ssvfiscanf_r+0x83a>
 80031fc:	2800      	cmp	r0, #0
 80031fe:	d123      	bne.n	8003248 <__ssvfiscanf_r+0x918>
 8003200:	9b06      	ldr	r3, [sp, #24]
 8003202:	6018      	str	r0, [r3, #0]
 8003204:	f7fd ff90 	bl	8001128 <iswspace>
 8003208:	2800      	cmp	r0, #0
 800320a:	d022      	beq.n	8003252 <__ssvfiscanf_r+0x922>
 800320c:	1c33      	adds	r3, r6, #0
 800320e:	4646      	mov	r6, r8
 8003210:	46a0      	mov	r8, r4
 8003212:	4640      	mov	r0, r8
 8003214:	9603      	str	r6, [sp, #12]
 8003216:	1c1c      	adds	r4, r3, #0
 8003218:	2800      	cmp	r0, #0
 800321a:	d100      	bne.n	800321e <__ssvfiscanf_r+0x8ee>
 800321c:	e75c      	b.n	80030d8 <__ssvfiscanf_r+0x7a8>
 800321e:	4644      	mov	r4, r8
 8003220:	4698      	mov	r8, r3
 8003222:	3c01      	subs	r4, #1
 8003224:	aa14      	add	r2, sp, #80	; 0x50
 8003226:	5d11      	ldrb	r1, [r2, r4]
 8003228:	4648      	mov	r0, r9
 800322a:	4642      	mov	r2, r8
 800322c:	f7ff fad4 	bl	80027d8 <_sungetc_r>
 8003230:	2c00      	cmp	r4, #0
 8003232:	d1f6      	bne.n	8003222 <__ssvfiscanf_r+0x8f2>
 8003234:	9603      	str	r6, [sp, #12]
 8003236:	4644      	mov	r4, r8
 8003238:	e74e      	b.n	80030d8 <__ssvfiscanf_r+0x7a8>
 800323a:	4656      	mov	r6, sl
 800323c:	9603      	str	r6, [sp, #12]
 800323e:	9e06      	ldr	r6, [sp, #24]
 8003240:	45b0      	cmp	r8, r6
 8003242:	d000      	beq.n	8003246 <__ssvfiscanf_r+0x916>
 8003244:	e61c      	b.n	8002e80 <__ssvfiscanf_r+0x550>
 8003246:	e45d      	b.n	8002b04 <__ssvfiscanf_r+0x1d4>
 8003248:	3002      	adds	r0, #2
 800324a:	d00e      	beq.n	800326a <__ssvfiscanf_r+0x93a>
 800324c:	9906      	ldr	r1, [sp, #24]
 800324e:	6808      	ldr	r0, [r1, #0]
 8003250:	e7d8      	b.n	8003204 <__ssvfiscanf_r+0x8d4>
 8003252:	2301      	movs	r3, #1
 8003254:	9807      	ldr	r0, [sp, #28]
 8003256:	425b      	negs	r3, r3
 8003258:	44a0      	add	r8, r4
 800325a:	449a      	add	sl, r3
 800325c:	2400      	movs	r4, #0
 800325e:	2800      	cmp	r0, #0
 8003260:	d103      	bne.n	800326a <__ssvfiscanf_r+0x93a>
 8003262:	9906      	ldr	r1, [sp, #24]
 8003264:	3104      	adds	r1, #4
 8003266:	9106      	str	r1, [sp, #24]
 8003268:	1c04      	adds	r4, r0, #0
 800326a:	6872      	ldr	r2, [r6, #4]
 800326c:	2a00      	cmp	r2, #0
 800326e:	dd00      	ble.n	8003272 <__ssvfiscanf_r+0x942>
 8003270:	e725      	b.n	80030be <__ssvfiscanf_r+0x78e>
 8003272:	4648      	mov	r0, r9
 8003274:	1c31      	adds	r1, r6, #0
 8003276:	f7ff faf3 	bl	8002860 <__ssrefill_r>
 800327a:	2800      	cmp	r0, #0
 800327c:	d100      	bne.n	8003280 <__ssvfiscanf_r+0x950>
 800327e:	e71e      	b.n	80030be <__ssvfiscanf_r+0x78e>
 8003280:	4640      	mov	r0, r8
 8003282:	46a0      	mov	r8, r4
 8003284:	1c33      	adds	r3, r6, #0
 8003286:	4641      	mov	r1, r8
 8003288:	9003      	str	r0, [sp, #12]
 800328a:	1c1c      	adds	r4, r3, #0
 800328c:	2900      	cmp	r1, #0
 800328e:	d000      	beq.n	8003292 <__ssvfiscanf_r+0x962>
 8003290:	e438      	b.n	8002b04 <__ssvfiscanf_r+0x1d4>
 8003292:	e721      	b.n	80030d8 <__ssvfiscanf_r+0x7a8>
 8003294:	fffffc7f 	.word	0xfffffc7f
 8003298:	4730      	bx	r6
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	0000      	movs	r0, r0
	...

080032a0 <_svfprintf_r>:
 80032a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a2:	464d      	mov	r5, r9
 80032a4:	4644      	mov	r4, r8
 80032a6:	465f      	mov	r7, fp
 80032a8:	4656      	mov	r6, sl
 80032aa:	b4f0      	push	{r4, r5, r6, r7}
 80032ac:	b0c5      	sub	sp, #276	; 0x114
 80032ae:	4689      	mov	r9, r1
 80032b0:	9310      	str	r3, [sp, #64]	; 0x40
 80032b2:	1c14      	adds	r4, r2, #0
 80032b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80032b6:	f7fd ff7d 	bl	80011b4 <_localeconv_r>
 80032ba:	6800      	ldr	r0, [r0, #0]
 80032bc:	9017      	str	r0, [sp, #92]	; 0x5c
 80032be:	f7fc ff53 	bl	8000168 <strlen>
 80032c2:	901a      	str	r0, [sp, #104]	; 0x68
 80032c4:	2000      	movs	r0, #0
 80032c6:	2100      	movs	r1, #0
 80032c8:	9018      	str	r0, [sp, #96]	; 0x60
 80032ca:	9119      	str	r1, [sp, #100]	; 0x64
 80032cc:	4649      	mov	r1, r9
 80032ce:	898b      	ldrh	r3, [r1, #12]
 80032d0:	061a      	lsls	r2, r3, #24
 80032d2:	d504      	bpl.n	80032de <_svfprintf_r+0x3e>
 80032d4:	690b      	ldr	r3, [r1, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <_svfprintf_r+0x3e>
 80032da:	f000 ffa7 	bl	800422c <_svfprintf_r+0xf8c>
 80032de:	2200      	movs	r2, #0
 80032e0:	9215      	str	r2, [sp, #84]	; 0x54
 80032e2:	466a      	mov	r2, sp
 80032e4:	2300      	movs	r3, #0
 80032e6:	a934      	add	r1, sp, #208	; 0xd0
 80032e8:	ae27      	add	r6, sp, #156	; 0x9c
 80032ea:	32cf      	adds	r2, #207	; 0xcf
 80032ec:	af34      	add	r7, sp, #208	; 0xd0
 80032ee:	9108      	str	r1, [sp, #32]
 80032f0:	9127      	str	r1, [sp, #156]	; 0x9c
 80032f2:	60b3      	str	r3, [r6, #8]
 80032f4:	6073      	str	r3, [r6, #4]
 80032f6:	931c      	str	r3, [sp, #112]	; 0x70
 80032f8:	2000      	movs	r0, #0
 80032fa:	2100      	movs	r1, #0
 80032fc:	1abb      	subs	r3, r7, r2
 80032fe:	901b      	str	r0, [sp, #108]	; 0x6c
 8003300:	910f      	str	r1, [sp, #60]	; 0x3c
 8003302:	9207      	str	r2, [sp, #28]
 8003304:	931d      	str	r3, [sp, #116]	; 0x74
 8003306:	1c25      	adds	r5, r4, #0
 8003308:	46cb      	mov	fp, r9
 800330a:	782b      	ldrb	r3, [r5, #0]
 800330c:	1c2c      	adds	r4, r5, #0
 800330e:	2b25      	cmp	r3, #37	; 0x25
 8003310:	d01c      	beq.n	800334c <_svfprintf_r+0xac>
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <_svfprintf_r+0x7c>
 8003316:	e019      	b.n	800334c <_svfprintf_r+0xac>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <_svfprintf_r+0x84>
 800331c:	3401      	adds	r4, #1
 800331e:	7823      	ldrb	r3, [r4, #0]
 8003320:	2b25      	cmp	r3, #37	; 0x25
 8003322:	d1f9      	bne.n	8003318 <_svfprintf_r+0x78>
 8003324:	1b60      	subs	r0, r4, r5
 8003326:	4680      	mov	r8, r0
 8003328:	d010      	beq.n	800334c <_svfprintf_r+0xac>
 800332a:	68b1      	ldr	r1, [r6, #8]
 800332c:	1c0b      	adds	r3, r1, #0
 800332e:	4443      	add	r3, r8
 8003330:	603d      	str	r5, [r7, #0]
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	60b3      	str	r3, [r6, #8]
 8003336:	6873      	ldr	r3, [r6, #4]
 8003338:	3301      	adds	r3, #1
 800333a:	6073      	str	r3, [r6, #4]
 800333c:	2b07      	cmp	r3, #7
 800333e:	dd00      	ble.n	8003342 <_svfprintf_r+0xa2>
 8003340:	e346      	b.n	80039d0 <_svfprintf_r+0x730>
 8003342:	3708      	adds	r7, #8
 8003344:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003346:	1c13      	adds	r3, r2, #0
 8003348:	4443      	add	r3, r8
 800334a:	930f      	str	r3, [sp, #60]	; 0x3c
 800334c:	7823      	ldrb	r3, [r4, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <_svfprintf_r+0xb6>
 8003352:	f000 fdb9 	bl	8003ec8 <_svfprintf_r+0xc28>
 8003356:	207b      	movs	r0, #123	; 0x7b
 8003358:	2201      	movs	r2, #1
 800335a:	2300      	movs	r3, #0
 800335c:	4468      	add	r0, sp
 800335e:	4252      	negs	r2, r2
 8003360:	7003      	strb	r3, [r0, #0]
 8003362:	2100      	movs	r1, #0
 8003364:	2340      	movs	r3, #64	; 0x40
 8003366:	4692      	mov	sl, r2
 8003368:	2200      	movs	r2, #0
 800336a:	9111      	str	r1, [sp, #68]	; 0x44
 800336c:	920a      	str	r2, [sp, #40]	; 0x28
 800336e:	4699      	mov	r9, r3
 8003370:	2208      	movs	r2, #8
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	49ce      	ldr	r1, [pc, #824]	; (80036b0 <_svfprintf_r+0x410>)
 8003376:	1c65      	adds	r5, r4, #1
 8003378:	2010      	movs	r0, #16
 800337a:	4690      	mov	r8, r2
 800337c:	469c      	mov	ip, r3
 800337e:	242b      	movs	r4, #43	; 0x2b
 8003380:	782b      	ldrb	r3, [r5, #0]
 8003382:	930c      	str	r3, [sp, #48]	; 0x30
 8003384:	3501      	adds	r5, #1
 8003386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003388:	3b20      	subs	r3, #32
 800338a:	2b58      	cmp	r3, #88	; 0x58
 800338c:	d914      	bls.n	80033b8 <_svfprintf_r+0x118>
 800338e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003390:	2900      	cmp	r1, #0
 8003392:	d101      	bne.n	8003398 <_svfprintf_r+0xf8>
 8003394:	f000 fd98 	bl	8003ec8 <_svfprintf_r+0xc28>
 8003398:	ab2a      	add	r3, sp, #168	; 0xa8
 800339a:	7019      	strb	r1, [r3, #0]
 800339c:	207b      	movs	r0, #123	; 0x7b
 800339e:	2200      	movs	r2, #0
 80033a0:	4468      	add	r0, sp
 80033a2:	7002      	strb	r2, [r0, #0]
 80033a4:	2101      	movs	r1, #1
 80033a6:	2201      	movs	r2, #1
 80033a8:	910d      	str	r1, [sp, #52]	; 0x34
 80033aa:	920e      	str	r2, [sp, #56]	; 0x38
 80033ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80033ae:	2200      	movs	r2, #0
 80033b0:	2300      	movs	r3, #0
 80033b2:	9214      	str	r2, [sp, #80]	; 0x50
 80033b4:	9316      	str	r3, [sp, #88]	; 0x58
 80033b6:	e0a3      	b.n	8003500 <_svfprintf_r+0x260>
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	58cb      	ldr	r3, [r1, r3]
 80033bc:	469f      	mov	pc, r3
 80033be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80033c0:	2310      	movs	r3, #16
 80033c2:	4319      	orrs	r1, r3
 80033c4:	910a      	str	r1, [sp, #40]	; 0x28
 80033c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033c8:	06d2      	lsls	r2, r2, #27
 80033ca:	d400      	bmi.n	80033ce <_svfprintf_r+0x12e>
 80033cc:	e3dc      	b.n	8003b88 <_svfprintf_r+0x8e8>
 80033ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80033d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80033d2:	681c      	ldr	r4, [r3, #0]
 80033d4:	3004      	adds	r0, #4
 80033d6:	1c21      	adds	r1, r4, #0
 80033d8:	9010      	str	r0, [sp, #64]	; 0x40
 80033da:	1e4b      	subs	r3, r1, #1
 80033dc:	4199      	sbcs	r1, r3
 80033de:	2301      	movs	r3, #1
 80033e0:	207b      	movs	r0, #123	; 0x7b
 80033e2:	2200      	movs	r2, #0
 80033e4:	4468      	add	r0, sp
 80033e6:	7002      	strb	r2, [r0, #0]
 80033e8:	4652      	mov	r2, sl
 80033ea:	2a00      	cmp	r2, #0
 80033ec:	db03      	blt.n	80033f6 <_svfprintf_r+0x156>
 80033ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80033f0:	2280      	movs	r2, #128	; 0x80
 80033f2:	4390      	bics	r0, r2
 80033f4:	900a      	str	r0, [sp, #40]	; 0x28
 80033f6:	4652      	mov	r2, sl
 80033f8:	2a00      	cmp	r2, #0
 80033fa:	d101      	bne.n	8003400 <_svfprintf_r+0x160>
 80033fc:	2900      	cmp	r1, #0
 80033fe:	d05f      	beq.n	80034c0 <_svfprintf_r+0x220>
 8003400:	2b01      	cmp	r3, #1
 8003402:	d100      	bne.n	8003406 <_svfprintf_r+0x166>
 8003404:	e377      	b.n	8003af6 <_svfprintf_r+0x856>
 8003406:	2b02      	cmp	r3, #2
 8003408:	d100      	bne.n	800340c <_svfprintf_r+0x16c>
 800340a:	e362      	b.n	8003ad2 <_svfprintf_r+0x832>
 800340c:	466b      	mov	r3, sp
 800340e:	33cf      	adds	r3, #207	; 0xcf
 8003410:	2107      	movs	r1, #7
 8003412:	1c0a      	adds	r2, r1, #0
 8003414:	4022      	ands	r2, r4
 8003416:	3230      	adds	r2, #48	; 0x30
 8003418:	1c18      	adds	r0, r3, #0
 800341a:	701a      	strb	r2, [r3, #0]
 800341c:	08e4      	lsrs	r4, r4, #3
 800341e:	3b01      	subs	r3, #1
 8003420:	2c00      	cmp	r4, #0
 8003422:	d1f6      	bne.n	8003412 <_svfprintf_r+0x172>
 8003424:	9013      	str	r0, [sp, #76]	; 0x4c
 8003426:	1c01      	adds	r1, r0, #0
 8003428:	980a      	ldr	r0, [sp, #40]	; 0x28
 800342a:	07c0      	lsls	r0, r0, #31
 800342c:	d400      	bmi.n	8003430 <_svfprintf_r+0x190>
 800342e:	e3c3      	b.n	8003bb8 <_svfprintf_r+0x918>
 8003430:	2a30      	cmp	r2, #48	; 0x30
 8003432:	d101      	bne.n	8003438 <_svfprintf_r+0x198>
 8003434:	f000 ff6d 	bl	8004312 <_svfprintf_r+0x1072>
 8003438:	9313      	str	r3, [sp, #76]	; 0x4c
 800343a:	3901      	subs	r1, #1
 800343c:	2330      	movs	r3, #48	; 0x30
 800343e:	700b      	strb	r3, [r1, #0]
 8003440:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003442:	9908      	ldr	r1, [sp, #32]
 8003444:	1a89      	subs	r1, r1, r2
 8003446:	910e      	str	r1, [sp, #56]	; 0x38
 8003448:	e048      	b.n	80034dc <_svfprintf_r+0x23c>
 800344a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800344c:	2310      	movs	r3, #16
 800344e:	431a      	orrs	r2, r3
 8003450:	920a      	str	r2, [sp, #40]	; 0x28
 8003452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003454:	06db      	lsls	r3, r3, #27
 8003456:	d500      	bpl.n	800345a <_svfprintf_r+0x1ba>
 8003458:	e3a4      	b.n	8003ba4 <_svfprintf_r+0x904>
 800345a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800345c:	0649      	lsls	r1, r1, #25
 800345e:	d401      	bmi.n	8003464 <_svfprintf_r+0x1c4>
 8003460:	f000 fe2f 	bl	80040c2 <_svfprintf_r+0xe22>
 8003464:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003466:	8814      	ldrh	r4, [r2, #0]
 8003468:	3204      	adds	r2, #4
 800346a:	1c21      	adds	r1, r4, #0
 800346c:	1e4b      	subs	r3, r1, #1
 800346e:	4199      	sbcs	r1, r3
 8003470:	9210      	str	r2, [sp, #64]	; 0x40
 8003472:	2300      	movs	r3, #0
 8003474:	e7b4      	b.n	80033e0 <_svfprintf_r+0x140>
 8003476:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003478:	2310      	movs	r3, #16
 800347a:	4318      	orrs	r0, r3
 800347c:	900a      	str	r0, [sp, #40]	; 0x28
 800347e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003480:	06c9      	lsls	r1, r1, #27
 8003482:	d400      	bmi.n	8003486 <_svfprintf_r+0x1e6>
 8003484:	e375      	b.n	8003b72 <_svfprintf_r+0x8d2>
 8003486:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003488:	6814      	ldr	r4, [r2, #0]
 800348a:	3204      	adds	r2, #4
 800348c:	9210      	str	r2, [sp, #64]	; 0x40
 800348e:	2c00      	cmp	r4, #0
 8003490:	da01      	bge.n	8003496 <_svfprintf_r+0x1f6>
 8003492:	f000 fdee 	bl	8004072 <_svfprintf_r+0xdd2>
 8003496:	1c21      	adds	r1, r4, #0
 8003498:	1e4b      	subs	r3, r1, #1
 800349a:	4199      	sbcs	r1, r3
 800349c:	2301      	movs	r3, #1
 800349e:	e7a3      	b.n	80033e8 <_svfprintf_r+0x148>
 80034a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3204      	adds	r2, #4
 80034a8:	9311      	str	r3, [sp, #68]	; 0x44
 80034aa:	9210      	str	r2, [sp, #64]	; 0x40
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	db00      	blt.n	80034b2 <_svfprintf_r+0x212>
 80034b0:	e766      	b.n	8003380 <_svfprintf_r+0xe0>
 80034b2:	425b      	negs	r3, r3
 80034b4:	9311      	str	r3, [sp, #68]	; 0x44
 80034b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034b8:	2304      	movs	r3, #4
 80034ba:	431a      	orrs	r2, r3
 80034bc:	920a      	str	r2, [sp, #40]	; 0x28
 80034be:	e75f      	b.n	8003380 <_svfprintf_r+0xe0>
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d000      	beq.n	80034c6 <_svfprintf_r+0x226>
 80034c4:	e27f      	b.n	80039c6 <_svfprintf_r+0x726>
 80034c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80034c8:	07c9      	lsls	r1, r1, #31
 80034ca:	d400      	bmi.n	80034ce <_svfprintf_r+0x22e>
 80034cc:	e2fc      	b.n	8003ac8 <_svfprintf_r+0x828>
 80034ce:	22cf      	movs	r2, #207	; 0xcf
 80034d0:	2330      	movs	r3, #48	; 0x30
 80034d2:	446a      	add	r2, sp
 80034d4:	7013      	strb	r3, [r2, #0]
 80034d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80034d8:	9213      	str	r2, [sp, #76]	; 0x4c
 80034da:	930e      	str	r3, [sp, #56]	; 0x38
 80034dc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80034de:	910d      	str	r1, [sp, #52]	; 0x34
 80034e0:	4551      	cmp	r1, sl
 80034e2:	da01      	bge.n	80034e8 <_svfprintf_r+0x248>
 80034e4:	4653      	mov	r3, sl
 80034e6:	930d      	str	r3, [sp, #52]	; 0x34
 80034e8:	207b      	movs	r0, #123	; 0x7b
 80034ea:	4468      	add	r0, sp
 80034ec:	7803      	ldrb	r3, [r0, #0]
 80034ee:	4652      	mov	r2, sl
 80034f0:	2000      	movs	r0, #0
 80034f2:	9214      	str	r2, [sp, #80]	; 0x50
 80034f4:	9016      	str	r0, [sp, #88]	; 0x58
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <_svfprintf_r+0x260>
 80034fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034fc:	3301      	adds	r3, #1
 80034fe:	930d      	str	r3, [sp, #52]	; 0x34
 8003500:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003502:	2302      	movs	r3, #2
 8003504:	4018      	ands	r0, r3
 8003506:	9012      	str	r0, [sp, #72]	; 0x48
 8003508:	d002      	beq.n	8003510 <_svfprintf_r+0x270>
 800350a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800350c:	3102      	adds	r1, #2
 800350e:	910d      	str	r1, [sp, #52]	; 0x34
 8003510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003512:	2384      	movs	r3, #132	; 0x84
 8003514:	401a      	ands	r2, r3
 8003516:	4692      	mov	sl, r2
 8003518:	d13d      	bne.n	8003596 <_svfprintf_r+0x2f6>
 800351a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800351c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800351e:	1a1c      	subs	r4, r3, r0
 8003520:	2c00      	cmp	r4, #0
 8003522:	dd38      	ble.n	8003596 <_svfprintf_r+0x2f6>
 8003524:	2c10      	cmp	r4, #16
 8003526:	dc01      	bgt.n	800352c <_svfprintf_r+0x28c>
 8003528:	f000 fec9 	bl	80042be <_svfprintf_r+0x101e>
 800352c:	4a61      	ldr	r2, [pc, #388]	; (80036b4 <_svfprintf_r+0x414>)
 800352e:	2310      	movs	r3, #16
 8003530:	4699      	mov	r9, r3
 8003532:	46a8      	mov	r8, r5
 8003534:	1c3b      	adds	r3, r7, #0
 8003536:	1c15      	adds	r5, r2, #0
 8003538:	465f      	mov	r7, fp
 800353a:	e003      	b.n	8003544 <_svfprintf_r+0x2a4>
 800353c:	3c10      	subs	r4, #16
 800353e:	3308      	adds	r3, #8
 8003540:	2c10      	cmp	r4, #16
 8003542:	dd16      	ble.n	8003572 <_svfprintf_r+0x2d2>
 8003544:	68b2      	ldr	r2, [r6, #8]
 8003546:	4648      	mov	r0, r9
 8003548:	3210      	adds	r2, #16
 800354a:	601d      	str	r5, [r3, #0]
 800354c:	6058      	str	r0, [r3, #4]
 800354e:	60b2      	str	r2, [r6, #8]
 8003550:	6872      	ldr	r2, [r6, #4]
 8003552:	3201      	adds	r2, #1
 8003554:	6072      	str	r2, [r6, #4]
 8003556:	2a07      	cmp	r2, #7
 8003558:	ddf0      	ble.n	800353c <_svfprintf_r+0x29c>
 800355a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800355c:	1c39      	adds	r1, r7, #0
 800355e:	1c32      	adds	r2, r6, #0
 8003560:	f004 fdfa 	bl	8008158 <__ssprint_r>
 8003564:	2800      	cmp	r0, #0
 8003566:	d000      	beq.n	800356a <_svfprintf_r+0x2ca>
 8003568:	e15f      	b.n	800382a <_svfprintf_r+0x58a>
 800356a:	3c10      	subs	r4, #16
 800356c:	ab34      	add	r3, sp, #208	; 0xd0
 800356e:	2c10      	cmp	r4, #16
 8003570:	dce8      	bgt.n	8003544 <_svfprintf_r+0x2a4>
 8003572:	46bb      	mov	fp, r7
 8003574:	1c1f      	adds	r7, r3, #0
 8003576:	1c2b      	adds	r3, r5, #0
 8003578:	4645      	mov	r5, r8
 800357a:	4698      	mov	r8, r3
 800357c:	68b2      	ldr	r2, [r6, #8]
 800357e:	6873      	ldr	r3, [r6, #4]
 8003580:	607c      	str	r4, [r7, #4]
 8003582:	4641      	mov	r1, r8
 8003584:	1914      	adds	r4, r2, r4
 8003586:	3301      	adds	r3, #1
 8003588:	6039      	str	r1, [r7, #0]
 800358a:	60b4      	str	r4, [r6, #8]
 800358c:	6073      	str	r3, [r6, #4]
 800358e:	2b07      	cmp	r3, #7
 8003590:	dd00      	ble.n	8003594 <_svfprintf_r+0x2f4>
 8003592:	e2cb      	b.n	8003b2c <_svfprintf_r+0x88c>
 8003594:	3708      	adds	r7, #8
 8003596:	207b      	movs	r0, #123	; 0x7b
 8003598:	4468      	add	r0, sp
 800359a:	7803      	ldrb	r3, [r0, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00c      	beq.n	80035ba <_svfprintf_r+0x31a>
 80035a0:	2301      	movs	r3, #1
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	68b3      	ldr	r3, [r6, #8]
 80035a6:	3301      	adds	r3, #1
 80035a8:	6038      	str	r0, [r7, #0]
 80035aa:	60b3      	str	r3, [r6, #8]
 80035ac:	6873      	ldr	r3, [r6, #4]
 80035ae:	3301      	adds	r3, #1
 80035b0:	6073      	str	r3, [r6, #4]
 80035b2:	2b07      	cmp	r3, #7
 80035b4:	dd00      	ble.n	80035b8 <_svfprintf_r+0x318>
 80035b6:	e21d      	b.n	80039f4 <_svfprintf_r+0x754>
 80035b8:	3708      	adds	r7, #8
 80035ba:	9912      	ldr	r1, [sp, #72]	; 0x48
 80035bc:	2900      	cmp	r1, #0
 80035be:	d00d      	beq.n	80035dc <_svfprintf_r+0x33c>
 80035c0:	ab1f      	add	r3, sp, #124	; 0x7c
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	2302      	movs	r3, #2
 80035c6:	607b      	str	r3, [r7, #4]
 80035c8:	68b3      	ldr	r3, [r6, #8]
 80035ca:	3302      	adds	r3, #2
 80035cc:	60b3      	str	r3, [r6, #8]
 80035ce:	6873      	ldr	r3, [r6, #4]
 80035d0:	3301      	adds	r3, #1
 80035d2:	6073      	str	r3, [r6, #4]
 80035d4:	2b07      	cmp	r3, #7
 80035d6:	dd00      	ble.n	80035da <_svfprintf_r+0x33a>
 80035d8:	e215      	b.n	8003a06 <_svfprintf_r+0x766>
 80035da:	3708      	adds	r7, #8
 80035dc:	4652      	mov	r2, sl
 80035de:	2a80      	cmp	r2, #128	; 0x80
 80035e0:	d100      	bne.n	80035e4 <_svfprintf_r+0x344>
 80035e2:	e134      	b.n	800384e <_svfprintf_r+0x5ae>
 80035e4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80035e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80035e8:	1a44      	subs	r4, r0, r1
 80035ea:	2c00      	cmp	r4, #0
 80035ec:	dd3b      	ble.n	8003666 <_svfprintf_r+0x3c6>
 80035ee:	2c10      	cmp	r4, #16
 80035f0:	dc01      	bgt.n	80035f6 <_svfprintf_r+0x356>
 80035f2:	f000 fd81 	bl	80040f8 <_svfprintf_r+0xe58>
 80035f6:	4b2f      	ldr	r3, [pc, #188]	; (80036b4 <_svfprintf_r+0x414>)
 80035f8:	2010      	movs	r0, #16
 80035fa:	4698      	mov	r8, r3
 80035fc:	4682      	mov	sl, r0
 80035fe:	1c3b      	adds	r3, r7, #0
 8003600:	44c2      	add	sl, r8
 8003602:	465f      	mov	r7, fp
 8003604:	4681      	mov	r9, r0
 8003606:	46ab      	mov	fp, r5
 8003608:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800360a:	e003      	b.n	8003614 <_svfprintf_r+0x374>
 800360c:	3c10      	subs	r4, #16
 800360e:	3308      	adds	r3, #8
 8003610:	2c10      	cmp	r4, #16
 8003612:	dd17      	ble.n	8003644 <_svfprintf_r+0x3a4>
 8003614:	4652      	mov	r2, sl
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	68b2      	ldr	r2, [r6, #8]
 800361a:	4648      	mov	r0, r9
 800361c:	3210      	adds	r2, #16
 800361e:	6058      	str	r0, [r3, #4]
 8003620:	60b2      	str	r2, [r6, #8]
 8003622:	6872      	ldr	r2, [r6, #4]
 8003624:	3201      	adds	r2, #1
 8003626:	6072      	str	r2, [r6, #4]
 8003628:	2a07      	cmp	r2, #7
 800362a:	ddef      	ble.n	800360c <_svfprintf_r+0x36c>
 800362c:	1c28      	adds	r0, r5, #0
 800362e:	1c39      	adds	r1, r7, #0
 8003630:	1c32      	adds	r2, r6, #0
 8003632:	f004 fd91 	bl	8008158 <__ssprint_r>
 8003636:	2800      	cmp	r0, #0
 8003638:	d000      	beq.n	800363c <_svfprintf_r+0x39c>
 800363a:	e0f6      	b.n	800382a <_svfprintf_r+0x58a>
 800363c:	3c10      	subs	r4, #16
 800363e:	ab34      	add	r3, sp, #208	; 0xd0
 8003640:	2c10      	cmp	r4, #16
 8003642:	dce7      	bgt.n	8003614 <_svfprintf_r+0x374>
 8003644:	465d      	mov	r5, fp
 8003646:	46bb      	mov	fp, r7
 8003648:	1c1f      	adds	r7, r3, #0
 800364a:	4643      	mov	r3, r8
 800364c:	3310      	adds	r3, #16
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	68b1      	ldr	r1, [r6, #8]
 8003652:	6873      	ldr	r3, [r6, #4]
 8003654:	607c      	str	r4, [r7, #4]
 8003656:	3301      	adds	r3, #1
 8003658:	190c      	adds	r4, r1, r4
 800365a:	60b4      	str	r4, [r6, #8]
 800365c:	6073      	str	r3, [r6, #4]
 800365e:	2b07      	cmp	r3, #7
 8003660:	dd00      	ble.n	8003664 <_svfprintf_r+0x3c4>
 8003662:	e1be      	b.n	80039e2 <_svfprintf_r+0x742>
 8003664:	3708      	adds	r7, #8
 8003666:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003668:	05d2      	lsls	r2, r2, #23
 800366a:	d500      	bpl.n	800366e <_svfprintf_r+0x3ce>
 800366c:	e07e      	b.n	800376c <_svfprintf_r+0x4cc>
 800366e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003670:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003672:	68b1      	ldr	r1, [r6, #8]
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	180b      	adds	r3, r1, r0
 800367a:	60b3      	str	r3, [r6, #8]
 800367c:	6873      	ldr	r3, [r6, #4]
 800367e:	3301      	adds	r3, #1
 8003680:	6073      	str	r3, [r6, #4]
 8003682:	2b07      	cmp	r3, #7
 8003684:	dc68      	bgt.n	8003758 <_svfprintf_r+0x4b8>
 8003686:	3708      	adds	r7, #8
 8003688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800368a:	075b      	lsls	r3, r3, #29
 800368c:	d545      	bpl.n	800371a <_svfprintf_r+0x47a>
 800368e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003690:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003692:	1a44      	subs	r4, r0, r1
 8003694:	2c00      	cmp	r4, #0
 8003696:	dd40      	ble.n	800371a <_svfprintf_r+0x47a>
 8003698:	2c10      	cmp	r4, #16
 800369a:	dc01      	bgt.n	80036a0 <_svfprintf_r+0x400>
 800369c:	f000 fe3f 	bl	800431e <_svfprintf_r+0x107e>
 80036a0:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <_svfprintf_r+0x414>)
 80036a2:	2010      	movs	r0, #16
 80036a4:	46aa      	mov	sl, r5
 80036a6:	4698      	mov	r8, r3
 80036a8:	4681      	mov	r9, r0
 80036aa:	465d      	mov	r5, fp
 80036ac:	e008      	b.n	80036c0 <_svfprintf_r+0x420>
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	0800db00 	.word	0x0800db00
 80036b4:	0800dc64 	.word	0x0800dc64
 80036b8:	3c10      	subs	r4, #16
 80036ba:	3708      	adds	r7, #8
 80036bc:	2c10      	cmp	r4, #16
 80036be:	dd18      	ble.n	80036f2 <_svfprintf_r+0x452>
 80036c0:	68b3      	ldr	r3, [r6, #8]
 80036c2:	4641      	mov	r1, r8
 80036c4:	3310      	adds	r3, #16
 80036c6:	464a      	mov	r2, r9
 80036c8:	6039      	str	r1, [r7, #0]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	60b3      	str	r3, [r6, #8]
 80036ce:	6873      	ldr	r3, [r6, #4]
 80036d0:	3301      	adds	r3, #1
 80036d2:	6073      	str	r3, [r6, #4]
 80036d4:	2b07      	cmp	r3, #7
 80036d6:	ddef      	ble.n	80036b8 <_svfprintf_r+0x418>
 80036d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80036da:	1c29      	adds	r1, r5, #0
 80036dc:	1c32      	adds	r2, r6, #0
 80036de:	f004 fd3b 	bl	8008158 <__ssprint_r>
 80036e2:	2800      	cmp	r0, #0
 80036e4:	d001      	beq.n	80036ea <_svfprintf_r+0x44a>
 80036e6:	f000 fc12 	bl	8003f0e <_svfprintf_r+0xc6e>
 80036ea:	3c10      	subs	r4, #16
 80036ec:	af34      	add	r7, sp, #208	; 0xd0
 80036ee:	2c10      	cmp	r4, #16
 80036f0:	dce6      	bgt.n	80036c0 <_svfprintf_r+0x420>
 80036f2:	46ab      	mov	fp, r5
 80036f4:	4655      	mov	r5, sl
 80036f6:	4643      	mov	r3, r8
 80036f8:	c718      	stmia	r7!, {r3, r4}
 80036fa:	68b0      	ldr	r0, [r6, #8]
 80036fc:	6873      	ldr	r3, [r6, #4]
 80036fe:	1824      	adds	r4, r4, r0
 8003700:	3301      	adds	r3, #1
 8003702:	60b4      	str	r4, [r6, #8]
 8003704:	6073      	str	r3, [r6, #4]
 8003706:	2b07      	cmp	r3, #7
 8003708:	dd08      	ble.n	800371c <_svfprintf_r+0x47c>
 800370a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800370c:	4659      	mov	r1, fp
 800370e:	1c32      	adds	r2, r6, #0
 8003710:	f004 fd22 	bl	8008158 <__ssprint_r>
 8003714:	2800      	cmp	r0, #0
 8003716:	d000      	beq.n	800371a <_svfprintf_r+0x47a>
 8003718:	e153      	b.n	80039c2 <_svfprintf_r+0x722>
 800371a:	68b4      	ldr	r4, [r6, #8]
 800371c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800371e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003720:	428b      	cmp	r3, r1
 8003722:	da00      	bge.n	8003726 <_svfprintf_r+0x486>
 8003724:	1c0b      	adds	r3, r1, #0
 8003726:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003728:	18d2      	adds	r2, r2, r3
 800372a:	920f      	str	r2, [sp, #60]	; 0x3c
 800372c:	2c00      	cmp	r4, #0
 800372e:	d000      	beq.n	8003732 <_svfprintf_r+0x492>
 8003730:	e13f      	b.n	80039b2 <_svfprintf_r+0x712>
 8003732:	2300      	movs	r3, #0
 8003734:	6073      	str	r3, [r6, #4]
 8003736:	af34      	add	r7, sp, #208	; 0xd0
 8003738:	e5e7      	b.n	800330a <_svfprintf_r+0x6a>
 800373a:	465d      	mov	r5, fp
 800373c:	46bb      	mov	fp, r7
 800373e:	1c1f      	adds	r7, r3, #0
 8003740:	4643      	mov	r3, r8
 8003742:	3310      	adds	r3, #16
 8003744:	68b1      	ldr	r1, [r6, #8]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	607c      	str	r4, [r7, #4]
 800374a:	190c      	adds	r4, r1, r4
 800374c:	6873      	ldr	r3, [r6, #4]
 800374e:	3301      	adds	r3, #1
 8003750:	60b4      	str	r4, [r6, #8]
 8003752:	6073      	str	r3, [r6, #4]
 8003754:	2b07      	cmp	r3, #7
 8003756:	dd96      	ble.n	8003686 <_svfprintf_r+0x3e6>
 8003758:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800375a:	4659      	mov	r1, fp
 800375c:	1c32      	adds	r2, r6, #0
 800375e:	f004 fcfb 	bl	8008158 <__ssprint_r>
 8003762:	2800      	cmp	r0, #0
 8003764:	d000      	beq.n	8003768 <_svfprintf_r+0x4c8>
 8003766:	e12c      	b.n	80039c2 <_svfprintf_r+0x722>
 8003768:	af34      	add	r7, sp, #208	; 0xd0
 800376a:	e78d      	b.n	8003688 <_svfprintf_r+0x3e8>
 800376c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800376e:	2a65      	cmp	r2, #101	; 0x65
 8003770:	dc00      	bgt.n	8003774 <_svfprintf_r+0x4d4>
 8003772:	e0ae      	b.n	80038d2 <_svfprintf_r+0x632>
 8003774:	9818      	ldr	r0, [sp, #96]	; 0x60
 8003776:	9919      	ldr	r1, [sp, #100]	; 0x64
 8003778:	4bd0      	ldr	r3, [pc, #832]	; (8003abc <_svfprintf_r+0x81c>)
 800377a:	4acf      	ldr	r2, [pc, #828]	; (8003ab8 <_svfprintf_r+0x818>)
 800377c:	f006 e8c8 	blx	8009910 <__aeabi_dcmpeq>
 8003780:	2800      	cmp	r0, #0
 8003782:	d100      	bne.n	8003786 <_svfprintf_r+0x4e6>
 8003784:	e148      	b.n	8003a18 <_svfprintf_r+0x778>
 8003786:	4bce      	ldr	r3, [pc, #824]	; (8003ac0 <_svfprintf_r+0x820>)
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	2301      	movs	r3, #1
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	68b3      	ldr	r3, [r6, #8]
 8003790:	3301      	adds	r3, #1
 8003792:	60b3      	str	r3, [r6, #8]
 8003794:	6873      	ldr	r3, [r6, #4]
 8003796:	3301      	adds	r3, #1
 8003798:	6073      	str	r3, [r6, #4]
 800379a:	2b07      	cmp	r3, #7
 800379c:	dd00      	ble.n	80037a0 <_svfprintf_r+0x500>
 800379e:	e339      	b.n	8003e14 <_svfprintf_r+0xb74>
 80037a0:	3708      	adds	r7, #8
 80037a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80037a4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80037a6:	4283      	cmp	r3, r0
 80037a8:	db03      	blt.n	80037b2 <_svfprintf_r+0x512>
 80037aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80037ac:	07c9      	lsls	r1, r1, #31
 80037ae:	d400      	bmi.n	80037b2 <_svfprintf_r+0x512>
 80037b0:	e76a      	b.n	8003688 <_svfprintf_r+0x3e8>
 80037b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80037b4:	68b1      	ldr	r1, [r6, #8]
 80037b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80037b8:	607b      	str	r3, [r7, #4]
 80037ba:	185b      	adds	r3, r3, r1
 80037bc:	603a      	str	r2, [r7, #0]
 80037be:	60b3      	str	r3, [r6, #8]
 80037c0:	6873      	ldr	r3, [r6, #4]
 80037c2:	3301      	adds	r3, #1
 80037c4:	6073      	str	r3, [r6, #4]
 80037c6:	2b07      	cmp	r3, #7
 80037c8:	dd01      	ble.n	80037ce <_svfprintf_r+0x52e>
 80037ca:	f000 fd20 	bl	800420e <_svfprintf_r+0xf6e>
 80037ce:	3708      	adds	r7, #8
 80037d0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80037d2:	3c01      	subs	r4, #1
 80037d4:	2c00      	cmp	r4, #0
 80037d6:	dc00      	bgt.n	80037da <_svfprintf_r+0x53a>
 80037d8:	e756      	b.n	8003688 <_svfprintf_r+0x3e8>
 80037da:	2c10      	cmp	r4, #16
 80037dc:	dc01      	bgt.n	80037e2 <_svfprintf_r+0x542>
 80037de:	f000 fed4 	bl	800458a <_svfprintf_r+0x12ea>
 80037e2:	4bb8      	ldr	r3, [pc, #736]	; (8003ac4 <_svfprintf_r+0x824>)
 80037e4:	2010      	movs	r0, #16
 80037e6:	4698      	mov	r8, r3
 80037e8:	4682      	mov	sl, r0
 80037ea:	1c3b      	adds	r3, r7, #0
 80037ec:	44c2      	add	sl, r8
 80037ee:	465f      	mov	r7, fp
 80037f0:	4681      	mov	r9, r0
 80037f2:	46ab      	mov	fp, r5
 80037f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80037f6:	e003      	b.n	8003800 <_svfprintf_r+0x560>
 80037f8:	3308      	adds	r3, #8
 80037fa:	3c10      	subs	r4, #16
 80037fc:	2c10      	cmp	r4, #16
 80037fe:	dd9c      	ble.n	800373a <_svfprintf_r+0x49a>
 8003800:	4652      	mov	r2, sl
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	68b2      	ldr	r2, [r6, #8]
 8003806:	4648      	mov	r0, r9
 8003808:	3210      	adds	r2, #16
 800380a:	6058      	str	r0, [r3, #4]
 800380c:	60b2      	str	r2, [r6, #8]
 800380e:	6872      	ldr	r2, [r6, #4]
 8003810:	3201      	adds	r2, #1
 8003812:	6072      	str	r2, [r6, #4]
 8003814:	2a07      	cmp	r2, #7
 8003816:	ddef      	ble.n	80037f8 <_svfprintf_r+0x558>
 8003818:	1c28      	adds	r0, r5, #0
 800381a:	1c39      	adds	r1, r7, #0
 800381c:	1c32      	adds	r2, r6, #0
 800381e:	f004 fc9b 	bl	8008158 <__ssprint_r>
 8003822:	2800      	cmp	r0, #0
 8003824:	d101      	bne.n	800382a <_svfprintf_r+0x58a>
 8003826:	ab34      	add	r3, sp, #208	; 0xd0
 8003828:	e7e7      	b.n	80037fa <_svfprintf_r+0x55a>
 800382a:	46b9      	mov	r9, r7
 800382c:	4648      	mov	r0, r9
 800382e:	8983      	ldrh	r3, [r0, #12]
 8003830:	0659      	lsls	r1, r3, #25
 8003832:	d502      	bpl.n	800383a <_svfprintf_r+0x59a>
 8003834:	2301      	movs	r3, #1
 8003836:	425b      	negs	r3, r3
 8003838:	930f      	str	r3, [sp, #60]	; 0x3c
 800383a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800383c:	b045      	add	sp, #276	; 0x114
 800383e:	bc3c      	pop	{r2, r3, r4, r5}
 8003840:	4690      	mov	r8, r2
 8003842:	4699      	mov	r9, r3
 8003844:	46a2      	mov	sl, r4
 8003846:	46ab      	mov	fp, r5
 8003848:	bcf0      	pop	{r4, r5, r6, r7}
 800384a:	bc02      	pop	{r1}
 800384c:	4708      	bx	r1
 800384e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003850:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003852:	1a1c      	subs	r4, r3, r0
 8003854:	2c00      	cmp	r4, #0
 8003856:	dc00      	bgt.n	800385a <_svfprintf_r+0x5ba>
 8003858:	e6c4      	b.n	80035e4 <_svfprintf_r+0x344>
 800385a:	2c10      	cmp	r4, #16
 800385c:	dc01      	bgt.n	8003862 <_svfprintf_r+0x5c2>
 800385e:	f000 fe07 	bl	8004470 <_svfprintf_r+0x11d0>
 8003862:	4a98      	ldr	r2, [pc, #608]	; (8003ac4 <_svfprintf_r+0x824>)
 8003864:	2310      	movs	r3, #16
 8003866:	469a      	mov	sl, r3
 8003868:	4690      	mov	r8, r2
 800386a:	4699      	mov	r9, r3
 800386c:	44c2      	add	sl, r8
 800386e:	1c3b      	adds	r3, r7, #0
 8003870:	465f      	mov	r7, fp
 8003872:	46ab      	mov	fp, r5
 8003874:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003876:	e003      	b.n	8003880 <_svfprintf_r+0x5e0>
 8003878:	3c10      	subs	r4, #16
 800387a:	3308      	adds	r3, #8
 800387c:	2c10      	cmp	r4, #16
 800387e:	dd16      	ble.n	80038ae <_svfprintf_r+0x60e>
 8003880:	464a      	mov	r2, r9
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	68b2      	ldr	r2, [r6, #8]
 8003886:	4651      	mov	r1, sl
 8003888:	3210      	adds	r2, #16
 800388a:	6019      	str	r1, [r3, #0]
 800388c:	60b2      	str	r2, [r6, #8]
 800388e:	6872      	ldr	r2, [r6, #4]
 8003890:	3201      	adds	r2, #1
 8003892:	6072      	str	r2, [r6, #4]
 8003894:	2a07      	cmp	r2, #7
 8003896:	ddef      	ble.n	8003878 <_svfprintf_r+0x5d8>
 8003898:	1c28      	adds	r0, r5, #0
 800389a:	1c39      	adds	r1, r7, #0
 800389c:	1c32      	adds	r2, r6, #0
 800389e:	f004 fc5b 	bl	8008158 <__ssprint_r>
 80038a2:	2800      	cmp	r0, #0
 80038a4:	d1c1      	bne.n	800382a <_svfprintf_r+0x58a>
 80038a6:	3c10      	subs	r4, #16
 80038a8:	ab34      	add	r3, sp, #208	; 0xd0
 80038aa:	2c10      	cmp	r4, #16
 80038ac:	dce8      	bgt.n	8003880 <_svfprintf_r+0x5e0>
 80038ae:	465d      	mov	r5, fp
 80038b0:	46bb      	mov	fp, r7
 80038b2:	1c1f      	adds	r7, r3, #0
 80038b4:	4643      	mov	r3, r8
 80038b6:	3310      	adds	r3, #16
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	68b3      	ldr	r3, [r6, #8]
 80038bc:	607c      	str	r4, [r7, #4]
 80038be:	191c      	adds	r4, r3, r4
 80038c0:	6873      	ldr	r3, [r6, #4]
 80038c2:	3301      	adds	r3, #1
 80038c4:	60b4      	str	r4, [r6, #8]
 80038c6:	6073      	str	r3, [r6, #4]
 80038c8:	2b07      	cmp	r3, #7
 80038ca:	dd00      	ble.n	80038ce <_svfprintf_r+0x62e>
 80038cc:	e3c6      	b.n	800405c <_svfprintf_r+0xdbc>
 80038ce:	3708      	adds	r7, #8
 80038d0:	e688      	b.n	80035e4 <_svfprintf_r+0x344>
 80038d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	dc00      	bgt.n	80038da <_svfprintf_r+0x63a>
 80038d8:	e3a1      	b.n	800401e <_svfprintf_r+0xd7e>
 80038da:	2301      	movs	r3, #1
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	68b3      	ldr	r3, [r6, #8]
 80038e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80038e2:	3301      	adds	r3, #1
 80038e4:	6039      	str	r1, [r7, #0]
 80038e6:	60b3      	str	r3, [r6, #8]
 80038e8:	6873      	ldr	r3, [r6, #4]
 80038ea:	3301      	adds	r3, #1
 80038ec:	6073      	str	r3, [r6, #4]
 80038ee:	2b07      	cmp	r3, #7
 80038f0:	dd00      	ble.n	80038f4 <_svfprintf_r+0x654>
 80038f2:	e3a9      	b.n	8004048 <_svfprintf_r+0xda8>
 80038f4:	3708      	adds	r7, #8
 80038f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80038f8:	68b1      	ldr	r1, [r6, #8]
 80038fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	185b      	adds	r3, r3, r1
 8003900:	603a      	str	r2, [r7, #0]
 8003902:	60b3      	str	r3, [r6, #8]
 8003904:	6873      	ldr	r3, [r6, #4]
 8003906:	3301      	adds	r3, #1
 8003908:	6073      	str	r3, [r6, #4]
 800390a:	2b07      	cmp	r3, #7
 800390c:	dd00      	ble.n	8003910 <_svfprintf_r+0x670>
 800390e:	e391      	b.n	8004034 <_svfprintf_r+0xd94>
 8003910:	3708      	adds	r7, #8
 8003912:	9818      	ldr	r0, [sp, #96]	; 0x60
 8003914:	9919      	ldr	r1, [sp, #100]	; 0x64
 8003916:	4b69      	ldr	r3, [pc, #420]	; (8003abc <_svfprintf_r+0x81c>)
 8003918:	4a67      	ldr	r2, [pc, #412]	; (8003ab8 <_svfprintf_r+0x818>)
 800391a:	f005 effa 	blx	8009910 <__aeabi_dcmpeq>
 800391e:	2800      	cmp	r0, #0
 8003920:	d100      	bne.n	8003924 <_svfprintf_r+0x684>
 8003922:	e10d      	b.n	8003b40 <_svfprintf_r+0x8a0>
 8003924:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8003926:	3c01      	subs	r4, #1
 8003928:	2c00      	cmp	r4, #0
 800392a:	dd3b      	ble.n	80039a4 <_svfprintf_r+0x704>
 800392c:	2c10      	cmp	r4, #16
 800392e:	dc01      	bgt.n	8003934 <_svfprintf_r+0x694>
 8003930:	f000 fe1e 	bl	8004570 <_svfprintf_r+0x12d0>
 8003934:	4863      	ldr	r0, [pc, #396]	; (8003ac4 <_svfprintf_r+0x824>)
 8003936:	2110      	movs	r1, #16
 8003938:	4680      	mov	r8, r0
 800393a:	468a      	mov	sl, r1
 800393c:	1c3b      	adds	r3, r7, #0
 800393e:	44c2      	add	sl, r8
 8003940:	465f      	mov	r7, fp
 8003942:	4689      	mov	r9, r1
 8003944:	46ab      	mov	fp, r5
 8003946:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003948:	e003      	b.n	8003952 <_svfprintf_r+0x6b2>
 800394a:	3c10      	subs	r4, #16
 800394c:	3308      	adds	r3, #8
 800394e:	2c10      	cmp	r4, #16
 8003950:	dd17      	ble.n	8003982 <_svfprintf_r+0x6e2>
 8003952:	68b2      	ldr	r2, [r6, #8]
 8003954:	4650      	mov	r0, sl
 8003956:	3210      	adds	r2, #16
 8003958:	4649      	mov	r1, r9
 800395a:	6018      	str	r0, [r3, #0]
 800395c:	6059      	str	r1, [r3, #4]
 800395e:	60b2      	str	r2, [r6, #8]
 8003960:	6872      	ldr	r2, [r6, #4]
 8003962:	3201      	adds	r2, #1
 8003964:	6072      	str	r2, [r6, #4]
 8003966:	2a07      	cmp	r2, #7
 8003968:	ddef      	ble.n	800394a <_svfprintf_r+0x6aa>
 800396a:	1c28      	adds	r0, r5, #0
 800396c:	1c39      	adds	r1, r7, #0
 800396e:	1c32      	adds	r2, r6, #0
 8003970:	f004 fbf2 	bl	8008158 <__ssprint_r>
 8003974:	2800      	cmp	r0, #0
 8003976:	d000      	beq.n	800397a <_svfprintf_r+0x6da>
 8003978:	e757      	b.n	800382a <_svfprintf_r+0x58a>
 800397a:	3c10      	subs	r4, #16
 800397c:	ab34      	add	r3, sp, #208	; 0xd0
 800397e:	2c10      	cmp	r4, #16
 8003980:	dce7      	bgt.n	8003952 <_svfprintf_r+0x6b2>
 8003982:	465d      	mov	r5, fp
 8003984:	46bb      	mov	fp, r7
 8003986:	1c1f      	adds	r7, r3, #0
 8003988:	4643      	mov	r3, r8
 800398a:	3310      	adds	r3, #16
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	68b2      	ldr	r2, [r6, #8]
 8003990:	6873      	ldr	r3, [r6, #4]
 8003992:	607c      	str	r4, [r7, #4]
 8003994:	3301      	adds	r3, #1
 8003996:	1914      	adds	r4, r2, r4
 8003998:	60b4      	str	r4, [r6, #8]
 800399a:	6073      	str	r3, [r6, #4]
 800399c:	2b07      	cmp	r3, #7
 800399e:	dd00      	ble.n	80039a2 <_svfprintf_r+0x702>
 80039a0:	e0dd      	b.n	8003b5e <_svfprintf_r+0x8be>
 80039a2:	3708      	adds	r7, #8
 80039a4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80039a6:	68b2      	ldr	r2, [r6, #8]
 80039a8:	ab23      	add	r3, sp, #140	; 0x8c
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	6079      	str	r1, [r7, #4]
 80039ae:	1853      	adds	r3, r2, r1
 80039b0:	e663      	b.n	800367a <_svfprintf_r+0x3da>
 80039b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80039b4:	4659      	mov	r1, fp
 80039b6:	1c32      	adds	r2, r6, #0
 80039b8:	f004 fbce 	bl	8008158 <__ssprint_r>
 80039bc:	2800      	cmp	r0, #0
 80039be:	d100      	bne.n	80039c2 <_svfprintf_r+0x722>
 80039c0:	e6b7      	b.n	8003732 <_svfprintf_r+0x492>
 80039c2:	46d9      	mov	r9, fp
 80039c4:	e732      	b.n	800382c <_svfprintf_r+0x58c>
 80039c6:	2100      	movs	r1, #0
 80039c8:	aa34      	add	r2, sp, #208	; 0xd0
 80039ca:	910e      	str	r1, [sp, #56]	; 0x38
 80039cc:	9213      	str	r2, [sp, #76]	; 0x4c
 80039ce:	e585      	b.n	80034dc <_svfprintf_r+0x23c>
 80039d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80039d2:	4659      	mov	r1, fp
 80039d4:	1c32      	adds	r2, r6, #0
 80039d6:	f004 fbbf 	bl	8008158 <__ssprint_r>
 80039da:	2800      	cmp	r0, #0
 80039dc:	d1f1      	bne.n	80039c2 <_svfprintf_r+0x722>
 80039de:	af34      	add	r7, sp, #208	; 0xd0
 80039e0:	e4b0      	b.n	8003344 <_svfprintf_r+0xa4>
 80039e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80039e4:	4659      	mov	r1, fp
 80039e6:	1c32      	adds	r2, r6, #0
 80039e8:	f004 fbb6 	bl	8008158 <__ssprint_r>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d1e8      	bne.n	80039c2 <_svfprintf_r+0x722>
 80039f0:	af34      	add	r7, sp, #208	; 0xd0
 80039f2:	e638      	b.n	8003666 <_svfprintf_r+0x3c6>
 80039f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80039f6:	4659      	mov	r1, fp
 80039f8:	1c32      	adds	r2, r6, #0
 80039fa:	f004 fbad 	bl	8008158 <__ssprint_r>
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d1df      	bne.n	80039c2 <_svfprintf_r+0x722>
 8003a02:	af34      	add	r7, sp, #208	; 0xd0
 8003a04:	e5d9      	b.n	80035ba <_svfprintf_r+0x31a>
 8003a06:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003a08:	4659      	mov	r1, fp
 8003a0a:	1c32      	adds	r2, r6, #0
 8003a0c:	f004 fba4 	bl	8008158 <__ssprint_r>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d1d6      	bne.n	80039c2 <_svfprintf_r+0x722>
 8003a14:	af34      	add	r7, sp, #208	; 0xd0
 8003a16:	e5e1      	b.n	80035dc <_svfprintf_r+0x33c>
 8003a18:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8003a1a:	2c00      	cmp	r4, #0
 8003a1c:	dc00      	bgt.n	8003a20 <_svfprintf_r+0x780>
 8003a1e:	e203      	b.n	8003e28 <_svfprintf_r+0xb88>
 8003a20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003a22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003a24:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003a26:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003a28:	18d2      	adds	r2, r2, r3
 8003a2a:	920c      	str	r2, [sp, #48]	; 0x30
 8003a2c:	1a14      	subs	r4, r2, r0
 8003a2e:	428c      	cmp	r4, r1
 8003a30:	dd00      	ble.n	8003a34 <_svfprintf_r+0x794>
 8003a32:	1c0c      	adds	r4, r1, #0
 8003a34:	2c00      	cmp	r4, #0
 8003a36:	dd0d      	ble.n	8003a54 <_svfprintf_r+0x7b4>
 8003a38:	68b0      	ldr	r0, [r6, #8]
 8003a3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003a3c:	1903      	adds	r3, r0, r4
 8003a3e:	603a      	str	r2, [r7, #0]
 8003a40:	607c      	str	r4, [r7, #4]
 8003a42:	60b3      	str	r3, [r6, #8]
 8003a44:	6873      	ldr	r3, [r6, #4]
 8003a46:	3301      	adds	r3, #1
 8003a48:	6073      	str	r3, [r6, #4]
 8003a4a:	2b07      	cmp	r3, #7
 8003a4c:	dd01      	ble.n	8003a52 <_svfprintf_r+0x7b2>
 8003a4e:	f000 fc3a 	bl	80042c6 <_svfprintf_r+0x1026>
 8003a52:	3708      	adds	r7, #8
 8003a54:	43e3      	mvns	r3, r4
 8003a56:	17db      	asrs	r3, r3, #31
 8003a58:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003a5a:	401c      	ands	r4, r3
 8003a5c:	1b0c      	subs	r4, r1, r4
 8003a5e:	2c00      	cmp	r4, #0
 8003a60:	dc00      	bgt.n	8003a64 <_svfprintf_r+0x7c4>
 8003a62:	e278      	b.n	8003f56 <_svfprintf_r+0xcb6>
 8003a64:	2c10      	cmp	r4, #16
 8003a66:	dc01      	bgt.n	8003a6c <_svfprintf_r+0x7cc>
 8003a68:	f000 fd93 	bl	8004592 <_svfprintf_r+0x12f2>
 8003a6c:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <_svfprintf_r+0x824>)
 8003a6e:	2010      	movs	r0, #16
 8003a70:	4698      	mov	r8, r3
 8003a72:	4682      	mov	sl, r0
 8003a74:	1c3b      	adds	r3, r7, #0
 8003a76:	44c2      	add	sl, r8
 8003a78:	465f      	mov	r7, fp
 8003a7a:	4681      	mov	r9, r0
 8003a7c:	46ab      	mov	fp, r5
 8003a7e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003a80:	e004      	b.n	8003a8c <_svfprintf_r+0x7ec>
 8003a82:	3308      	adds	r3, #8
 8003a84:	3c10      	subs	r4, #16
 8003a86:	2c10      	cmp	r4, #16
 8003a88:	dc00      	bgt.n	8003a8c <_svfprintf_r+0x7ec>
 8003a8a:	e253      	b.n	8003f34 <_svfprintf_r+0xc94>
 8003a8c:	4652      	mov	r2, sl
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	68b2      	ldr	r2, [r6, #8]
 8003a92:	4648      	mov	r0, r9
 8003a94:	3210      	adds	r2, #16
 8003a96:	6058      	str	r0, [r3, #4]
 8003a98:	60b2      	str	r2, [r6, #8]
 8003a9a:	6872      	ldr	r2, [r6, #4]
 8003a9c:	3201      	adds	r2, #1
 8003a9e:	6072      	str	r2, [r6, #4]
 8003aa0:	2a07      	cmp	r2, #7
 8003aa2:	ddee      	ble.n	8003a82 <_svfprintf_r+0x7e2>
 8003aa4:	1c28      	adds	r0, r5, #0
 8003aa6:	1c39      	adds	r1, r7, #0
 8003aa8:	1c32      	adds	r2, r6, #0
 8003aaa:	f004 fb55 	bl	8008158 <__ssprint_r>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d000      	beq.n	8003ab4 <_svfprintf_r+0x814>
 8003ab2:	e6ba      	b.n	800382a <_svfprintf_r+0x58a>
 8003ab4:	ab34      	add	r3, sp, #208	; 0xd0
 8003ab6:	e7e5      	b.n	8003a84 <_svfprintf_r+0x7e4>
	...
 8003ac0:	0800dcc4 	.word	0x0800dcc4
 8003ac4:	0800dc64 	.word	0x0800dc64
 8003ac8:	2300      	movs	r3, #0
 8003aca:	a834      	add	r0, sp, #208	; 0xd0
 8003acc:	930e      	str	r3, [sp, #56]	; 0x38
 8003ace:	9013      	str	r0, [sp, #76]	; 0x4c
 8003ad0:	e504      	b.n	80034dc <_svfprintf_r+0x23c>
 8003ad2:	466b      	mov	r3, sp
 8003ad4:	981c      	ldr	r0, [sp, #112]	; 0x70
 8003ad6:	33cf      	adds	r3, #207	; 0xcf
 8003ad8:	220f      	movs	r2, #15
 8003ada:	1c19      	adds	r1, r3, #0
 8003adc:	1c13      	adds	r3, r2, #0
 8003ade:	4023      	ands	r3, r4
 8003ae0:	5cc3      	ldrb	r3, [r0, r3]
 8003ae2:	0924      	lsrs	r4, r4, #4
 8003ae4:	700b      	strb	r3, [r1, #0]
 8003ae6:	1e4b      	subs	r3, r1, #1
 8003ae8:	2c00      	cmp	r4, #0
 8003aea:	d1f6      	bne.n	8003ada <_svfprintf_r+0x83a>
 8003aec:	9808      	ldr	r0, [sp, #32]
 8003aee:	1a40      	subs	r0, r0, r1
 8003af0:	9113      	str	r1, [sp, #76]	; 0x4c
 8003af2:	900e      	str	r0, [sp, #56]	; 0x38
 8003af4:	e4f2      	b.n	80034dc <_svfprintf_r+0x23c>
 8003af6:	2c09      	cmp	r4, #9
 8003af8:	d962      	bls.n	8003bc0 <_svfprintf_r+0x920>
 8003afa:	466b      	mov	r3, sp
 8003afc:	33cf      	adds	r3, #207	; 0xcf
 8003afe:	46a8      	mov	r8, r5
 8003b00:	1c20      	adds	r0, r4, #0
 8003b02:	210a      	movs	r1, #10
 8003b04:	1c1d      	adds	r5, r3, #0
 8003b06:	f005 e988 	blx	8008e18 <__aeabi_uidivmod>
 8003b0a:	3130      	adds	r1, #48	; 0x30
 8003b0c:	7029      	strb	r1, [r5, #0]
 8003b0e:	1c20      	adds	r0, r4, #0
 8003b10:	210a      	movs	r1, #10
 8003b12:	f005 e904 	blx	8008d1c <__aeabi_uidiv>
 8003b16:	1e6b      	subs	r3, r5, #1
 8003b18:	1c04      	adds	r4, r0, #0
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	d1f0      	bne.n	8003b00 <_svfprintf_r+0x860>
 8003b1e:	9513      	str	r5, [sp, #76]	; 0x4c
 8003b20:	9a08      	ldr	r2, [sp, #32]
 8003b22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003b24:	1ad2      	subs	r2, r2, r3
 8003b26:	4645      	mov	r5, r8
 8003b28:	920e      	str	r2, [sp, #56]	; 0x38
 8003b2a:	e4d7      	b.n	80034dc <_svfprintf_r+0x23c>
 8003b2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003b2e:	4659      	mov	r1, fp
 8003b30:	1c32      	adds	r2, r6, #0
 8003b32:	f004 fb11 	bl	8008158 <__ssprint_r>
 8003b36:	2800      	cmp	r0, #0
 8003b38:	d000      	beq.n	8003b3c <_svfprintf_r+0x89c>
 8003b3a:	e742      	b.n	80039c2 <_svfprintf_r+0x722>
 8003b3c:	af34      	add	r7, sp, #208	; 0xd0
 8003b3e:	e52a      	b.n	8003596 <_svfprintf_r+0x2f6>
 8003b40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003b42:	3301      	adds	r3, #1
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003b48:	68b2      	ldr	r2, [r6, #8]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	189b      	adds	r3, r3, r2
 8003b50:	60b3      	str	r3, [r6, #8]
 8003b52:	6873      	ldr	r3, [r6, #4]
 8003b54:	3301      	adds	r3, #1
 8003b56:	6073      	str	r3, [r6, #4]
 8003b58:	2b07      	cmp	r3, #7
 8003b5a:	dc00      	bgt.n	8003b5e <_svfprintf_r+0x8be>
 8003b5c:	e721      	b.n	80039a2 <_svfprintf_r+0x702>
 8003b5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003b60:	4659      	mov	r1, fp
 8003b62:	1c32      	adds	r2, r6, #0
 8003b64:	f004 faf8 	bl	8008158 <__ssprint_r>
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	d000      	beq.n	8003b6e <_svfprintf_r+0x8ce>
 8003b6c:	e729      	b.n	80039c2 <_svfprintf_r+0x722>
 8003b6e:	af34      	add	r7, sp, #208	; 0xd0
 8003b70:	e718      	b.n	80039a4 <_svfprintf_r+0x704>
 8003b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b74:	065b      	lsls	r3, r3, #25
 8003b76:	d400      	bmi.n	8003b7a <_svfprintf_r+0x8da>
 8003b78:	e485      	b.n	8003486 <_svfprintf_r+0x1e6>
 8003b7a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003b7c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003b7e:	3104      	adds	r1, #4
 8003b80:	2400      	movs	r4, #0
 8003b82:	5f04      	ldrsh	r4, [r0, r4]
 8003b84:	9110      	str	r1, [sp, #64]	; 0x40
 8003b86:	e482      	b.n	800348e <_svfprintf_r+0x1ee>
 8003b88:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003b8a:	0649      	lsls	r1, r1, #25
 8003b8c:	d400      	bmi.n	8003b90 <_svfprintf_r+0x8f0>
 8003b8e:	e41e      	b.n	80033ce <_svfprintf_r+0x12e>
 8003b90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b92:	8814      	ldrh	r4, [r2, #0]
 8003b94:	3204      	adds	r2, #4
 8003b96:	1c21      	adds	r1, r4, #0
 8003b98:	1e4b      	subs	r3, r1, #1
 8003b9a:	4199      	sbcs	r1, r3
 8003b9c:	9210      	str	r2, [sp, #64]	; 0x40
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f7ff fc1e 	bl	80033e0 <_svfprintf_r+0x140>
 8003ba4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003ba6:	6804      	ldr	r4, [r0, #0]
 8003ba8:	3004      	adds	r0, #4
 8003baa:	1c21      	adds	r1, r4, #0
 8003bac:	1e4b      	subs	r3, r1, #1
 8003bae:	4199      	sbcs	r1, r3
 8003bb0:	9010      	str	r0, [sp, #64]	; 0x40
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f7ff fc14 	bl	80033e0 <_svfprintf_r+0x140>
 8003bb8:	9a08      	ldr	r2, [sp, #32]
 8003bba:	1a51      	subs	r1, r2, r1
 8003bbc:	910e      	str	r1, [sp, #56]	; 0x38
 8003bbe:	e48d      	b.n	80034dc <_svfprintf_r+0x23c>
 8003bc0:	23cf      	movs	r3, #207	; 0xcf
 8003bc2:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003bc4:	446b      	add	r3, sp
 8003bc6:	3430      	adds	r4, #48	; 0x30
 8003bc8:	701c      	strb	r4, [r3, #0]
 8003bca:	900e      	str	r0, [sp, #56]	; 0x38
 8003bcc:	9313      	str	r3, [sp, #76]	; 0x4c
 8003bce:	e485      	b.n	80034dc <_svfprintf_r+0x23c>
 8003bd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003bd2:	2207      	movs	r2, #7
 8003bd4:	3307      	adds	r3, #7
 8003bd6:	4393      	bics	r3, r2
 8003bd8:	1c1a      	adds	r2, r3, #0
 8003bda:	3208      	adds	r2, #8
 8003bdc:	9210      	str	r2, [sp, #64]	; 0x40
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	6859      	ldr	r1, [r3, #4]
 8003be2:	1c02      	adds	r2, r0, #0
 8003be4:	1c0b      	adds	r3, r1, #0
 8003be6:	4681      	mov	r9, r0
 8003be8:	4688      	mov	r8, r1
 8003bea:	9218      	str	r2, [sp, #96]	; 0x60
 8003bec:	9319      	str	r3, [sp, #100]	; 0x64
 8003bee:	f7fd fc25 	bl	800143c <__fpclassifyd>
 8003bf2:	2801      	cmp	r0, #1
 8003bf4:	d000      	beq.n	8003bf8 <_svfprintf_r+0x958>
 8003bf6:	e247      	b.n	8004088 <_svfprintf_r+0xde8>
 8003bf8:	4648      	mov	r0, r9
 8003bfa:	4641      	mov	r1, r8
 8003bfc:	4bc7      	ldr	r3, [pc, #796]	; (8003f1c <_svfprintf_r+0xc7c>)
 8003bfe:	4ac6      	ldr	r2, [pc, #792]	; (8003f18 <_svfprintf_r+0xc78>)
 8003c00:	f005 ee92 	blx	8009928 <__aeabi_dcmplt>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d001      	beq.n	8003c0c <_svfprintf_r+0x96c>
 8003c08:	f000 fc2c 	bl	8004464 <_svfprintf_r+0x11c4>
 8003c0c:	227b      	movs	r2, #123	; 0x7b
 8003c0e:	446a      	add	r2, sp
 8003c10:	7813      	ldrb	r3, [r2, #0]
 8003c12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c14:	2947      	cmp	r1, #71	; 0x47
 8003c16:	dd00      	ble.n	8003c1a <_svfprintf_r+0x97a>
 8003c18:	e305      	b.n	8004226 <_svfprintf_r+0xf86>
 8003c1a:	4ac1      	ldr	r2, [pc, #772]	; (8003f20 <_svfprintf_r+0xc80>)
 8003c1c:	9213      	str	r2, [sp, #76]	; 0x4c
 8003c1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003c20:	2280      	movs	r2, #128	; 0x80
 8003c22:	4391      	bics	r1, r2
 8003c24:	2203      	movs	r2, #3
 8003c26:	910a      	str	r1, [sp, #40]	; 0x28
 8003c28:	920d      	str	r2, [sp, #52]	; 0x34
 8003c2a:	2003      	movs	r0, #3
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	2200      	movs	r2, #0
 8003c30:	900e      	str	r0, [sp, #56]	; 0x38
 8003c32:	9114      	str	r1, [sp, #80]	; 0x50
 8003c34:	9216      	str	r2, [sp, #88]	; 0x58
 8003c36:	e45e      	b.n	80034f6 <_svfprintf_r+0x256>
 8003c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c3a:	4662      	mov	r2, ip
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	930a      	str	r3, [sp, #40]	; 0x28
 8003c40:	f7ff fb9e 	bl	8003380 <_svfprintf_r+0xe0>
 8003c44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c46:	9709      	str	r7, [sp, #36]	; 0x24
 8003c48:	2200      	movs	r2, #0
 8003c4a:	3b30      	subs	r3, #48	; 0x30
 8003c4c:	0097      	lsls	r7, r2, #2
 8003c4e:	18ba      	adds	r2, r7, r2
 8003c50:	782f      	ldrb	r7, [r5, #0]
 8003c52:	0052      	lsls	r2, r2, #1
 8003c54:	18d2      	adds	r2, r2, r3
 8003c56:	1c3b      	adds	r3, r7, #0
 8003c58:	3b30      	subs	r3, #48	; 0x30
 8003c5a:	3501      	adds	r5, #1
 8003c5c:	2b09      	cmp	r3, #9
 8003c5e:	d9f5      	bls.n	8003c4c <_svfprintf_r+0x9ac>
 8003c60:	970c      	str	r7, [sp, #48]	; 0x30
 8003c62:	9211      	str	r2, [sp, #68]	; 0x44
 8003c64:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003c66:	f7ff fb8e 	bl	8003386 <_svfprintf_r+0xe6>
 8003c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	930a      	str	r3, [sp, #40]	; 0x28
 8003c72:	f7ff fb85 	bl	8003380 <_svfprintf_r+0xe0>
 8003c76:	4aab      	ldr	r2, [pc, #684]	; (8003f24 <_svfprintf_r+0xc84>)
 8003c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c7a:	921c      	str	r2, [sp, #112]	; 0x70
 8003c7c:	06db      	lsls	r3, r3, #27
 8003c7e:	d400      	bmi.n	8003c82 <_svfprintf_r+0x9e2>
 8003c80:	e08e      	b.n	8003da0 <_svfprintf_r+0xb00>
 8003c82:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003c84:	6804      	ldr	r4, [r0, #0]
 8003c86:	3004      	adds	r0, #4
 8003c88:	9010      	str	r0, [sp, #64]	; 0x40
 8003c8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003c8c:	07c0      	lsls	r0, r0, #31
 8003c8e:	d500      	bpl.n	8003c92 <_svfprintf_r+0x9f2>
 8003c90:	e125      	b.n	8003ede <_svfprintf_r+0xc3e>
 8003c92:	1c21      	adds	r1, r4, #0
 8003c94:	1e4b      	subs	r3, r1, #1
 8003c96:	4199      	sbcs	r1, r3
 8003c98:	2302      	movs	r3, #2
 8003c9a:	f7ff fba1 	bl	80033e0 <_svfprintf_r+0x140>
 8003c9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003ca0:	1c13      	adds	r3, r2, #0
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	9310      	str	r3, [sp, #64]	; 0x40
 8003ca8:	ab2a      	add	r3, sp, #168	; 0xa8
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	f7ff fb76 	bl	800339c <_svfprintf_r+0xfc>
 8003cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cb2:	06db      	lsls	r3, r3, #27
 8003cb4:	d500      	bpl.n	8003cb8 <_svfprintf_r+0xa18>
 8003cb6:	e122      	b.n	8003efe <_svfprintf_r+0xc5e>
 8003cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cba:	0652      	lsls	r2, r2, #25
 8003cbc:	d400      	bmi.n	8003cc0 <_svfprintf_r+0xa20>
 8003cbe:	e11e      	b.n	8003efe <_svfprintf_r+0xc5e>
 8003cc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003cc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003cc4:	4668      	mov	r0, sp
 8003cc6:	213c      	movs	r1, #60	; 0x3c
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	5a09      	ldrh	r1, [r1, r0]
 8003ccc:	3204      	adds	r2, #4
 8003cce:	9306      	str	r3, [sp, #24]
 8003cd0:	8019      	strh	r1, [r3, #0]
 8003cd2:	9210      	str	r2, [sp, #64]	; 0x40
 8003cd4:	f7ff fb19 	bl	800330a <_svfprintf_r+0x6a>
 8003cd8:	227b      	movs	r2, #123	; 0x7b
 8003cda:	446a      	add	r2, sp
 8003cdc:	7813      	ldrb	r3, [r2, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <_svfprintf_r+0xa46>
 8003ce2:	f7ff fb4d 	bl	8003380 <_svfprintf_r+0xe0>
 8003ce6:	2320      	movs	r3, #32
 8003ce8:	7013      	strb	r3, [r2, #0]
 8003cea:	f7ff fb49 	bl	8003380 <_svfprintf_r+0xe0>
 8003cee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	920a      	str	r2, [sp, #40]	; 0x28
 8003cf6:	f7ff fb43 	bl	8003380 <_svfprintf_r+0xe0>
 8003cfa:	237b      	movs	r3, #123	; 0x7b
 8003cfc:	446b      	add	r3, sp
 8003cfe:	701c      	strb	r4, [r3, #0]
 8003d00:	f7ff fb3e 	bl	8003380 <_svfprintf_r+0xe0>
 8003d04:	217b      	movs	r1, #123	; 0x7b
 8003d06:	2300      	movs	r3, #0
 8003d08:	4469      	add	r1, sp
 8003d0a:	700b      	strb	r3, [r1, #0]
 8003d0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003d0e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	3404      	adds	r4, #4
 8003d14:	9213      	str	r2, [sp, #76]	; 0x4c
 8003d16:	2a00      	cmp	r2, #0
 8003d18:	d100      	bne.n	8003d1c <_svfprintf_r+0xa7c>
 8003d1a:	e31d      	b.n	8004358 <_svfprintf_r+0x10b8>
 8003d1c:	4652      	mov	r2, sl
 8003d1e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003d20:	2a00      	cmp	r2, #0
 8003d22:	da00      	bge.n	8003d26 <_svfprintf_r+0xa86>
 8003d24:	e2c7      	b.n	80042b6 <_svfprintf_r+0x1016>
 8003d26:	2100      	movs	r1, #0
 8003d28:	f003 fabc 	bl	80072a4 <memchr>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d100      	bne.n	8003d32 <_svfprintf_r+0xa92>
 8003d30:	e3a2      	b.n	8004478 <_svfprintf_r+0x11d8>
 8003d32:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003d34:	1a40      	subs	r0, r0, r1
 8003d36:	900e      	str	r0, [sp, #56]	; 0x38
 8003d38:	4550      	cmp	r0, sl
 8003d3a:	dc00      	bgt.n	8003d3e <_svfprintf_r+0xa9e>
 8003d3c:	e1e0      	b.n	8004100 <_svfprintf_r+0xe60>
 8003d3e:	4652      	mov	r2, sl
 8003d40:	207b      	movs	r0, #123	; 0x7b
 8003d42:	4653      	mov	r3, sl
 8003d44:	4468      	add	r0, sp
 8003d46:	920e      	str	r2, [sp, #56]	; 0x38
 8003d48:	2100      	movs	r1, #0
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	930d      	str	r3, [sp, #52]	; 0x34
 8003d4e:	9410      	str	r4, [sp, #64]	; 0x40
 8003d50:	7803      	ldrb	r3, [r0, #0]
 8003d52:	9114      	str	r1, [sp, #80]	; 0x50
 8003d54:	9216      	str	r2, [sp, #88]	; 0x58
 8003d56:	f7ff fbce 	bl	80034f6 <_svfprintf_r+0x256>
 8003d5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d5e:	681c      	ldr	r4, [r3, #0]
 8003d60:	1c19      	adds	r1, r3, #0
 8003d62:	2302      	movs	r3, #2
 8003d64:	431a      	orrs	r2, r3
 8003d66:	3104      	adds	r1, #4
 8003d68:	ab1f      	add	r3, sp, #124	; 0x7c
 8003d6a:	920a      	str	r2, [sp, #40]	; 0x28
 8003d6c:	2230      	movs	r2, #48	; 0x30
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	9110      	str	r1, [sp, #64]	; 0x40
 8003d72:	2278      	movs	r2, #120	; 0x78
 8003d74:	1c21      	adds	r1, r4, #0
 8003d76:	705a      	strb	r2, [r3, #1]
 8003d78:	1e4b      	subs	r3, r1, #1
 8003d7a:	4199      	sbcs	r1, r3
 8003d7c:	4b6a      	ldr	r3, [pc, #424]	; (8003f28 <_svfprintf_r+0xc88>)
 8003d7e:	2078      	movs	r0, #120	; 0x78
 8003d80:	931c      	str	r3, [sp, #112]	; 0x70
 8003d82:	900c      	str	r0, [sp, #48]	; 0x30
 8003d84:	2302      	movs	r3, #2
 8003d86:	f7ff fb2b 	bl	80033e0 <_svfprintf_r+0x140>
 8003d8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d8c:	4302      	orrs	r2, r0
 8003d8e:	920a      	str	r2, [sp, #40]	; 0x28
 8003d90:	f7ff faf6 	bl	8003380 <_svfprintf_r+0xe0>
 8003d94:	4964      	ldr	r1, [pc, #400]	; (8003f28 <_svfprintf_r+0xc88>)
 8003d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d98:	911c      	str	r1, [sp, #112]	; 0x70
 8003d9a:	06db      	lsls	r3, r3, #27
 8003d9c:	d500      	bpl.n	8003da0 <_svfprintf_r+0xb00>
 8003d9e:	e770      	b.n	8003c82 <_svfprintf_r+0x9e2>
 8003da0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003da2:	0649      	lsls	r1, r1, #25
 8003da4:	d400      	bmi.n	8003da8 <_svfprintf_r+0xb08>
 8003da6:	e197      	b.n	80040d8 <_svfprintf_r+0xe38>
 8003da8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003daa:	8814      	ldrh	r4, [r2, #0]
 8003dac:	3204      	adds	r2, #4
 8003dae:	9210      	str	r2, [sp, #64]	; 0x40
 8003db0:	e76b      	b.n	8003c8a <_svfprintf_r+0x9ea>
 8003db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003db4:	464a      	mov	r2, r9
 8003db6:	4313      	orrs	r3, r2
 8003db8:	930a      	str	r3, [sp, #40]	; 0x28
 8003dba:	f7ff fae1 	bl	8003380 <_svfprintf_r+0xe0>
 8003dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dc0:	4303      	orrs	r3, r0
 8003dc2:	930a      	str	r3, [sp, #40]	; 0x28
 8003dc4:	f7ff fadc 	bl	8003380 <_svfprintf_r+0xe0>
 8003dc8:	782a      	ldrb	r2, [r5, #0]
 8003dca:	3501      	adds	r5, #1
 8003dcc:	920c      	str	r2, [sp, #48]	; 0x30
 8003dce:	2a2a      	cmp	r2, #42	; 0x2a
 8003dd0:	d101      	bne.n	8003dd6 <_svfprintf_r+0xb36>
 8003dd2:	f000 fc07 	bl	80045e4 <_svfprintf_r+0x1344>
 8003dd6:	1c13      	adds	r3, r2, #0
 8003dd8:	3b30      	subs	r3, #48	; 0x30
 8003dda:	2200      	movs	r2, #0
 8003ddc:	4692      	mov	sl, r2
 8003dde:	2b09      	cmp	r3, #9
 8003de0:	d901      	bls.n	8003de6 <_svfprintf_r+0xb46>
 8003de2:	f7ff fad0 	bl	8003386 <_svfprintf_r+0xe6>
 8003de6:	46ba      	mov	sl, r7
 8003de8:	0097      	lsls	r7, r2, #2
 8003dea:	18ba      	adds	r2, r7, r2
 8003dec:	782f      	ldrb	r7, [r5, #0]
 8003dee:	0052      	lsls	r2, r2, #1
 8003df0:	189a      	adds	r2, r3, r2
 8003df2:	1c3b      	adds	r3, r7, #0
 8003df4:	3b30      	subs	r3, #48	; 0x30
 8003df6:	3501      	adds	r5, #1
 8003df8:	2b09      	cmp	r3, #9
 8003dfa:	d9f5      	bls.n	8003de8 <_svfprintf_r+0xb48>
 8003dfc:	970c      	str	r7, [sp, #48]	; 0x30
 8003dfe:	4657      	mov	r7, sl
 8003e00:	4692      	mov	sl, r2
 8003e02:	2a00      	cmp	r2, #0
 8003e04:	db01      	blt.n	8003e0a <_svfprintf_r+0xb6a>
 8003e06:	f7ff fabe 	bl	8003386 <_svfprintf_r+0xe6>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	425b      	negs	r3, r3
 8003e0e:	469a      	mov	sl, r3
 8003e10:	f7ff fab9 	bl	8003386 <_svfprintf_r+0xe6>
 8003e14:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003e16:	4659      	mov	r1, fp
 8003e18:	1c32      	adds	r2, r6, #0
 8003e1a:	f004 f99d 	bl	8008158 <__ssprint_r>
 8003e1e:	2800      	cmp	r0, #0
 8003e20:	d000      	beq.n	8003e24 <_svfprintf_r+0xb84>
 8003e22:	e5ce      	b.n	80039c2 <_svfprintf_r+0x722>
 8003e24:	af34      	add	r7, sp, #208	; 0xd0
 8003e26:	e4bc      	b.n	80037a2 <_svfprintf_r+0x502>
 8003e28:	4b40      	ldr	r3, [pc, #256]	; (8003f2c <_svfprintf_r+0xc8c>)
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	68b3      	ldr	r3, [r6, #8]
 8003e32:	3301      	adds	r3, #1
 8003e34:	60b3      	str	r3, [r6, #8]
 8003e36:	6873      	ldr	r3, [r6, #4]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	6073      	str	r3, [r6, #4]
 8003e3c:	2b07      	cmp	r3, #7
 8003e3e:	dd00      	ble.n	8003e42 <_svfprintf_r+0xba2>
 8003e40:	e205      	b.n	800424e <_svfprintf_r+0xfae>
 8003e42:	3708      	adds	r7, #8
 8003e44:	2c00      	cmp	r4, #0
 8003e46:	d107      	bne.n	8003e58 <_svfprintf_r+0xbb8>
 8003e48:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003e4a:	2a00      	cmp	r2, #0
 8003e4c:	d104      	bne.n	8003e58 <_svfprintf_r+0xbb8>
 8003e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e50:	07db      	lsls	r3, r3, #31
 8003e52:	d401      	bmi.n	8003e58 <_svfprintf_r+0xbb8>
 8003e54:	f7ff fc18 	bl	8003688 <_svfprintf_r+0x3e8>
 8003e58:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003e5a:	68b2      	ldr	r2, [r6, #8]
 8003e5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003e5e:	188b      	adds	r3, r1, r2
 8003e60:	6038      	str	r0, [r7, #0]
 8003e62:	6079      	str	r1, [r7, #4]
 8003e64:	60b3      	str	r3, [r6, #8]
 8003e66:	6873      	ldr	r3, [r6, #4]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	6073      	str	r3, [r6, #4]
 8003e6c:	2b07      	cmp	r3, #7
 8003e6e:	dd00      	ble.n	8003e72 <_svfprintf_r+0xbd2>
 8003e70:	e30f      	b.n	8004492 <_svfprintf_r+0x11f2>
 8003e72:	1c3b      	adds	r3, r7, #0
 8003e74:	3308      	adds	r3, #8
 8003e76:	4264      	negs	r4, r4
 8003e78:	2c00      	cmp	r4, #0
 8003e7a:	dc00      	bgt.n	8003e7e <_svfprintf_r+0xbde>
 8003e7c:	e209      	b.n	8004292 <_svfprintf_r+0xff2>
 8003e7e:	2c10      	cmp	r4, #16
 8003e80:	dc00      	bgt.n	8003e84 <_svfprintf_r+0xbe4>
 8003e82:	e3ac      	b.n	80045de <_svfprintf_r+0x133e>
 8003e84:	492a      	ldr	r1, [pc, #168]	; (8003f30 <_svfprintf_r+0xc90>)
 8003e86:	2210      	movs	r2, #16
 8003e88:	4688      	mov	r8, r1
 8003e8a:	4691      	mov	r9, r2
 8003e8c:	46aa      	mov	sl, r5
 8003e8e:	44c1      	add	r9, r8
 8003e90:	2710      	movs	r7, #16
 8003e92:	465d      	mov	r5, fp
 8003e94:	e004      	b.n	8003ea0 <_svfprintf_r+0xc00>
 8003e96:	3308      	adds	r3, #8
 8003e98:	3c10      	subs	r4, #16
 8003e9a:	2c10      	cmp	r4, #16
 8003e9c:	dc00      	bgt.n	8003ea0 <_svfprintf_r+0xc00>
 8003e9e:	e1e8      	b.n	8004272 <_svfprintf_r+0xfd2>
 8003ea0:	68b2      	ldr	r2, [r6, #8]
 8003ea2:	4648      	mov	r0, r9
 8003ea4:	3210      	adds	r2, #16
 8003ea6:	6018      	str	r0, [r3, #0]
 8003ea8:	605f      	str	r7, [r3, #4]
 8003eaa:	60b2      	str	r2, [r6, #8]
 8003eac:	6872      	ldr	r2, [r6, #4]
 8003eae:	3201      	adds	r2, #1
 8003eb0:	6072      	str	r2, [r6, #4]
 8003eb2:	2a07      	cmp	r2, #7
 8003eb4:	ddef      	ble.n	8003e96 <_svfprintf_r+0xbf6>
 8003eb6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003eb8:	1c29      	adds	r1, r5, #0
 8003eba:	1c32      	adds	r2, r6, #0
 8003ebc:	f004 f94c 	bl	8008158 <__ssprint_r>
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	d124      	bne.n	8003f0e <_svfprintf_r+0xc6e>
 8003ec4:	ab34      	add	r3, sp, #208	; 0xd0
 8003ec6:	e7e7      	b.n	8003e98 <_svfprintf_r+0xbf8>
 8003ec8:	68b3      	ldr	r3, [r6, #8]
 8003eca:	46d9      	mov	r9, fp
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d100      	bne.n	8003ed2 <_svfprintf_r+0xc32>
 8003ed0:	e4ac      	b.n	800382c <_svfprintf_r+0x58c>
 8003ed2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ed4:	4659      	mov	r1, fp
 8003ed6:	1c32      	adds	r2, r6, #0
 8003ed8:	f004 f93e 	bl	8008158 <__ssprint_r>
 8003edc:	e4a6      	b.n	800382c <_svfprintf_r+0x58c>
 8003ede:	2c00      	cmp	r4, #0
 8003ee0:	d100      	bne.n	8003ee4 <_svfprintf_r+0xc44>
 8003ee2:	e0cd      	b.n	8004080 <_svfprintf_r+0xde0>
 8003ee4:	a90c      	add	r1, sp, #48	; 0x30
 8003ee6:	ab1f      	add	r3, sp, #124	; 0x7c
 8003ee8:	2230      	movs	r2, #48	; 0x30
 8003eea:	7809      	ldrb	r1, [r1, #0]
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ef0:	7059      	strb	r1, [r3, #1]
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	920a      	str	r2, [sp, #40]	; 0x28
 8003ef8:	2101      	movs	r1, #1
 8003efa:	f7ff fa71 	bl	80033e0 <_svfprintf_r+0x140>
 8003efe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003f00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003f02:	6803      	ldr	r3, [r0, #0]
 8003f04:	3004      	adds	r0, #4
 8003f06:	6019      	str	r1, [r3, #0]
 8003f08:	9010      	str	r0, [sp, #64]	; 0x40
 8003f0a:	f7ff f9fe 	bl	800330a <_svfprintf_r+0x6a>
 8003f0e:	46a9      	mov	r9, r5
 8003f10:	e48c      	b.n	800382c <_svfprintf_r+0x58c>
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46c0      	nop			; (mov r8, r8)
	...
 8003f20:	0800dc84 	.word	0x0800dc84
 8003f24:	0800dc94 	.word	0x0800dc94
 8003f28:	0800dca8 	.word	0x0800dca8
 8003f2c:	0800dcc4 	.word	0x0800dcc4
 8003f30:	0800dc64 	.word	0x0800dc64
 8003f34:	465d      	mov	r5, fp
 8003f36:	46bb      	mov	fp, r7
 8003f38:	1c1f      	adds	r7, r3, #0
 8003f3a:	4643      	mov	r3, r8
 8003f3c:	3310      	adds	r3, #16
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	68b1      	ldr	r1, [r6, #8]
 8003f42:	6873      	ldr	r3, [r6, #4]
 8003f44:	607c      	str	r4, [r7, #4]
 8003f46:	3301      	adds	r3, #1
 8003f48:	190c      	adds	r4, r1, r4
 8003f4a:	60b4      	str	r4, [r6, #8]
 8003f4c:	6073      	str	r3, [r6, #4]
 8003f4e:	2b07      	cmp	r3, #7
 8003f50:	dd00      	ble.n	8003f54 <_svfprintf_r+0xcb4>
 8003f52:	e1e8      	b.n	8004326 <_svfprintf_r+0x1086>
 8003f54:	3708      	adds	r7, #8
 8003f56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003f58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f5a:	4690      	mov	r8, r2
 8003f5c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003f5e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003f60:	4490      	add	r8, r2
 8003f62:	4283      	cmp	r3, r0
 8003f64:	db4c      	blt.n	8004000 <_svfprintf_r+0xd60>
 8003f66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003f68:	07c9      	lsls	r1, r1, #31
 8003f6a:	d449      	bmi.n	8004000 <_svfprintf_r+0xd60>
 8003f6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003f6e:	4641      	mov	r1, r8
 8003f70:	1a42      	subs	r2, r0, r1
 8003f72:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003f74:	1ac3      	subs	r3, r0, r3
 8003f76:	1c1c      	adds	r4, r3, #0
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	dd00      	ble.n	8003f7e <_svfprintf_r+0xcde>
 8003f7c:	1c14      	adds	r4, r2, #0
 8003f7e:	2c00      	cmp	r4, #0
 8003f80:	dd0c      	ble.n	8003f9c <_svfprintf_r+0xcfc>
 8003f82:	68b0      	ldr	r0, [r6, #8]
 8003f84:	4641      	mov	r1, r8
 8003f86:	1902      	adds	r2, r0, r4
 8003f88:	6039      	str	r1, [r7, #0]
 8003f8a:	607c      	str	r4, [r7, #4]
 8003f8c:	60b2      	str	r2, [r6, #8]
 8003f8e:	6872      	ldr	r2, [r6, #4]
 8003f90:	3201      	adds	r2, #1
 8003f92:	6072      	str	r2, [r6, #4]
 8003f94:	2a07      	cmp	r2, #7
 8003f96:	dd00      	ble.n	8003f9a <_svfprintf_r+0xcfa>
 8003f98:	e1a1      	b.n	80042de <_svfprintf_r+0x103e>
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	43e2      	mvns	r2, r4
 8003f9e:	17d2      	asrs	r2, r2, #31
 8003fa0:	4014      	ands	r4, r2
 8003fa2:	1b1c      	subs	r4, r3, r4
 8003fa4:	2c00      	cmp	r4, #0
 8003fa6:	dc01      	bgt.n	8003fac <_svfprintf_r+0xd0c>
 8003fa8:	f7ff fb6e 	bl	8003688 <_svfprintf_r+0x3e8>
 8003fac:	2c10      	cmp	r4, #16
 8003fae:	dc00      	bgt.n	8003fb2 <_svfprintf_r+0xd12>
 8003fb0:	e30f      	b.n	80045d2 <_svfprintf_r+0x1332>
 8003fb2:	48e5      	ldr	r0, [pc, #916]	; (8004348 <_svfprintf_r+0x10a8>)
 8003fb4:	2110      	movs	r1, #16
 8003fb6:	4680      	mov	r8, r0
 8003fb8:	468a      	mov	sl, r1
 8003fba:	1c3b      	adds	r3, r7, #0
 8003fbc:	44c2      	add	sl, r8
 8003fbe:	465f      	mov	r7, fp
 8003fc0:	4689      	mov	r9, r1
 8003fc2:	46ab      	mov	fp, r5
 8003fc4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003fc6:	e004      	b.n	8003fd2 <_svfprintf_r+0xd32>
 8003fc8:	3308      	adds	r3, #8
 8003fca:	3c10      	subs	r4, #16
 8003fcc:	2c10      	cmp	r4, #16
 8003fce:	dc00      	bgt.n	8003fd2 <_svfprintf_r+0xd32>
 8003fd0:	e087      	b.n	80040e2 <_svfprintf_r+0xe42>
 8003fd2:	68b2      	ldr	r2, [r6, #8]
 8003fd4:	4650      	mov	r0, sl
 8003fd6:	3210      	adds	r2, #16
 8003fd8:	4649      	mov	r1, r9
 8003fda:	6018      	str	r0, [r3, #0]
 8003fdc:	6059      	str	r1, [r3, #4]
 8003fde:	60b2      	str	r2, [r6, #8]
 8003fe0:	6872      	ldr	r2, [r6, #4]
 8003fe2:	3201      	adds	r2, #1
 8003fe4:	6072      	str	r2, [r6, #4]
 8003fe6:	2a07      	cmp	r2, #7
 8003fe8:	ddee      	ble.n	8003fc8 <_svfprintf_r+0xd28>
 8003fea:	1c28      	adds	r0, r5, #0
 8003fec:	1c39      	adds	r1, r7, #0
 8003fee:	1c32      	adds	r2, r6, #0
 8003ff0:	f004 f8b2 	bl	8008158 <__ssprint_r>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d001      	beq.n	8003ffc <_svfprintf_r+0xd5c>
 8003ff8:	f7ff fc17 	bl	800382a <_svfprintf_r+0x58a>
 8003ffc:	ab34      	add	r3, sp, #208	; 0xd0
 8003ffe:	e7e4      	b.n	8003fca <_svfprintf_r+0xd2a>
 8004000:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004002:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004004:	68b1      	ldr	r1, [r6, #8]
 8004006:	603a      	str	r2, [r7, #0]
 8004008:	1842      	adds	r2, r0, r1
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	60b2      	str	r2, [r6, #8]
 800400e:	6872      	ldr	r2, [r6, #4]
 8004010:	3201      	adds	r2, #1
 8004012:	6072      	str	r2, [r6, #4]
 8004014:	2a07      	cmp	r2, #7
 8004016:	dd00      	ble.n	800401a <_svfprintf_r+0xd7a>
 8004018:	e16f      	b.n	80042fa <_svfprintf_r+0x105a>
 800401a:	3708      	adds	r7, #8
 800401c:	e7a6      	b.n	8003f6c <_svfprintf_r+0xccc>
 800401e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004020:	2301      	movs	r3, #1
 8004022:	4203      	tst	r3, r0
 8004024:	d000      	beq.n	8004028 <_svfprintf_r+0xd88>
 8004026:	e458      	b.n	80038da <_svfprintf_r+0x63a>
 8004028:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800402a:	607b      	str	r3, [r7, #4]
 800402c:	68b3      	ldr	r3, [r6, #8]
 800402e:	6038      	str	r0, [r7, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	e58d      	b.n	8003b50 <_svfprintf_r+0x8b0>
 8004034:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004036:	4659      	mov	r1, fp
 8004038:	1c32      	adds	r2, r6, #0
 800403a:	f004 f88d 	bl	8008158 <__ssprint_r>
 800403e:	2800      	cmp	r0, #0
 8004040:	d000      	beq.n	8004044 <_svfprintf_r+0xda4>
 8004042:	e4be      	b.n	80039c2 <_svfprintf_r+0x722>
 8004044:	af34      	add	r7, sp, #208	; 0xd0
 8004046:	e464      	b.n	8003912 <_svfprintf_r+0x672>
 8004048:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800404a:	4659      	mov	r1, fp
 800404c:	1c32      	adds	r2, r6, #0
 800404e:	f004 f883 	bl	8008158 <__ssprint_r>
 8004052:	2800      	cmp	r0, #0
 8004054:	d000      	beq.n	8004058 <_svfprintf_r+0xdb8>
 8004056:	e4b4      	b.n	80039c2 <_svfprintf_r+0x722>
 8004058:	af34      	add	r7, sp, #208	; 0xd0
 800405a:	e44c      	b.n	80038f6 <_svfprintf_r+0x656>
 800405c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800405e:	4659      	mov	r1, fp
 8004060:	1c32      	adds	r2, r6, #0
 8004062:	f004 f879 	bl	8008158 <__ssprint_r>
 8004066:	2800      	cmp	r0, #0
 8004068:	d000      	beq.n	800406c <_svfprintf_r+0xdcc>
 800406a:	e4aa      	b.n	80039c2 <_svfprintf_r+0x722>
 800406c:	af34      	add	r7, sp, #208	; 0xd0
 800406e:	f7ff fab9 	bl	80035e4 <_svfprintf_r+0x344>
 8004072:	207b      	movs	r0, #123	; 0x7b
 8004074:	232d      	movs	r3, #45	; 0x2d
 8004076:	4468      	add	r0, sp
 8004078:	4264      	negs	r4, r4
 800407a:	7003      	strb	r3, [r0, #0]
 800407c:	f7ff fa0b 	bl	8003496 <_svfprintf_r+0x1f6>
 8004080:	2100      	movs	r1, #0
 8004082:	2302      	movs	r3, #2
 8004084:	f7ff f9ac 	bl	80033e0 <_svfprintf_r+0x140>
 8004088:	4648      	mov	r0, r9
 800408a:	4641      	mov	r1, r8
 800408c:	f7fd f9d6 	bl	800143c <__fpclassifyd>
 8004090:	2800      	cmp	r0, #0
 8004092:	d144      	bne.n	800411e <_svfprintf_r+0xe7e>
 8004094:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004096:	2b47      	cmp	r3, #71	; 0x47
 8004098:	dc00      	bgt.n	800409c <_svfprintf_r+0xdfc>
 800409a:	e0d5      	b.n	8004248 <_svfprintf_r+0xfa8>
 800409c:	49ab      	ldr	r1, [pc, #684]	; (800434c <_svfprintf_r+0x10ac>)
 800409e:	9113      	str	r1, [sp, #76]	; 0x4c
 80040a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	207b      	movs	r0, #123	; 0x7b
 80040a6:	439a      	bics	r2, r3
 80040a8:	4468      	add	r0, sp
 80040aa:	2103      	movs	r1, #3
 80040ac:	920a      	str	r2, [sp, #40]	; 0x28
 80040ae:	7803      	ldrb	r3, [r0, #0]
 80040b0:	910d      	str	r1, [sp, #52]	; 0x34
 80040b2:	2203      	movs	r2, #3
 80040b4:	2000      	movs	r0, #0
 80040b6:	2100      	movs	r1, #0
 80040b8:	920e      	str	r2, [sp, #56]	; 0x38
 80040ba:	9014      	str	r0, [sp, #80]	; 0x50
 80040bc:	9116      	str	r1, [sp, #88]	; 0x58
 80040be:	f7ff fa1a 	bl	80034f6 <_svfprintf_r+0x256>
 80040c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80040c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80040c6:	681c      	ldr	r4, [r3, #0]
 80040c8:	3004      	adds	r0, #4
 80040ca:	1c21      	adds	r1, r4, #0
 80040cc:	1e4b      	subs	r3, r1, #1
 80040ce:	4199      	sbcs	r1, r3
 80040d0:	9010      	str	r0, [sp, #64]	; 0x40
 80040d2:	2300      	movs	r3, #0
 80040d4:	f7ff f984 	bl	80033e0 <_svfprintf_r+0x140>
 80040d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80040da:	681c      	ldr	r4, [r3, #0]
 80040dc:	3304      	adds	r3, #4
 80040de:	9310      	str	r3, [sp, #64]	; 0x40
 80040e0:	e5d3      	b.n	8003c8a <_svfprintf_r+0x9ea>
 80040e2:	465d      	mov	r5, fp
 80040e4:	46bb      	mov	fp, r7
 80040e6:	1c1f      	adds	r7, r3, #0
 80040e8:	4643      	mov	r3, r8
 80040ea:	68b2      	ldr	r2, [r6, #8]
 80040ec:	3310      	adds	r3, #16
 80040ee:	607c      	str	r4, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	1914      	adds	r4, r2, r4
 80040f4:	f7ff fb2a 	bl	800374c <_svfprintf_r+0x4ac>
 80040f8:	4a93      	ldr	r2, [pc, #588]	; (8004348 <_svfprintf_r+0x10a8>)
 80040fa:	4690      	mov	r8, r2
 80040fc:	f7ff faa5 	bl	800364a <_svfprintf_r+0x3aa>
 8004100:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004102:	43c3      	mvns	r3, r0
 8004104:	17db      	asrs	r3, r3, #31
 8004106:	4018      	ands	r0, r3
 8004108:	217b      	movs	r1, #123	; 0x7b
 800410a:	900d      	str	r0, [sp, #52]	; 0x34
 800410c:	4469      	add	r1, sp
 800410e:	2200      	movs	r2, #0
 8004110:	2000      	movs	r0, #0
 8004112:	780b      	ldrb	r3, [r1, #0]
 8004114:	9410      	str	r4, [sp, #64]	; 0x40
 8004116:	9214      	str	r2, [sp, #80]	; 0x50
 8004118:	9016      	str	r0, [sp, #88]	; 0x58
 800411a:	f7ff f9ec 	bl	80034f6 <_svfprintf_r+0x256>
 800411e:	4652      	mov	r2, sl
 8004120:	2320      	movs	r3, #32
 8004122:	3201      	adds	r2, #1
 8004124:	d100      	bne.n	8004128 <_svfprintf_r+0xe88>
 8004126:	e09e      	b.n	8004266 <_svfprintf_r+0xfc6>
 8004128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800412a:	439a      	bics	r2, r3
 800412c:	9209      	str	r2, [sp, #36]	; 0x24
 800412e:	2a47      	cmp	r2, #71	; 0x47
 8004130:	d104      	bne.n	800413c <_svfprintf_r+0xe9c>
 8004132:	4653      	mov	r3, sl
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <_svfprintf_r+0xe9c>
 8004138:	2001      	movs	r0, #1
 800413a:	4682      	mov	sl, r0
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	4319      	orrs	r1, r3
 8004144:	2000      	movs	r0, #0
 8004146:	4643      	mov	r3, r8
 8004148:	9112      	str	r1, [sp, #72]	; 0x48
 800414a:	9014      	str	r0, [sp, #80]	; 0x50
 800414c:	2b00      	cmp	r3, #0
 800414e:	da00      	bge.n	8004152 <_svfprintf_r+0xeb2>
 8004150:	e1ab      	b.n	80044aa <_svfprintf_r+0x120a>
 8004152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004154:	3b46      	subs	r3, #70	; 0x46
 8004156:	4258      	negs	r0, r3
 8004158:	4158      	adcs	r0, r3
 800415a:	900d      	str	r0, [sp, #52]	; 0x34
 800415c:	2800      	cmp	r0, #0
 800415e:	d000      	beq.n	8004162 <_svfprintf_r+0xec2>
 8004160:	e116      	b.n	8004390 <_svfprintf_r+0x10f0>
 8004162:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004164:	2945      	cmp	r1, #69	; 0x45
 8004166:	d000      	beq.n	800416a <_svfprintf_r+0xeca>
 8004168:	e1a5      	b.n	80044b6 <_svfprintf_r+0x1216>
 800416a:	2302      	movs	r3, #2
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	ab20      	add	r3, sp, #128	; 0x80
 8004170:	9302      	str	r3, [sp, #8]
 8004172:	4654      	mov	r4, sl
 8004174:	ab21      	add	r3, sp, #132	; 0x84
 8004176:	3401      	adds	r4, #1
 8004178:	9303      	str	r3, [sp, #12]
 800417a:	ab22      	add	r3, sp, #136	; 0x88
 800417c:	9401      	str	r4, [sp, #4]
 800417e:	9304      	str	r3, [sp, #16]
 8004180:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004182:	464a      	mov	r2, r9
 8004184:	4643      	mov	r3, r8
 8004186:	f000 fedb 	bl	8004f40 <_dtoa_r>
 800418a:	9013      	str	r0, [sp, #76]	; 0x4c
 800418c:	1904      	adds	r4, r0, r4
 800418e:	4648      	mov	r0, r9
 8004190:	4641      	mov	r1, r8
 8004192:	4b6c      	ldr	r3, [pc, #432]	; (8004344 <_svfprintf_r+0x10a4>)
 8004194:	4a6a      	ldr	r2, [pc, #424]	; (8004340 <_svfprintf_r+0x10a0>)
 8004196:	f005 ebbc 	blx	8009910 <__aeabi_dcmpeq>
 800419a:	2800      	cmp	r0, #0
 800419c:	d109      	bne.n	80041b2 <_svfprintf_r+0xf12>
 800419e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041a0:	429c      	cmp	r4, r3
 80041a2:	d800      	bhi.n	80041a6 <_svfprintf_r+0xf06>
 80041a4:	e244      	b.n	8004630 <_svfprintf_r+0x1390>
 80041a6:	2230      	movs	r2, #48	; 0x30
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	3301      	adds	r3, #1
 80041ac:	9322      	str	r3, [sp, #136]	; 0x88
 80041ae:	42a3      	cmp	r3, r4
 80041b0:	d1fa      	bne.n	80041a8 <_svfprintf_r+0xf08>
 80041b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80041b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041b6:	1ae4      	subs	r4, r4, r3
 80041b8:	9415      	str	r4, [sp, #84]	; 0x54
 80041ba:	2847      	cmp	r0, #71	; 0x47
 80041bc:	d100      	bne.n	80041c0 <_svfprintf_r+0xf20>
 80041be:	e11c      	b.n	80043fa <_svfprintf_r+0x115a>
 80041c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041c2:	2b65      	cmp	r3, #101	; 0x65
 80041c4:	dc00      	bgt.n	80041c8 <_svfprintf_r+0xf28>
 80041c6:	e226      	b.n	8004616 <_svfprintf_r+0x1376>
 80041c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80041cc:	2a66      	cmp	r2, #102	; 0x66
 80041ce:	d100      	bne.n	80041d2 <_svfprintf_r+0xf32>
 80041d0:	e182      	b.n	80044d8 <_svfprintf_r+0x1238>
 80041d2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80041d4:	428b      	cmp	r3, r1
 80041d6:	da00      	bge.n	80041da <_svfprintf_r+0xf3a>
 80041d8:	e16f      	b.n	80044ba <_svfprintf_r+0x121a>
 80041da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041dc:	07d2      	lsls	r2, r2, #31
 80041de:	d500      	bpl.n	80041e2 <_svfprintf_r+0xf42>
 80041e0:	e1ca      	b.n	8004578 <_svfprintf_r+0x12d8>
 80041e2:	43da      	mvns	r2, r3
 80041e4:	17d2      	asrs	r2, r2, #31
 80041e6:	401a      	ands	r2, r3
 80041e8:	2067      	movs	r0, #103	; 0x67
 80041ea:	920d      	str	r2, [sp, #52]	; 0x34
 80041ec:	930e      	str	r3, [sp, #56]	; 0x38
 80041ee:	900c      	str	r0, [sp, #48]	; 0x30
 80041f0:	9316      	str	r3, [sp, #88]	; 0x58
 80041f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80041f4:	2a00      	cmp	r2, #0
 80041f6:	d100      	bne.n	80041fa <_svfprintf_r+0xf5a>
 80041f8:	e0c1      	b.n	800437e <_svfprintf_r+0x10de>
 80041fa:	207b      	movs	r0, #123	; 0x7b
 80041fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80041fe:	232d      	movs	r3, #45	; 0x2d
 8004200:	4468      	add	r0, sp
 8004202:	2200      	movs	r2, #0
 8004204:	7003      	strb	r3, [r0, #0]
 8004206:	910a      	str	r1, [sp, #40]	; 0x28
 8004208:	9214      	str	r2, [sp, #80]	; 0x50
 800420a:	f7ff f976 	bl	80034fa <_svfprintf_r+0x25a>
 800420e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004210:	4659      	mov	r1, fp
 8004212:	1c32      	adds	r2, r6, #0
 8004214:	f003 ffa0 	bl	8008158 <__ssprint_r>
 8004218:	2800      	cmp	r0, #0
 800421a:	d001      	beq.n	8004220 <_svfprintf_r+0xf80>
 800421c:	f7ff fbd1 	bl	80039c2 <_svfprintf_r+0x722>
 8004220:	af34      	add	r7, sp, #208	; 0xd0
 8004222:	f7ff fad5 	bl	80037d0 <_svfprintf_r+0x530>
 8004226:	484a      	ldr	r0, [pc, #296]	; (8004350 <_svfprintf_r+0x10b0>)
 8004228:	9013      	str	r0, [sp, #76]	; 0x4c
 800422a:	e4f8      	b.n	8003c1e <_svfprintf_r+0x97e>
 800422c:	2140      	movs	r1, #64	; 0x40
 800422e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004230:	f002 fdaa 	bl	8006d88 <_malloc_r>
 8004234:	4649      	mov	r1, r9
 8004236:	6008      	str	r0, [r1, #0]
 8004238:	6108      	str	r0, [r1, #16]
 800423a:	2800      	cmp	r0, #0
 800423c:	d100      	bne.n	8004240 <_svfprintf_r+0xfa0>
 800423e:	e1ef      	b.n	8004620 <_svfprintf_r+0x1380>
 8004240:	2340      	movs	r3, #64	; 0x40
 8004242:	614b      	str	r3, [r1, #20]
 8004244:	f7ff f84b 	bl	80032de <_svfprintf_r+0x3e>
 8004248:	4842      	ldr	r0, [pc, #264]	; (8004354 <_svfprintf_r+0x10b4>)
 800424a:	9013      	str	r0, [sp, #76]	; 0x4c
 800424c:	e728      	b.n	80040a0 <_svfprintf_r+0xe00>
 800424e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004250:	4659      	mov	r1, fp
 8004252:	1c32      	adds	r2, r6, #0
 8004254:	f003 ff80 	bl	8008158 <__ssprint_r>
 8004258:	2800      	cmp	r0, #0
 800425a:	d001      	beq.n	8004260 <_svfprintf_r+0xfc0>
 800425c:	f7ff fbb1 	bl	80039c2 <_svfprintf_r+0x722>
 8004260:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8004262:	af34      	add	r7, sp, #208	; 0xd0
 8004264:	e5ee      	b.n	8003e44 <_svfprintf_r+0xba4>
 8004266:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004268:	2106      	movs	r1, #6
 800426a:	4398      	bics	r0, r3
 800426c:	9009      	str	r0, [sp, #36]	; 0x24
 800426e:	468a      	mov	sl, r1
 8004270:	e764      	b.n	800413c <_svfprintf_r+0xe9c>
 8004272:	46ab      	mov	fp, r5
 8004274:	4655      	mov	r5, sl
 8004276:	4642      	mov	r2, r8
 8004278:	3210      	adds	r2, #16
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	68b1      	ldr	r1, [r6, #8]
 800427e:	6872      	ldr	r2, [r6, #4]
 8004280:	605c      	str	r4, [r3, #4]
 8004282:	3201      	adds	r2, #1
 8004284:	190c      	adds	r4, r1, r4
 8004286:	60b4      	str	r4, [r6, #8]
 8004288:	6072      	str	r2, [r6, #4]
 800428a:	2a07      	cmp	r2, #7
 800428c:	dd00      	ble.n	8004290 <_svfprintf_r+0xff0>
 800428e:	e12e      	b.n	80044ee <_svfprintf_r+0x124e>
 8004290:	3308      	adds	r3, #8
 8004292:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004294:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004296:	68b1      	ldr	r1, [r6, #8]
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	180a      	adds	r2, r1, r0
 800429c:	6058      	str	r0, [r3, #4]
 800429e:	60b2      	str	r2, [r6, #8]
 80042a0:	6872      	ldr	r2, [r6, #4]
 80042a2:	3201      	adds	r2, #1
 80042a4:	6072      	str	r2, [r6, #4]
 80042a6:	2a07      	cmp	r2, #7
 80042a8:	dd01      	ble.n	80042ae <_svfprintf_r+0x100e>
 80042aa:	f7ff fa55 	bl	8003758 <_svfprintf_r+0x4b8>
 80042ae:	1c1f      	adds	r7, r3, #0
 80042b0:	3708      	adds	r7, #8
 80042b2:	f7ff f9e9 	bl	8003688 <_svfprintf_r+0x3e8>
 80042b6:	f7fb ff57 	bl	8000168 <strlen>
 80042ba:	900e      	str	r0, [sp, #56]	; 0x38
 80042bc:	e721      	b.n	8004102 <_svfprintf_r+0xe62>
 80042be:	4922      	ldr	r1, [pc, #136]	; (8004348 <_svfprintf_r+0x10a8>)
 80042c0:	4688      	mov	r8, r1
 80042c2:	f7ff f95b 	bl	800357c <_svfprintf_r+0x2dc>
 80042c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80042c8:	4659      	mov	r1, fp
 80042ca:	1c32      	adds	r2, r6, #0
 80042cc:	f003 ff44 	bl	8008158 <__ssprint_r>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d001      	beq.n	80042d8 <_svfprintf_r+0x1038>
 80042d4:	f7ff fb75 	bl	80039c2 <_svfprintf_r+0x722>
 80042d8:	af34      	add	r7, sp, #208	; 0xd0
 80042da:	f7ff fbbb 	bl	8003a54 <_svfprintf_r+0x7b4>
 80042de:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80042e0:	4659      	mov	r1, fp
 80042e2:	1c32      	adds	r2, r6, #0
 80042e4:	f003 ff38 	bl	8008158 <__ssprint_r>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d001      	beq.n	80042f0 <_svfprintf_r+0x1050>
 80042ec:	f7ff fb69 	bl	80039c2 <_svfprintf_r+0x722>
 80042f0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80042f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80042f4:	af34      	add	r7, sp, #208	; 0xd0
 80042f6:	1a8b      	subs	r3, r1, r2
 80042f8:	e650      	b.n	8003f9c <_svfprintf_r+0xcfc>
 80042fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80042fc:	4659      	mov	r1, fp
 80042fe:	1c32      	adds	r2, r6, #0
 8004300:	f003 ff2a 	bl	8008158 <__ssprint_r>
 8004304:	2800      	cmp	r0, #0
 8004306:	d001      	beq.n	800430c <_svfprintf_r+0x106c>
 8004308:	f7ff fb5b 	bl	80039c2 <_svfprintf_r+0x722>
 800430c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800430e:	af34      	add	r7, sp, #208	; 0xd0
 8004310:	e62c      	b.n	8003f6c <_svfprintf_r+0xccc>
 8004312:	9b08      	ldr	r3, [sp, #32]
 8004314:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004316:	1a1b      	subs	r3, r3, r0
 8004318:	930e      	str	r3, [sp, #56]	; 0x38
 800431a:	f7ff f8df 	bl	80034dc <_svfprintf_r+0x23c>
 800431e:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <_svfprintf_r+0x10a8>)
 8004320:	4690      	mov	r8, r2
 8004322:	f7ff f9e8 	bl	80036f6 <_svfprintf_r+0x456>
 8004326:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004328:	4659      	mov	r1, fp
 800432a:	1c32      	adds	r2, r6, #0
 800432c:	f003 ff14 	bl	8008158 <__ssprint_r>
 8004330:	2800      	cmp	r0, #0
 8004332:	d001      	beq.n	8004338 <_svfprintf_r+0x1098>
 8004334:	f7ff fb45 	bl	80039c2 <_svfprintf_r+0x722>
 8004338:	af34      	add	r7, sp, #208	; 0xd0
 800433a:	e60c      	b.n	8003f56 <_svfprintf_r+0xcb6>
 800433c:	46c0      	nop			; (mov r8, r8)
 800433e:	46c0      	nop			; (mov r8, r8)
	...
 8004348:	0800dc64 	.word	0x0800dc64
 800434c:	0800dc90 	.word	0x0800dc90
 8004350:	0800dc88 	.word	0x0800dc88
 8004354:	0800dc8c 	.word	0x0800dc8c
 8004358:	4650      	mov	r0, sl
 800435a:	900e      	str	r0, [sp, #56]	; 0x38
 800435c:	2806      	cmp	r0, #6
 800435e:	d908      	bls.n	8004372 <_svfprintf_r+0x10d2>
 8004360:	2106      	movs	r1, #6
 8004362:	2206      	movs	r2, #6
 8004364:	910e      	str	r1, [sp, #56]	; 0x38
 8004366:	920d      	str	r2, [sp, #52]	; 0x34
 8004368:	49b5      	ldr	r1, [pc, #724]	; (8004640 <_svfprintf_r+0x13a0>)
 800436a:	9410      	str	r4, [sp, #64]	; 0x40
 800436c:	9113      	str	r1, [sp, #76]	; 0x4c
 800436e:	f7ff f81e 	bl	80033ae <_svfprintf_r+0x10e>
 8004372:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004374:	43c3      	mvns	r3, r0
 8004376:	17db      	asrs	r3, r3, #31
 8004378:	4018      	ands	r0, r3
 800437a:	900d      	str	r0, [sp, #52]	; 0x34
 800437c:	e7f4      	b.n	8004368 <_svfprintf_r+0x10c8>
 800437e:	207b      	movs	r0, #123	; 0x7b
 8004380:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004382:	4468      	add	r0, sp
 8004384:	2200      	movs	r2, #0
 8004386:	7803      	ldrb	r3, [r0, #0]
 8004388:	910a      	str	r1, [sp, #40]	; 0x28
 800438a:	9214      	str	r2, [sp, #80]	; 0x50
 800438c:	f7ff f8b3 	bl	80034f6 <_svfprintf_r+0x256>
 8004390:	2303      	movs	r3, #3
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	ab20      	add	r3, sp, #128	; 0x80
 8004396:	9302      	str	r3, [sp, #8]
 8004398:	ab21      	add	r3, sp, #132	; 0x84
 800439a:	4652      	mov	r2, sl
 800439c:	9303      	str	r3, [sp, #12]
 800439e:	ab22      	add	r3, sp, #136	; 0x88
 80043a0:	9201      	str	r2, [sp, #4]
 80043a2:	9304      	str	r3, [sp, #16]
 80043a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80043a6:	4643      	mov	r3, r8
 80043a8:	464a      	mov	r2, r9
 80043aa:	f000 fdc9 	bl	8004f40 <_dtoa_r>
 80043ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043b0:	9013      	str	r0, [sp, #76]	; 0x4c
 80043b2:	2b47      	cmp	r3, #71	; 0x47
 80043b4:	d102      	bne.n	80043bc <_svfprintf_r+0x111c>
 80043b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80043b8:	07c0      	lsls	r0, r0, #31
 80043ba:	d51a      	bpl.n	80043f2 <_svfprintf_r+0x1152>
 80043bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80043be:	980d      	ldr	r0, [sp, #52]	; 0x34
 80043c0:	1c1c      	adds	r4, r3, #0
 80043c2:	4454      	add	r4, sl
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d100      	bne.n	80043ca <_svfprintf_r+0x112a>
 80043c8:	e6e1      	b.n	800418e <_svfprintf_r+0xeee>
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b30      	cmp	r3, #48	; 0x30
 80043ce:	d002      	beq.n	80043d6 <_svfprintf_r+0x1136>
 80043d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80043d2:	18e4      	adds	r4, r4, r3
 80043d4:	e6db      	b.n	800418e <_svfprintf_r+0xeee>
 80043d6:	4648      	mov	r0, r9
 80043d8:	4641      	mov	r1, r8
 80043da:	4b98      	ldr	r3, [pc, #608]	; (800463c <_svfprintf_r+0x139c>)
 80043dc:	4a96      	ldr	r2, [pc, #600]	; (8004638 <_svfprintf_r+0x1398>)
 80043de:	f005 ea98 	blx	8009910 <__aeabi_dcmpeq>
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d1f4      	bne.n	80043d0 <_svfprintf_r+0x1130>
 80043e6:	2301      	movs	r3, #1
 80043e8:	4652      	mov	r2, sl
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	9320      	str	r3, [sp, #128]	; 0x80
 80043ee:	18e4      	adds	r4, r4, r3
 80043f0:	e6cd      	b.n	800418e <_svfprintf_r+0xeee>
 80043f2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80043f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80043f6:	1a89      	subs	r1, r1, r2
 80043f8:	9115      	str	r1, [sp, #84]	; 0x54
 80043fa:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80043fc:	1c23      	adds	r3, r4, #0
 80043fe:	1ce1      	adds	r1, r4, #3
 8004400:	db02      	blt.n	8004408 <_svfprintf_r+0x1168>
 8004402:	45a2      	cmp	sl, r4
 8004404:	db00      	blt.n	8004408 <_svfprintf_r+0x1168>
 8004406:	e6e4      	b.n	80041d2 <_svfprintf_r+0xf32>
 8004408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800440a:	3a02      	subs	r2, #2
 800440c:	920c      	str	r2, [sp, #48]	; 0x30
 800440e:	a90c      	add	r1, sp, #48	; 0x30
 8004410:	7809      	ldrb	r1, [r1, #0]
 8004412:	a823      	add	r0, sp, #140	; 0x8c
 8004414:	3c01      	subs	r4, #1
 8004416:	9420      	str	r4, [sp, #128]	; 0x80
 8004418:	4681      	mov	r9, r0
 800441a:	7001      	strb	r1, [r0, #0]
 800441c:	2c00      	cmp	r4, #0
 800441e:	da00      	bge.n	8004422 <_svfprintf_r+0x1182>
 8004420:	e0c5      	b.n	80045ae <_svfprintf_r+0x130e>
 8004422:	466b      	mov	r3, sp
 8004424:	222b      	movs	r2, #43	; 0x2b
 8004426:	338d      	adds	r3, #141	; 0x8d
 8004428:	701a      	strb	r2, [r3, #0]
 800442a:	2c09      	cmp	r4, #9
 800442c:	dc6a      	bgt.n	8004504 <_svfprintf_r+0x1264>
 800442e:	466b      	mov	r3, sp
 8004430:	338e      	adds	r3, #142	; 0x8e
 8004432:	2230      	movs	r2, #48	; 0x30
 8004434:	3430      	adds	r4, #48	; 0x30
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	705c      	strb	r4, [r3, #1]
 800443a:	ab24      	add	r3, sp, #144	; 0x90
 800443c:	464a      	mov	r2, r9
 800443e:	1a9a      	subs	r2, r3, r2
 8004440:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004442:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004444:	189b      	adds	r3, r3, r2
 8004446:	921b      	str	r2, [sp, #108]	; 0x6c
 8004448:	930e      	str	r3, [sp, #56]	; 0x38
 800444a:	2801      	cmp	r0, #1
 800444c:	dc00      	bgt.n	8004450 <_svfprintf_r+0x11b0>
 800444e:	e0b4      	b.n	80045ba <_svfprintf_r+0x131a>
 8004450:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004452:	3001      	adds	r0, #1
 8004454:	43c3      	mvns	r3, r0
 8004456:	17db      	asrs	r3, r3, #31
 8004458:	900e      	str	r0, [sp, #56]	; 0x38
 800445a:	2100      	movs	r1, #0
 800445c:	4018      	ands	r0, r3
 800445e:	900d      	str	r0, [sp, #52]	; 0x34
 8004460:	9116      	str	r1, [sp, #88]	; 0x58
 8004462:	e6c6      	b.n	80041f2 <_svfprintf_r+0xf52>
 8004464:	207b      	movs	r0, #123	; 0x7b
 8004466:	232d      	movs	r3, #45	; 0x2d
 8004468:	4468      	add	r0, sp
 800446a:	7003      	strb	r3, [r0, #0]
 800446c:	f7ff fbd1 	bl	8003c12 <_svfprintf_r+0x972>
 8004470:	4974      	ldr	r1, [pc, #464]	; (8004644 <_svfprintf_r+0x13a4>)
 8004472:	4688      	mov	r8, r1
 8004474:	f7ff fa1e 	bl	80038b4 <_svfprintf_r+0x614>
 8004478:	4650      	mov	r0, sl
 800447a:	217b      	movs	r1, #123	; 0x7b
 800447c:	900d      	str	r0, [sp, #52]	; 0x34
 800447e:	4469      	add	r1, sp
 8004480:	900e      	str	r0, [sp, #56]	; 0x38
 8004482:	2200      	movs	r2, #0
 8004484:	2000      	movs	r0, #0
 8004486:	780b      	ldrb	r3, [r1, #0]
 8004488:	9410      	str	r4, [sp, #64]	; 0x40
 800448a:	9214      	str	r2, [sp, #80]	; 0x50
 800448c:	9016      	str	r0, [sp, #88]	; 0x58
 800448e:	f7ff f832 	bl	80034f6 <_svfprintf_r+0x256>
 8004492:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004494:	4659      	mov	r1, fp
 8004496:	1c32      	adds	r2, r6, #0
 8004498:	f003 fe5e 	bl	8008158 <__ssprint_r>
 800449c:	2800      	cmp	r0, #0
 800449e:	d001      	beq.n	80044a4 <_svfprintf_r+0x1204>
 80044a0:	f7ff fa8f 	bl	80039c2 <_svfprintf_r+0x722>
 80044a4:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80044a6:	ab34      	add	r3, sp, #208	; 0xd0
 80044a8:	e4e5      	b.n	8003e76 <_svfprintf_r+0xbd6>
 80044aa:	2180      	movs	r1, #128	; 0x80
 80044ac:	0609      	lsls	r1, r1, #24
 80044ae:	222d      	movs	r2, #45	; 0x2d
 80044b0:	4488      	add	r8, r1
 80044b2:	9214      	str	r2, [sp, #80]	; 0x50
 80044b4:	e64d      	b.n	8004152 <_svfprintf_r+0xeb2>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e76b      	b.n	8004392 <_svfprintf_r+0x10f2>
 80044ba:	2201      	movs	r2, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	dc00      	bgt.n	80044c2 <_svfprintf_r+0x1222>
 80044c0:	e08a      	b.n	80045d8 <_svfprintf_r+0x1338>
 80044c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80044c4:	1812      	adds	r2, r2, r0
 80044c6:	920e      	str	r2, [sp, #56]	; 0x38
 80044c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80044ca:	43d2      	mvns	r2, r2
 80044cc:	17d2      	asrs	r2, r2, #31
 80044ce:	4011      	ands	r1, r2
 80044d0:	2267      	movs	r2, #103	; 0x67
 80044d2:	910d      	str	r1, [sp, #52]	; 0x34
 80044d4:	920c      	str	r2, [sp, #48]	; 0x30
 80044d6:	e68b      	b.n	80041f0 <_svfprintf_r+0xf50>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	dd5d      	ble.n	8004598 <_svfprintf_r+0x12f8>
 80044dc:	4650      	mov	r0, sl
 80044de:	2800      	cmp	r0, #0
 80044e0:	d13c      	bne.n	800455c <_svfprintf_r+0x12bc>
 80044e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80044e4:	07c9      	lsls	r1, r1, #31
 80044e6:	d439      	bmi.n	800455c <_svfprintf_r+0x12bc>
 80044e8:	930d      	str	r3, [sp, #52]	; 0x34
 80044ea:	930e      	str	r3, [sp, #56]	; 0x38
 80044ec:	e680      	b.n	80041f0 <_svfprintf_r+0xf50>
 80044ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80044f0:	4659      	mov	r1, fp
 80044f2:	1c32      	adds	r2, r6, #0
 80044f4:	f003 fe30 	bl	8008158 <__ssprint_r>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	d001      	beq.n	8004500 <_svfprintf_r+0x1260>
 80044fc:	f7ff fa61 	bl	80039c2 <_svfprintf_r+0x722>
 8004500:	ab34      	add	r3, sp, #208	; 0xd0
 8004502:	e6c6      	b.n	8004292 <_svfprintf_r+0xff2>
 8004504:	466b      	mov	r3, sp
 8004506:	339a      	adds	r3, #154	; 0x9a
 8004508:	1c20      	adds	r0, r4, #0
 800450a:	210a      	movs	r1, #10
 800450c:	4698      	mov	r8, r3
 800450e:	f004 ed2c 	blx	8008f68 <__aeabi_idivmod>
 8004512:	4642      	mov	r2, r8
 8004514:	3130      	adds	r1, #48	; 0x30
 8004516:	7011      	strb	r1, [r2, #0]
 8004518:	1c20      	adds	r0, r4, #0
 800451a:	210a      	movs	r1, #10
 800451c:	f004 ec8c 	blx	8008e38 <__aeabi_idiv>
 8004520:	4643      	mov	r3, r8
 8004522:	1c04      	adds	r4, r0, #0
 8004524:	3b01      	subs	r3, #1
 8004526:	2809      	cmp	r0, #9
 8004528:	dcee      	bgt.n	8004508 <_svfprintf_r+0x1268>
 800452a:	1c01      	adds	r1, r0, #0
 800452c:	3130      	adds	r1, #48	; 0x30
 800452e:	0609      	lsls	r1, r1, #24
 8004530:	4668      	mov	r0, sp
 8004532:	0e09      	lsrs	r1, r1, #24
 8004534:	309b      	adds	r0, #155	; 0x9b
 8004536:	7019      	strb	r1, [r3, #0]
 8004538:	4298      	cmp	r0, r3
 800453a:	d96e      	bls.n	800461a <_svfprintf_r+0x137a>
 800453c:	466a      	mov	r2, sp
 800453e:	4643      	mov	r3, r8
 8004540:	328e      	adds	r2, #142	; 0x8e
 8004542:	e001      	b.n	8004548 <_svfprintf_r+0x12a8>
 8004544:	7819      	ldrb	r1, [r3, #0]
 8004546:	3301      	adds	r3, #1
 8004548:	7011      	strb	r1, [r2, #0]
 800454a:	3201      	adds	r2, #1
 800454c:	4298      	cmp	r0, r3
 800454e:	d1f9      	bne.n	8004544 <_svfprintf_r+0x12a4>
 8004550:	4640      	mov	r0, r8
 8004552:	218e      	movs	r1, #142	; 0x8e
 8004554:	1a33      	subs	r3, r6, r0
 8004556:	4469      	add	r1, sp
 8004558:	18cb      	adds	r3, r1, r3
 800455a:	e76f      	b.n	800443c <_svfprintf_r+0x119c>
 800455c:	4652      	mov	r2, sl
 800455e:	3201      	adds	r2, #1
 8004560:	189a      	adds	r2, r3, r2
 8004562:	920e      	str	r2, [sp, #56]	; 0x38
 8004564:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004566:	43d2      	mvns	r2, r2
 8004568:	17d2      	asrs	r2, r2, #31
 800456a:	4010      	ands	r0, r2
 800456c:	900d      	str	r0, [sp, #52]	; 0x34
 800456e:	e63f      	b.n	80041f0 <_svfprintf_r+0xf50>
 8004570:	4b34      	ldr	r3, [pc, #208]	; (8004644 <_svfprintf_r+0x13a4>)
 8004572:	4698      	mov	r8, r3
 8004574:	f7ff fa08 	bl	8003988 <_svfprintf_r+0x6e8>
 8004578:	1c59      	adds	r1, r3, #1
 800457a:	43ca      	mvns	r2, r1
 800457c:	17d2      	asrs	r2, r2, #31
 800457e:	910e      	str	r1, [sp, #56]	; 0x38
 8004580:	4011      	ands	r1, r2
 8004582:	2267      	movs	r2, #103	; 0x67
 8004584:	910d      	str	r1, [sp, #52]	; 0x34
 8004586:	920c      	str	r2, [sp, #48]	; 0x30
 8004588:	e632      	b.n	80041f0 <_svfprintf_r+0xf50>
 800458a:	4a2e      	ldr	r2, [pc, #184]	; (8004644 <_svfprintf_r+0x13a4>)
 800458c:	4690      	mov	r8, r2
 800458e:	f7ff f8d7 	bl	8003740 <_svfprintf_r+0x4a0>
 8004592:	4a2c      	ldr	r2, [pc, #176]	; (8004644 <_svfprintf_r+0x13a4>)
 8004594:	4690      	mov	r8, r2
 8004596:	e4d0      	b.n	8003f3a <_svfprintf_r+0xc9a>
 8004598:	4651      	mov	r1, sl
 800459a:	2900      	cmp	r1, #0
 800459c:	d133      	bne.n	8004606 <_svfprintf_r+0x1366>
 800459e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045a0:	07d2      	lsls	r2, r2, #31
 80045a2:	d430      	bmi.n	8004606 <_svfprintf_r+0x1366>
 80045a4:	2001      	movs	r0, #1
 80045a6:	2101      	movs	r1, #1
 80045a8:	900d      	str	r0, [sp, #52]	; 0x34
 80045aa:	910e      	str	r1, [sp, #56]	; 0x38
 80045ac:	e620      	b.n	80041f0 <_svfprintf_r+0xf50>
 80045ae:	466b      	mov	r3, sp
 80045b0:	222d      	movs	r2, #45	; 0x2d
 80045b2:	338d      	adds	r3, #141	; 0x8d
 80045b4:	4264      	negs	r4, r4
 80045b6:	701a      	strb	r2, [r3, #0]
 80045b8:	e737      	b.n	800442a <_svfprintf_r+0x118a>
 80045ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80045bc:	07c9      	lsls	r1, r1, #31
 80045be:	d500      	bpl.n	80045c2 <_svfprintf_r+0x1322>
 80045c0:	e746      	b.n	8004450 <_svfprintf_r+0x11b0>
 80045c2:	43db      	mvns	r3, r3
 80045c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045c6:	17db      	asrs	r3, r3, #31
 80045c8:	401a      	ands	r2, r3
 80045ca:	2300      	movs	r3, #0
 80045cc:	920d      	str	r2, [sp, #52]	; 0x34
 80045ce:	9316      	str	r3, [sp, #88]	; 0x58
 80045d0:	e60f      	b.n	80041f2 <_svfprintf_r+0xf52>
 80045d2:	4b1c      	ldr	r3, [pc, #112]	; (8004644 <_svfprintf_r+0x13a4>)
 80045d4:	4698      	mov	r8, r3
 80045d6:	e587      	b.n	80040e8 <_svfprintf_r+0xe48>
 80045d8:	2202      	movs	r2, #2
 80045da:	1ad2      	subs	r2, r2, r3
 80045dc:	e771      	b.n	80044c2 <_svfprintf_r+0x1222>
 80045de:	4819      	ldr	r0, [pc, #100]	; (8004644 <_svfprintf_r+0x13a4>)
 80045e0:	4680      	mov	r8, r0
 80045e2:	e648      	b.n	8004276 <_svfprintf_r+0xfd6>
 80045e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045e6:	3204      	adds	r2, #4
 80045e8:	9209      	str	r2, [sp, #36]	; 0x24
 80045ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045ec:	6813      	ldr	r3, [r2, #0]
 80045ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045f0:	469a      	mov	sl, r3
 80045f2:	9210      	str	r2, [sp, #64]	; 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	db01      	blt.n	80045fc <_svfprintf_r+0x135c>
 80045f8:	f7fe fec2 	bl	8003380 <_svfprintf_r+0xe0>
 80045fc:	2301      	movs	r3, #1
 80045fe:	425b      	negs	r3, r3
 8004600:	469a      	mov	sl, r3
 8004602:	f7fe febd 	bl	8003380 <_svfprintf_r+0xe0>
 8004606:	4650      	mov	r0, sl
 8004608:	3002      	adds	r0, #2
 800460a:	43c2      	mvns	r2, r0
 800460c:	17d2      	asrs	r2, r2, #31
 800460e:	900e      	str	r0, [sp, #56]	; 0x38
 8004610:	4010      	ands	r0, r2
 8004612:	900d      	str	r0, [sp, #52]	; 0x34
 8004614:	e5ec      	b.n	80041f0 <_svfprintf_r+0xf50>
 8004616:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8004618:	e6f9      	b.n	800440e <_svfprintf_r+0x116e>
 800461a:	466b      	mov	r3, sp
 800461c:	338e      	adds	r3, #142	; 0x8e
 800461e:	e70d      	b.n	800443c <_svfprintf_r+0x119c>
 8004620:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004622:	230c      	movs	r3, #12
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	2301      	movs	r3, #1
 8004628:	425b      	negs	r3, r3
 800462a:	930f      	str	r3, [sp, #60]	; 0x3c
 800462c:	f7ff f905 	bl	800383a <_svfprintf_r+0x59a>
 8004630:	1c1c      	adds	r4, r3, #0
 8004632:	e5be      	b.n	80041b2 <_svfprintf_r+0xf12>
 8004634:	46c0      	nop			; (mov r8, r8)
 8004636:	46c0      	nop			; (mov r8, r8)
	...
 8004640:	0800dcbc 	.word	0x0800dcbc
 8004644:	0800dc64 	.word	0x0800dc64

08004648 <error>:
 8004648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464a:	1c04      	adds	r4, r0, #0
 800464c:	f001 fc34 	bl	8005eb8 <__errno>
 8004650:	2700      	movs	r7, #0
 8004652:	1c05      	adds	r5, r0, #0
 8004654:	2613      	movs	r6, #19
 8004656:	1c30      	adds	r0, r6, #0
 8004658:	1c39      	adds	r1, r7, #0
 800465a:	dfab      	svc	171	; 0xab
 800465c:	1c06      	adds	r6, r0, #0
 800465e:	602e      	str	r6, [r5, #0]
 8004660:	1c20      	adds	r0, r4, #0
 8004662:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004664:	bc02      	pop	{r1}
 8004666:	4708      	bx	r1

08004668 <wrap.part.0>:
 8004668:	2001      	movs	r0, #1
 800466a:	b508      	push	{r3, lr}
 800466c:	4240      	negs	r0, r0
 800466e:	f7ff ffeb 	bl	8004648 <error>
 8004672:	bc08      	pop	{r3}
 8004674:	bc02      	pop	{r1}
 8004676:	4708      	bx	r1

08004678 <remap_handle>:
 8004678:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <remap_handle+0x40>)
 800467a:	b510      	push	{r4, lr}
 800467c:	1c04      	adds	r4, r0, #0
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	2800      	cmp	r0, #0
 8004682:	d002      	beq.n	800468a <remap_handle+0x12>
 8004684:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00d      	beq.n	80046a6 <remap_handle+0x2e>
 800468a:	2c00      	cmp	r4, #0
 800468c:	d008      	beq.n	80046a0 <remap_handle+0x28>
 800468e:	2c01      	cmp	r4, #1
 8004690:	d00c      	beq.n	80046ac <remap_handle+0x34>
 8004692:	1c20      	adds	r0, r4, #0
 8004694:	3820      	subs	r0, #32
 8004696:	2c02      	cmp	r4, #2
 8004698:	d00b      	beq.n	80046b2 <remap_handle+0x3a>
 800469a:	bc10      	pop	{r4}
 800469c:	bc02      	pop	{r1}
 800469e:	4708      	bx	r1
 80046a0:	4b06      	ldr	r3, [pc, #24]	; (80046bc <remap_handle+0x44>)
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	e7f9      	b.n	800469a <remap_handle+0x22>
 80046a6:	f001 fd3f 	bl	8006128 <__sinit>
 80046aa:	e7ee      	b.n	800468a <remap_handle+0x12>
 80046ac:	4b03      	ldr	r3, [pc, #12]	; (80046bc <remap_handle+0x44>)
 80046ae:	6858      	ldr	r0, [r3, #4]
 80046b0:	e7f3      	b.n	800469a <remap_handle+0x22>
 80046b2:	4b02      	ldr	r3, [pc, #8]	; (80046bc <remap_handle+0x44>)
 80046b4:	6898      	ldr	r0, [r3, #8]
 80046b6:	e7f0      	b.n	800469a <remap_handle+0x22>
 80046b8:	200000e8 	.word	0x200000e8
 80046bc:	20000aec 	.word	0x20000aec

080046c0 <initialise_monitor_handles>:
 80046c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046c2:	464f      	mov	r7, r9
 80046c4:	4646      	mov	r6, r8
 80046c6:	b4c0      	push	{r6, r7}
 80046c8:	4b19      	ldr	r3, [pc, #100]	; (8004730 <initialise_monitor_handles+0x70>)
 80046ca:	b085      	sub	sp, #20
 80046cc:	9301      	str	r3, [sp, #4]
 80046ce:	ad01      	add	r5, sp, #4
 80046d0:	4698      	mov	r8, r3
 80046d2:	2703      	movs	r7, #3
 80046d4:	2300      	movs	r3, #0
 80046d6:	60af      	str	r7, [r5, #8]
 80046d8:	2601      	movs	r6, #1
 80046da:	606b      	str	r3, [r5, #4]
 80046dc:	1c30      	adds	r0, r6, #0
 80046de:	1c29      	adds	r1, r5, #0
 80046e0:	dfab      	svc	171	; 0xab
 80046e2:	4681      	mov	r9, r0
 80046e4:	4c13      	ldr	r4, [pc, #76]	; (8004734 <initialise_monitor_handles+0x74>)
 80046e6:	464b      	mov	r3, r9
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	4643      	mov	r3, r8
 80046ec:	9301      	str	r3, [sp, #4]
 80046ee:	2304      	movs	r3, #4
 80046f0:	60af      	str	r7, [r5, #8]
 80046f2:	606b      	str	r3, [r5, #4]
 80046f4:	1c30      	adds	r0, r6, #0
 80046f6:	1c29      	adds	r1, r5, #0
 80046f8:	dfab      	svc	171	; 0xab
 80046fa:	1c05      	adds	r5, r0, #0
 80046fc:	2201      	movs	r2, #1
 80046fe:	1c23      	adds	r3, r4, #0
 8004700:	1c21      	adds	r1, r4, #0
 8004702:	60a5      	str	r5, [r4, #8]
 8004704:	6065      	str	r5, [r4, #4]
 8004706:	330c      	adds	r3, #12
 8004708:	31ac      	adds	r1, #172	; 0xac
 800470a:	4252      	negs	r2, r2
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	3308      	adds	r3, #8
 8004710:	428b      	cmp	r3, r1
 8004712:	d1fb      	bne.n	800470c <initialise_monitor_handles+0x4c>
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	60e3      	str	r3, [r4, #12]
 8004718:	2300      	movs	r3, #0
 800471a:	6123      	str	r3, [r4, #16]
 800471c:	6165      	str	r5, [r4, #20]
 800471e:	61a3      	str	r3, [r4, #24]
 8004720:	b005      	add	sp, #20
 8004722:	bc0c      	pop	{r2, r3}
 8004724:	4690      	mov	r8, r2
 8004726:	4699      	mov	r9, r3
 8004728:	bcf0      	pop	{r4, r5, r6, r7}
 800472a:	bc01      	pop	{r0}
 800472c:	4700      	bx	r0
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	0800dcc8 	.word	0x0800dcc8
 8004734:	20000aec 	.word	0x20000aec

08004738 <_swiread>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	1c15      	adds	r5, r2, #0
 800473e:	1c0e      	adds	r6, r1, #0
 8004740:	f7ff ff9a 	bl	8004678 <remap_handle>
 8004744:	9503      	str	r5, [sp, #12]
 8004746:	9001      	str	r0, [sp, #4]
 8004748:	9602      	str	r6, [sp, #8]
 800474a:	ac01      	add	r4, sp, #4
 800474c:	2506      	movs	r5, #6
 800474e:	1c28      	adds	r0, r5, #0
 8004750:	1c21      	adds	r1, r4, #0
 8004752:	dfab      	svc	171	; 0xab
 8004754:	1c04      	adds	r4, r0, #0
 8004756:	1c20      	adds	r0, r4, #0
 8004758:	b004      	add	sp, #16
 800475a:	bc70      	pop	{r4, r5, r6}
 800475c:	bc02      	pop	{r1}
 800475e:	4708      	bx	r1

08004760 <_read>:
 8004760:	b5d0      	push	{r4, r6, r7, lr}
 8004762:	464f      	mov	r7, r9
 8004764:	4646      	mov	r6, r8
 8004766:	b4c0      	push	{r6, r7}
 8004768:	4689      	mov	r9, r1
 800476a:	1c17      	adds	r7, r2, #0
 800476c:	1c06      	adds	r6, r0, #0
 800476e:	f7ff ff83 	bl	8004678 <remap_handle>
 8004772:	4a16      	ldr	r2, [pc, #88]	; (80047cc <_read+0x6c>)
 8004774:	1c13      	adds	r3, r2, #0
 8004776:	4690      	mov	r8, r2
 8004778:	330c      	adds	r3, #12
 800477a:	2400      	movs	r4, #0
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4290      	cmp	r0, r2
 8004780:	d00c      	beq.n	800479c <_read+0x3c>
 8004782:	3401      	adds	r4, #1
 8004784:	3308      	adds	r3, #8
 8004786:	2c14      	cmp	r4, #20
 8004788:	d1f8      	bne.n	800477c <_read+0x1c>
 800478a:	1c30      	adds	r0, r6, #0
 800478c:	4649      	mov	r1, r9
 800478e:	1c3a      	adds	r2, r7, #0
 8004790:	f7ff ffd2 	bl	8004738 <_swiread>
 8004794:	2800      	cmp	r0, #0
 8004796:	db14      	blt.n	80047c2 <_read+0x62>
 8004798:	1a38      	subs	r0, r7, r0
 800479a:	e00c      	b.n	80047b6 <_read+0x56>
 800479c:	1c30      	adds	r0, r6, #0
 800479e:	4649      	mov	r1, r9
 80047a0:	1c3a      	adds	r2, r7, #0
 80047a2:	f7ff ffc9 	bl	8004738 <_swiread>
 80047a6:	2800      	cmp	r0, #0
 80047a8:	db0b      	blt.n	80047c2 <_read+0x62>
 80047aa:	00e4      	lsls	r4, r4, #3
 80047ac:	4444      	add	r4, r8
 80047ae:	6922      	ldr	r2, [r4, #16]
 80047b0:	1a38      	subs	r0, r7, r0
 80047b2:	1813      	adds	r3, r2, r0
 80047b4:	6123      	str	r3, [r4, #16]
 80047b6:	bc0c      	pop	{r2, r3}
 80047b8:	4690      	mov	r8, r2
 80047ba:	4699      	mov	r9, r3
 80047bc:	bcd0      	pop	{r4, r6, r7}
 80047be:	bc02      	pop	{r1}
 80047c0:	4708      	bx	r1
 80047c2:	2001      	movs	r0, #1
 80047c4:	4240      	negs	r0, r0
 80047c6:	f7ff ff3f 	bl	8004648 <error>
 80047ca:	e7f4      	b.n	80047b6 <_read+0x56>
 80047cc:	20000aec 	.word	0x20000aec

080047d0 <_swilseek>:
 80047d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d2:	464e      	mov	r6, r9
 80047d4:	4645      	mov	r5, r8
 80047d6:	465f      	mov	r7, fp
 80047d8:	b4e0      	push	{r5, r6, r7}
 80047da:	b082      	sub	sp, #8
 80047dc:	1c15      	adds	r5, r2, #0
 80047de:	4680      	mov	r8, r0
 80047e0:	1c0e      	adds	r6, r1, #0
 80047e2:	f7ff ff49 	bl	8004678 <remap_handle>
 80047e6:	4a23      	ldr	r2, [pc, #140]	; (8004874 <_swilseek+0xa4>)
 80047e8:	1c13      	adds	r3, r2, #0
 80047ea:	4691      	mov	r9, r2
 80047ec:	330c      	adds	r3, #12
 80047ee:	2400      	movs	r4, #0
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4290      	cmp	r0, r2
 80047f4:	d008      	beq.n	8004808 <_swilseek+0x38>
 80047f6:	3401      	adds	r4, #1
 80047f8:	3308      	adds	r3, #8
 80047fa:	2c14      	cmp	r4, #20
 80047fc:	d1f8      	bne.n	80047f0 <_swilseek+0x20>
 80047fe:	2d01      	cmp	r5, #1
 8004800:	d015      	beq.n	800482e <_swilseek+0x5e>
 8004802:	2200      	movs	r2, #0
 8004804:	4693      	mov	fp, r2
 8004806:	e003      	b.n	8004810 <_swilseek+0x40>
 8004808:	2d01      	cmp	r5, #1
 800480a:	d02a      	beq.n	8004862 <_swilseek+0x92>
 800480c:	2301      	movs	r3, #1
 800480e:	469b      	mov	fp, r3
 8004810:	466f      	mov	r7, sp
 8004812:	2d02      	cmp	r5, #2
 8004814:	d01d      	beq.n	8004852 <_swilseek+0x82>
 8004816:	4640      	mov	r0, r8
 8004818:	f7ff ff2e 	bl	8004678 <remap_handle>
 800481c:	250a      	movs	r5, #10
 800481e:	9000      	str	r0, [sp, #0]
 8004820:	607e      	str	r6, [r7, #4]
 8004822:	1c28      	adds	r0, r5, #0
 8004824:	1c39      	adds	r1, r7, #0
 8004826:	dfab      	svc	171	; 0xab
 8004828:	1c07      	adds	r7, r0, #0
 800482a:	2f00      	cmp	r7, #0
 800482c:	d00a      	beq.n	8004844 <_swilseek+0x74>
 800482e:	2601      	movs	r6, #1
 8004830:	4276      	negs	r6, r6
 8004832:	1c30      	adds	r0, r6, #0
 8004834:	b002      	add	sp, #8
 8004836:	bc1c      	pop	{r2, r3, r4}
 8004838:	4690      	mov	r8, r2
 800483a:	4699      	mov	r9, r3
 800483c:	46a3      	mov	fp, r4
 800483e:	bcf0      	pop	{r4, r5, r6, r7}
 8004840:	bc02      	pop	{r1}
 8004842:	4708      	bx	r1
 8004844:	465b      	mov	r3, fp
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f3      	beq.n	8004832 <_swilseek+0x62>
 800484a:	00e4      	lsls	r4, r4, #3
 800484c:	444c      	add	r4, r9
 800484e:	6126      	str	r6, [r4, #16]
 8004850:	e7ef      	b.n	8004832 <_swilseek+0x62>
 8004852:	9000      	str	r0, [sp, #0]
 8004854:	250c      	movs	r5, #12
 8004856:	1c28      	adds	r0, r5, #0
 8004858:	1c39      	adds	r1, r7, #0
 800485a:	dfab      	svc	171	; 0xab
 800485c:	1c05      	adds	r5, r0, #0
 800485e:	1976      	adds	r6, r6, r5
 8004860:	e7d9      	b.n	8004816 <_swilseek+0x46>
 8004862:	00e3      	lsls	r3, r4, #3
 8004864:	444b      	add	r3, r9
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2201      	movs	r2, #1
 800486a:	18f6      	adds	r6, r6, r3
 800486c:	4693      	mov	fp, r2
 800486e:	466f      	mov	r7, sp
 8004870:	e7d1      	b.n	8004816 <_swilseek+0x46>
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	20000aec 	.word	0x20000aec

08004878 <_lseek>:
 8004878:	b508      	push	{r3, lr}
 800487a:	f7ff ffa9 	bl	80047d0 <_swilseek>
 800487e:	1c43      	adds	r3, r0, #1
 8004880:	d002      	beq.n	8004888 <_lseek+0x10>
 8004882:	bc08      	pop	{r3}
 8004884:	bc02      	pop	{r1}
 8004886:	4708      	bx	r1
 8004888:	f7ff feee 	bl	8004668 <wrap.part.0>
 800488c:	e7f9      	b.n	8004882 <_lseek+0xa>
 800488e:	46c0      	nop			; (mov r8, r8)

08004890 <_swiwrite>:
 8004890:	b570      	push	{r4, r5, r6, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	1c15      	adds	r5, r2, #0
 8004896:	1c0e      	adds	r6, r1, #0
 8004898:	f7ff feee 	bl	8004678 <remap_handle>
 800489c:	9503      	str	r5, [sp, #12]
 800489e:	9001      	str	r0, [sp, #4]
 80048a0:	9602      	str	r6, [sp, #8]
 80048a2:	ac01      	add	r4, sp, #4
 80048a4:	2505      	movs	r5, #5
 80048a6:	1c28      	adds	r0, r5, #0
 80048a8:	1c21      	adds	r1, r4, #0
 80048aa:	dfab      	svc	171	; 0xab
 80048ac:	1c04      	adds	r4, r0, #0
 80048ae:	1c20      	adds	r0, r4, #0
 80048b0:	b004      	add	sp, #16
 80048b2:	bc70      	pop	{r4, r5, r6}
 80048b4:	bc02      	pop	{r1}
 80048b6:	4708      	bx	r1

080048b8 <_write>:
 80048b8:	b5d0      	push	{r4, r6, r7, lr}
 80048ba:	464f      	mov	r7, r9
 80048bc:	4646      	mov	r6, r8
 80048be:	b4c0      	push	{r6, r7}
 80048c0:	4689      	mov	r9, r1
 80048c2:	1c16      	adds	r6, r2, #0
 80048c4:	1c07      	adds	r7, r0, #0
 80048c6:	f7ff fed7 	bl	8004678 <remap_handle>
 80048ca:	4a18      	ldr	r2, [pc, #96]	; (800492c <_write+0x74>)
 80048cc:	1c13      	adds	r3, r2, #0
 80048ce:	4690      	mov	r8, r2
 80048d0:	330c      	adds	r3, #12
 80048d2:	2400      	movs	r4, #0
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4290      	cmp	r0, r2
 80048d8:	d00e      	beq.n	80048f8 <_write+0x40>
 80048da:	3401      	adds	r4, #1
 80048dc:	3308      	adds	r3, #8
 80048de:	2c14      	cmp	r4, #20
 80048e0:	d1f8      	bne.n	80048d4 <_write+0x1c>
 80048e2:	1c38      	adds	r0, r7, #0
 80048e4:	4649      	mov	r1, r9
 80048e6:	1c32      	adds	r2, r6, #0
 80048e8:	f7ff ffd2 	bl	8004890 <_swiwrite>
 80048ec:	42b0      	cmp	r0, r6
 80048ee:	d018      	beq.n	8004922 <_write+0x6a>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	d016      	beq.n	8004922 <_write+0x6a>
 80048f4:	1a30      	subs	r0, r6, r0
 80048f6:	e00e      	b.n	8004916 <_write+0x5e>
 80048f8:	1c38      	adds	r0, r7, #0
 80048fa:	4649      	mov	r1, r9
 80048fc:	1c32      	adds	r2, r6, #0
 80048fe:	f7ff ffc7 	bl	8004890 <_swiwrite>
 8004902:	42b0      	cmp	r0, r6
 8004904:	d00d      	beq.n	8004922 <_write+0x6a>
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	d00b      	beq.n	8004922 <_write+0x6a>
 800490a:	00e4      	lsls	r4, r4, #3
 800490c:	4444      	add	r4, r8
 800490e:	6922      	ldr	r2, [r4, #16]
 8004910:	1a30      	subs	r0, r6, r0
 8004912:	1813      	adds	r3, r2, r0
 8004914:	6123      	str	r3, [r4, #16]
 8004916:	bc0c      	pop	{r2, r3}
 8004918:	4690      	mov	r8, r2
 800491a:	4699      	mov	r9, r3
 800491c:	bcd0      	pop	{r4, r6, r7}
 800491e:	bc02      	pop	{r1}
 8004920:	4708      	bx	r1
 8004922:	2001      	movs	r0, #1
 8004924:	4240      	negs	r0, r0
 8004926:	f7ff fe8f 	bl	8004648 <error>
 800492a:	e7f4      	b.n	8004916 <_write+0x5e>
 800492c:	20000aec 	.word	0x20000aec

08004930 <_swiopen>:
 8004930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004932:	4f1f      	ldr	r7, [pc, #124]	; (80049b0 <_swiopen+0x80>)
 8004934:	1c3b      	adds	r3, r7, #0
 8004936:	b085      	sub	sp, #20
 8004938:	330c      	adds	r3, #12
 800493a:	2400      	movs	r4, #0
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	3201      	adds	r2, #1
 8004940:	d009      	beq.n	8004956 <_swiopen+0x26>
 8004942:	3401      	adds	r4, #1
 8004944:	3308      	adds	r3, #8
 8004946:	2c14      	cmp	r4, #20
 8004948:	d1f8      	bne.n	800493c <_swiopen+0xc>
 800494a:	2001      	movs	r0, #1
 800494c:	4240      	negs	r0, r0
 800494e:	b005      	add	sp, #20
 8004950:	bcf0      	pop	{r4, r5, r6, r7}
 8004952:	bc02      	pop	{r1}
 8004954:	4708      	bx	r1
 8004956:	03cd      	lsls	r5, r1, #15
 8004958:	2302      	movs	r3, #2
 800495a:	0fed      	lsrs	r5, r5, #31
 800495c:	420b      	tst	r3, r1
 800495e:	d000      	beq.n	8004962 <_swiopen+0x32>
 8004960:	431d      	orrs	r5, r3
 8004962:	058b      	lsls	r3, r1, #22
 8004964:	d501      	bpl.n	800496a <_swiopen+0x3a>
 8004966:	2304      	movs	r3, #4
 8004968:	431d      	orrs	r5, r3
 800496a:	054a      	lsls	r2, r1, #21
 800496c:	d501      	bpl.n	8004972 <_swiopen+0x42>
 800496e:	2304      	movs	r3, #4
 8004970:	431d      	orrs	r5, r3
 8004972:	2308      	movs	r3, #8
 8004974:	420b      	tst	r3, r1
 8004976:	d002      	beq.n	800497e <_swiopen+0x4e>
 8004978:	2204      	movs	r2, #4
 800497a:	4395      	bics	r5, r2
 800497c:	431d      	orrs	r5, r3
 800497e:	ae01      	add	r6, sp, #4
 8004980:	9001      	str	r0, [sp, #4]
 8004982:	f7fb fbf1 	bl	8000168 <strlen>
 8004986:	6075      	str	r5, [r6, #4]
 8004988:	60b0      	str	r0, [r6, #8]
 800498a:	2501      	movs	r5, #1
 800498c:	1c28      	adds	r0, r5, #0
 800498e:	1c31      	adds	r1, r6, #0
 8004990:	dfab      	svc	171	; 0xab
 8004992:	1c06      	adds	r6, r0, #0
 8004994:	2e00      	cmp	r6, #0
 8004996:	db07      	blt.n	80049a8 <_swiopen+0x78>
 8004998:	00e4      	lsls	r4, r4, #3
 800499a:	193f      	adds	r7, r7, r4
 800499c:	2300      	movs	r3, #0
 800499e:	1c30      	adds	r0, r6, #0
 80049a0:	60fe      	str	r6, [r7, #12]
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	3020      	adds	r0, #32
 80049a6:	e7d2      	b.n	800494e <_swiopen+0x1e>
 80049a8:	1c30      	adds	r0, r6, #0
 80049aa:	f7ff fe4d 	bl	8004648 <error>
 80049ae:	e7ce      	b.n	800494e <_swiopen+0x1e>
 80049b0:	20000aec 	.word	0x20000aec

080049b4 <_open>:
 80049b4:	b40e      	push	{r1, r2, r3}
 80049b6:	b500      	push	{lr}
 80049b8:	9901      	ldr	r1, [sp, #4]
 80049ba:	f7ff ffb9 	bl	8004930 <_swiopen>
 80049be:	1c43      	adds	r3, r0, #1
 80049c0:	d002      	beq.n	80049c8 <_open+0x14>
 80049c2:	bc08      	pop	{r3}
 80049c4:	b003      	add	sp, #12
 80049c6:	4718      	bx	r3
 80049c8:	f7ff fe4e 	bl	8004668 <wrap.part.0>
 80049cc:	e7f9      	b.n	80049c2 <_open+0xe>
 80049ce:	46c0      	nop			; (mov r8, r8)

080049d0 <_swiclose>:
 80049d0:	b530      	push	{r4, r5, lr}
 80049d2:	b083      	sub	sp, #12
 80049d4:	f7ff fe50 	bl	8004678 <remap_handle>
 80049d8:	490e      	ldr	r1, [pc, #56]	; (8004a14 <_swiclose+0x44>)
 80049da:	9001      	str	r0, [sp, #4]
 80049dc:	1c0b      	adds	r3, r1, #0
 80049de:	330c      	adds	r3, #12
 80049e0:	2200      	movs	r2, #0
 80049e2:	681c      	ldr	r4, [r3, #0]
 80049e4:	42a0      	cmp	r0, r4
 80049e6:	d00e      	beq.n	8004a06 <_swiclose+0x36>
 80049e8:	3201      	adds	r2, #1
 80049ea:	3308      	adds	r3, #8
 80049ec:	2a14      	cmp	r2, #20
 80049ee:	d1f8      	bne.n	80049e2 <_swiclose+0x12>
 80049f0:	ad01      	add	r5, sp, #4
 80049f2:	2402      	movs	r4, #2
 80049f4:	1c20      	adds	r0, r4, #0
 80049f6:	1c29      	adds	r1, r5, #0
 80049f8:	dfab      	svc	171	; 0xab
 80049fa:	1c04      	adds	r4, r0, #0
 80049fc:	1c20      	adds	r0, r4, #0
 80049fe:	b003      	add	sp, #12
 8004a00:	bc30      	pop	{r4, r5}
 8004a02:	bc02      	pop	{r1}
 8004a04:	4708      	bx	r1
 8004a06:	00d2      	lsls	r2, r2, #3
 8004a08:	2301      	movs	r3, #1
 8004a0a:	1889      	adds	r1, r1, r2
 8004a0c:	425b      	negs	r3, r3
 8004a0e:	60cb      	str	r3, [r1, #12]
 8004a10:	e7ee      	b.n	80049f0 <_swiclose+0x20>
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	20000aec 	.word	0x20000aec

08004a18 <_close>:
 8004a18:	b508      	push	{r3, lr}
 8004a1a:	f7ff ffd9 	bl	80049d0 <_swiclose>
 8004a1e:	1c43      	adds	r3, r0, #1
 8004a20:	d002      	beq.n	8004a28 <_close+0x10>
 8004a22:	bc08      	pop	{r3}
 8004a24:	bc02      	pop	{r1}
 8004a26:	4708      	bx	r1
 8004a28:	f7ff fe1e 	bl	8004668 <wrap.part.0>
 8004a2c:	e7f9      	b.n	8004a22 <_close+0xa>
 8004a2e:	46c0      	nop			; (mov r8, r8)

08004a30 <_kill>:
 8004a30:	b530      	push	{r4, r5, lr}
 8004a32:	2906      	cmp	r1, #6
 8004a34:	d009      	beq.n	8004a4a <_kill+0x1a>
 8004a36:	4d08      	ldr	r5, [pc, #32]	; (8004a58 <_kill+0x28>)
 8004a38:	2418      	movs	r4, #24
 8004a3a:	1c20      	adds	r0, r4, #0
 8004a3c:	1c29      	adds	r1, r5, #0
 8004a3e:	dfab      	svc	171	; 0xab
 8004a40:	1c04      	adds	r4, r0, #0
 8004a42:	1c20      	adds	r0, r4, #0
 8004a44:	bc30      	pop	{r4, r5}
 8004a46:	bc02      	pop	{r1}
 8004a48:	4708      	bx	r1
 8004a4a:	4d04      	ldr	r5, [pc, #16]	; (8004a5c <_kill+0x2c>)
 8004a4c:	2418      	movs	r4, #24
 8004a4e:	1c20      	adds	r0, r4, #0
 8004a50:	1c29      	adds	r1, r5, #0
 8004a52:	dfab      	svc	171	; 0xab
 8004a54:	1c04      	adds	r4, r0, #0
 8004a56:	e7f4      	b.n	8004a42 <_kill+0x12>
 8004a58:	00020026 	.word	0x00020026
 8004a5c:	00020023 	.word	0x00020023

08004a60 <_exit>:
 8004a60:	b530      	push	{r4, r5, lr}
 8004a62:	4d04      	ldr	r5, [pc, #16]	; (8004a74 <_exit+0x14>)
 8004a64:	2418      	movs	r4, #24
 8004a66:	1c20      	adds	r0, r4, #0
 8004a68:	1c29      	adds	r1, r5, #0
 8004a6a:	dfab      	svc	171	; 0xab
 8004a6c:	1c04      	adds	r4, r0, #0
 8004a6e:	bc30      	pop	{r4, r5}
 8004a70:	bc01      	pop	{r0}
 8004a72:	4700      	bx	r0
 8004a74:	00020026 	.word	0x00020026

08004a78 <_getpid>:
 8004a78:	2001      	movs	r0, #1
 8004a7a:	4770      	bx	lr

08004a7c <_sbrk>:
 8004a7c:	4a0b      	ldr	r2, [pc, #44]	; (8004aac <_sbrk+0x30>)
 8004a7e:	b508      	push	{r3, lr}
 8004a80:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00f      	beq.n	8004aa6 <_sbrk+0x2a>
 8004a86:	1818      	adds	r0, r3, r0
 8004a88:	4669      	mov	r1, sp
 8004a8a:	4288      	cmp	r0, r1
 8004a8c:	d804      	bhi.n	8004a98 <_sbrk+0x1c>
 8004a8e:	62d0      	str	r0, [r2, #44]	; 0x2c
 8004a90:	1c18      	adds	r0, r3, #0
 8004a92:	bc08      	pop	{r3}
 8004a94:	bc02      	pop	{r1}
 8004a96:	4708      	bx	r1
 8004a98:	f001 fa0e 	bl	8005eb8 <__errno>
 8004a9c:	230c      	movs	r3, #12
 8004a9e:	6003      	str	r3, [r0, #0]
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	425b      	negs	r3, r3
 8004aa4:	e7f4      	b.n	8004a90 <_sbrk+0x14>
 8004aa6:	4b02      	ldr	r3, [pc, #8]	; (8004ab0 <_sbrk+0x34>)
 8004aa8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004aaa:	e7ec      	b.n	8004a86 <_sbrk+0xa>
 8004aac:	20000b6c 	.word	0x20000b6c
 8004ab0:	20001f50 	.word	0x20001f50

08004ab4 <_fstat>:
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	1c08      	adds	r0, r1, #0
 8004ab8:	1c0c      	adds	r4, r1, #0
 8004aba:	223c      	movs	r2, #60	; 0x3c
 8004abc:	2100      	movs	r1, #0
 8004abe:	f7fc fc5b 	bl	8001378 <memset>
 8004ac2:	2380      	movs	r3, #128	; 0x80
 8004ac4:	019b      	lsls	r3, r3, #6
 8004ac6:	6063      	str	r3, [r4, #4]
 8004ac8:	2380      	movs	r3, #128	; 0x80
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	2000      	movs	r0, #0
 8004ace:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ad0:	bc10      	pop	{r4}
 8004ad2:	bc02      	pop	{r1}
 8004ad4:	4708      	bx	r1
 8004ad6:	46c0      	nop			; (mov r8, r8)

08004ad8 <_stat>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	1c0c      	adds	r4, r1, #0
 8004adc:	2100      	movs	r1, #0
 8004ade:	f7ff ff69 	bl	80049b4 <_open>
 8004ae2:	1e05      	subs	r5, r0, #0
 8004ae4:	db11      	blt.n	8004b0a <_stat+0x32>
 8004ae6:	1c20      	adds	r0, r4, #0
 8004ae8:	2100      	movs	r1, #0
 8004aea:	223c      	movs	r2, #60	; 0x3c
 8004aec:	f7fc fc44 	bl	8001378 <memset>
 8004af0:	2381      	movs	r3, #129	; 0x81
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	6063      	str	r3, [r4, #4]
 8004af6:	2380      	movs	r3, #128	; 0x80
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004afc:	1c28      	adds	r0, r5, #0
 8004afe:	f7ff ff67 	bl	80049d0 <_swiclose>
 8004b02:	2000      	movs	r0, #0
 8004b04:	bc38      	pop	{r3, r4, r5}
 8004b06:	bc02      	pop	{r1}
 8004b08:	4708      	bx	r1
 8004b0a:	2001      	movs	r0, #1
 8004b0c:	4240      	negs	r0, r0
 8004b0e:	e7f9      	b.n	8004b04 <_stat+0x2c>

08004b10 <_link>:
 8004b10:	2001      	movs	r0, #1
 8004b12:	4240      	negs	r0, r0
 8004b14:	4770      	bx	lr
 8004b16:	46c0      	nop			; (mov r8, r8)

08004b18 <_unlink>:
 8004b18:	b530      	push	{r4, r5, lr}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	466c      	mov	r4, sp
 8004b1e:	9000      	str	r0, [sp, #0]
 8004b20:	f7fb fb22 	bl	8000168 <strlen>
 8004b24:	250e      	movs	r5, #14
 8004b26:	9001      	str	r0, [sp, #4]
 8004b28:	1c28      	adds	r0, r5, #0
 8004b2a:	1c21      	adds	r1, r4, #0
 8004b2c:	dfab      	svc	171	; 0xab
 8004b2e:	1c04      	adds	r4, r0, #0
 8004b30:	1c63      	adds	r3, r4, #1
 8004b32:	d006      	beq.n	8004b42 <_unlink+0x2a>
 8004b34:	4260      	negs	r0, r4
 8004b36:	4160      	adcs	r0, r4
 8004b38:	3801      	subs	r0, #1
 8004b3a:	b003      	add	sp, #12
 8004b3c:	bc30      	pop	{r4, r5}
 8004b3e:	bc02      	pop	{r1}
 8004b40:	4708      	bx	r1
 8004b42:	f7ff fd91 	bl	8004668 <wrap.part.0>
 8004b46:	1c04      	adds	r4, r0, #0
 8004b48:	e7f4      	b.n	8004b34 <_unlink+0x1c>
 8004b4a:	46c0      	nop			; (mov r8, r8)

08004b4c <_raise>:
 8004b4c:	4770      	bx	lr
 8004b4e:	46c0      	nop			; (mov r8, r8)

08004b50 <_gettimeofday>:
 8004b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b52:	1c05      	adds	r5, r0, #0
 8004b54:	1c0c      	adds	r4, r1, #0
 8004b56:	2800      	cmp	r0, #0
 8004b58:	d007      	beq.n	8004b6a <_gettimeofday+0x1a>
 8004b5a:	2600      	movs	r6, #0
 8004b5c:	2711      	movs	r7, #17
 8004b5e:	1c38      	adds	r0, r7, #0
 8004b60:	1c31      	adds	r1, r6, #0
 8004b62:	dfab      	svc	171	; 0xab
 8004b64:	1c07      	adds	r7, r0, #0
 8004b66:	602f      	str	r7, [r5, #0]
 8004b68:	606e      	str	r6, [r5, #4]
 8004b6a:	2c00      	cmp	r4, #0
 8004b6c:	d002      	beq.n	8004b74 <_gettimeofday+0x24>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	6063      	str	r3, [r4, #4]
 8004b74:	2000      	movs	r0, #0
 8004b76:	bcf0      	pop	{r4, r5, r6, r7}
 8004b78:	bc02      	pop	{r1}
 8004b7a:	4708      	bx	r1

08004b7c <_times>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	1c04      	adds	r4, r0, #0
 8004b80:	2500      	movs	r5, #0
 8004b82:	2610      	movs	r6, #16
 8004b84:	1c30      	adds	r0, r6, #0
 8004b86:	1c29      	adds	r1, r5, #0
 8004b88:	dfab      	svc	171	; 0xab
 8004b8a:	1c06      	adds	r6, r0, #0
 8004b8c:	2c00      	cmp	r4, #0
 8004b8e:	d003      	beq.n	8004b98 <_times+0x1c>
 8004b90:	6026      	str	r6, [r4, #0]
 8004b92:	6065      	str	r5, [r4, #4]
 8004b94:	60a5      	str	r5, [r4, #8]
 8004b96:	60e5      	str	r5, [r4, #12]
 8004b98:	1c30      	adds	r0, r6, #0
 8004b9a:	bc70      	pop	{r4, r5, r6}
 8004b9c:	bc02      	pop	{r1}
 8004b9e:	4708      	bx	r1

08004ba0 <_isatty>:
 8004ba0:	b530      	push	{r4, r5, lr}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	f7ff fd68 	bl	8004678 <remap_handle>
 8004ba8:	2409      	movs	r4, #9
 8004baa:	9001      	str	r0, [sp, #4]
 8004bac:	ad01      	add	r5, sp, #4
 8004bae:	1c20      	adds	r0, r4, #0
 8004bb0:	1c29      	adds	r1, r5, #0
 8004bb2:	dfab      	svc	171	; 0xab
 8004bb4:	1c04      	adds	r4, r0, #0
 8004bb6:	1c63      	adds	r3, r4, #1
 8004bb8:	d004      	beq.n	8004bc4 <_isatty+0x24>
 8004bba:	1c20      	adds	r0, r4, #0
 8004bbc:	b003      	add	sp, #12
 8004bbe:	bc30      	pop	{r4, r5}
 8004bc0:	bc02      	pop	{r1}
 8004bc2:	4708      	bx	r1
 8004bc4:	f7ff fd50 	bl	8004668 <wrap.part.0>
 8004bc8:	1c04      	adds	r4, r0, #0
 8004bca:	e7f6      	b.n	8004bba <_isatty+0x1a>

08004bcc <_system>:
 8004bcc:	b530      	push	{r4, r5, lr}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d01d      	beq.n	8004c10 <_system+0x44>
 8004bd4:	466c      	mov	r4, sp
 8004bd6:	9000      	str	r0, [sp, #0]
 8004bd8:	f7fb fac6 	bl	8000168 <strlen>
 8004bdc:	2512      	movs	r5, #18
 8004bde:	9001      	str	r0, [sp, #4]
 8004be0:	1c28      	adds	r0, r5, #0
 8004be2:	1c21      	adds	r1, r4, #0
 8004be4:	dfab      	svc	171	; 0xab
 8004be6:	1c04      	adds	r4, r0, #0
 8004be8:	1c63      	adds	r3, r4, #1
 8004bea:	d013      	beq.n	8004c14 <_system+0x48>
 8004bec:	2cff      	cmp	r4, #255	; 0xff
 8004bee:	d80a      	bhi.n	8004c06 <_system+0x3a>
 8004bf0:	2c00      	cmp	r4, #0
 8004bf2:	d008      	beq.n	8004c06 <_system+0x3a>
 8004bf4:	1c23      	adds	r3, r4, #0
 8004bf6:	21ff      	movs	r1, #255	; 0xff
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	d00f      	beq.n	8004c1c <_system+0x50>
 8004bfc:	121a      	asrs	r2, r3, #8
 8004bfe:	400a      	ands	r2, r1
 8004c00:	42a2      	cmp	r2, r4
 8004c02:	d1f9      	bne.n	8004bf8 <_system+0x2c>
 8004c04:	1c1c      	adds	r4, r3, #0
 8004c06:	1c20      	adds	r0, r4, #0
 8004c08:	b003      	add	sp, #12
 8004c0a:	bc30      	pop	{r4, r5}
 8004c0c:	bc02      	pop	{r1}
 8004c0e:	4708      	bx	r1
 8004c10:	2401      	movs	r4, #1
 8004c12:	e7f8      	b.n	8004c06 <_system+0x3a>
 8004c14:	f7ff fd28 	bl	8004668 <wrap.part.0>
 8004c18:	1c04      	adds	r4, r0, #0
 8004c1a:	e7e7      	b.n	8004bec <_system+0x20>
 8004c1c:	2400      	movs	r4, #0
 8004c1e:	e7f2      	b.n	8004c06 <_system+0x3a>

08004c20 <_rename>:
 8004c20:	b530      	push	{r4, r5, lr}
 8004c22:	b085      	sub	sp, #20
 8004c24:	1c0d      	adds	r5, r1, #0
 8004c26:	466c      	mov	r4, sp
 8004c28:	9000      	str	r0, [sp, #0]
 8004c2a:	f7fb fa9d 	bl	8000168 <strlen>
 8004c2e:	9001      	str	r0, [sp, #4]
 8004c30:	1c28      	adds	r0, r5, #0
 8004c32:	9502      	str	r5, [sp, #8]
 8004c34:	f7fb fa98 	bl	8000168 <strlen>
 8004c38:	250f      	movs	r5, #15
 8004c3a:	9003      	str	r0, [sp, #12]
 8004c3c:	1c28      	adds	r0, r5, #0
 8004c3e:	1c21      	adds	r1, r4, #0
 8004c40:	dfab      	svc	171	; 0xab
 8004c42:	1c04      	adds	r4, r0, #0
 8004c44:	1c63      	adds	r3, r4, #1
 8004c46:	d006      	beq.n	8004c56 <_rename+0x36>
 8004c48:	4260      	negs	r0, r4
 8004c4a:	4160      	adcs	r0, r4
 8004c4c:	3801      	subs	r0, #1
 8004c4e:	b005      	add	sp, #20
 8004c50:	bc30      	pop	{r4, r5}
 8004c52:	bc02      	pop	{r1}
 8004c54:	4708      	bx	r1
 8004c56:	f7ff fd07 	bl	8004668 <wrap.part.0>
 8004c5a:	1c04      	adds	r4, r0, #0
 8004c5c:	e7f4      	b.n	8004c48 <_rename+0x28>
 8004c5e:	46c0      	nop			; (mov r8, r8)

08004c60 <__submore>:
 8004c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c62:	1c0c      	adds	r4, r1, #0
 8004c64:	1c23      	adds	r3, r4, #0
 8004c66:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8004c68:	4647      	mov	r7, r8
 8004c6a:	3340      	adds	r3, #64	; 0x40
 8004c6c:	b480      	push	{r7}
 8004c6e:	4299      	cmp	r1, r3
 8004c70:	d017      	beq.n	8004ca2 <__submore+0x42>
 8004c72:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8004c74:	0077      	lsls	r7, r6, #1
 8004c76:	1c3a      	adds	r2, r7, #0
 8004c78:	f003 f866 	bl	8007d48 <_realloc_r>
 8004c7c:	1e05      	subs	r5, r0, #0
 8004c7e:	d029      	beq.n	8004cd4 <__submore+0x74>
 8004c80:	19ab      	adds	r3, r5, r6
 8004c82:	4698      	mov	r8, r3
 8004c84:	1c18      	adds	r0, r3, #0
 8004c86:	1c29      	adds	r1, r5, #0
 8004c88:	1c32      	adds	r2, r6, #0
 8004c8a:	f002 fb57 	bl	800733c <memcpy>
 8004c8e:	4643      	mov	r3, r8
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	6325      	str	r5, [r4, #48]	; 0x30
 8004c94:	6367      	str	r7, [r4, #52]	; 0x34
 8004c96:	2000      	movs	r0, #0
 8004c98:	bc04      	pop	{r2}
 8004c9a:	4690      	mov	r8, r2
 8004c9c:	bcf0      	pop	{r4, r5, r6, r7}
 8004c9e:	bc02      	pop	{r1}
 8004ca0:	4708      	bx	r1
 8004ca2:	2580      	movs	r5, #128	; 0x80
 8004ca4:	00ed      	lsls	r5, r5, #3
 8004ca6:	1c29      	adds	r1, r5, #0
 8004ca8:	f002 f86e 	bl	8006d88 <_malloc_r>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d011      	beq.n	8004cd4 <__submore+0x74>
 8004cb0:	6320      	str	r0, [r4, #48]	; 0x30
 8004cb2:	6365      	str	r5, [r4, #52]	; 0x34
 8004cb4:	2342      	movs	r3, #66	; 0x42
 8004cb6:	5ce2      	ldrb	r2, [r4, r3]
 8004cb8:	4b08      	ldr	r3, [pc, #32]	; (8004cdc <__submore+0x7c>)
 8004cba:	54c2      	strb	r2, [r0, r3]
 8004cbc:	2341      	movs	r3, #65	; 0x41
 8004cbe:	5ce2      	ldrb	r2, [r4, r3]
 8004cc0:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <__submore+0x80>)
 8004cc2:	54c2      	strb	r2, [r0, r3]
 8004cc4:	2340      	movs	r3, #64	; 0x40
 8004cc6:	5ce2      	ldrb	r2, [r4, r3]
 8004cc8:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <__submore+0x84>)
 8004cca:	54c2      	strb	r2, [r0, r3]
 8004ccc:	18c0      	adds	r0, r0, r3
 8004cce:	6020      	str	r0, [r4, #0]
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	e7e1      	b.n	8004c98 <__submore+0x38>
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	4240      	negs	r0, r0
 8004cd8:	e7de      	b.n	8004c98 <__submore+0x38>
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	000003ff 	.word	0x000003ff
 8004ce0:	000003fe 	.word	0x000003fe
 8004ce4:	000003fd 	.word	0x000003fd

08004ce8 <_ungetc_r>:
 8004ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cea:	1c05      	adds	r5, r0, #0
 8004cec:	1c0e      	adds	r6, r1, #0
 8004cee:	1c14      	adds	r4, r2, #0
 8004cf0:	1c48      	adds	r0, r1, #1
 8004cf2:	d038      	beq.n	8004d66 <_ungetc_r+0x7e>
 8004cf4:	2d00      	cmp	r5, #0
 8004cf6:	d002      	beq.n	8004cfe <_ungetc_r+0x16>
 8004cf8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8004cfa:	2900      	cmp	r1, #0
 8004cfc:	d036      	beq.n	8004d6c <_ungetc_r+0x84>
 8004cfe:	2280      	movs	r2, #128	; 0x80
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	0192      	lsls	r2, r2, #6
 8004d04:	4213      	tst	r3, r2
 8004d06:	d104      	bne.n	8004d12 <_ungetc_r+0x2a>
 8004d08:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	4a2e      	ldr	r2, [pc, #184]	; (8004dc8 <_ungetc_r+0xe0>)
 8004d0e:	4002      	ands	r2, r0
 8004d10:	6662      	str	r2, [r4, #100]	; 0x64
 8004d12:	2220      	movs	r2, #32
 8004d14:	1c18      	adds	r0, r3, #0
 8004d16:	4390      	bics	r0, r2
 8004d18:	1c19      	adds	r1, r3, #0
 8004d1a:	1c02      	adds	r2, r0, #0
 8004d1c:	81a0      	strh	r0, [r4, #12]
 8004d1e:	0758      	lsls	r0, r3, #29
 8004d20:	d407      	bmi.n	8004d32 <_ungetc_r+0x4a>
 8004d22:	06d8      	lsls	r0, r3, #27
 8004d24:	d51f      	bpl.n	8004d66 <_ungetc_r+0x7e>
 8004d26:	2708      	movs	r7, #8
 8004d28:	420f      	tst	r7, r1
 8004d2a:	d13d      	bne.n	8004da8 <_ungetc_r+0xc0>
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	81a2      	strh	r2, [r4, #12]
 8004d32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004d34:	23ff      	movs	r3, #255	; 0xff
 8004d36:	401e      	ands	r6, r3
 8004d38:	2900      	cmp	r1, #0
 8004d3a:	d01b      	beq.n	8004d74 <_ungetc_r+0x8c>
 8004d3c:	6862      	ldr	r2, [r4, #4]
 8004d3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d40:	429a      	cmp	r2, r3
 8004d42:	da0a      	bge.n	8004d5a <_ungetc_r+0x72>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	6023      	str	r3, [r4, #0]
 8004d4a:	701e      	strb	r6, [r3, #0]
 8004d4c:	6863      	ldr	r3, [r4, #4]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	6063      	str	r3, [r4, #4]
 8004d52:	1c30      	adds	r0, r6, #0
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc02      	pop	{r1}
 8004d58:	4708      	bx	r1
 8004d5a:	1c28      	adds	r0, r5, #0
 8004d5c:	1c21      	adds	r1, r4, #0
 8004d5e:	f7ff ff7f 	bl	8004c60 <__submore>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d0ee      	beq.n	8004d44 <_ungetc_r+0x5c>
 8004d66:	2601      	movs	r6, #1
 8004d68:	4276      	negs	r6, r6
 8004d6a:	e7f2      	b.n	8004d52 <_ungetc_r+0x6a>
 8004d6c:	1c28      	adds	r0, r5, #0
 8004d6e:	f001 f9db 	bl	8006128 <__sinit>
 8004d72:	e7c4      	b.n	8004cfe <_ungetc_r+0x16>
 8004d74:	6922      	ldr	r2, [r4, #16]
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	2a00      	cmp	r2, #0
 8004d7a:	d005      	beq.n	8004d88 <_ungetc_r+0xa0>
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d203      	bcs.n	8004d88 <_ungetc_r+0xa0>
 8004d80:	1e5a      	subs	r2, r3, #1
 8004d82:	7811      	ldrb	r1, [r2, #0]
 8004d84:	42b1      	cmp	r1, r6
 8004d86:	d01a      	beq.n	8004dbe <_ungetc_r+0xd6>
 8004d88:	63a3      	str	r3, [r4, #56]	; 0x38
 8004d8a:	1c23      	adds	r3, r4, #0
 8004d8c:	3340      	adds	r3, #64	; 0x40
 8004d8e:	6323      	str	r3, [r4, #48]	; 0x30
 8004d90:	2303      	movs	r3, #3
 8004d92:	6363      	str	r3, [r4, #52]	; 0x34
 8004d94:	2342      	movs	r3, #66	; 0x42
 8004d96:	54e6      	strb	r6, [r4, r3]
 8004d98:	1c23      	adds	r3, r4, #0
 8004d9a:	6860      	ldr	r0, [r4, #4]
 8004d9c:	3342      	adds	r3, #66	; 0x42
 8004d9e:	6023      	str	r3, [r4, #0]
 8004da0:	2301      	movs	r3, #1
 8004da2:	63e0      	str	r0, [r4, #60]	; 0x3c
 8004da4:	6063      	str	r3, [r4, #4]
 8004da6:	e7d4      	b.n	8004d52 <_ungetc_r+0x6a>
 8004da8:	1c28      	adds	r0, r5, #0
 8004daa:	1c21      	adds	r1, r4, #0
 8004dac:	f001 f936 	bl	800601c <_fflush_r>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d1d8      	bne.n	8004d66 <_ungetc_r+0x7e>
 8004db4:	89a2      	ldrh	r2, [r4, #12]
 8004db6:	60a0      	str	r0, [r4, #8]
 8004db8:	43ba      	bics	r2, r7
 8004dba:	61a0      	str	r0, [r4, #24]
 8004dbc:	e7b6      	b.n	8004d2c <_ungetc_r+0x44>
 8004dbe:	6863      	ldr	r3, [r4, #4]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	6022      	str	r2, [r4, #0]
 8004dc4:	6063      	str	r3, [r4, #4]
 8004dc6:	e7c4      	b.n	8004d52 <_ungetc_r+0x6a>
 8004dc8:	ffffdfff 	.word	0xffffdfff

08004dcc <ungetc>:
 8004dcc:	b508      	push	{r3, lr}
 8004dce:	1c0a      	adds	r2, r1, #0
 8004dd0:	4904      	ldr	r1, [pc, #16]	; (8004de4 <ungetc+0x18>)
 8004dd2:	1c03      	adds	r3, r0, #0
 8004dd4:	6808      	ldr	r0, [r1, #0]
 8004dd6:	1c19      	adds	r1, r3, #0
 8004dd8:	f7ff ff86 	bl	8004ce8 <_ungetc_r>
 8004ddc:	bc08      	pop	{r3}
 8004dde:	bc02      	pop	{r1}
 8004de0:	4708      	bx	r1
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	200000e8 	.word	0x200000e8

08004de8 <quorem>:
 8004de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dea:	464d      	mov	r5, r9
 8004dec:	4644      	mov	r4, r8
 8004dee:	465f      	mov	r7, fp
 8004df0:	4656      	mov	r6, sl
 8004df2:	b4f0      	push	{r4, r5, r6, r7}
 8004df4:	4680      	mov	r8, r0
 8004df6:	4689      	mov	r9, r1
 8004df8:	690b      	ldr	r3, [r1, #16]
 8004dfa:	4641      	mov	r1, r8
 8004dfc:	6909      	ldr	r1, [r1, #16]
 8004dfe:	b083      	sub	sp, #12
 8004e00:	2000      	movs	r0, #0
 8004e02:	428b      	cmp	r3, r1
 8004e04:	dd00      	ble.n	8004e08 <quorem+0x20>
 8004e06:	e092      	b.n	8004f2e <quorem+0x146>
 8004e08:	1e5d      	subs	r5, r3, #1
 8004e0a:	3303      	adds	r3, #3
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4648      	mov	r0, r9
 8004e10:	4641      	mov	r1, r8
 8004e12:	18c2      	adds	r2, r0, r3
 8004e14:	3114      	adds	r1, #20
 8004e16:	9101      	str	r1, [sp, #4]
 8004e18:	6851      	ldr	r1, [r2, #4]
 8004e1a:	4443      	add	r3, r8
 8004e1c:	3101      	adds	r1, #1
 8004e1e:	6858      	ldr	r0, [r3, #4]
 8004e20:	1d17      	adds	r7, r2, #4
 8004e22:	f003 ef7c 	blx	8008d1c <__aeabi_uidiv>
 8004e26:	464c      	mov	r4, r9
 8004e28:	3414      	adds	r4, #20
 8004e2a:	1e06      	subs	r6, r0, #0
 8004e2c:	d043      	beq.n	8004eb6 <quorem+0xce>
 8004e2e:	2100      	movs	r1, #0
 8004e30:	9b01      	ldr	r3, [sp, #4]
 8004e32:	46ab      	mov	fp, r5
 8004e34:	46ba      	mov	sl, r7
 8004e36:	1c22      	adds	r2, r4, #0
 8004e38:	1c37      	adds	r7, r6, #0
 8004e3a:	46a4      	mov	ip, r4
 8004e3c:	1c0d      	adds	r5, r1, #0
 8004e3e:	1c0e      	adds	r6, r1, #0
 8004e40:	ca02      	ldmia	r2!, {r1}
 8004e42:	040c      	lsls	r4, r1, #16
 8004e44:	0c24      	lsrs	r4, r4, #16
 8004e46:	437c      	muls	r4, r7
 8004e48:	0c09      	lsrs	r1, r1, #16
 8004e4a:	4379      	muls	r1, r7
 8004e4c:	1934      	adds	r4, r6, r4
 8004e4e:	0c20      	lsrs	r0, r4, #16
 8004e50:	1840      	adds	r0, r0, r1
 8004e52:	6819      	ldr	r1, [r3, #0]
 8004e54:	0409      	lsls	r1, r1, #16
 8004e56:	0c09      	lsrs	r1, r1, #16
 8004e58:	0424      	lsls	r4, r4, #16
 8004e5a:	194d      	adds	r5, r1, r5
 8004e5c:	0c24      	lsrs	r4, r4, #16
 8004e5e:	1b2c      	subs	r4, r5, r4
 8004e60:	681d      	ldr	r5, [r3, #0]
 8004e62:	0c06      	lsrs	r6, r0, #16
 8004e64:	0400      	lsls	r0, r0, #16
 8004e66:	0c29      	lsrs	r1, r5, #16
 8004e68:	0c00      	lsrs	r0, r0, #16
 8004e6a:	1425      	asrs	r5, r4, #16
 8004e6c:	1a09      	subs	r1, r1, r0
 8004e6e:	1949      	adds	r1, r1, r5
 8004e70:	0424      	lsls	r4, r4, #16
 8004e72:	140d      	asrs	r5, r1, #16
 8004e74:	0c24      	lsrs	r4, r4, #16
 8004e76:	0409      	lsls	r1, r1, #16
 8004e78:	4321      	orrs	r1, r4
 8004e7a:	c302      	stmia	r3!, {r1}
 8004e7c:	4592      	cmp	sl, r2
 8004e7e:	d2df      	bcs.n	8004e40 <quorem+0x58>
 8004e80:	465d      	mov	r5, fp
 8004e82:	1d2b      	adds	r3, r5, #4
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4443      	add	r3, r8
 8004e88:	6858      	ldr	r0, [r3, #4]
 8004e8a:	1c3e      	adds	r6, r7, #0
 8004e8c:	4664      	mov	r4, ip
 8004e8e:	4657      	mov	r7, sl
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d110      	bne.n	8004eb6 <quorem+0xce>
 8004e94:	9901      	ldr	r1, [sp, #4]
 8004e96:	4299      	cmp	r1, r3
 8004e98:	d20b      	bcs.n	8004eb2 <quorem+0xca>
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	2a00      	cmp	r2, #0
 8004e9e:	d108      	bne.n	8004eb2 <quorem+0xca>
 8004ea0:	1c0a      	adds	r2, r1, #0
 8004ea2:	e002      	b.n	8004eaa <quorem+0xc2>
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d103      	bne.n	8004eb2 <quorem+0xca>
 8004eaa:	3b04      	subs	r3, #4
 8004eac:	3d01      	subs	r5, #1
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d3f8      	bcc.n	8004ea4 <quorem+0xbc>
 8004eb2:	4641      	mov	r1, r8
 8004eb4:	610d      	str	r5, [r1, #16]
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	4649      	mov	r1, r9
 8004eba:	f002 fd31 	bl	8007920 <__mcmp>
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	db34      	blt.n	8004f2c <quorem+0x144>
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	4694      	mov	ip, r2
 8004ec6:	9b01      	ldr	r3, [sp, #4]
 8004ec8:	1c2a      	adds	r2, r5, #0
 8004eca:	3601      	adds	r6, #1
 8004ecc:	1c3d      	adds	r5, r7, #0
 8004ece:	4667      	mov	r7, ip
 8004ed0:	4694      	mov	ip, r2
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	cc01      	ldmia	r4!, {r0}
 8004ed6:	0411      	lsls	r1, r2, #16
 8004ed8:	0c09      	lsrs	r1, r1, #16
 8004eda:	19cf      	adds	r7, r1, r7
 8004edc:	0401      	lsls	r1, r0, #16
 8004ede:	0c09      	lsrs	r1, r1, #16
 8004ee0:	1a79      	subs	r1, r7, r1
 8004ee2:	0c12      	lsrs	r2, r2, #16
 8004ee4:	0c00      	lsrs	r0, r0, #16
 8004ee6:	140f      	asrs	r7, r1, #16
 8004ee8:	1a12      	subs	r2, r2, r0
 8004eea:	19d2      	adds	r2, r2, r7
 8004eec:	0409      	lsls	r1, r1, #16
 8004eee:	1417      	asrs	r7, r2, #16
 8004ef0:	0c09      	lsrs	r1, r1, #16
 8004ef2:	0412      	lsls	r2, r2, #16
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	c304      	stmia	r3!, {r2}
 8004ef8:	42a5      	cmp	r5, r4
 8004efa:	d2ea      	bcs.n	8004ed2 <quorem+0xea>
 8004efc:	4665      	mov	r5, ip
 8004efe:	1d2b      	adds	r3, r5, #4
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4443      	add	r3, r8
 8004f04:	6858      	ldr	r0, [r3, #4]
 8004f06:	2800      	cmp	r0, #0
 8004f08:	d110      	bne.n	8004f2c <quorem+0x144>
 8004f0a:	9901      	ldr	r1, [sp, #4]
 8004f0c:	4299      	cmp	r1, r3
 8004f0e:	d20b      	bcs.n	8004f28 <quorem+0x140>
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	2a00      	cmp	r2, #0
 8004f14:	d108      	bne.n	8004f28 <quorem+0x140>
 8004f16:	1c0a      	adds	r2, r1, #0
 8004f18:	e002      	b.n	8004f20 <quorem+0x138>
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d103      	bne.n	8004f28 <quorem+0x140>
 8004f20:	3b04      	subs	r3, #4
 8004f22:	3d01      	subs	r5, #1
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d3f8      	bcc.n	8004f1a <quorem+0x132>
 8004f28:	4641      	mov	r1, r8
 8004f2a:	610d      	str	r5, [r1, #16]
 8004f2c:	1c30      	adds	r0, r6, #0
 8004f2e:	b003      	add	sp, #12
 8004f30:	bc3c      	pop	{r2, r3, r4, r5}
 8004f32:	4690      	mov	r8, r2
 8004f34:	4699      	mov	r9, r3
 8004f36:	46a2      	mov	sl, r4
 8004f38:	46ab      	mov	fp, r5
 8004f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8004f3c:	bc02      	pop	{r1}
 8004f3e:	4708      	bx	r1

08004f40 <_dtoa_r>:
 8004f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f42:	4656      	mov	r6, sl
 8004f44:	4644      	mov	r4, r8
 8004f46:	465f      	mov	r7, fp
 8004f48:	464d      	mov	r5, r9
 8004f4a:	b4f0      	push	{r4, r5, r6, r7}
 8004f4c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004f4e:	b09d      	sub	sp, #116	; 0x74
 8004f50:	1c04      	adds	r4, r0, #0
 8004f52:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8004f54:	9202      	str	r2, [sp, #8]
 8004f56:	9303      	str	r3, [sp, #12]
 8004f58:	2900      	cmp	r1, #0
 8004f5a:	d008      	beq.n	8004f6e <_dtoa_r+0x2e>
 8004f5c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004f5e:	2201      	movs	r2, #1
 8004f60:	409a      	lsls	r2, r3
 8004f62:	604b      	str	r3, [r1, #4]
 8004f64:	608a      	str	r2, [r1, #8]
 8004f66:	f002 fa61 	bl	800742c <_Bfree>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	6423      	str	r3, [r4, #64]	; 0x40
 8004f6e:	9d03      	ldr	r5, [sp, #12]
 8004f70:	2d00      	cmp	r5, #0
 8004f72:	db37      	blt.n	8004fe4 <_dtoa_r+0xa4>
 8004f74:	2300      	movs	r3, #0
 8004f76:	6033      	str	r3, [r6, #0]
 8004f78:	4b1f      	ldr	r3, [pc, #124]	; (8004ff8 <_dtoa_r+0xb8>)
 8004f7a:	1c2a      	adds	r2, r5, #0
 8004f7c:	401a      	ands	r2, r3
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d01d      	beq.n	8004fbe <_dtoa_r+0x7e>
 8004f82:	9e02      	ldr	r6, [sp, #8]
 8004f84:	9f03      	ldr	r7, [sp, #12]
 8004f86:	4b1b      	ldr	r3, [pc, #108]	; (8004ff4 <_dtoa_r+0xb4>)
 8004f88:	4a19      	ldr	r2, [pc, #100]	; (8004ff0 <_dtoa_r+0xb0>)
 8004f8a:	1c30      	adds	r0, r6, #0
 8004f8c:	1c39      	adds	r1, r7, #0
 8004f8e:	f004 ecc0 	blx	8009910 <__aeabi_dcmpeq>
 8004f92:	2800      	cmp	r0, #0
 8004f94:	d038      	beq.n	8005008 <_dtoa_r+0xc8>
 8004f96:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8004f98:	2301      	movs	r3, #1
 8004f9a:	6033      	str	r3, [r6, #0]
 8004f9c:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8004f9e:	2e00      	cmp	r6, #0
 8004fa0:	d100      	bne.n	8004fa4 <_dtoa_r+0x64>
 8004fa2:	e21f      	b.n	80053e4 <_dtoa_r+0x4a4>
 8004fa4:	4f15      	ldr	r7, [pc, #84]	; (8004ffc <_dtoa_r+0xbc>)
 8004fa6:	6037      	str	r7, [r6, #0]
 8004fa8:	3f01      	subs	r7, #1
 8004faa:	1c38      	adds	r0, r7, #0
 8004fac:	b01d      	add	sp, #116	; 0x74
 8004fae:	bc3c      	pop	{r2, r3, r4, r5}
 8004fb0:	4690      	mov	r8, r2
 8004fb2:	4699      	mov	r9, r3
 8004fb4:	46a2      	mov	sl, r4
 8004fb6:	46ab      	mov	fp, r5
 8004fb8:	bcf0      	pop	{r4, r5, r6, r7}
 8004fba:	bc02      	pop	{r1}
 8004fbc:	4708      	bx	r1
 8004fbe:	4b10      	ldr	r3, [pc, #64]	; (8005000 <_dtoa_r+0xc0>)
 8004fc0:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8004fc2:	9802      	ldr	r0, [sp, #8]
 8004fc4:	6033      	str	r3, [r6, #0]
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	d100      	bne.n	8004fcc <_dtoa_r+0x8c>
 8004fca:	e1ba      	b.n	8005342 <_dtoa_r+0x402>
 8004fcc:	4f0d      	ldr	r7, [pc, #52]	; (8005004 <_dtoa_r+0xc4>)
 8004fce:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8004fd0:	2e00      	cmp	r6, #0
 8004fd2:	d0ea      	beq.n	8004faa <_dtoa_r+0x6a>
 8004fd4:	78fa      	ldrb	r2, [r7, #3]
 8004fd6:	1cfb      	adds	r3, r7, #3
 8004fd8:	2a00      	cmp	r2, #0
 8004fda:	d000      	beq.n	8004fde <_dtoa_r+0x9e>
 8004fdc:	3305      	adds	r3, #5
 8004fde:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8004fe0:	6033      	str	r3, [r6, #0]
 8004fe2:	e7e2      	b.n	8004faa <_dtoa_r+0x6a>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	6033      	str	r3, [r6, #0]
 8004fe8:	006b      	lsls	r3, r5, #1
 8004fea:	085d      	lsrs	r5, r3, #1
 8004fec:	9503      	str	r5, [sp, #12]
 8004fee:	e7c3      	b.n	8004f78 <_dtoa_r+0x38>
	...
 8004ff8:	7ff00000 	.word	0x7ff00000
 8004ffc:	0800dcc5 	.word	0x0800dcc5
 8005000:	0000270f 	.word	0x0000270f
 8005004:	0800dcd8 	.word	0x0800dcd8
 8005008:	ab1b      	add	r3, sp, #108	; 0x6c
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	ab1a      	add	r3, sp, #104	; 0x68
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	1c32      	adds	r2, r6, #0
 8005012:	1c3b      	adds	r3, r7, #0
 8005014:	1c20      	adds	r0, r4, #0
 8005016:	f002 fd8f 	bl	8007b38 <__d2b>
 800501a:	006b      	lsls	r3, r5, #1
 800501c:	900b      	str	r0, [sp, #44]	; 0x2c
 800501e:	0d5a      	lsrs	r2, r3, #21
 8005020:	d100      	bne.n	8005024 <_dtoa_r+0xe4>
 8005022:	e1c5      	b.n	80053b0 <_dtoa_r+0x470>
 8005024:	4ddc      	ldr	r5, [pc, #880]	; (8005398 <_dtoa_r+0x458>)
 8005026:	1c30      	adds	r0, r6, #0
 8005028:	033b      	lsls	r3, r7, #12
 800502a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800502c:	0b1b      	lsrs	r3, r3, #12
 800502e:	1c29      	adds	r1, r5, #0
 8005030:	4319      	orrs	r1, r3
 8005032:	46b0      	mov	r8, r6
 8005034:	4bd9      	ldr	r3, [pc, #868]	; (800539c <_dtoa_r+0x45c>)
 8005036:	2600      	movs	r6, #0
 8005038:	9616      	str	r6, [sp, #88]	; 0x58
 800503a:	18d5      	adds	r5, r2, r3
 800503c:	4bc5      	ldr	r3, [pc, #788]	; (8005354 <_dtoa_r+0x414>)
 800503e:	4ac4      	ldr	r2, [pc, #784]	; (8005350 <_dtoa_r+0x410>)
 8005040:	f003 efa8 	blx	8008f94 <__aeabi_dsub>
 8005044:	4ac4      	ldr	r2, [pc, #784]	; (8005358 <_dtoa_r+0x418>)
 8005046:	4bc5      	ldr	r3, [pc, #788]	; (800535c <_dtoa_r+0x41c>)
 8005048:	f004 e9ae 	blx	80093a8 <__aeabi_dmul>
 800504c:	4ac4      	ldr	r2, [pc, #784]	; (8005360 <_dtoa_r+0x420>)
 800504e:	4bc5      	ldr	r3, [pc, #788]	; (8005364 <_dtoa_r+0x424>)
 8005050:	f003 efa2 	blx	8008f98 <__adddf3>
 8005054:	1c06      	adds	r6, r0, #0
 8005056:	1c28      	adds	r0, r5, #0
 8005058:	1c0f      	adds	r7, r1, #0
 800505a:	f004 e938 	blx	80092cc <__aeabi_i2d>
 800505e:	4ac2      	ldr	r2, [pc, #776]	; (8005368 <_dtoa_r+0x428>)
 8005060:	4bc2      	ldr	r3, [pc, #776]	; (800536c <_dtoa_r+0x42c>)
 8005062:	f004 e9a2 	blx	80093a8 <__aeabi_dmul>
 8005066:	1c02      	adds	r2, r0, #0
 8005068:	1c0b      	adds	r3, r1, #0
 800506a:	1c30      	adds	r0, r6, #0
 800506c:	1c39      	adds	r1, r7, #0
 800506e:	f003 ef94 	blx	8008f98 <__adddf3>
 8005072:	1c06      	adds	r6, r0, #0
 8005074:	1c0f      	adds	r7, r1, #0
 8005076:	f004 ec88 	blx	8009988 <__aeabi_d2iz>
 800507a:	1c39      	adds	r1, r7, #0
 800507c:	9007      	str	r0, [sp, #28]
 800507e:	4abc      	ldr	r2, [pc, #752]	; (8005370 <_dtoa_r+0x430>)
 8005080:	4bbc      	ldr	r3, [pc, #752]	; (8005374 <_dtoa_r+0x434>)
 8005082:	1c30      	adds	r0, r6, #0
 8005084:	f004 ec50 	blx	8009928 <__aeabi_dcmplt>
 8005088:	2800      	cmp	r0, #0
 800508a:	d000      	beq.n	800508e <_dtoa_r+0x14e>
 800508c:	e359      	b.n	8005742 <_dtoa_r+0x802>
 800508e:	2601      	movs	r6, #1
 8005090:	960e      	str	r6, [sp, #56]	; 0x38
 8005092:	9e07      	ldr	r6, [sp, #28]
 8005094:	2e16      	cmp	r6, #22
 8005096:	d810      	bhi.n	80050ba <_dtoa_r+0x17a>
 8005098:	4ac1      	ldr	r2, [pc, #772]	; (80053a0 <_dtoa_r+0x460>)
 800509a:	00f3      	lsls	r3, r6, #3
 800509c:	18d3      	adds	r3, r2, r3
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	6859      	ldr	r1, [r3, #4]
 80050a2:	9a02      	ldr	r2, [sp, #8]
 80050a4:	9b03      	ldr	r3, [sp, #12]
 80050a6:	f004 ec64 	blx	8009970 <__aeabi_dcmpgt>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d100      	bne.n	80050b0 <_dtoa_r+0x170>
 80050ae:	e35b      	b.n	8005768 <_dtoa_r+0x828>
 80050b0:	9e07      	ldr	r6, [sp, #28]
 80050b2:	3e01      	subs	r6, #1
 80050b4:	9607      	str	r6, [sp, #28]
 80050b6:	2600      	movs	r6, #0
 80050b8:	960e      	str	r6, [sp, #56]	; 0x38
 80050ba:	4640      	mov	r0, r8
 80050bc:	1b45      	subs	r5, r0, r5
 80050be:	3d01      	subs	r5, #1
 80050c0:	d500      	bpl.n	80050c4 <_dtoa_r+0x184>
 80050c2:	e339      	b.n	8005738 <_dtoa_r+0x7f8>
 80050c4:	2600      	movs	r6, #0
 80050c6:	960a      	str	r6, [sp, #40]	; 0x28
 80050c8:	46aa      	mov	sl, r5
 80050ca:	9e07      	ldr	r6, [sp, #28]
 80050cc:	2e00      	cmp	r6, #0
 80050ce:	da00      	bge.n	80050d2 <_dtoa_r+0x192>
 80050d0:	e313      	b.n	80056fa <_dtoa_r+0x7ba>
 80050d2:	44b2      	add	sl, r6
 80050d4:	9611      	str	r6, [sp, #68]	; 0x44
 80050d6:	2600      	movs	r6, #0
 80050d8:	960f      	str	r6, [sp, #60]	; 0x3c
 80050da:	9826      	ldr	r0, [sp, #152]	; 0x98
 80050dc:	2809      	cmp	r0, #9
 80050de:	d900      	bls.n	80050e2 <_dtoa_r+0x1a2>
 80050e0:	e182      	b.n	80053e8 <_dtoa_r+0x4a8>
 80050e2:	2301      	movs	r3, #1
 80050e4:	2805      	cmp	r0, #5
 80050e6:	dd02      	ble.n	80050ee <_dtoa_r+0x1ae>
 80050e8:	3804      	subs	r0, #4
 80050ea:	9026      	str	r0, [sp, #152]	; 0x98
 80050ec:	2300      	movs	r3, #0
 80050ee:	9926      	ldr	r1, [sp, #152]	; 0x98
 80050f0:	2903      	cmp	r1, #3
 80050f2:	d101      	bne.n	80050f8 <_dtoa_r+0x1b8>
 80050f4:	f000 fd82 	bl	8005bfc <_dtoa_r+0xcbc>
 80050f8:	dd00      	ble.n	80050fc <_dtoa_r+0x1bc>
 80050fa:	e353      	b.n	80057a4 <_dtoa_r+0x864>
 80050fc:	2902      	cmp	r1, #2
 80050fe:	d000      	beq.n	8005102 <_dtoa_r+0x1c2>
 8005100:	e174      	b.n	80053ec <_dtoa_r+0x4ac>
 8005102:	2600      	movs	r6, #0
 8005104:	9612      	str	r6, [sp, #72]	; 0x48
 8005106:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8005108:	2800      	cmp	r0, #0
 800510a:	dc01      	bgt.n	8005110 <_dtoa_r+0x1d0>
 800510c:	f000 fd84 	bl	8005c18 <_dtoa_r+0xcd8>
 8005110:	2500      	movs	r5, #0
 8005112:	220e      	movs	r2, #14
 8005114:	4282      	cmp	r2, r0
 8005116:	416d      	adcs	r5, r5
 8005118:	9010      	str	r0, [sp, #64]	; 0x40
 800511a:	9009      	str	r0, [sp, #36]	; 0x24
 800511c:	1c06      	adds	r6, r0, #0
 800511e:	401d      	ands	r5, r3
 8005120:	2300      	movs	r3, #0
 8005122:	6463      	str	r3, [r4, #68]	; 0x44
 8005124:	2100      	movs	r1, #0
 8005126:	2e17      	cmp	r6, #23
 8005128:	d909      	bls.n	800513e <_dtoa_r+0x1fe>
 800512a:	2201      	movs	r2, #1
 800512c:	2304      	movs	r3, #4
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	1c18      	adds	r0, r3, #0
 8005132:	3014      	adds	r0, #20
 8005134:	1c11      	adds	r1, r2, #0
 8005136:	3201      	adds	r2, #1
 8005138:	42b0      	cmp	r0, r6
 800513a:	d9f8      	bls.n	800512e <_dtoa_r+0x1ee>
 800513c:	6461      	str	r1, [r4, #68]	; 0x44
 800513e:	1c20      	adds	r0, r4, #0
 8005140:	f002 f94a 	bl	80073d8 <_Balloc>
 8005144:	4683      	mov	fp, r0
 8005146:	6420      	str	r0, [r4, #64]	; 0x40
 8005148:	2d00      	cmp	r5, #0
 800514a:	d100      	bne.n	800514e <_dtoa_r+0x20e>
 800514c:	e15e      	b.n	800540c <_dtoa_r+0x4cc>
 800514e:	9e07      	ldr	r6, [sp, #28]
 8005150:	2e00      	cmp	r6, #0
 8005152:	dc00      	bgt.n	8005156 <_dtoa_r+0x216>
 8005154:	e3ca      	b.n	80058ec <_dtoa_r+0x9ac>
 8005156:	1c32      	adds	r2, r6, #0
 8005158:	230f      	movs	r3, #15
 800515a:	401a      	ands	r2, r3
 800515c:	4990      	ldr	r1, [pc, #576]	; (80053a0 <_dtoa_r+0x460>)
 800515e:	9807      	ldr	r0, [sp, #28]
 8005160:	00d2      	lsls	r2, r2, #3
 8005162:	188a      	adds	r2, r1, r2
 8005164:	1105      	asrs	r5, r0, #4
 8005166:	6816      	ldr	r6, [r2, #0]
 8005168:	6857      	ldr	r7, [r2, #4]
 800516a:	06e9      	lsls	r1, r5, #27
 800516c:	d400      	bmi.n	8005170 <_dtoa_r+0x230>
 800516e:	e3ae      	b.n	80058ce <_dtoa_r+0x98e>
 8005170:	401d      	ands	r5, r3
 8005172:	4b8c      	ldr	r3, [pc, #560]	; (80053a4 <_dtoa_r+0x464>)
 8005174:	9802      	ldr	r0, [sp, #8]
 8005176:	9903      	ldr	r1, [sp, #12]
 8005178:	6a1a      	ldr	r2, [r3, #32]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	f004 ea5c 	blx	8009638 <__aeabi_ddiv>
 8005180:	900c      	str	r0, [sp, #48]	; 0x30
 8005182:	910d      	str	r1, [sp, #52]	; 0x34
 8005184:	2203      	movs	r2, #3
 8005186:	4691      	mov	r9, r2
 8005188:	2d00      	cmp	r5, #0
 800518a:	d013      	beq.n	80051b4 <_dtoa_r+0x274>
 800518c:	4a85      	ldr	r2, [pc, #532]	; (80053a4 <_dtoa_r+0x464>)
 800518e:	1c30      	adds	r0, r6, #0
 8005190:	1c39      	adds	r1, r7, #0
 8005192:	1c16      	adds	r6, r2, #0
 8005194:	464f      	mov	r7, r9
 8005196:	2301      	movs	r3, #1
 8005198:	422b      	tst	r3, r5
 800519a:	d004      	beq.n	80051a6 <_dtoa_r+0x266>
 800519c:	6832      	ldr	r2, [r6, #0]
 800519e:	6873      	ldr	r3, [r6, #4]
 80051a0:	3701      	adds	r7, #1
 80051a2:	f004 e902 	blx	80093a8 <__aeabi_dmul>
 80051a6:	106d      	asrs	r5, r5, #1
 80051a8:	3608      	adds	r6, #8
 80051aa:	2d00      	cmp	r5, #0
 80051ac:	d1f3      	bne.n	8005196 <_dtoa_r+0x256>
 80051ae:	46b9      	mov	r9, r7
 80051b0:	1c06      	adds	r6, r0, #0
 80051b2:	1c0f      	adds	r7, r1, #0
 80051b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80051b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051b8:	1c32      	adds	r2, r6, #0
 80051ba:	1c3b      	adds	r3, r7, #0
 80051bc:	f004 ea3c 	blx	8009638 <__aeabi_ddiv>
 80051c0:	900c      	str	r0, [sp, #48]	; 0x30
 80051c2:	910d      	str	r1, [sp, #52]	; 0x34
 80051c4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80051c6:	2e00      	cmp	r6, #0
 80051c8:	d009      	beq.n	80051de <_dtoa_r+0x29e>
 80051ca:	980c      	ldr	r0, [sp, #48]	; 0x30
 80051cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051ce:	4a6a      	ldr	r2, [pc, #424]	; (8005378 <_dtoa_r+0x438>)
 80051d0:	4b6a      	ldr	r3, [pc, #424]	; (800537c <_dtoa_r+0x43c>)
 80051d2:	f004 ebaa 	blx	8009928 <__aeabi_dcmplt>
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d001      	beq.n	80051de <_dtoa_r+0x29e>
 80051da:	f000 fd40 	bl	8005c5e <_dtoa_r+0xd1e>
 80051de:	4648      	mov	r0, r9
 80051e0:	f004 e874 	blx	80092cc <__aeabi_i2d>
 80051e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051e8:	f004 e8de 	blx	80093a8 <__aeabi_dmul>
 80051ec:	4a64      	ldr	r2, [pc, #400]	; (8005380 <_dtoa_r+0x440>)
 80051ee:	4b65      	ldr	r3, [pc, #404]	; (8005384 <_dtoa_r+0x444>)
 80051f0:	f003 eed2 	blx	8008f98 <__adddf3>
 80051f4:	4a6c      	ldr	r2, [pc, #432]	; (80053a8 <_dtoa_r+0x468>)
 80051f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f8:	1c06      	adds	r6, r0, #0
 80051fa:	188f      	adds	r7, r1, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d100      	bne.n	8005202 <_dtoa_r+0x2c2>
 8005200:	e2f6      	b.n	80057f0 <_dtoa_r+0x8b0>
 8005202:	9807      	ldr	r0, [sp, #28]
 8005204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005206:	9017      	str	r0, [sp, #92]	; 0x5c
 8005208:	9113      	str	r1, [sp, #76]	; 0x4c
 800520a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800520c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800520e:	3b01      	subs	r3, #1
 8005210:	2a00      	cmp	r2, #0
 8005212:	d100      	bne.n	8005216 <_dtoa_r+0x2d6>
 8005214:	e39c      	b.n	8005950 <_dtoa_r+0xa10>
 8005216:	4a62      	ldr	r2, [pc, #392]	; (80053a0 <_dtoa_r+0x460>)
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	18d3      	adds	r3, r2, r3
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	4859      	ldr	r0, [pc, #356]	; (8005388 <_dtoa_r+0x448>)
 8005222:	495a      	ldr	r1, [pc, #360]	; (800538c <_dtoa_r+0x44c>)
 8005224:	f004 ea08 	blx	8009638 <__aeabi_ddiv>
 8005228:	1c32      	adds	r2, r6, #0
 800522a:	1c3b      	adds	r3, r7, #0
 800522c:	f003 eeb2 	blx	8008f94 <__aeabi_dsub>
 8005230:	9014      	str	r0, [sp, #80]	; 0x50
 8005232:	9115      	str	r1, [sp, #84]	; 0x54
 8005234:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005236:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005238:	f004 eba6 	blx	8009988 <__aeabi_d2iz>
 800523c:	1c05      	adds	r5, r0, #0
 800523e:	f004 e846 	blx	80092cc <__aeabi_i2d>
 8005242:	1c02      	adds	r2, r0, #0
 8005244:	1c0b      	adds	r3, r1, #0
 8005246:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005248:	990d      	ldr	r1, [sp, #52]	; 0x34
 800524a:	f003 eea4 	blx	8008f94 <__aeabi_dsub>
 800524e:	3530      	adds	r5, #48	; 0x30
 8005250:	062d      	lsls	r5, r5, #24
 8005252:	0e2d      	lsrs	r5, r5, #24
 8005254:	1c06      	adds	r6, r0, #0
 8005256:	1c0f      	adds	r7, r1, #0
 8005258:	465b      	mov	r3, fp
 800525a:	701d      	strb	r5, [r3, #0]
 800525c:	46a8      	mov	r8, r5
 800525e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005260:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005262:	465d      	mov	r5, fp
 8005264:	1c32      	adds	r2, r6, #0
 8005266:	1c3b      	adds	r3, r7, #0
 8005268:	3501      	adds	r5, #1
 800526a:	f004 eb82 	blx	8009970 <__aeabi_dcmpgt>
 800526e:	2800      	cmp	r0, #0
 8005270:	d001      	beq.n	8005276 <_dtoa_r+0x336>
 8005272:	f000 fe0e 	bl	8005e92 <_dtoa_r+0xf52>
 8005276:	1c32      	adds	r2, r6, #0
 8005278:	1c3b      	adds	r3, r7, #0
 800527a:	483f      	ldr	r0, [pc, #252]	; (8005378 <_dtoa_r+0x438>)
 800527c:	493f      	ldr	r1, [pc, #252]	; (800537c <_dtoa_r+0x43c>)
 800527e:	f003 ee8a 	blx	8008f94 <__aeabi_dsub>
 8005282:	1c02      	adds	r2, r0, #0
 8005284:	1c0b      	adds	r3, r1, #0
 8005286:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005288:	9915      	ldr	r1, [sp, #84]	; 0x54
 800528a:	f004 eb72 	blx	8009970 <__aeabi_dcmpgt>
 800528e:	2800      	cmp	r0, #0
 8005290:	d001      	beq.n	8005296 <_dtoa_r+0x356>
 8005292:	f000 fd62 	bl	8005d5a <_dtoa_r+0xe1a>
 8005296:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005298:	2901      	cmp	r1, #1
 800529a:	dc00      	bgt.n	800529e <_dtoa_r+0x35e>
 800529c:	e0b6      	b.n	800540c <_dtoa_r+0x4cc>
 800529e:	4650      	mov	r0, sl
 80052a0:	465a      	mov	r2, fp
 80052a2:	4689      	mov	r9, r1
 80052a4:	44d9      	add	r9, fp
 80052a6:	46aa      	mov	sl, r5
 80052a8:	46a3      	mov	fp, r4
 80052aa:	9013      	str	r0, [sp, #76]	; 0x4c
 80052ac:	920c      	str	r2, [sp, #48]	; 0x30
 80052ae:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80052b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80052b2:	e011      	b.n	80052d8 <_dtoa_r+0x398>
 80052b4:	1c32      	adds	r2, r6, #0
 80052b6:	1c3b      	adds	r3, r7, #0
 80052b8:	482f      	ldr	r0, [pc, #188]	; (8005378 <_dtoa_r+0x438>)
 80052ba:	4930      	ldr	r1, [pc, #192]	; (800537c <_dtoa_r+0x43c>)
 80052bc:	f003 ee6a 	blx	8008f94 <__aeabi_dsub>
 80052c0:	1c22      	adds	r2, r4, #0
 80052c2:	1c2b      	adds	r3, r5, #0
 80052c4:	f004 eb30 	blx	8009928 <__aeabi_dcmplt>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d001      	beq.n	80052d0 <_dtoa_r+0x390>
 80052cc:	f000 fd41 	bl	8005d52 <_dtoa_r+0xe12>
 80052d0:	45ca      	cmp	sl, r9
 80052d2:	d101      	bne.n	80052d8 <_dtoa_r+0x398>
 80052d4:	f000 fd46 	bl	8005d64 <_dtoa_r+0xe24>
 80052d8:	1c20      	adds	r0, r4, #0
 80052da:	1c29      	adds	r1, r5, #0
 80052dc:	4a2c      	ldr	r2, [pc, #176]	; (8005390 <_dtoa_r+0x450>)
 80052de:	4b2d      	ldr	r3, [pc, #180]	; (8005394 <_dtoa_r+0x454>)
 80052e0:	f004 e862 	blx	80093a8 <__aeabi_dmul>
 80052e4:	4a2a      	ldr	r2, [pc, #168]	; (8005390 <_dtoa_r+0x450>)
 80052e6:	4b2b      	ldr	r3, [pc, #172]	; (8005394 <_dtoa_r+0x454>)
 80052e8:	1c04      	adds	r4, r0, #0
 80052ea:	1c0d      	adds	r5, r1, #0
 80052ec:	1c30      	adds	r0, r6, #0
 80052ee:	1c39      	adds	r1, r7, #0
 80052f0:	f004 e85a 	blx	80093a8 <__aeabi_dmul>
 80052f4:	1c0f      	adds	r7, r1, #0
 80052f6:	1c06      	adds	r6, r0, #0
 80052f8:	f004 eb46 	blx	8009988 <__aeabi_d2iz>
 80052fc:	4680      	mov	r8, r0
 80052fe:	f003 efe6 	blx	80092cc <__aeabi_i2d>
 8005302:	1c02      	adds	r2, r0, #0
 8005304:	1c0b      	adds	r3, r1, #0
 8005306:	1c30      	adds	r0, r6, #0
 8005308:	1c39      	adds	r1, r7, #0
 800530a:	f003 ee44 	blx	8008f94 <__aeabi_dsub>
 800530e:	4643      	mov	r3, r8
 8005310:	3330      	adds	r3, #48	; 0x30
 8005312:	061b      	lsls	r3, r3, #24
 8005314:	0e1b      	lsrs	r3, r3, #24
 8005316:	1c06      	adds	r6, r0, #0
 8005318:	1c0f      	adds	r7, r1, #0
 800531a:	4650      	mov	r0, sl
 800531c:	2101      	movs	r1, #1
 800531e:	7003      	strb	r3, [r0, #0]
 8005320:	4698      	mov	r8, r3
 8005322:	448a      	add	sl, r1
 8005324:	1c30      	adds	r0, r6, #0
 8005326:	1c39      	adds	r1, r7, #0
 8005328:	1c22      	adds	r2, r4, #0
 800532a:	1c2b      	adds	r3, r5, #0
 800532c:	f004 eafc 	blx	8009928 <__aeabi_dcmplt>
 8005330:	2800      	cmp	r0, #0
 8005332:	d0bf      	beq.n	80052b4 <_dtoa_r+0x374>
 8005334:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005336:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005338:	465c      	mov	r4, fp
 800533a:	1c17      	adds	r7, r2, #0
 800533c:	46d3      	mov	fp, sl
 800533e:	9607      	str	r6, [sp, #28]
 8005340:	e1ca      	b.n	80056d8 <_dtoa_r+0x798>
 8005342:	032b      	lsls	r3, r5, #12
 8005344:	d000      	beq.n	8005348 <_dtoa_r+0x408>
 8005346:	e641      	b.n	8004fcc <_dtoa_r+0x8c>
 8005348:	4f18      	ldr	r7, [pc, #96]	; (80053ac <_dtoa_r+0x46c>)
 800534a:	e640      	b.n	8004fce <_dtoa_r+0x8e>
 800534c:	46c0      	nop			; (mov r8, r8)
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	00000000 	.word	0x00000000
 8005354:	3ff80000 	.word	0x3ff80000
 8005358:	636f4361 	.word	0x636f4361
 800535c:	3fd287a7 	.word	0x3fd287a7
 8005360:	8b60c8b3 	.word	0x8b60c8b3
 8005364:	3fc68a28 	.word	0x3fc68a28
 8005368:	509f79fb 	.word	0x509f79fb
 800536c:	3fd34413 	.word	0x3fd34413
	...
 800537c:	3ff00000 	.word	0x3ff00000
 8005380:	00000000 	.word	0x00000000
 8005384:	401c0000 	.word	0x401c0000
 8005388:	00000000 	.word	0x00000000
 800538c:	3fe00000 	.word	0x3fe00000
 8005390:	00000000 	.word	0x00000000
 8005394:	40240000 	.word	0x40240000
 8005398:	3ff00000 	.word	0x3ff00000
 800539c:	fffffc01 	.word	0xfffffc01
 80053a0:	0800dd08 	.word	0x0800dd08
 80053a4:	0800ddf8 	.word	0x0800ddf8
 80053a8:	fcc00000 	.word	0xfcc00000
 80053ac:	0800dccc 	.word	0x0800dccc
 80053b0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80053b2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80053b4:	4680      	mov	r8, r0
 80053b6:	1c0e      	adds	r6, r1, #0
 80053b8:	4bd9      	ldr	r3, [pc, #868]	; (8005720 <_dtoa_r+0x7e0>)
 80053ba:	4446      	add	r6, r8
 80053bc:	429e      	cmp	r6, r3
 80053be:	da00      	bge.n	80053c2 <_dtoa_r+0x482>
 80053c0:	e1cc      	b.n	800575c <_dtoa_r+0x81c>
 80053c2:	48d8      	ldr	r0, [pc, #864]	; (8005724 <_dtoa_r+0x7e4>)
 80053c4:	4ad8      	ldr	r2, [pc, #864]	; (8005728 <_dtoa_r+0x7e8>)
 80053c6:	1b80      	subs	r0, r0, r6
 80053c8:	9902      	ldr	r1, [sp, #8]
 80053ca:	4085      	lsls	r5, r0
 80053cc:	18b3      	adds	r3, r6, r2
 80053ce:	1c28      	adds	r0, r5, #0
 80053d0:	40d9      	lsrs	r1, r3
 80053d2:	4308      	orrs	r0, r1
 80053d4:	f003 ef68 	blx	80092a8 <__aeabi_ui2d>
 80053d8:	4bd4      	ldr	r3, [pc, #848]	; (800572c <_dtoa_r+0x7ec>)
 80053da:	1e75      	subs	r5, r6, #1
 80053dc:	2601      	movs	r6, #1
 80053de:	18c9      	adds	r1, r1, r3
 80053e0:	9616      	str	r6, [sp, #88]	; 0x58
 80053e2:	e62b      	b.n	800503c <_dtoa_r+0xfc>
 80053e4:	4fd2      	ldr	r7, [pc, #840]	; (8005730 <_dtoa_r+0x7f0>)
 80053e6:	e5e0      	b.n	8004faa <_dtoa_r+0x6a>
 80053e8:	2000      	movs	r0, #0
 80053ea:	9026      	str	r0, [sp, #152]	; 0x98
 80053ec:	2300      	movs	r3, #0
 80053ee:	6463      	str	r3, [r4, #68]	; 0x44
 80053f0:	1c20      	adds	r0, r4, #0
 80053f2:	2100      	movs	r1, #0
 80053f4:	f001 fff0 	bl	80073d8 <_Balloc>
 80053f8:	2301      	movs	r3, #1
 80053fa:	425b      	negs	r3, r3
 80053fc:	4683      	mov	fp, r0
 80053fe:	6420      	str	r0, [r4, #64]	; 0x40
 8005400:	2601      	movs	r6, #1
 8005402:	2000      	movs	r0, #0
 8005404:	9310      	str	r3, [sp, #64]	; 0x40
 8005406:	9309      	str	r3, [sp, #36]	; 0x24
 8005408:	9612      	str	r6, [sp, #72]	; 0x48
 800540a:	9027      	str	r0, [sp, #156]	; 0x9c
 800540c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800540e:	2b00      	cmp	r3, #0
 8005410:	da00      	bge.n	8005414 <_dtoa_r+0x4d4>
 8005412:	e0b5      	b.n	8005580 <_dtoa_r+0x640>
 8005414:	9e07      	ldr	r6, [sp, #28]
 8005416:	2e0e      	cmp	r6, #14
 8005418:	dd00      	ble.n	800541c <_dtoa_r+0x4dc>
 800541a:	e0b1      	b.n	8005580 <_dtoa_r+0x640>
 800541c:	4ac5      	ldr	r2, [pc, #788]	; (8005734 <_dtoa_r+0x7f4>)
 800541e:	00f3      	lsls	r3, r6, #3
 8005420:	18d3      	adds	r3, r2, r3
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	6859      	ldr	r1, [r3, #4]
 8005426:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005428:	9004      	str	r0, [sp, #16]
 800542a:	9105      	str	r1, [sp, #20]
 800542c:	2e00      	cmp	r6, #0
 800542e:	dc03      	bgt.n	8005438 <_dtoa_r+0x4f8>
 8005430:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8005432:	2800      	cmp	r0, #0
 8005434:	da00      	bge.n	8005438 <_dtoa_r+0x4f8>
 8005436:	e310      	b.n	8005a5a <_dtoa_r+0xb1a>
 8005438:	9e02      	ldr	r6, [sp, #8]
 800543a:	9f03      	ldr	r7, [sp, #12]
 800543c:	9a04      	ldr	r2, [sp, #16]
 800543e:	9b05      	ldr	r3, [sp, #20]
 8005440:	1c30      	adds	r0, r6, #0
 8005442:	1c39      	adds	r1, r7, #0
 8005444:	f004 e8f8 	blx	8009638 <__aeabi_ddiv>
 8005448:	f004 ea9e 	blx	8009988 <__aeabi_d2iz>
 800544c:	4680      	mov	r8, r0
 800544e:	f003 ef3e 	blx	80092cc <__aeabi_i2d>
 8005452:	9a04      	ldr	r2, [sp, #16]
 8005454:	9b05      	ldr	r3, [sp, #20]
 8005456:	f003 efa8 	blx	80093a8 <__aeabi_dmul>
 800545a:	1c02      	adds	r2, r0, #0
 800545c:	1c0b      	adds	r3, r1, #0
 800545e:	1c30      	adds	r0, r6, #0
 8005460:	1c39      	adds	r1, r7, #0
 8005462:	f003 ed98 	blx	8008f94 <__aeabi_dsub>
 8005466:	4643      	mov	r3, r8
 8005468:	3330      	adds	r3, #48	; 0x30
 800546a:	465a      	mov	r2, fp
 800546c:	7013      	strb	r3, [r2, #0]
 800546e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005470:	465d      	mov	r5, fp
 8005472:	1c06      	adds	r6, r0, #0
 8005474:	1c0f      	adds	r7, r1, #0
 8005476:	3501      	adds	r5, #1
 8005478:	2b01      	cmp	r3, #1
 800547a:	d048      	beq.n	800550e <_dtoa_r+0x5ce>
 800547c:	4ba5      	ldr	r3, [pc, #660]	; (8005714 <_dtoa_r+0x7d4>)
 800547e:	4aa4      	ldr	r2, [pc, #656]	; (8005710 <_dtoa_r+0x7d0>)
 8005480:	f003 ef92 	blx	80093a8 <__aeabi_dmul>
 8005484:	4aa4      	ldr	r2, [pc, #656]	; (8005718 <_dtoa_r+0x7d8>)
 8005486:	4ba5      	ldr	r3, [pc, #660]	; (800571c <_dtoa_r+0x7dc>)
 8005488:	1c06      	adds	r6, r0, #0
 800548a:	1c0f      	adds	r7, r1, #0
 800548c:	f004 ea40 	blx	8009910 <__aeabi_dcmpeq>
 8005490:	2800      	cmp	r0, #0
 8005492:	d000      	beq.n	8005496 <_dtoa_r+0x556>
 8005494:	e3d0      	b.n	8005c38 <_dtoa_r+0xcf8>
 8005496:	46a9      	mov	r9, r5
 8005498:	46a2      	mov	sl, r4
 800549a:	9c04      	ldr	r4, [sp, #16]
 800549c:	9d05      	ldr	r5, [sp, #20]
 800549e:	e00e      	b.n	80054be <_dtoa_r+0x57e>
 80054a0:	1c10      	adds	r0, r2, #0
 80054a2:	1c19      	adds	r1, r3, #0
 80054a4:	4b9b      	ldr	r3, [pc, #620]	; (8005714 <_dtoa_r+0x7d4>)
 80054a6:	4a9a      	ldr	r2, [pc, #616]	; (8005710 <_dtoa_r+0x7d0>)
 80054a8:	f003 ef7e 	blx	80093a8 <__aeabi_dmul>
 80054ac:	4a9a      	ldr	r2, [pc, #616]	; (8005718 <_dtoa_r+0x7d8>)
 80054ae:	4b9b      	ldr	r3, [pc, #620]	; (800571c <_dtoa_r+0x7dc>)
 80054b0:	1c06      	adds	r6, r0, #0
 80054b2:	1c0f      	adds	r7, r1, #0
 80054b4:	f004 ea2c 	blx	8009910 <__aeabi_dcmpeq>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d000      	beq.n	80054be <_dtoa_r+0x57e>
 80054bc:	e3ba      	b.n	8005c34 <_dtoa_r+0xcf4>
 80054be:	1c22      	adds	r2, r4, #0
 80054c0:	1c2b      	adds	r3, r5, #0
 80054c2:	1c30      	adds	r0, r6, #0
 80054c4:	1c39      	adds	r1, r7, #0
 80054c6:	f004 e8b8 	blx	8009638 <__aeabi_ddiv>
 80054ca:	f004 ea5e 	blx	8009988 <__aeabi_d2iz>
 80054ce:	4680      	mov	r8, r0
 80054d0:	f003 eefc 	blx	80092cc <__aeabi_i2d>
 80054d4:	1c22      	adds	r2, r4, #0
 80054d6:	1c2b      	adds	r3, r5, #0
 80054d8:	f003 ef66 	blx	80093a8 <__aeabi_dmul>
 80054dc:	1c02      	adds	r2, r0, #0
 80054de:	1c0b      	adds	r3, r1, #0
 80054e0:	1c30      	adds	r0, r6, #0
 80054e2:	1c39      	adds	r1, r7, #0
 80054e4:	f003 ed56 	blx	8008f94 <__aeabi_dsub>
 80054e8:	1c0b      	adds	r3, r1, #0
 80054ea:	1c0f      	adds	r7, r1, #0
 80054ec:	4641      	mov	r1, r8
 80054ee:	3130      	adds	r1, #48	; 0x30
 80054f0:	1c02      	adds	r2, r0, #0
 80054f2:	1c06      	adds	r6, r0, #0
 80054f4:	4648      	mov	r0, r9
 80054f6:	7001      	strb	r1, [r0, #0]
 80054f8:	2101      	movs	r1, #1
 80054fa:	4489      	add	r9, r1
 80054fc:	4648      	mov	r0, r9
 80054fe:	4659      	mov	r1, fp
 8005500:	1a40      	subs	r0, r0, r1
 8005502:	4684      	mov	ip, r0
 8005504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005506:	4560      	cmp	r0, ip
 8005508:	d1ca      	bne.n	80054a0 <_dtoa_r+0x560>
 800550a:	464d      	mov	r5, r9
 800550c:	4654      	mov	r4, sl
 800550e:	1c32      	adds	r2, r6, #0
 8005510:	1c3b      	adds	r3, r7, #0
 8005512:	1c30      	adds	r0, r6, #0
 8005514:	1c39      	adds	r1, r7, #0
 8005516:	f003 ed40 	blx	8008f98 <__adddf3>
 800551a:	1c06      	adds	r6, r0, #0
 800551c:	1c0f      	adds	r7, r1, #0
 800551e:	1c32      	adds	r2, r6, #0
 8005520:	9804      	ldr	r0, [sp, #16]
 8005522:	9905      	ldr	r1, [sp, #20]
 8005524:	1c3b      	adds	r3, r7, #0
 8005526:	f004 ea00 	blx	8009928 <__aeabi_dcmplt>
 800552a:	2800      	cmp	r0, #0
 800552c:	d10c      	bne.n	8005548 <_dtoa_r+0x608>
 800552e:	9804      	ldr	r0, [sp, #16]
 8005530:	9905      	ldr	r1, [sp, #20]
 8005532:	1c32      	adds	r2, r6, #0
 8005534:	1c3b      	adds	r3, r7, #0
 8005536:	f004 e9ec 	blx	8009910 <__aeabi_dcmpeq>
 800553a:	2800      	cmp	r0, #0
 800553c:	d100      	bne.n	8005540 <_dtoa_r+0x600>
 800553e:	e37b      	b.n	8005c38 <_dtoa_r+0xcf8>
 8005540:	4640      	mov	r0, r8
 8005542:	07c0      	lsls	r0, r0, #31
 8005544:	d400      	bmi.n	8005548 <_dtoa_r+0x608>
 8005546:	e377      	b.n	8005c38 <_dtoa_r+0xcf8>
 8005548:	1e6b      	subs	r3, r5, #1
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	9e07      	ldr	r6, [sp, #28]
 800554e:	465f      	mov	r7, fp
 8005550:	9617      	str	r6, [sp, #92]	; 0x5c
 8005552:	1c19      	adds	r1, r3, #0
 8005554:	1c2a      	adds	r2, r5, #0
 8005556:	e002      	b.n	800555e <_dtoa_r+0x61e>
 8005558:	3a02      	subs	r2, #2
 800555a:	7811      	ldrb	r1, [r2, #0]
 800555c:	1c1a      	adds	r2, r3, #0
 800555e:	1e53      	subs	r3, r2, #1
 8005560:	2939      	cmp	r1, #57	; 0x39
 8005562:	d001      	beq.n	8005568 <_dtoa_r+0x628>
 8005564:	f000 fc05 	bl	8005d72 <_dtoa_r+0xe32>
 8005568:	429f      	cmp	r7, r3
 800556a:	d1f5      	bne.n	8005558 <_dtoa_r+0x618>
 800556c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800556e:	2330      	movs	r3, #48	; 0x30
 8005570:	703b      	strb	r3, [r7, #0]
 8005572:	4693      	mov	fp, r2
 8005574:	3601      	adds	r6, #1
 8005576:	1c3b      	adds	r3, r7, #0
 8005578:	2231      	movs	r2, #49	; 0x31
 800557a:	9607      	str	r6, [sp, #28]
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	e0ab      	b.n	80056d8 <_dtoa_r+0x798>
 8005580:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8005582:	2e00      	cmp	r6, #0
 8005584:	d000      	beq.n	8005588 <_dtoa_r+0x648>
 8005586:	e0f2      	b.n	800576e <_dtoa_r+0x82e>
 8005588:	2100      	movs	r1, #0
 800558a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800558c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800558e:	4689      	mov	r9, r1
 8005590:	4652      	mov	r2, sl
 8005592:	2a00      	cmp	r2, #0
 8005594:	dd0c      	ble.n	80055b0 <_dtoa_r+0x670>
 8005596:	2f00      	cmp	r7, #0
 8005598:	dd0a      	ble.n	80055b0 <_dtoa_r+0x670>
 800559a:	4653      	mov	r3, sl
 800559c:	45ba      	cmp	sl, r7
 800559e:	dd00      	ble.n	80055a2 <_dtoa_r+0x662>
 80055a0:	1c3b      	adds	r3, r7, #0
 80055a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80055a4:	4651      	mov	r1, sl
 80055a6:	1ac0      	subs	r0, r0, r3
 80055a8:	1ac9      	subs	r1, r1, r3
 80055aa:	900a      	str	r0, [sp, #40]	; 0x28
 80055ac:	1aff      	subs	r7, r7, r3
 80055ae:	468a      	mov	sl, r1
 80055b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055b2:	2a00      	cmp	r2, #0
 80055b4:	dd1a      	ble.n	80055ec <_dtoa_r+0x6ac>
 80055b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d100      	bne.n	80055be <_dtoa_r+0x67e>
 80055bc:	e333      	b.n	8005c26 <_dtoa_r+0xce6>
 80055be:	2e00      	cmp	r6, #0
 80055c0:	dd10      	ble.n	80055e4 <_dtoa_r+0x6a4>
 80055c2:	4649      	mov	r1, r9
 80055c4:	1c32      	adds	r2, r6, #0
 80055c6:	1c20      	adds	r0, r4, #0
 80055c8:	f002 f8ea 	bl	80077a0 <__pow5mult>
 80055cc:	4681      	mov	r9, r0
 80055ce:	4649      	mov	r1, r9
 80055d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055d2:	1c20      	adds	r0, r4, #0
 80055d4:	f002 f832 	bl	800763c <__multiply>
 80055d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055da:	1c05      	adds	r5, r0, #0
 80055dc:	1c20      	adds	r0, r4, #0
 80055de:	f001 ff25 	bl	800742c <_Bfree>
 80055e2:	950b      	str	r5, [sp, #44]	; 0x2c
 80055e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80055e6:	1b82      	subs	r2, r0, r6
 80055e8:	d000      	beq.n	80055ec <_dtoa_r+0x6ac>
 80055ea:	e361      	b.n	8005cb0 <_dtoa_r+0xd70>
 80055ec:	1c20      	adds	r0, r4, #0
 80055ee:	2101      	movs	r1, #1
 80055f0:	f002 f818 	bl	8007624 <__i2b>
 80055f4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80055f6:	4680      	mov	r8, r0
 80055f8:	2e00      	cmp	r6, #0
 80055fa:	dd05      	ble.n	8005608 <_dtoa_r+0x6c8>
 80055fc:	4641      	mov	r1, r8
 80055fe:	1c20      	adds	r0, r4, #0
 8005600:	1c32      	adds	r2, r6, #0
 8005602:	f002 f8cd 	bl	80077a0 <__pow5mult>
 8005606:	4680      	mov	r8, r0
 8005608:	9826      	ldr	r0, [sp, #152]	; 0x98
 800560a:	2500      	movs	r5, #0
 800560c:	2801      	cmp	r0, #1
 800560e:	dc00      	bgt.n	8005612 <_dtoa_r+0x6d2>
 8005610:	e252      	b.n	8005ab8 <_dtoa_r+0xb78>
 8005612:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8005614:	2301      	movs	r3, #1
 8005616:	2e00      	cmp	r6, #0
 8005618:	d000      	beq.n	800561c <_dtoa_r+0x6dc>
 800561a:	e1f5      	b.n	8005a08 <_dtoa_r+0xac8>
 800561c:	4453      	add	r3, sl
 800561e:	221f      	movs	r2, #31
 8005620:	4013      	ands	r3, r2
 8005622:	d100      	bne.n	8005626 <_dtoa_r+0x6e6>
 8005624:	e151      	b.n	80058ca <_dtoa_r+0x98a>
 8005626:	2220      	movs	r2, #32
 8005628:	1ad2      	subs	r2, r2, r3
 800562a:	2a04      	cmp	r2, #4
 800562c:	dc01      	bgt.n	8005632 <_dtoa_r+0x6f2>
 800562e:	f000 fc3a 	bl	8005ea6 <_dtoa_r+0xf66>
 8005632:	221c      	movs	r2, #28
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005638:	18f6      	adds	r6, r6, r3
 800563a:	960a      	str	r6, [sp, #40]	; 0x28
 800563c:	18ff      	adds	r7, r7, r3
 800563e:	449a      	add	sl, r3
 8005640:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005642:	2e00      	cmp	r6, #0
 8005644:	dd05      	ble.n	8005652 <_dtoa_r+0x712>
 8005646:	1c20      	adds	r0, r4, #0
 8005648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800564a:	1c32      	adds	r2, r6, #0
 800564c:	f002 f900 	bl	8007850 <__lshift>
 8005650:	900b      	str	r0, [sp, #44]	; 0x2c
 8005652:	4650      	mov	r0, sl
 8005654:	2800      	cmp	r0, #0
 8005656:	dd05      	ble.n	8005664 <_dtoa_r+0x724>
 8005658:	4641      	mov	r1, r8
 800565a:	1c20      	adds	r0, r4, #0
 800565c:	4652      	mov	r2, sl
 800565e:	f002 f8f7 	bl	8007850 <__lshift>
 8005662:	4680      	mov	r8, r0
 8005664:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005666:	2e00      	cmp	r6, #0
 8005668:	d000      	beq.n	800566c <_dtoa_r+0x72c>
 800566a:	e1d8      	b.n	8005a1e <_dtoa_r+0xade>
 800566c:	9826      	ldr	r0, [sp, #152]	; 0x98
 800566e:	2301      	movs	r3, #1
 8005670:	2802      	cmp	r0, #2
 8005672:	dc00      	bgt.n	8005676 <_dtoa_r+0x736>
 8005674:	2300      	movs	r3, #0
 8005676:	061b      	lsls	r3, r3, #24
 8005678:	d100      	bne.n	800567c <_dtoa_r+0x73c>
 800567a:	e0dc      	b.n	8005836 <_dtoa_r+0x8f6>
 800567c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800567e:	2e00      	cmp	r6, #0
 8005680:	dd00      	ble.n	8005684 <_dtoa_r+0x744>
 8005682:	e0d8      	b.n	8005836 <_dtoa_r+0x8f6>
 8005684:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005686:	2e00      	cmp	r6, #0
 8005688:	d000      	beq.n	800568c <_dtoa_r+0x74c>
 800568a:	e0ce      	b.n	800582a <_dtoa_r+0x8ea>
 800568c:	4641      	mov	r1, r8
 800568e:	1c20      	adds	r0, r4, #0
 8005690:	2205      	movs	r2, #5
 8005692:	2300      	movs	r3, #0
 8005694:	f001 fed6 	bl	8007444 <__multadd>
 8005698:	4680      	mov	r8, r0
 800569a:	4641      	mov	r1, r8
 800569c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800569e:	f002 f93f 	bl	8007920 <__mcmp>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	dc00      	bgt.n	80056a8 <_dtoa_r+0x768>
 80056a6:	e0c0      	b.n	800582a <_dtoa_r+0x8ea>
 80056a8:	9e07      	ldr	r6, [sp, #28]
 80056aa:	465a      	mov	r2, fp
 80056ac:	2331      	movs	r3, #49	; 0x31
 80056ae:	3601      	adds	r6, #1
 80056b0:	2001      	movs	r0, #1
 80056b2:	7013      	strb	r3, [r2, #0]
 80056b4:	9607      	str	r6, [sp, #28]
 80056b6:	465f      	mov	r7, fp
 80056b8:	2500      	movs	r5, #0
 80056ba:	4483      	add	fp, r0
 80056bc:	1c20      	adds	r0, r4, #0
 80056be:	4641      	mov	r1, r8
 80056c0:	f001 feb4 	bl	800742c <_Bfree>
 80056c4:	4648      	mov	r0, r9
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d006      	beq.n	80056d8 <_dtoa_r+0x798>
 80056ca:	454d      	cmp	r5, r9
 80056cc:	d000      	beq.n	80056d0 <_dtoa_r+0x790>
 80056ce:	e105      	b.n	80058dc <_dtoa_r+0x99c>
 80056d0:	1c20      	adds	r0, r4, #0
 80056d2:	4649      	mov	r1, r9
 80056d4:	f001 feaa 	bl	800742c <_Bfree>
 80056d8:	1c20      	adds	r0, r4, #0
 80056da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056dc:	f001 fea6 	bl	800742c <_Bfree>
 80056e0:	2300      	movs	r3, #0
 80056e2:	4658      	mov	r0, fp
 80056e4:	7003      	strb	r3, [r0, #0]
 80056e6:	9b07      	ldr	r3, [sp, #28]
 80056e8:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80056ea:	3301      	adds	r3, #1
 80056ec:	6033      	str	r3, [r6, #0]
 80056ee:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80056f0:	2e00      	cmp	r6, #0
 80056f2:	d100      	bne.n	80056f6 <_dtoa_r+0x7b6>
 80056f4:	e459      	b.n	8004faa <_dtoa_r+0x6a>
 80056f6:	6030      	str	r0, [r6, #0]
 80056f8:	e457      	b.n	8004faa <_dtoa_r+0x6a>
 80056fa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80056fc:	9807      	ldr	r0, [sp, #28]
 80056fe:	1a36      	subs	r6, r6, r0
 8005700:	960a      	str	r6, [sp, #40]	; 0x28
 8005702:	4246      	negs	r6, r0
 8005704:	960f      	str	r6, [sp, #60]	; 0x3c
 8005706:	2600      	movs	r6, #0
 8005708:	9611      	str	r6, [sp, #68]	; 0x44
 800570a:	e4e6      	b.n	80050da <_dtoa_r+0x19a>
 800570c:	46c0      	nop			; (mov r8, r8)
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	00000000 	.word	0x00000000
 8005714:	40240000 	.word	0x40240000
	...
 8005720:	fffffbef 	.word	0xfffffbef
 8005724:	fffffc0e 	.word	0xfffffc0e
 8005728:	00000412 	.word	0x00000412
 800572c:	fe100000 	.word	0xfe100000
 8005730:	0800dcc4 	.word	0x0800dcc4
 8005734:	0800dd08 	.word	0x0800dd08
 8005738:	426d      	negs	r5, r5
 800573a:	2100      	movs	r1, #0
 800573c:	950a      	str	r5, [sp, #40]	; 0x28
 800573e:	468a      	mov	sl, r1
 8005740:	e4c3      	b.n	80050ca <_dtoa_r+0x18a>
 8005742:	9807      	ldr	r0, [sp, #28]
 8005744:	f003 edc2 	blx	80092cc <__aeabi_i2d>
 8005748:	1c32      	adds	r2, r6, #0
 800574a:	1c3b      	adds	r3, r7, #0
 800574c:	f004 e8e0 	blx	8009910 <__aeabi_dcmpeq>
 8005750:	9e07      	ldr	r6, [sp, #28]
 8005752:	4243      	negs	r3, r0
 8005754:	4143      	adcs	r3, r0
 8005756:	1af6      	subs	r6, r6, r3
 8005758:	9607      	str	r6, [sp, #28]
 800575a:	e498      	b.n	800508e <_dtoa_r+0x14e>
 800575c:	48d2      	ldr	r0, [pc, #840]	; (8005aa8 <_dtoa_r+0xb68>)
 800575e:	9a02      	ldr	r2, [sp, #8]
 8005760:	1b80      	subs	r0, r0, r6
 8005762:	4082      	lsls	r2, r0
 8005764:	1c10      	adds	r0, r2, #0
 8005766:	e635      	b.n	80053d4 <_dtoa_r+0x494>
 8005768:	2600      	movs	r6, #0
 800576a:	960e      	str	r6, [sp, #56]	; 0x38
 800576c:	e4a5      	b.n	80050ba <_dtoa_r+0x17a>
 800576e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005770:	2801      	cmp	r0, #1
 8005772:	dc00      	bgt.n	8005776 <_dtoa_r+0x836>
 8005774:	e2bc      	b.n	8005cf0 <_dtoa_r+0xdb0>
 8005776:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005778:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800577a:	3e01      	subs	r6, #1
 800577c:	42b2      	cmp	r2, r6
 800577e:	da00      	bge.n	8005782 <_dtoa_r+0x842>
 8005780:	e25d      	b.n	8005c3e <_dtoa_r+0xcfe>
 8005782:	1b96      	subs	r6, r2, r6
 8005784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005786:	2a00      	cmp	r2, #0
 8005788:	da00      	bge.n	800578c <_dtoa_r+0x84c>
 800578a:	e2b9      	b.n	8005d00 <_dtoa_r+0xdc0>
 800578c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800578e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005790:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005792:	18c0      	adds	r0, r0, r3
 8005794:	900a      	str	r0, [sp, #40]	; 0x28
 8005796:	2101      	movs	r1, #1
 8005798:	1c20      	adds	r0, r4, #0
 800579a:	449a      	add	sl, r3
 800579c:	f001 ff42 	bl	8007624 <__i2b>
 80057a0:	4681      	mov	r9, r0
 80057a2:	e6f5      	b.n	8005590 <_dtoa_r+0x650>
 80057a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80057a6:	2a04      	cmp	r2, #4
 80057a8:	d100      	bne.n	80057ac <_dtoa_r+0x86c>
 80057aa:	e22a      	b.n	8005c02 <_dtoa_r+0xcc2>
 80057ac:	2a05      	cmp	r2, #5
 80057ae:	d000      	beq.n	80057b2 <_dtoa_r+0x872>
 80057b0:	e61c      	b.n	80053ec <_dtoa_r+0x4ac>
 80057b2:	2601      	movs	r6, #1
 80057b4:	9612      	str	r6, [sp, #72]	; 0x48
 80057b6:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80057b8:	9807      	ldr	r0, [sp, #28]
 80057ba:	1836      	adds	r6, r6, r0
 80057bc:	9610      	str	r6, [sp, #64]	; 0x40
 80057be:	2500      	movs	r5, #0
 80057c0:	3601      	adds	r6, #1
 80057c2:	220e      	movs	r2, #14
 80057c4:	42b2      	cmp	r2, r6
 80057c6:	416d      	adcs	r5, r5
 80057c8:	2e00      	cmp	r6, #0
 80057ca:	dc00      	bgt.n	80057ce <_dtoa_r+0x88e>
 80057cc:	e21d      	b.n	8005c0a <_dtoa_r+0xcca>
 80057ce:	401d      	ands	r5, r3
 80057d0:	9609      	str	r6, [sp, #36]	; 0x24
 80057d2:	e4a5      	b.n	8005120 <_dtoa_r+0x1e0>
 80057d4:	4648      	mov	r0, r9
 80057d6:	f003 ed7a 	blx	80092cc <__aeabi_i2d>
 80057da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057de:	f003 ede4 	blx	80093a8 <__aeabi_dmul>
 80057e2:	4baa      	ldr	r3, [pc, #680]	; (8005a8c <_dtoa_r+0xb4c>)
 80057e4:	4aa8      	ldr	r2, [pc, #672]	; (8005a88 <_dtoa_r+0xb48>)
 80057e6:	f003 ebd8 	blx	8008f98 <__adddf3>
 80057ea:	1c06      	adds	r6, r0, #0
 80057ec:	48af      	ldr	r0, [pc, #700]	; (8005aac <_dtoa_r+0xb6c>)
 80057ee:	180f      	adds	r7, r1, r0
 80057f0:	4aa7      	ldr	r2, [pc, #668]	; (8005a90 <_dtoa_r+0xb50>)
 80057f2:	4ba8      	ldr	r3, [pc, #672]	; (8005a94 <_dtoa_r+0xb54>)
 80057f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80057f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80057f8:	f003 ebcc 	blx	8008f94 <__aeabi_dsub>
 80057fc:	1c32      	adds	r2, r6, #0
 80057fe:	1c3b      	adds	r3, r7, #0
 8005800:	900c      	str	r0, [sp, #48]	; 0x30
 8005802:	910d      	str	r1, [sp, #52]	; 0x34
 8005804:	f004 e8b4 	blx	8009970 <__aeabi_dcmpgt>
 8005808:	2800      	cmp	r0, #0
 800580a:	d000      	beq.n	800580e <_dtoa_r+0x8ce>
 800580c:	e09c      	b.n	8005948 <_dtoa_r+0xa08>
 800580e:	1c32      	adds	r2, r6, #0
 8005810:	2680      	movs	r6, #128	; 0x80
 8005812:	0636      	lsls	r6, r6, #24
 8005814:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005816:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005818:	19bb      	adds	r3, r7, r6
 800581a:	f004 e886 	blx	8009928 <__aeabi_dcmplt>
 800581e:	2800      	cmp	r0, #0
 8005820:	d100      	bne.n	8005824 <_dtoa_r+0x8e4>
 8005822:	e5f3      	b.n	800540c <_dtoa_r+0x4cc>
 8005824:	2000      	movs	r0, #0
 8005826:	4680      	mov	r8, r0
 8005828:	4681      	mov	r9, r0
 800582a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800582c:	43f6      	mvns	r6, r6
 800582e:	9607      	str	r6, [sp, #28]
 8005830:	465f      	mov	r7, fp
 8005832:	2500      	movs	r5, #0
 8005834:	e742      	b.n	80056bc <_dtoa_r+0x77c>
 8005836:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8005838:	2e00      	cmp	r6, #0
 800583a:	d000      	beq.n	800583e <_dtoa_r+0x8fe>
 800583c:	e15f      	b.n	8005afe <_dtoa_r+0xbbe>
 800583e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005840:	46a2      	mov	sl, r4
 8005842:	2500      	movs	r5, #0
 8005844:	4644      	mov	r4, r8
 8005846:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005848:	4680      	mov	r8, r0
 800584a:	e006      	b.n	800585a <_dtoa_r+0x91a>
 800584c:	1c31      	adds	r1, r6, #0
 800584e:	4650      	mov	r0, sl
 8005850:	220a      	movs	r2, #10
 8005852:	2300      	movs	r3, #0
 8005854:	f001 fdf6 	bl	8007444 <__multadd>
 8005858:	1c06      	adds	r6, r0, #0
 800585a:	1c21      	adds	r1, r4, #0
 800585c:	1c30      	adds	r0, r6, #0
 800585e:	f7ff fac3 	bl	8004de8 <quorem>
 8005862:	1c07      	adds	r7, r0, #0
 8005864:	3730      	adds	r7, #48	; 0x30
 8005866:	4659      	mov	r1, fp
 8005868:	554f      	strb	r7, [r1, r5]
 800586a:	3501      	adds	r5, #1
 800586c:	4545      	cmp	r5, r8
 800586e:	dbed      	blt.n	800584c <_dtoa_r+0x90c>
 8005870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005872:	46a0      	mov	r8, r4
 8005874:	960b      	str	r6, [sp, #44]	; 0x2c
 8005876:	4654      	mov	r4, sl
 8005878:	2b00      	cmp	r3, #0
 800587a:	dc00      	bgt.n	800587e <_dtoa_r+0x93e>
 800587c:	e2cb      	b.n	8005e16 <_dtoa_r+0xed6>
 800587e:	469a      	mov	sl, r3
 8005880:	44da      	add	sl, fp
 8005882:	2500      	movs	r5, #0
 8005884:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005886:	1c20      	adds	r0, r4, #0
 8005888:	2201      	movs	r2, #1
 800588a:	f001 ffe1 	bl	8007850 <__lshift>
 800588e:	4641      	mov	r1, r8
 8005890:	900b      	str	r0, [sp, #44]	; 0x2c
 8005892:	f002 f845 	bl	8007920 <__mcmp>
 8005896:	2800      	cmp	r0, #0
 8005898:	dc00      	bgt.n	800589c <_dtoa_r+0x95c>
 800589a:	e273      	b.n	8005d84 <_dtoa_r+0xe44>
 800589c:	4656      	mov	r6, sl
 800589e:	3e01      	subs	r6, #1
 80058a0:	7833      	ldrb	r3, [r6, #0]
 80058a2:	4652      	mov	r2, sl
 80058a4:	4659      	mov	r1, fp
 80058a6:	e003      	b.n	80058b0 <_dtoa_r+0x970>
 80058a8:	3a02      	subs	r2, #2
 80058aa:	7813      	ldrb	r3, [r2, #0]
 80058ac:	1c32      	adds	r2, r6, #0
 80058ae:	3e01      	subs	r6, #1
 80058b0:	2b39      	cmp	r3, #57	; 0x39
 80058b2:	d000      	beq.n	80058b6 <_dtoa_r+0x976>
 80058b4:	e28d      	b.n	8005dd2 <_dtoa_r+0xe92>
 80058b6:	42b1      	cmp	r1, r6
 80058b8:	d1f6      	bne.n	80058a8 <_dtoa_r+0x968>
 80058ba:	9e07      	ldr	r6, [sp, #28]
 80058bc:	2331      	movs	r3, #49	; 0x31
 80058be:	3601      	adds	r6, #1
 80058c0:	9607      	str	r6, [sp, #28]
 80058c2:	700b      	strb	r3, [r1, #0]
 80058c4:	1c0f      	adds	r7, r1, #0
 80058c6:	4693      	mov	fp, r2
 80058c8:	e6f8      	b.n	80056bc <_dtoa_r+0x77c>
 80058ca:	231c      	movs	r3, #28
 80058cc:	e6b3      	b.n	8005636 <_dtoa_r+0x6f6>
 80058ce:	9802      	ldr	r0, [sp, #8]
 80058d0:	9903      	ldr	r1, [sp, #12]
 80058d2:	900c      	str	r0, [sp, #48]	; 0x30
 80058d4:	910d      	str	r1, [sp, #52]	; 0x34
 80058d6:	2102      	movs	r1, #2
 80058d8:	4689      	mov	r9, r1
 80058da:	e455      	b.n	8005188 <_dtoa_r+0x248>
 80058dc:	2d00      	cmp	r5, #0
 80058de:	d100      	bne.n	80058e2 <_dtoa_r+0x9a2>
 80058e0:	e6f6      	b.n	80056d0 <_dtoa_r+0x790>
 80058e2:	1c20      	adds	r0, r4, #0
 80058e4:	1c29      	adds	r1, r5, #0
 80058e6:	f001 fda1 	bl	800742c <_Bfree>
 80058ea:	e6f1      	b.n	80056d0 <_dtoa_r+0x790>
 80058ec:	9e07      	ldr	r6, [sp, #28]
 80058ee:	4275      	negs	r5, r6
 80058f0:	2d00      	cmp	r5, #0
 80058f2:	d100      	bne.n	80058f6 <_dtoa_r+0x9b6>
 80058f4:	e1ab      	b.n	8005c4e <_dtoa_r+0xd0e>
 80058f6:	230f      	movs	r3, #15
 80058f8:	402b      	ands	r3, r5
 80058fa:	4a6d      	ldr	r2, [pc, #436]	; (8005ab0 <_dtoa_r+0xb70>)
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	18d3      	adds	r3, r2, r3
 8005900:	9802      	ldr	r0, [sp, #8]
 8005902:	9903      	ldr	r1, [sp, #12]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f003 ed4e 	blx	80093a8 <__aeabi_dmul>
 800590c:	112d      	asrs	r5, r5, #4
 800590e:	900c      	str	r0, [sp, #48]	; 0x30
 8005910:	910d      	str	r1, [sp, #52]	; 0x34
 8005912:	2d00      	cmp	r5, #0
 8005914:	d100      	bne.n	8005918 <_dtoa_r+0x9d8>
 8005916:	e2b8      	b.n	8005e8a <_dtoa_r+0xf4a>
 8005918:	2002      	movs	r0, #2
 800591a:	4681      	mov	r9, r0
 800591c:	4e65      	ldr	r6, [pc, #404]	; (8005ab4 <_dtoa_r+0xb74>)
 800591e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005920:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005922:	46a0      	mov	r8, r4
 8005924:	2701      	movs	r7, #1
 8005926:	464c      	mov	r4, r9
 8005928:	422f      	tst	r7, r5
 800592a:	d004      	beq.n	8005936 <_dtoa_r+0x9f6>
 800592c:	6832      	ldr	r2, [r6, #0]
 800592e:	6873      	ldr	r3, [r6, #4]
 8005930:	3401      	adds	r4, #1
 8005932:	f003 ed3a 	blx	80093a8 <__aeabi_dmul>
 8005936:	106d      	asrs	r5, r5, #1
 8005938:	3608      	adds	r6, #8
 800593a:	2d00      	cmp	r5, #0
 800593c:	d1f4      	bne.n	8005928 <_dtoa_r+0x9e8>
 800593e:	46a1      	mov	r9, r4
 8005940:	900c      	str	r0, [sp, #48]	; 0x30
 8005942:	910d      	str	r1, [sp, #52]	; 0x34
 8005944:	4644      	mov	r4, r8
 8005946:	e43d      	b.n	80051c4 <_dtoa_r+0x284>
 8005948:	2000      	movs	r0, #0
 800594a:	4680      	mov	r8, r0
 800594c:	4681      	mov	r9, r0
 800594e:	e6ab      	b.n	80056a8 <_dtoa_r+0x768>
 8005950:	4a57      	ldr	r2, [pc, #348]	; (8005ab0 <_dtoa_r+0xb70>)
 8005952:	9314      	str	r3, [sp, #80]	; 0x50
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	18d3      	adds	r3, r2, r3
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	6859      	ldr	r1, [r3, #4]
 800595c:	1c32      	adds	r2, r6, #0
 800595e:	1c3b      	adds	r3, r7, #0
 8005960:	f003 ed22 	blx	80093a8 <__aeabi_dmul>
 8005964:	9018      	str	r0, [sp, #96]	; 0x60
 8005966:	9119      	str	r1, [sp, #100]	; 0x64
 8005968:	980c      	ldr	r0, [sp, #48]	; 0x30
 800596a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800596c:	f004 e80c 	blx	8009988 <__aeabi_d2iz>
 8005970:	1c05      	adds	r5, r0, #0
 8005972:	f003 ecac 	blx	80092cc <__aeabi_i2d>
 8005976:	1c02      	adds	r2, r0, #0
 8005978:	1c0b      	adds	r3, r1, #0
 800597a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800597c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800597e:	f003 eb0a 	blx	8008f94 <__aeabi_dsub>
 8005982:	1c0f      	adds	r7, r1, #0
 8005984:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005986:	3530      	adds	r5, #48	; 0x30
 8005988:	1c06      	adds	r6, r0, #0
 800598a:	4658      	mov	r0, fp
 800598c:	7005      	strb	r5, [r0, #0]
 800598e:	4689      	mov	r9, r1
 8005990:	3001      	adds	r0, #1
 8005992:	900c      	str	r0, [sp, #48]	; 0x30
 8005994:	44d9      	add	r9, fp
 8005996:	1c05      	adds	r5, r0, #0
 8005998:	2901      	cmp	r1, #1
 800599a:	d01f      	beq.n	80059dc <_dtoa_r+0xa9c>
 800599c:	1c30      	adds	r0, r6, #0
 800599e:	1c39      	adds	r1, r7, #0
 80059a0:	46a0      	mov	r8, r4
 80059a2:	4a3d      	ldr	r2, [pc, #244]	; (8005a98 <_dtoa_r+0xb58>)
 80059a4:	4b3d      	ldr	r3, [pc, #244]	; (8005a9c <_dtoa_r+0xb5c>)
 80059a6:	f003 ed00 	blx	80093a8 <__aeabi_dmul>
 80059aa:	1c0f      	adds	r7, r1, #0
 80059ac:	1c06      	adds	r6, r0, #0
 80059ae:	f003 efec 	blx	8009988 <__aeabi_d2iz>
 80059b2:	1c04      	adds	r4, r0, #0
 80059b4:	f003 ec8a 	blx	80092cc <__aeabi_i2d>
 80059b8:	3430      	adds	r4, #48	; 0x30
 80059ba:	1c02      	adds	r2, r0, #0
 80059bc:	1c0b      	adds	r3, r1, #0
 80059be:	1c30      	adds	r0, r6, #0
 80059c0:	1c39      	adds	r1, r7, #0
 80059c2:	f003 eae8 	blx	8008f94 <__aeabi_dsub>
 80059c6:	702c      	strb	r4, [r5, #0]
 80059c8:	3501      	adds	r5, #1
 80059ca:	454d      	cmp	r5, r9
 80059cc:	d1e9      	bne.n	80059a2 <_dtoa_r+0xa62>
 80059ce:	1c06      	adds	r6, r0, #0
 80059d0:	1c0f      	adds	r7, r1, #0
 80059d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80059d4:	9914      	ldr	r1, [sp, #80]	; 0x50
 80059d6:	1840      	adds	r0, r0, r1
 80059d8:	900c      	str	r0, [sp, #48]	; 0x30
 80059da:	4644      	mov	r4, r8
 80059dc:	4a30      	ldr	r2, [pc, #192]	; (8005aa0 <_dtoa_r+0xb60>)
 80059de:	4b31      	ldr	r3, [pc, #196]	; (8005aa4 <_dtoa_r+0xb64>)
 80059e0:	9818      	ldr	r0, [sp, #96]	; 0x60
 80059e2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80059e4:	f003 ead8 	blx	8008f98 <__adddf3>
 80059e8:	1c32      	adds	r2, r6, #0
 80059ea:	1c3b      	adds	r3, r7, #0
 80059ec:	f003 ef9c 	blx	8009928 <__aeabi_dcmplt>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d100      	bne.n	80059f6 <_dtoa_r+0xab6>
 80059f4:	e162      	b.n	8005cbc <_dtoa_r+0xd7c>
 80059f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059f8:	3b01      	subs	r3, #1
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	4698      	mov	r8, r3
 80059fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a00:	465f      	mov	r7, fp
 8005a02:	4641      	mov	r1, r8
 8005a04:	1c1a      	adds	r2, r3, #0
 8005a06:	e5aa      	b.n	800555e <_dtoa_r+0x61e>
 8005a08:	4640      	mov	r0, r8
 8005a0a:	6903      	ldr	r3, [r0, #16]
 8005a0c:	3303      	adds	r3, #3
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4443      	add	r3, r8
 8005a12:	6858      	ldr	r0, [r3, #4]
 8005a14:	f001 fdba 	bl	800758c <__hi0bits>
 8005a18:	2320      	movs	r3, #32
 8005a1a:	1a1b      	subs	r3, r3, r0
 8005a1c:	e5fe      	b.n	800561c <_dtoa_r+0x6dc>
 8005a1e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005a20:	4641      	mov	r1, r8
 8005a22:	f001 ff7d 	bl	8007920 <__mcmp>
 8005a26:	2800      	cmp	r0, #0
 8005a28:	db00      	blt.n	8005a2c <_dtoa_r+0xaec>
 8005a2a:	e61f      	b.n	800566c <_dtoa_r+0x72c>
 8005a2c:	9e07      	ldr	r6, [sp, #28]
 8005a2e:	1c20      	adds	r0, r4, #0
 8005a30:	3e01      	subs	r6, #1
 8005a32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a34:	220a      	movs	r2, #10
 8005a36:	2300      	movs	r3, #0
 8005a38:	9607      	str	r6, [sp, #28]
 8005a3a:	f001 fd03 	bl	8007444 <__multadd>
 8005a3e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8005a40:	900b      	str	r0, [sp, #44]	; 0x2c
 8005a42:	2e00      	cmp	r6, #0
 8005a44:	d14b      	bne.n	8005ade <_dtoa_r+0xb9e>
 8005a46:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005a48:	2e00      	cmp	r6, #0
 8005a4a:	dc03      	bgt.n	8005a54 <_dtoa_r+0xb14>
 8005a4c:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005a4e:	2802      	cmp	r0, #2
 8005a50:	dd00      	ble.n	8005a54 <_dtoa_r+0xb14>
 8005a52:	e224      	b.n	8005e9e <_dtoa_r+0xf5e>
 8005a54:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005a56:	9609      	str	r6, [sp, #36]	; 0x24
 8005a58:	e6f1      	b.n	800583e <_dtoa_r+0x8fe>
 8005a5a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005a5c:	2e00      	cmp	r6, #0
 8005a5e:	d000      	beq.n	8005a62 <_dtoa_r+0xb22>
 8005a60:	e19f      	b.n	8005da2 <_dtoa_r+0xe62>
 8005a62:	4a0b      	ldr	r2, [pc, #44]	; (8005a90 <_dtoa_r+0xb50>)
 8005a64:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <_dtoa_r+0xb54>)
 8005a66:	9804      	ldr	r0, [sp, #16]
 8005a68:	9905      	ldr	r1, [sp, #20]
 8005a6a:	f003 ec9e 	blx	80093a8 <__aeabi_dmul>
 8005a6e:	9a02      	ldr	r2, [sp, #8]
 8005a70:	9b03      	ldr	r3, [sp, #12]
 8005a72:	f003 ef72 	blx	8009958 <__aeabi_dcmpge>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d100      	bne.n	8005a7c <_dtoa_r+0xb3c>
 8005a7a:	e766      	b.n	800594a <_dtoa_r+0xa0a>
 8005a7c:	2600      	movs	r6, #0
 8005a7e:	46b0      	mov	r8, r6
 8005a80:	46b1      	mov	r9, r6
 8005a82:	e6d2      	b.n	800582a <_dtoa_r+0x8ea>
 8005a84:	46c0      	nop			; (mov r8, r8)
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	00000000 	.word	0x00000000
 8005a8c:	401c0000 	.word	0x401c0000
 8005a90:	00000000 	.word	0x00000000
 8005a94:	40140000 	.word	0x40140000
 8005a98:	00000000 	.word	0x00000000
 8005a9c:	40240000 	.word	0x40240000
 8005aa0:	00000000 	.word	0x00000000
 8005aa4:	3fe00000 	.word	0x3fe00000
 8005aa8:	fffffbee 	.word	0xfffffbee
 8005aac:	fcc00000 	.word	0xfcc00000
 8005ab0:	0800dd08 	.word	0x0800dd08
 8005ab4:	0800ddf8 	.word	0x0800ddf8
 8005ab8:	9902      	ldr	r1, [sp, #8]
 8005aba:	2900      	cmp	r1, #0
 8005abc:	d000      	beq.n	8005ac0 <_dtoa_r+0xb80>
 8005abe:	e5a8      	b.n	8005612 <_dtoa_r+0x6d2>
 8005ac0:	9b03      	ldr	r3, [sp, #12]
 8005ac2:	031a      	lsls	r2, r3, #12
 8005ac4:	d000      	beq.n	8005ac8 <_dtoa_r+0xb88>
 8005ac6:	e5a4      	b.n	8005612 <_dtoa_r+0x6d2>
 8005ac8:	4adb      	ldr	r2, [pc, #876]	; (8005e38 <_dtoa_r+0xef8>)
 8005aca:	4213      	tst	r3, r2
 8005acc:	d100      	bne.n	8005ad0 <_dtoa_r+0xb90>
 8005ace:	e5a0      	b.n	8005612 <_dtoa_r+0x6d2>
 8005ad0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005ad2:	2001      	movs	r0, #1
 8005ad4:	3601      	adds	r6, #1
 8005ad6:	960a      	str	r6, [sp, #40]	; 0x28
 8005ad8:	4482      	add	sl, r0
 8005ada:	2501      	movs	r5, #1
 8005adc:	e599      	b.n	8005612 <_dtoa_r+0x6d2>
 8005ade:	4649      	mov	r1, r9
 8005ae0:	1c20      	adds	r0, r4, #0
 8005ae2:	220a      	movs	r2, #10
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f001 fcad 	bl	8007444 <__multadd>
 8005aea:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005aec:	4681      	mov	r9, r0
 8005aee:	2e00      	cmp	r6, #0
 8005af0:	dc03      	bgt.n	8005afa <_dtoa_r+0xbba>
 8005af2:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005af4:	2802      	cmp	r0, #2
 8005af6:	dd00      	ble.n	8005afa <_dtoa_r+0xbba>
 8005af8:	e1d1      	b.n	8005e9e <_dtoa_r+0xf5e>
 8005afa:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005afc:	9609      	str	r6, [sp, #36]	; 0x24
 8005afe:	2f00      	cmp	r7, #0
 8005b00:	dd05      	ble.n	8005b0e <_dtoa_r+0xbce>
 8005b02:	4649      	mov	r1, r9
 8005b04:	1c20      	adds	r0, r4, #0
 8005b06:	1c3a      	adds	r2, r7, #0
 8005b08:	f001 fea2 	bl	8007850 <__lshift>
 8005b0c:	4681      	mov	r9, r0
 8005b0e:	464e      	mov	r6, r9
 8005b10:	960a      	str	r6, [sp, #40]	; 0x28
 8005b12:	2d00      	cmp	r5, #0
 8005b14:	d000      	beq.n	8005b18 <_dtoa_r+0xbd8>
 8005b16:	e148      	b.n	8005daa <_dtoa_r+0xe6a>
 8005b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b1a:	465b      	mov	r3, fp
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	181b      	adds	r3, r3, r0
 8005b20:	9902      	ldr	r1, [sp, #8]
 8005b22:	930e      	str	r3, [sp, #56]	; 0x38
 8005b24:	2301      	movs	r3, #1
 8005b26:	4019      	ands	r1, r3
 8005b28:	465e      	mov	r6, fp
 8005b2a:	4643      	mov	r3, r8
 8005b2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005b2e:	9102      	str	r1, [sp, #8]
 8005b30:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005b32:	9308      	str	r3, [sp, #32]
 8005b34:	960f      	str	r6, [sp, #60]	; 0x3c
 8005b36:	464d      	mov	r5, r9
 8005b38:	4680      	mov	r8, r0
 8005b3a:	9908      	ldr	r1, [sp, #32]
 8005b3c:	1c38      	adds	r0, r7, #0
 8005b3e:	f7ff f953 	bl	8004de8 <quorem>
 8005b42:	9009      	str	r0, [sp, #36]	; 0x24
 8005b44:	3030      	adds	r0, #48	; 0x30
 8005b46:	900a      	str	r0, [sp, #40]	; 0x28
 8005b48:	1c29      	adds	r1, r5, #0
 8005b4a:	1c38      	adds	r0, r7, #0
 8005b4c:	f001 fee8 	bl	8007920 <__mcmp>
 8005b50:	9908      	ldr	r1, [sp, #32]
 8005b52:	4683      	mov	fp, r0
 8005b54:	4642      	mov	r2, r8
 8005b56:	1c20      	adds	r0, r4, #0
 8005b58:	f001 ff00 	bl	800795c <__mdiff>
 8005b5c:	4681      	mov	r9, r0
 8005b5e:	68c0      	ldr	r0, [r0, #12]
 8005b60:	2301      	movs	r3, #1
 8005b62:	469a      	mov	sl, r3
 8005b64:	2800      	cmp	r0, #0
 8005b66:	d03d      	beq.n	8005be4 <_dtoa_r+0xca4>
 8005b68:	4649      	mov	r1, r9
 8005b6a:	1c20      	adds	r0, r4, #0
 8005b6c:	f001 fc5e 	bl	800742c <_Bfree>
 8005b70:	9926      	ldr	r1, [sp, #152]	; 0x98
 8005b72:	4653      	mov	r3, sl
 8005b74:	430b      	orrs	r3, r1
 8005b76:	d103      	bne.n	8005b80 <_dtoa_r+0xc40>
 8005b78:	9a02      	ldr	r2, [sp, #8]
 8005b7a:	2a00      	cmp	r2, #0
 8005b7c:	d100      	bne.n	8005b80 <_dtoa_r+0xc40>
 8005b7e:	e16b      	b.n	8005e58 <_dtoa_r+0xf18>
 8005b80:	465a      	mov	r2, fp
 8005b82:	2a00      	cmp	r2, #0
 8005b84:	da00      	bge.n	8005b88 <_dtoa_r+0xc48>
 8005b86:	e0bf      	b.n	8005d08 <_dtoa_r+0xdc8>
 8005b88:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005b8a:	465b      	mov	r3, fp
 8005b8c:	4303      	orrs	r3, r0
 8005b8e:	d103      	bne.n	8005b98 <_dtoa_r+0xc58>
 8005b90:	9902      	ldr	r1, [sp, #8]
 8005b92:	2900      	cmp	r1, #0
 8005b94:	d100      	bne.n	8005b98 <_dtoa_r+0xc58>
 8005b96:	e0b7      	b.n	8005d08 <_dtoa_r+0xdc8>
 8005b98:	4652      	mov	r2, sl
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	dd00      	ble.n	8005ba0 <_dtoa_r+0xc60>
 8005b9e:	e123      	b.n	8005de8 <_dtoa_r+0xea8>
 8005ba0:	aa0a      	add	r2, sp, #40	; 0x28
 8005ba2:	7812      	ldrb	r2, [r2, #0]
 8005ba4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005ba6:	1c73      	adds	r3, r6, #1
 8005ba8:	7032      	strb	r2, [r6, #0]
 8005baa:	4699      	mov	r9, r3
 8005bac:	4286      	cmp	r6, r0
 8005bae:	d100      	bne.n	8005bb2 <_dtoa_r+0xc72>
 8005bb0:	e126      	b.n	8005e00 <_dtoa_r+0xec0>
 8005bb2:	1c39      	adds	r1, r7, #0
 8005bb4:	220a      	movs	r2, #10
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	1c20      	adds	r0, r4, #0
 8005bba:	f001 fc43 	bl	8007444 <__multadd>
 8005bbe:	1c29      	adds	r1, r5, #0
 8005bc0:	1c07      	adds	r7, r0, #0
 8005bc2:	220a      	movs	r2, #10
 8005bc4:	1c20      	adds	r0, r4, #0
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	4545      	cmp	r5, r8
 8005bca:	d011      	beq.n	8005bf0 <_dtoa_r+0xcb0>
 8005bcc:	f001 fc3a 	bl	8007444 <__multadd>
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	1c05      	adds	r5, r0, #0
 8005bd4:	220a      	movs	r2, #10
 8005bd6:	1c20      	adds	r0, r4, #0
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f001 fc33 	bl	8007444 <__multadd>
 8005bde:	464e      	mov	r6, r9
 8005be0:	4680      	mov	r8, r0
 8005be2:	e7aa      	b.n	8005b3a <_dtoa_r+0xbfa>
 8005be4:	1c38      	adds	r0, r7, #0
 8005be6:	4649      	mov	r1, r9
 8005be8:	f001 fe9a 	bl	8007920 <__mcmp>
 8005bec:	4682      	mov	sl, r0
 8005bee:	e7bb      	b.n	8005b68 <_dtoa_r+0xc28>
 8005bf0:	f001 fc28 	bl	8007444 <__multadd>
 8005bf4:	464e      	mov	r6, r9
 8005bf6:	1c05      	adds	r5, r0, #0
 8005bf8:	4680      	mov	r8, r0
 8005bfa:	e79e      	b.n	8005b3a <_dtoa_r+0xbfa>
 8005bfc:	2600      	movs	r6, #0
 8005bfe:	9612      	str	r6, [sp, #72]	; 0x48
 8005c00:	e5d9      	b.n	80057b6 <_dtoa_r+0x876>
 8005c02:	2601      	movs	r6, #1
 8005c04:	9612      	str	r6, [sp, #72]	; 0x48
 8005c06:	f7ff fa7e 	bl	8005106 <_dtoa_r+0x1c6>
 8005c0a:	9609      	str	r6, [sp, #36]	; 0x24
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	6462      	str	r2, [r4, #68]	; 0x44
 8005c10:	401d      	ands	r5, r3
 8005c12:	2100      	movs	r1, #0
 8005c14:	f7ff fa93 	bl	800513e <_dtoa_r+0x1fe>
 8005c18:	2601      	movs	r6, #1
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	2501      	movs	r5, #1
 8005c1e:	9610      	str	r6, [sp, #64]	; 0x40
 8005c20:	9609      	str	r6, [sp, #36]	; 0x24
 8005c22:	9027      	str	r0, [sp, #156]	; 0x9c
 8005c24:	e7f2      	b.n	8005c0c <_dtoa_r+0xccc>
 8005c26:	1c20      	adds	r0, r4, #0
 8005c28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c2c:	f001 fdb8 	bl	80077a0 <__pow5mult>
 8005c30:	900b      	str	r0, [sp, #44]	; 0x2c
 8005c32:	e4db      	b.n	80055ec <_dtoa_r+0x6ac>
 8005c34:	464d      	mov	r5, r9
 8005c36:	4654      	mov	r4, sl
 8005c38:	465f      	mov	r7, fp
 8005c3a:	46ab      	mov	fp, r5
 8005c3c:	e54c      	b.n	80056d8 <_dtoa_r+0x798>
 8005c3e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005c40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005c42:	1a33      	subs	r3, r6, r0
 8005c44:	18c9      	adds	r1, r1, r3
 8005c46:	960f      	str	r6, [sp, #60]	; 0x3c
 8005c48:	9111      	str	r1, [sp, #68]	; 0x44
 8005c4a:	2600      	movs	r6, #0
 8005c4c:	e59a      	b.n	8005784 <_dtoa_r+0x844>
 8005c4e:	9902      	ldr	r1, [sp, #8]
 8005c50:	9a03      	ldr	r2, [sp, #12]
 8005c52:	910c      	str	r1, [sp, #48]	; 0x30
 8005c54:	920d      	str	r2, [sp, #52]	; 0x34
 8005c56:	2202      	movs	r2, #2
 8005c58:	4691      	mov	r9, r2
 8005c5a:	f7ff fab3 	bl	80051c4 <_dtoa_r+0x284>
 8005c5e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005c60:	2e00      	cmp	r6, #0
 8005c62:	d100      	bne.n	8005c66 <_dtoa_r+0xd26>
 8005c64:	e5b6      	b.n	80057d4 <_dtoa_r+0x894>
 8005c66:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005c68:	2e00      	cmp	r6, #0
 8005c6a:	dc01      	bgt.n	8005c70 <_dtoa_r+0xd30>
 8005c6c:	f7ff fbce 	bl	800540c <_dtoa_r+0x4cc>
 8005c70:	9e07      	ldr	r6, [sp, #28]
 8005c72:	4b6c      	ldr	r3, [pc, #432]	; (8005e24 <_dtoa_r+0xee4>)
 8005c74:	4a6a      	ldr	r2, [pc, #424]	; (8005e20 <_dtoa_r+0xee0>)
 8005c76:	3e01      	subs	r6, #1
 8005c78:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005c7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c7c:	9617      	str	r6, [sp, #92]	; 0x5c
 8005c7e:	f003 eb94 	blx	80093a8 <__aeabi_dmul>
 8005c82:	900c      	str	r0, [sp, #48]	; 0x30
 8005c84:	910d      	str	r1, [sp, #52]	; 0x34
 8005c86:	4648      	mov	r0, r9
 8005c88:	3001      	adds	r0, #1
 8005c8a:	f003 eb20 	blx	80092cc <__aeabi_i2d>
 8005c8e:	1c02      	adds	r2, r0, #0
 8005c90:	1c0b      	adds	r3, r1, #0
 8005c92:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005c94:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c96:	f003 eb88 	blx	80093a8 <__aeabi_dmul>
 8005c9a:	4a63      	ldr	r2, [pc, #396]	; (8005e28 <_dtoa_r+0xee8>)
 8005c9c:	4b63      	ldr	r3, [pc, #396]	; (8005e2c <_dtoa_r+0xeec>)
 8005c9e:	f003 e97c 	blx	8008f98 <__adddf3>
 8005ca2:	1c06      	adds	r6, r0, #0
 8005ca4:	4865      	ldr	r0, [pc, #404]	; (8005e3c <_dtoa_r+0xefc>)
 8005ca6:	180f      	adds	r7, r1, r0
 8005ca8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005caa:	9113      	str	r1, [sp, #76]	; 0x4c
 8005cac:	f7ff faad 	bl	800520a <_dtoa_r+0x2ca>
 8005cb0:	1c20      	adds	r0, r4, #0
 8005cb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cb4:	f001 fd74 	bl	80077a0 <__pow5mult>
 8005cb8:	900b      	str	r0, [sp, #44]	; 0x2c
 8005cba:	e497      	b.n	80055ec <_dtoa_r+0x6ac>
 8005cbc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005cbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005cc0:	485b      	ldr	r0, [pc, #364]	; (8005e30 <_dtoa_r+0xef0>)
 8005cc2:	495c      	ldr	r1, [pc, #368]	; (8005e34 <_dtoa_r+0xef4>)
 8005cc4:	f003 e966 	blx	8008f94 <__aeabi_dsub>
 8005cc8:	1c32      	adds	r2, r6, #0
 8005cca:	1c3b      	adds	r3, r7, #0
 8005ccc:	f003 ee50 	blx	8009970 <__aeabi_dcmpgt>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d101      	bne.n	8005cd8 <_dtoa_r+0xd98>
 8005cd4:	f7ff fb9a 	bl	800540c <_dtoa_r+0x4cc>
 8005cd8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005cda:	e000      	b.n	8005cde <_dtoa_r+0xd9e>
 8005cdc:	1c19      	adds	r1, r3, #0
 8005cde:	1e4b      	subs	r3, r1, #1
 8005ce0:	781a      	ldrb	r2, [r3, #0]
 8005ce2:	2a30      	cmp	r2, #48	; 0x30
 8005ce4:	d0fa      	beq.n	8005cdc <_dtoa_r+0xd9c>
 8005ce6:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005ce8:	465f      	mov	r7, fp
 8005cea:	9607      	str	r6, [sp, #28]
 8005cec:	468b      	mov	fp, r1
 8005cee:	e4f3      	b.n	80056d8 <_dtoa_r+0x798>
 8005cf0:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8005cf2:	2e00      	cmp	r6, #0
 8005cf4:	d072      	beq.n	8005ddc <_dtoa_r+0xe9c>
 8005cf6:	4852      	ldr	r0, [pc, #328]	; (8005e40 <_dtoa_r+0xf00>)
 8005cf8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8005cfa:	181b      	adds	r3, r3, r0
 8005cfc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005cfe:	e547      	b.n	8005790 <_dtoa_r+0x850>
 8005d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d02:	1a9f      	subs	r7, r3, r2
 8005d04:	2300      	movs	r3, #0
 8005d06:	e543      	b.n	8005790 <_dtoa_r+0x850>
 8005d08:	970b      	str	r7, [sp, #44]	; 0x2c
 8005d0a:	9808      	ldr	r0, [sp, #32]
 8005d0c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005d0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d10:	4643      	mov	r3, r8
 8005d12:	4652      	mov	r2, sl
 8005d14:	930a      	str	r3, [sp, #40]	; 0x28
 8005d16:	4680      	mov	r8, r0
 8005d18:	468b      	mov	fp, r1
 8005d1a:	46b9      	mov	r9, r7
 8005d1c:	2a00      	cmp	r2, #0
 8005d1e:	dd11      	ble.n	8005d44 <_dtoa_r+0xe04>
 8005d20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d22:	1c20      	adds	r0, r4, #0
 8005d24:	2201      	movs	r2, #1
 8005d26:	f001 fd93 	bl	8007850 <__lshift>
 8005d2a:	4641      	mov	r1, r8
 8005d2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005d2e:	f001 fdf7 	bl	8007920 <__mcmp>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	dc00      	bgt.n	8005d38 <_dtoa_r+0xdf8>
 8005d36:	e0a1      	b.n	8005e7c <_dtoa_r+0xf3c>
 8005d38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005d3a:	4648      	mov	r0, r9
 8005d3c:	3731      	adds	r7, #49	; 0x31
 8005d3e:	2839      	cmp	r0, #57	; 0x39
 8005d40:	d100      	bne.n	8005d44 <_dtoa_r+0xe04>
 8005d42:	e07f      	b.n	8005e44 <_dtoa_r+0xf04>
 8005d44:	7037      	strb	r7, [r6, #0]
 8005d46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d48:	3601      	adds	r6, #1
 8005d4a:	465f      	mov	r7, fp
 8005d4c:	4689      	mov	r9, r1
 8005d4e:	46b3      	mov	fp, r6
 8005d50:	e4b4      	b.n	80056bc <_dtoa_r+0x77c>
 8005d52:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005d54:	465c      	mov	r4, fp
 8005d56:	4655      	mov	r5, sl
 8005d58:	4683      	mov	fp, r0
 8005d5a:	465f      	mov	r7, fp
 8005d5c:	4641      	mov	r1, r8
 8005d5e:	1c2a      	adds	r2, r5, #0
 8005d60:	f7ff fbfd 	bl	800555e <_dtoa_r+0x61e>
 8005d64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d68:	465c      	mov	r4, fp
 8005d6a:	4692      	mov	sl, r2
 8005d6c:	469b      	mov	fp, r3
 8005d6e:	f7ff fb4d 	bl	800540c <_dtoa_r+0x4cc>
 8005d72:	4693      	mov	fp, r2
 8005d74:	1c0a      	adds	r2, r1, #0
 8005d76:	3201      	adds	r2, #1
 8005d78:	0612      	lsls	r2, r2, #24
 8005d7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005d7c:	0e12      	lsrs	r2, r2, #24
 8005d7e:	9607      	str	r6, [sp, #28]
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	e4a9      	b.n	80056d8 <_dtoa_r+0x798>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d102      	bne.n	8005d8e <_dtoa_r+0xe4e>
 8005d88:	07fe      	lsls	r6, r7, #31
 8005d8a:	d500      	bpl.n	8005d8e <_dtoa_r+0xe4e>
 8005d8c:	e586      	b.n	800589c <_dtoa_r+0x95c>
 8005d8e:	4651      	mov	r1, sl
 8005d90:	e000      	b.n	8005d94 <_dtoa_r+0xe54>
 8005d92:	1c19      	adds	r1, r3, #0
 8005d94:	1e4b      	subs	r3, r1, #1
 8005d96:	781a      	ldrb	r2, [r3, #0]
 8005d98:	2a30      	cmp	r2, #48	; 0x30
 8005d9a:	d0fa      	beq.n	8005d92 <_dtoa_r+0xe52>
 8005d9c:	465f      	mov	r7, fp
 8005d9e:	468b      	mov	fp, r1
 8005da0:	e48c      	b.n	80056bc <_dtoa_r+0x77c>
 8005da2:	2200      	movs	r2, #0
 8005da4:	4690      	mov	r8, r2
 8005da6:	4691      	mov	r9, r2
 8005da8:	e53f      	b.n	800582a <_dtoa_r+0x8ea>
 8005daa:	6871      	ldr	r1, [r6, #4]
 8005dac:	1c20      	adds	r0, r4, #0
 8005dae:	f001 fb13 	bl	80073d8 <_Balloc>
 8005db2:	6932      	ldr	r2, [r6, #16]
 8005db4:	4649      	mov	r1, r9
 8005db6:	3202      	adds	r2, #2
 8005db8:	1c05      	adds	r5, r0, #0
 8005dba:	310c      	adds	r1, #12
 8005dbc:	0092      	lsls	r2, r2, #2
 8005dbe:	300c      	adds	r0, #12
 8005dc0:	f001 fabc 	bl	800733c <memcpy>
 8005dc4:	1c20      	adds	r0, r4, #0
 8005dc6:	1c29      	adds	r1, r5, #0
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f001 fd41 	bl	8007850 <__lshift>
 8005dce:	900a      	str	r0, [sp, #40]	; 0x28
 8005dd0:	e6a2      	b.n	8005b18 <_dtoa_r+0xbd8>
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	7033      	strb	r3, [r6, #0]
 8005dd6:	1c0f      	adds	r7, r1, #0
 8005dd8:	4693      	mov	fp, r2
 8005dda:	e46f      	b.n	80056bc <_dtoa_r+0x77c>
 8005ddc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005dde:	2336      	movs	r3, #54	; 0x36
 8005de0:	1a5b      	subs	r3, r3, r1
 8005de2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8005de4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005de6:	e4d3      	b.n	8005790 <_dtoa_r+0x850>
 8005de8:	970b      	str	r7, [sp, #44]	; 0x2c
 8005dea:	9908      	ldr	r1, [sp, #32]
 8005dec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005dee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005df0:	4640      	mov	r0, r8
 8005df2:	900a      	str	r0, [sp, #40]	; 0x28
 8005df4:	4688      	mov	r8, r1
 8005df6:	4693      	mov	fp, r2
 8005df8:	2f39      	cmp	r7, #57	; 0x39
 8005dfa:	d023      	beq.n	8005e44 <_dtoa_r+0xf04>
 8005dfc:	3701      	adds	r7, #1
 8005dfe:	e7a1      	b.n	8005d44 <_dtoa_r+0xe04>
 8005e00:	9908      	ldr	r1, [sp, #32]
 8005e02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e04:	4640      	mov	r0, r8
 8005e06:	970b      	str	r7, [sp, #44]	; 0x2c
 8005e08:	4688      	mov	r8, r1
 8005e0a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005e0c:	469a      	mov	sl, r3
 8005e0e:	900a      	str	r0, [sp, #40]	; 0x28
 8005e10:	4693      	mov	fp, r2
 8005e12:	4681      	mov	r9, r0
 8005e14:	e536      	b.n	8005884 <_dtoa_r+0x944>
 8005e16:	2301      	movs	r3, #1
 8005e18:	e531      	b.n	800587e <_dtoa_r+0x93e>
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	46c0      	nop			; (mov r8, r8)
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	00000000 	.word	0x00000000
 8005e24:	40240000 	.word	0x40240000
 8005e28:	00000000 	.word	0x00000000
 8005e2c:	401c0000 	.word	0x401c0000
 8005e30:	00000000 	.word	0x00000000
 8005e34:	3fe00000 	.word	0x3fe00000
 8005e38:	7ff00000 	.word	0x7ff00000
 8005e3c:	fcc00000 	.word	0xfcc00000
 8005e40:	00000433 	.word	0x00000433
 8005e44:	2339      	movs	r3, #57	; 0x39
 8005e46:	7033      	strb	r3, [r6, #0]
 8005e48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005e4a:	1c73      	adds	r3, r6, #1
 8005e4c:	469a      	mov	sl, r3
 8005e4e:	4681      	mov	r9, r0
 8005e50:	2339      	movs	r3, #57	; 0x39
 8005e52:	4652      	mov	r2, sl
 8005e54:	4659      	mov	r1, fp
 8005e56:	e52b      	b.n	80058b0 <_dtoa_r+0x970>
 8005e58:	4640      	mov	r0, r8
 8005e5a:	970b      	str	r7, [sp, #44]	; 0x2c
 8005e5c:	9908      	ldr	r1, [sp, #32]
 8005e5e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005e60:	900a      	str	r0, [sp, #40]	; 0x28
 8005e62:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005e64:	465b      	mov	r3, fp
 8005e66:	4688      	mov	r8, r1
 8005e68:	9302      	str	r3, [sp, #8]
 8005e6a:	4683      	mov	fp, r0
 8005e6c:	2f39      	cmp	r7, #57	; 0x39
 8005e6e:	d0e9      	beq.n	8005e44 <_dtoa_r+0xf04>
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	dc00      	bgt.n	8005e76 <_dtoa_r+0xf36>
 8005e74:	e766      	b.n	8005d44 <_dtoa_r+0xe04>
 8005e76:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005e78:	3731      	adds	r7, #49	; 0x31
 8005e7a:	e763      	b.n	8005d44 <_dtoa_r+0xe04>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d000      	beq.n	8005e82 <_dtoa_r+0xf42>
 8005e80:	e760      	b.n	8005d44 <_dtoa_r+0xe04>
 8005e82:	07fb      	lsls	r3, r7, #31
 8005e84:	d400      	bmi.n	8005e88 <_dtoa_r+0xf48>
 8005e86:	e75d      	b.n	8005d44 <_dtoa_r+0xe04>
 8005e88:	e756      	b.n	8005d38 <_dtoa_r+0xdf8>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	4699      	mov	r9, r3
 8005e8e:	f7ff f999 	bl	80051c4 <_dtoa_r+0x284>
 8005e92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005e94:	465f      	mov	r7, fp
 8005e96:	9607      	str	r6, [sp, #28]
 8005e98:	46ab      	mov	fp, r5
 8005e9a:	f7ff fc1d 	bl	80056d8 <_dtoa_r+0x798>
 8005e9e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005ea0:	9609      	str	r6, [sp, #36]	; 0x24
 8005ea2:	f7ff fbef 	bl	8005684 <_dtoa_r+0x744>
 8005ea6:	2a04      	cmp	r2, #4
 8005ea8:	d101      	bne.n	8005eae <_dtoa_r+0xf6e>
 8005eaa:	f7ff fbc9 	bl	8005640 <_dtoa_r+0x700>
 8005eae:	223c      	movs	r2, #60	; 0x3c
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	f7ff fbc0 	bl	8005636 <_dtoa_r+0x6f6>
 8005eb6:	46c0      	nop			; (mov r8, r8)

08005eb8 <__errno>:
 8005eb8:	4b01      	ldr	r3, [pc, #4]	; (8005ec0 <__errno+0x8>)
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	4770      	bx	lr
 8005ebe:	46c0      	nop			; (mov r8, r8)
 8005ec0:	200000e8 	.word	0x200000e8

08005ec4 <__sflush_r>:
 8005ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec6:	4647      	mov	r7, r8
 8005ec8:	b480      	push	{r7}
 8005eca:	898b      	ldrh	r3, [r1, #12]
 8005ecc:	4680      	mov	r8, r0
 8005ece:	1c0d      	adds	r5, r1, #0
 8005ed0:	0718      	lsls	r0, r3, #28
 8005ed2:	d43d      	bmi.n	8005f50 <__sflush_r+0x8c>
 8005ed4:	2180      	movs	r1, #128	; 0x80
 8005ed6:	0109      	lsls	r1, r1, #4
 8005ed8:	686a      	ldr	r2, [r5, #4]
 8005eda:	4319      	orrs	r1, r3
 8005edc:	81a9      	strh	r1, [r5, #12]
 8005ede:	2a00      	cmp	r2, #0
 8005ee0:	dd58      	ble.n	8005f94 <__sflush_r+0xd0>
 8005ee2:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8005ee4:	2c00      	cmp	r4, #0
 8005ee6:	d02d      	beq.n	8005f44 <__sflush_r+0x80>
 8005ee8:	4640      	mov	r0, r8
 8005eea:	2200      	movs	r2, #0
 8005eec:	6806      	ldr	r6, [r0, #0]
 8005eee:	6002      	str	r2, [r0, #0]
 8005ef0:	04da      	lsls	r2, r3, #19
 8005ef2:	d553      	bpl.n	8005f9c <__sflush_r+0xd8>
 8005ef4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8005ef6:	074b      	lsls	r3, r1, #29
 8005ef8:	d506      	bpl.n	8005f08 <__sflush_r+0x44>
 8005efa:	686f      	ldr	r7, [r5, #4]
 8005efc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005efe:	1bd2      	subs	r2, r2, r7
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d001      	beq.n	8005f08 <__sflush_r+0x44>
 8005f04:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8005f06:	1a52      	subs	r2, r2, r1
 8005f08:	4640      	mov	r0, r8
 8005f0a:	69e9      	ldr	r1, [r5, #28]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f000 f8b3 	bl	8006078 <fflush+0x2c>
 8005f12:	1c42      	adds	r2, r0, #1
 8005f14:	d04e      	beq.n	8005fb4 <__sflush_r+0xf0>
 8005f16:	89ab      	ldrh	r3, [r5, #12]
 8005f18:	4a3f      	ldr	r2, [pc, #252]	; (8006018 <__sflush_r+0x154>)
 8005f1a:	6929      	ldr	r1, [r5, #16]
 8005f1c:	401a      	ands	r2, r3
 8005f1e:	81aa      	strh	r2, [r5, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	606a      	str	r2, [r5, #4]
 8005f24:	6029      	str	r1, [r5, #0]
 8005f26:	04da      	lsls	r2, r3, #19
 8005f28:	d451      	bmi.n	8005fce <__sflush_r+0x10a>
 8005f2a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8005f2c:	4640      	mov	r0, r8
 8005f2e:	6006      	str	r6, [r0, #0]
 8005f30:	2900      	cmp	r1, #0
 8005f32:	d007      	beq.n	8005f44 <__sflush_r+0x80>
 8005f34:	1c2b      	adds	r3, r5, #0
 8005f36:	3340      	adds	r3, #64	; 0x40
 8005f38:	4299      	cmp	r1, r3
 8005f3a:	d001      	beq.n	8005f40 <__sflush_r+0x7c>
 8005f3c:	f000 f9dc 	bl	80062f8 <_free_r>
 8005f40:	2300      	movs	r3, #0
 8005f42:	632b      	str	r3, [r5, #48]	; 0x30
 8005f44:	2000      	movs	r0, #0
 8005f46:	bc04      	pop	{r2}
 8005f48:	4690      	mov	r8, r2
 8005f4a:	bcf0      	pop	{r4, r5, r6, r7}
 8005f4c:	bc02      	pop	{r1}
 8005f4e:	4708      	bx	r1
 8005f50:	690e      	ldr	r6, [r1, #16]
 8005f52:	2e00      	cmp	r6, #0
 8005f54:	d0f6      	beq.n	8005f44 <__sflush_r+0x80>
 8005f56:	6809      	ldr	r1, [r1, #0]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	1b8c      	subs	r4, r1, r6
 8005f5c:	602e      	str	r6, [r5, #0]
 8005f5e:	079f      	lsls	r7, r3, #30
 8005f60:	d100      	bne.n	8005f64 <__sflush_r+0xa0>
 8005f62:	696a      	ldr	r2, [r5, #20]
 8005f64:	60aa      	str	r2, [r5, #8]
 8005f66:	2c00      	cmp	r4, #0
 8005f68:	dc04      	bgt.n	8005f74 <__sflush_r+0xb0>
 8005f6a:	e7eb      	b.n	8005f44 <__sflush_r+0x80>
 8005f6c:	1836      	adds	r6, r6, r0
 8005f6e:	1a24      	subs	r4, r4, r0
 8005f70:	2c00      	cmp	r4, #0
 8005f72:	dde7      	ble.n	8005f44 <__sflush_r+0x80>
 8005f74:	4640      	mov	r0, r8
 8005f76:	69e9      	ldr	r1, [r5, #28]
 8005f78:	1c32      	adds	r2, r6, #0
 8005f7a:	1c23      	adds	r3, r4, #0
 8005f7c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8005f7e:	f000 f87c 	bl	800607a <fflush+0x2e>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	dcf2      	bgt.n	8005f6c <__sflush_r+0xa8>
 8005f86:	89aa      	ldrh	r2, [r5, #12]
 8005f88:	2340      	movs	r3, #64	; 0x40
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	81ab      	strh	r3, [r5, #12]
 8005f90:	4240      	negs	r0, r0
 8005f92:	e7d8      	b.n	8005f46 <__sflush_r+0x82>
 8005f94:	6bef      	ldr	r7, [r5, #60]	; 0x3c
 8005f96:	2f00      	cmp	r7, #0
 8005f98:	dca3      	bgt.n	8005ee2 <__sflush_r+0x1e>
 8005f9a:	e7d3      	b.n	8005f44 <__sflush_r+0x80>
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	69e9      	ldr	r1, [r5, #28]
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	f000 f868 	bl	8006078 <fflush+0x2c>
 8005fa8:	1c02      	adds	r2, r0, #0
 8005faa:	1c43      	adds	r3, r0, #1
 8005fac:	d01e      	beq.n	8005fec <__sflush_r+0x128>
 8005fae:	89a9      	ldrh	r1, [r5, #12]
 8005fb0:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8005fb2:	e7a0      	b.n	8005ef6 <__sflush_r+0x32>
 8005fb4:	4647      	mov	r7, r8
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <__sflush_r+0x10e>
 8005fbc:	89aa      	ldrh	r2, [r5, #12]
 8005fbe:	4916      	ldr	r1, [pc, #88]	; (8006018 <__sflush_r+0x154>)
 8005fc0:	692f      	ldr	r7, [r5, #16]
 8005fc2:	4011      	ands	r1, r2
 8005fc4:	81a9      	strh	r1, [r5, #12]
 8005fc6:	606b      	str	r3, [r5, #4]
 8005fc8:	602f      	str	r7, [r5, #0]
 8005fca:	04d1      	lsls	r1, r2, #19
 8005fcc:	d5ad      	bpl.n	8005f2a <__sflush_r+0x66>
 8005fce:	6528      	str	r0, [r5, #80]	; 0x50
 8005fd0:	e7ab      	b.n	8005f2a <__sflush_r+0x66>
 8005fd2:	2b1d      	cmp	r3, #29
 8005fd4:	d001      	beq.n	8005fda <__sflush_r+0x116>
 8005fd6:	2b16      	cmp	r3, #22
 8005fd8:	d119      	bne.n	800600e <__sflush_r+0x14a>
 8005fda:	89aa      	ldrh	r2, [r5, #12]
 8005fdc:	4b0e      	ldr	r3, [pc, #56]	; (8006018 <__sflush_r+0x154>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	81ab      	strh	r3, [r5, #12]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	606b      	str	r3, [r5, #4]
 8005fe6:	692b      	ldr	r3, [r5, #16]
 8005fe8:	602b      	str	r3, [r5, #0]
 8005fea:	e79e      	b.n	8005f2a <__sflush_r+0x66>
 8005fec:	4647      	mov	r7, r8
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0dc      	beq.n	8005fae <__sflush_r+0xea>
 8005ff4:	2b16      	cmp	r3, #22
 8005ff6:	d001      	beq.n	8005ffc <__sflush_r+0x138>
 8005ff8:	2b1d      	cmp	r3, #29
 8005ffa:	d103      	bne.n	8006004 <__sflush_r+0x140>
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	6006      	str	r6, [r0, #0]
 8006000:	2000      	movs	r0, #0
 8006002:	e7a0      	b.n	8005f46 <__sflush_r+0x82>
 8006004:	89a9      	ldrh	r1, [r5, #12]
 8006006:	2340      	movs	r3, #64	; 0x40
 8006008:	430b      	orrs	r3, r1
 800600a:	81ab      	strh	r3, [r5, #12]
 800600c:	e79b      	b.n	8005f46 <__sflush_r+0x82>
 800600e:	89aa      	ldrh	r2, [r5, #12]
 8006010:	2340      	movs	r3, #64	; 0x40
 8006012:	4313      	orrs	r3, r2
 8006014:	81ab      	strh	r3, [r5, #12]
 8006016:	e796      	b.n	8005f46 <__sflush_r+0x82>
 8006018:	fffff7ff 	.word	0xfffff7ff

0800601c <_fflush_r>:
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	1c04      	adds	r4, r0, #0
 8006020:	1c0d      	adds	r5, r1, #0
 8006022:	2800      	cmp	r0, #0
 8006024:	d002      	beq.n	800602c <_fflush_r+0x10>
 8006026:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006028:	2a00      	cmp	r2, #0
 800602a:	d00b      	beq.n	8006044 <_fflush_r+0x28>
 800602c:	220c      	movs	r2, #12
 800602e:	5eab      	ldrsh	r3, [r5, r2]
 8006030:	2000      	movs	r0, #0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <_fflush_r+0x22>
 8006036:	1c20      	adds	r0, r4, #0
 8006038:	1c29      	adds	r1, r5, #0
 800603a:	f7ff ff43 	bl	8005ec4 <__sflush_r>
 800603e:	bc38      	pop	{r3, r4, r5}
 8006040:	bc02      	pop	{r1}
 8006042:	4708      	bx	r1
 8006044:	f000 f870 	bl	8006128 <__sinit>
 8006048:	e7f0      	b.n	800602c <_fflush_r+0x10>
 800604a:	46c0      	nop			; (mov r8, r8)

0800604c <fflush>:
 800604c:	b508      	push	{r3, lr}
 800604e:	1e01      	subs	r1, r0, #0
 8006050:	d006      	beq.n	8006060 <fflush+0x14>
 8006052:	4b06      	ldr	r3, [pc, #24]	; (800606c <fflush+0x20>)
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	f7ff ffe1 	bl	800601c <_fflush_r>
 800605a:	bc08      	pop	{r3}
 800605c:	bc02      	pop	{r1}
 800605e:	4708      	bx	r1
 8006060:	4b03      	ldr	r3, [pc, #12]	; (8006070 <fflush+0x24>)
 8006062:	4904      	ldr	r1, [pc, #16]	; (8006074 <fflush+0x28>)
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	f000 fa3b 	bl	80064e0 <_fwalk_reent>
 800606a:	e7f6      	b.n	800605a <fflush+0xe>
 800606c:	200000e8 	.word	0x200000e8
 8006070:	0800d6a0 	.word	0x0800d6a0
 8006074:	0800601d 	.word	0x0800601d
 8006078:	4720      	bx	r4
 800607a:	4738      	bx	r7

0800607c <__fp_lock>:
 800607c:	2000      	movs	r0, #0
 800607e:	4770      	bx	lr

08006080 <__fp_unlock>:
 8006080:	2000      	movs	r0, #0
 8006082:	4770      	bx	lr

08006084 <_cleanup_r>:
 8006084:	b508      	push	{r3, lr}
 8006086:	4903      	ldr	r1, [pc, #12]	; (8006094 <_cleanup_r+0x10>)
 8006088:	f000 fa00 	bl	800648c <_fwalk>
 800608c:	bc08      	pop	{r3}
 800608e:	bc01      	pop	{r0}
 8006090:	4700      	bx	r0
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	08008c51 	.word	0x08008c51

08006098 <std.isra.0>:
 8006098:	2300      	movs	r3, #0
 800609a:	b510      	push	{r4, lr}
 800609c:	1c04      	adds	r4, r0, #0
 800609e:	6003      	str	r3, [r0, #0]
 80060a0:	6043      	str	r3, [r0, #4]
 80060a2:	6083      	str	r3, [r0, #8]
 80060a4:	8181      	strh	r1, [r0, #12]
 80060a6:	6643      	str	r3, [r0, #100]	; 0x64
 80060a8:	81c2      	strh	r2, [r0, #14]
 80060aa:	6103      	str	r3, [r0, #16]
 80060ac:	6143      	str	r3, [r0, #20]
 80060ae:	6183      	str	r3, [r0, #24]
 80060b0:	2100      	movs	r1, #0
 80060b2:	2208      	movs	r2, #8
 80060b4:	305c      	adds	r0, #92	; 0x5c
 80060b6:	f7fb f95f 	bl	8001378 <memset>
 80060ba:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <std.isra.0+0x3c>)
 80060bc:	6223      	str	r3, [r4, #32]
 80060be:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <std.isra.0+0x40>)
 80060c0:	6263      	str	r3, [r4, #36]	; 0x24
 80060c2:	4b06      	ldr	r3, [pc, #24]	; (80060dc <std.isra.0+0x44>)
 80060c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80060c6:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <std.isra.0+0x48>)
 80060c8:	61e4      	str	r4, [r4, #28]
 80060ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060cc:	bc10      	pop	{r4}
 80060ce:	bc01      	pop	{r0}
 80060d0:	4700      	bx	r0
 80060d2:	46c0      	nop			; (mov r8, r8)
 80060d4:	080000a9 	.word	0x080000a9
 80060d8:	080000d9 	.word	0x080000d9
 80060dc:	08000115 	.word	0x08000115
 80060e0:	08000145 	.word	0x08000145

080060e4 <__sfmoreglue>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	2568      	movs	r5, #104	; 0x68
 80060e8:	434d      	muls	r5, r1
 80060ea:	1c0e      	adds	r6, r1, #0
 80060ec:	1c29      	adds	r1, r5, #0
 80060ee:	310c      	adds	r1, #12
 80060f0:	f000 fe4a 	bl	8006d88 <_malloc_r>
 80060f4:	1e04      	subs	r4, r0, #0
 80060f6:	d008      	beq.n	800610a <__sfmoreglue+0x26>
 80060f8:	300c      	adds	r0, #12
 80060fa:	2300      	movs	r3, #0
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	6066      	str	r6, [r4, #4]
 8006100:	60a0      	str	r0, [r4, #8]
 8006102:	2100      	movs	r1, #0
 8006104:	1c2a      	adds	r2, r5, #0
 8006106:	f7fb f937 	bl	8001378 <memset>
 800610a:	1c20      	adds	r0, r4, #0
 800610c:	bc70      	pop	{r4, r5, r6}
 800610e:	bc02      	pop	{r1}
 8006110:	4708      	bx	r1
 8006112:	46c0      	nop			; (mov r8, r8)

08006114 <_cleanup>:
 8006114:	b508      	push	{r3, lr}
 8006116:	4b03      	ldr	r3, [pc, #12]	; (8006124 <_cleanup+0x10>)
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	f7ff ffb3 	bl	8006084 <_cleanup_r>
 800611e:	bc08      	pop	{r3}
 8006120:	bc01      	pop	{r0}
 8006122:	4700      	bx	r0
 8006124:	0800d6a0 	.word	0x0800d6a0

08006128 <__sinit>:
 8006128:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800612a:	b510      	push	{r4, lr}
 800612c:	1c04      	adds	r4, r0, #0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d11f      	bne.n	8006172 <__sinit+0x4a>
 8006132:	4a11      	ldr	r2, [pc, #68]	; (8006178 <__sinit+0x50>)
 8006134:	63c2      	str	r2, [r0, #60]	; 0x3c
 8006136:	2201      	movs	r2, #1
 8006138:	6382      	str	r2, [r0, #56]	; 0x38
 800613a:	22b8      	movs	r2, #184	; 0xb8
 800613c:	0092      	lsls	r2, r2, #2
 800613e:	5083      	str	r3, [r0, r2]
 8006140:	23b9      	movs	r3, #185	; 0xb9
 8006142:	2203      	movs	r2, #3
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	50c2      	str	r2, [r0, r3]
 8006148:	23bb      	movs	r3, #187	; 0xbb
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	18c2      	adds	r2, r0, r3
 800614e:	23ba      	movs	r3, #186	; 0xba
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	50c2      	str	r2, [r0, r3]
 8006154:	2104      	movs	r1, #4
 8006156:	6840      	ldr	r0, [r0, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f7ff ff9d 	bl	8006098 <std.isra.0>
 800615e:	68a0      	ldr	r0, [r4, #8]
 8006160:	2109      	movs	r1, #9
 8006162:	2201      	movs	r2, #1
 8006164:	f7ff ff98 	bl	8006098 <std.isra.0>
 8006168:	68e0      	ldr	r0, [r4, #12]
 800616a:	2112      	movs	r1, #18
 800616c:	2202      	movs	r2, #2
 800616e:	f7ff ff93 	bl	8006098 <std.isra.0>
 8006172:	bc10      	pop	{r4}
 8006174:	bc01      	pop	{r0}
 8006176:	4700      	bx	r0
 8006178:	08006085 	.word	0x08006085

0800617c <__sfp>:
 800617c:	4b22      	ldr	r3, [pc, #136]	; (8006208 <__sfp+0x8c>)
 800617e:	b570      	push	{r4, r5, r6, lr}
 8006180:	681d      	ldr	r5, [r3, #0]
 8006182:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8006184:	1c06      	adds	r6, r0, #0
 8006186:	2900      	cmp	r1, #0
 8006188:	d02e      	beq.n	80061e8 <__sfp+0x6c>
 800618a:	23b8      	movs	r3, #184	; 0xb8
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	18ed      	adds	r5, r5, r3
 8006190:	686b      	ldr	r3, [r5, #4]
 8006192:	68ac      	ldr	r4, [r5, #8]
 8006194:	3b01      	subs	r3, #1
 8006196:	d503      	bpl.n	80061a0 <__sfp+0x24>
 8006198:	e021      	b.n	80061de <__sfp+0x62>
 800619a:	3468      	adds	r4, #104	; 0x68
 800619c:	3b01      	subs	r3, #1
 800619e:	d31e      	bcc.n	80061de <__sfp+0x62>
 80061a0:	210c      	movs	r1, #12
 80061a2:	5e62      	ldrsh	r2, [r4, r1]
 80061a4:	2a00      	cmp	r2, #0
 80061a6:	d1f8      	bne.n	800619a <__sfp+0x1e>
 80061a8:	2301      	movs	r3, #1
 80061aa:	425b      	negs	r3, r3
 80061ac:	2500      	movs	r5, #0
 80061ae:	81e3      	strh	r3, [r4, #14]
 80061b0:	1c20      	adds	r0, r4, #0
 80061b2:	2301      	movs	r3, #1
 80061b4:	81a3      	strh	r3, [r4, #12]
 80061b6:	6665      	str	r5, [r4, #100]	; 0x64
 80061b8:	6025      	str	r5, [r4, #0]
 80061ba:	60a5      	str	r5, [r4, #8]
 80061bc:	6065      	str	r5, [r4, #4]
 80061be:	6125      	str	r5, [r4, #16]
 80061c0:	6165      	str	r5, [r4, #20]
 80061c2:	61a5      	str	r5, [r4, #24]
 80061c4:	305c      	adds	r0, #92	; 0x5c
 80061c6:	2100      	movs	r1, #0
 80061c8:	2208      	movs	r2, #8
 80061ca:	f7fb f8d5 	bl	8001378 <memset>
 80061ce:	6325      	str	r5, [r4, #48]	; 0x30
 80061d0:	6365      	str	r5, [r4, #52]	; 0x34
 80061d2:	6465      	str	r5, [r4, #68]	; 0x44
 80061d4:	64a5      	str	r5, [r4, #72]	; 0x48
 80061d6:	1c20      	adds	r0, r4, #0
 80061d8:	bc70      	pop	{r4, r5, r6}
 80061da:	bc02      	pop	{r1}
 80061dc:	4708      	bx	r1
 80061de:	6828      	ldr	r0, [r5, #0]
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d005      	beq.n	80061f0 <__sfp+0x74>
 80061e4:	1c05      	adds	r5, r0, #0
 80061e6:	e7d3      	b.n	8006190 <__sfp+0x14>
 80061e8:	1c28      	adds	r0, r5, #0
 80061ea:	f7ff ff9d 	bl	8006128 <__sinit>
 80061ee:	e7cc      	b.n	800618a <__sfp+0xe>
 80061f0:	1c30      	adds	r0, r6, #0
 80061f2:	2104      	movs	r1, #4
 80061f4:	f7ff ff76 	bl	80060e4 <__sfmoreglue>
 80061f8:	6028      	str	r0, [r5, #0]
 80061fa:	2800      	cmp	r0, #0
 80061fc:	d1f2      	bne.n	80061e4 <__sfp+0x68>
 80061fe:	230c      	movs	r3, #12
 8006200:	6033      	str	r3, [r6, #0]
 8006202:	2400      	movs	r4, #0
 8006204:	e7e7      	b.n	80061d6 <__sfp+0x5a>
 8006206:	46c0      	nop			; (mov r8, r8)
 8006208:	0800d6a0 	.word	0x0800d6a0

0800620c <__sfp_lock_acquire>:
 800620c:	4770      	bx	lr
 800620e:	46c0      	nop			; (mov r8, r8)

08006210 <__sfp_lock_release>:
 8006210:	4770      	bx	lr
 8006212:	46c0      	nop			; (mov r8, r8)

08006214 <__sinit_lock_acquire>:
 8006214:	4770      	bx	lr
 8006216:	46c0      	nop			; (mov r8, r8)

08006218 <__sinit_lock_release>:
 8006218:	4770      	bx	lr
 800621a:	46c0      	nop			; (mov r8, r8)

0800621c <__fp_lock_all>:
 800621c:	b508      	push	{r3, lr}
 800621e:	4b04      	ldr	r3, [pc, #16]	; (8006230 <__fp_lock_all+0x14>)
 8006220:	4904      	ldr	r1, [pc, #16]	; (8006234 <__fp_lock_all+0x18>)
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	f000 f932 	bl	800648c <_fwalk>
 8006228:	bc08      	pop	{r3}
 800622a:	bc01      	pop	{r0}
 800622c:	4700      	bx	r0
 800622e:	46c0      	nop			; (mov r8, r8)
 8006230:	200000e8 	.word	0x200000e8
 8006234:	0800607d 	.word	0x0800607d

08006238 <__fp_unlock_all>:
 8006238:	b508      	push	{r3, lr}
 800623a:	4b04      	ldr	r3, [pc, #16]	; (800624c <__fp_unlock_all+0x14>)
 800623c:	4904      	ldr	r1, [pc, #16]	; (8006250 <__fp_unlock_all+0x18>)
 800623e:	6818      	ldr	r0, [r3, #0]
 8006240:	f000 f924 	bl	800648c <_fwalk>
 8006244:	bc08      	pop	{r3}
 8006246:	bc01      	pop	{r0}
 8006248:	4700      	bx	r0
 800624a:	46c0      	nop			; (mov r8, r8)
 800624c:	200000e8 	.word	0x200000e8
 8006250:	08006081 	.word	0x08006081

08006254 <_malloc_trim_r>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	1c0f      	adds	r7, r1, #0
 8006258:	1c04      	adds	r4, r0, #0
 800625a:	f001 f8b7 	bl	80073cc <__malloc_lock>
 800625e:	4d21      	ldr	r5, [pc, #132]	; (80062e4 <_malloc_trim_r+0x90>)
 8006260:	68ab      	ldr	r3, [r5, #8]
 8006262:	685e      	ldr	r6, [r3, #4]
 8006264:	4a20      	ldr	r2, [pc, #128]	; (80062e8 <_malloc_trim_r+0x94>)
 8006266:	2303      	movs	r3, #3
 8006268:	439e      	bics	r6, r3
 800626a:	18b3      	adds	r3, r6, r2
 800626c:	1bdf      	subs	r7, r3, r7
 800626e:	0b3f      	lsrs	r7, r7, #12
 8006270:	4b1e      	ldr	r3, [pc, #120]	; (80062ec <_malloc_trim_r+0x98>)
 8006272:	3f01      	subs	r7, #1
 8006274:	033f      	lsls	r7, r7, #12
 8006276:	429f      	cmp	r7, r3
 8006278:	dd07      	ble.n	800628a <_malloc_trim_r+0x36>
 800627a:	1c20      	adds	r0, r4, #0
 800627c:	2100      	movs	r1, #0
 800627e:	f001 ff57 	bl	8008130 <_sbrk_r>
 8006282:	68aa      	ldr	r2, [r5, #8]
 8006284:	1993      	adds	r3, r2, r6
 8006286:	4298      	cmp	r0, r3
 8006288:	d006      	beq.n	8006298 <_malloc_trim_r+0x44>
 800628a:	1c20      	adds	r0, r4, #0
 800628c:	f001 f8a0 	bl	80073d0 <__malloc_unlock>
 8006290:	2000      	movs	r0, #0
 8006292:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006294:	bc02      	pop	{r1}
 8006296:	4708      	bx	r1
 8006298:	4279      	negs	r1, r7
 800629a:	1c20      	adds	r0, r4, #0
 800629c:	f001 ff48 	bl	8008130 <_sbrk_r>
 80062a0:	3001      	adds	r0, #1
 80062a2:	d00d      	beq.n	80062c0 <_malloc_trim_r+0x6c>
 80062a4:	68ab      	ldr	r3, [r5, #8]
 80062a6:	1bf6      	subs	r6, r6, r7
 80062a8:	2201      	movs	r2, #1
 80062aa:	4316      	orrs	r6, r2
 80062ac:	605e      	str	r6, [r3, #4]
 80062ae:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <_malloc_trim_r+0x9c>)
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	1c20      	adds	r0, r4, #0
 80062b4:	1bd7      	subs	r7, r2, r7
 80062b6:	601f      	str	r7, [r3, #0]
 80062b8:	f001 f88a 	bl	80073d0 <__malloc_unlock>
 80062bc:	2001      	movs	r0, #1
 80062be:	e7e8      	b.n	8006292 <_malloc_trim_r+0x3e>
 80062c0:	1c20      	adds	r0, r4, #0
 80062c2:	2100      	movs	r1, #0
 80062c4:	f001 ff34 	bl	8008130 <_sbrk_r>
 80062c8:	68ab      	ldr	r3, [r5, #8]
 80062ca:	1ac2      	subs	r2, r0, r3
 80062cc:	2a0f      	cmp	r2, #15
 80062ce:	dddc      	ble.n	800628a <_malloc_trim_r+0x36>
 80062d0:	4908      	ldr	r1, [pc, #32]	; (80062f4 <_malloc_trim_r+0xa0>)
 80062d2:	6809      	ldr	r1, [r1, #0]
 80062d4:	1a40      	subs	r0, r0, r1
 80062d6:	4906      	ldr	r1, [pc, #24]	; (80062f0 <_malloc_trim_r+0x9c>)
 80062d8:	6008      	str	r0, [r1, #0]
 80062da:	2101      	movs	r1, #1
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]
 80062e0:	e7d3      	b.n	800628a <_malloc_trim_r+0x36>
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	200005c0 	.word	0x200005c0
 80062e8:	00000fef 	.word	0x00000fef
 80062ec:	00000fff 	.word	0x00000fff
 80062f0:	20000ba0 	.word	0x20000ba0
 80062f4:	200009c8 	.word	0x200009c8

080062f8 <_free_r>:
 80062f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062fa:	4647      	mov	r7, r8
 80062fc:	b480      	push	{r7}
 80062fe:	1c05      	adds	r5, r0, #0
 8006300:	1e0c      	subs	r4, r1, #0
 8006302:	d055      	beq.n	80063b0 <_free_r+0xb8>
 8006304:	f001 f862 	bl	80073cc <__malloc_lock>
 8006308:	1c21      	adds	r1, r4, #0
 800630a:	3908      	subs	r1, #8
 800630c:	6848      	ldr	r0, [r1, #4]
 800630e:	2701      	movs	r7, #1
 8006310:	1c03      	adds	r3, r0, #0
 8006312:	43bb      	bics	r3, r7
 8006314:	18ca      	adds	r2, r1, r3
 8006316:	6854      	ldr	r4, [r2, #4]
 8006318:	4680      	mov	r8, r0
 800631a:	2003      	movs	r0, #3
 800631c:	4384      	bics	r4, r0
 800631e:	1c20      	adds	r0, r4, #0
 8006320:	4c54      	ldr	r4, [pc, #336]	; (8006474 <_free_r+0x17c>)
 8006322:	68a6      	ldr	r6, [r4, #8]
 8006324:	4296      	cmp	r6, r2
 8006326:	d062      	beq.n	80063ee <_free_r+0xf6>
 8006328:	2600      	movs	r6, #0
 800632a:	46b4      	mov	ip, r6
 800632c:	4646      	mov	r6, r8
 800632e:	6050      	str	r0, [r2, #4]
 8006330:	4237      	tst	r7, r6
 8006332:	d10a      	bne.n	800634a <_free_r+0x52>
 8006334:	680e      	ldr	r6, [r1, #0]
 8006336:	1b89      	subs	r1, r1, r6
 8006338:	199b      	adds	r3, r3, r6
 800633a:	1c27      	adds	r7, r4, #0
 800633c:	688e      	ldr	r6, [r1, #8]
 800633e:	3708      	adds	r7, #8
 8006340:	42be      	cmp	r6, r7
 8006342:	d06d      	beq.n	8006420 <_free_r+0x128>
 8006344:	68cf      	ldr	r7, [r1, #12]
 8006346:	60f7      	str	r7, [r6, #12]
 8006348:	60be      	str	r6, [r7, #8]
 800634a:	1817      	adds	r7, r2, r0
 800634c:	687f      	ldr	r7, [r7, #4]
 800634e:	2601      	movs	r6, #1
 8006350:	4237      	tst	r7, r6
 8006352:	d107      	bne.n	8006364 <_free_r+0x6c>
 8006354:	181b      	adds	r3, r3, r0
 8006356:	4660      	mov	r0, ip
 8006358:	2800      	cmp	r0, #0
 800635a:	d02e      	beq.n	80063ba <_free_r+0xc2>
 800635c:	6890      	ldr	r0, [r2, #8]
 800635e:	68d2      	ldr	r2, [r2, #12]
 8006360:	60c2      	str	r2, [r0, #12]
 8006362:	6090      	str	r0, [r2, #8]
 8006364:	2201      	movs	r2, #1
 8006366:	1c18      	adds	r0, r3, #0
 8006368:	4310      	orrs	r0, r2
 800636a:	4666      	mov	r6, ip
 800636c:	6048      	str	r0, [r1, #4]
 800636e:	50cb      	str	r3, [r1, r3]
 8006370:	2e00      	cmp	r6, #0
 8006372:	d11a      	bne.n	80063aa <_free_r+0xb2>
 8006374:	4840      	ldr	r0, [pc, #256]	; (8006478 <_free_r+0x180>)
 8006376:	4283      	cmp	r3, r0
 8006378:	d92b      	bls.n	80063d2 <_free_r+0xda>
 800637a:	0a5a      	lsrs	r2, r3, #9
 800637c:	2a04      	cmp	r2, #4
 800637e:	d852      	bhi.n	8006426 <_free_r+0x12e>
 8006380:	099f      	lsrs	r7, r3, #6
 8006382:	3738      	adds	r7, #56	; 0x38
 8006384:	0078      	lsls	r0, r7, #1
 8006386:	0080      	lsls	r0, r0, #2
 8006388:	1820      	adds	r0, r4, r0
 800638a:	6882      	ldr	r2, [r0, #8]
 800638c:	2603      	movs	r6, #3
 800638e:	4282      	cmp	r2, r0
 8006390:	d04f      	beq.n	8006432 <_free_r+0x13a>
 8006392:	6854      	ldr	r4, [r2, #4]
 8006394:	43b4      	bics	r4, r6
 8006396:	42a3      	cmp	r3, r4
 8006398:	d202      	bcs.n	80063a0 <_free_r+0xa8>
 800639a:	6892      	ldr	r2, [r2, #8]
 800639c:	4290      	cmp	r0, r2
 800639e:	d1f8      	bne.n	8006392 <_free_r+0x9a>
 80063a0:	68d3      	ldr	r3, [r2, #12]
 80063a2:	60cb      	str	r3, [r1, #12]
 80063a4:	608a      	str	r2, [r1, #8]
 80063a6:	60d1      	str	r1, [r2, #12]
 80063a8:	6099      	str	r1, [r3, #8]
 80063aa:	1c28      	adds	r0, r5, #0
 80063ac:	f001 f810 	bl	80073d0 <__malloc_unlock>
 80063b0:	bc04      	pop	{r2}
 80063b2:	4690      	mov	r8, r2
 80063b4:	bcf0      	pop	{r4, r5, r6, r7}
 80063b6:	bc01      	pop	{r0}
 80063b8:	4700      	bx	r0
 80063ba:	6890      	ldr	r0, [r2, #8]
 80063bc:	4f2f      	ldr	r7, [pc, #188]	; (800647c <_free_r+0x184>)
 80063be:	42b8      	cmp	r0, r7
 80063c0:	d1cd      	bne.n	800635e <_free_r+0x66>
 80063c2:	431e      	orrs	r6, r3
 80063c4:	60c1      	str	r1, [r0, #12]
 80063c6:	6081      	str	r1, [r0, #8]
 80063c8:	60c8      	str	r0, [r1, #12]
 80063ca:	6088      	str	r0, [r1, #8]
 80063cc:	604e      	str	r6, [r1, #4]
 80063ce:	50cb      	str	r3, [r1, r3]
 80063d0:	e7eb      	b.n	80063aa <_free_r+0xb2>
 80063d2:	08db      	lsrs	r3, r3, #3
 80063d4:	1098      	asrs	r0, r3, #2
 80063d6:	4082      	lsls	r2, r0
 80063d8:	6860      	ldr	r0, [r4, #4]
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	4302      	orrs	r2, r0
 80063de:	6062      	str	r2, [r4, #4]
 80063e0:	18e4      	adds	r4, r4, r3
 80063e2:	68a3      	ldr	r3, [r4, #8]
 80063e4:	60cc      	str	r4, [r1, #12]
 80063e6:	608b      	str	r3, [r1, #8]
 80063e8:	60d9      	str	r1, [r3, #12]
 80063ea:	60a1      	str	r1, [r4, #8]
 80063ec:	e7dd      	b.n	80063aa <_free_r+0xb2>
 80063ee:	18c3      	adds	r3, r0, r3
 80063f0:	4640      	mov	r0, r8
 80063f2:	4207      	tst	r7, r0
 80063f4:	d106      	bne.n	8006404 <_free_r+0x10c>
 80063f6:	680a      	ldr	r2, [r1, #0]
 80063f8:	1a89      	subs	r1, r1, r2
 80063fa:	68c8      	ldr	r0, [r1, #12]
 80063fc:	189b      	adds	r3, r3, r2
 80063fe:	688a      	ldr	r2, [r1, #8]
 8006400:	60d0      	str	r0, [r2, #12]
 8006402:	6082      	str	r2, [r0, #8]
 8006404:	2201      	movs	r2, #1
 8006406:	431a      	orrs	r2, r3
 8006408:	604a      	str	r2, [r1, #4]
 800640a:	4a1d      	ldr	r2, [pc, #116]	; (8006480 <_free_r+0x188>)
 800640c:	6812      	ldr	r2, [r2, #0]
 800640e:	60a1      	str	r1, [r4, #8]
 8006410:	4293      	cmp	r3, r2
 8006412:	d3ca      	bcc.n	80063aa <_free_r+0xb2>
 8006414:	4b1b      	ldr	r3, [pc, #108]	; (8006484 <_free_r+0x18c>)
 8006416:	1c28      	adds	r0, r5, #0
 8006418:	6819      	ldr	r1, [r3, #0]
 800641a:	f7ff ff1b 	bl	8006254 <_malloc_trim_r>
 800641e:	e7c4      	b.n	80063aa <_free_r+0xb2>
 8006420:	2601      	movs	r6, #1
 8006422:	46b4      	mov	ip, r6
 8006424:	e791      	b.n	800634a <_free_r+0x52>
 8006426:	2a14      	cmp	r2, #20
 8006428:	d80c      	bhi.n	8006444 <_free_r+0x14c>
 800642a:	1c17      	adds	r7, r2, #0
 800642c:	375b      	adds	r7, #91	; 0x5b
 800642e:	0078      	lsls	r0, r7, #1
 8006430:	e7a9      	b.n	8006386 <_free_r+0x8e>
 8006432:	10bf      	asrs	r7, r7, #2
 8006434:	2301      	movs	r3, #1
 8006436:	40bb      	lsls	r3, r7
 8006438:	1c1f      	adds	r7, r3, #0
 800643a:	6863      	ldr	r3, [r4, #4]
 800643c:	431f      	orrs	r7, r3
 800643e:	6067      	str	r7, [r4, #4]
 8006440:	1c13      	adds	r3, r2, #0
 8006442:	e7ae      	b.n	80063a2 <_free_r+0xaa>
 8006444:	2a54      	cmp	r2, #84	; 0x54
 8006446:	d803      	bhi.n	8006450 <_free_r+0x158>
 8006448:	0b1f      	lsrs	r7, r3, #12
 800644a:	376e      	adds	r7, #110	; 0x6e
 800644c:	0078      	lsls	r0, r7, #1
 800644e:	e79a      	b.n	8006386 <_free_r+0x8e>
 8006450:	20aa      	movs	r0, #170	; 0xaa
 8006452:	0040      	lsls	r0, r0, #1
 8006454:	4282      	cmp	r2, r0
 8006456:	d803      	bhi.n	8006460 <_free_r+0x168>
 8006458:	0bdf      	lsrs	r7, r3, #15
 800645a:	3777      	adds	r7, #119	; 0x77
 800645c:	0078      	lsls	r0, r7, #1
 800645e:	e792      	b.n	8006386 <_free_r+0x8e>
 8006460:	4809      	ldr	r0, [pc, #36]	; (8006488 <_free_r+0x190>)
 8006462:	4282      	cmp	r2, r0
 8006464:	d803      	bhi.n	800646e <_free_r+0x176>
 8006466:	0c9f      	lsrs	r7, r3, #18
 8006468:	377c      	adds	r7, #124	; 0x7c
 800646a:	0078      	lsls	r0, r7, #1
 800646c:	e78b      	b.n	8006386 <_free_r+0x8e>
 800646e:	20fc      	movs	r0, #252	; 0xfc
 8006470:	277e      	movs	r7, #126	; 0x7e
 8006472:	e788      	b.n	8006386 <_free_r+0x8e>
 8006474:	200005c0 	.word	0x200005c0
 8006478:	000001ff 	.word	0x000001ff
 800647c:	200005c8 	.word	0x200005c8
 8006480:	200009cc 	.word	0x200009cc
 8006484:	20000b9c 	.word	0x20000b9c
 8006488:	00000554 	.word	0x00000554

0800648c <_fwalk>:
 800648c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800648e:	22b8      	movs	r2, #184	; 0xb8
 8006490:	0092      	lsls	r2, r2, #2
 8006492:	4647      	mov	r7, r8
 8006494:	1886      	adds	r6, r0, r2
 8006496:	b480      	push	{r7}
 8006498:	4688      	mov	r8, r1
 800649a:	2700      	movs	r7, #0
 800649c:	2e00      	cmp	r6, #0
 800649e:	d018      	beq.n	80064d2 <_fwalk+0x46>
 80064a0:	6875      	ldr	r5, [r6, #4]
 80064a2:	68b4      	ldr	r4, [r6, #8]
 80064a4:	3d01      	subs	r5, #1
 80064a6:	d411      	bmi.n	80064cc <_fwalk+0x40>
 80064a8:	340c      	adds	r4, #12
 80064aa:	8823      	ldrh	r3, [r4, #0]
 80064ac:	1c20      	adds	r0, r4, #0
 80064ae:	380c      	subs	r0, #12
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d008      	beq.n	80064c6 <_fwalk+0x3a>
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d906      	bls.n	80064c6 <_fwalk+0x3a>
 80064b8:	2202      	movs	r2, #2
 80064ba:	5ea3      	ldrsh	r3, [r4, r2]
 80064bc:	3301      	adds	r3, #1
 80064be:	d002      	beq.n	80064c6 <_fwalk+0x3a>
 80064c0:	f000 f83c 	bl	800653c <_fwalk_reent+0x5c>
 80064c4:	4307      	orrs	r7, r0
 80064c6:	3468      	adds	r4, #104	; 0x68
 80064c8:	3d01      	subs	r5, #1
 80064ca:	d2ee      	bcs.n	80064aa <_fwalk+0x1e>
 80064cc:	6836      	ldr	r6, [r6, #0]
 80064ce:	2e00      	cmp	r6, #0
 80064d0:	d1e6      	bne.n	80064a0 <_fwalk+0x14>
 80064d2:	1c38      	adds	r0, r7, #0
 80064d4:	bc04      	pop	{r2}
 80064d6:	4690      	mov	r8, r2
 80064d8:	bcf0      	pop	{r4, r5, r6, r7}
 80064da:	bc02      	pop	{r1}
 80064dc:	4708      	bx	r1
 80064de:	46c0      	nop			; (mov r8, r8)

080064e0 <_fwalk_reent>:
 80064e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e2:	22b8      	movs	r2, #184	; 0xb8
 80064e4:	464f      	mov	r7, r9
 80064e6:	4646      	mov	r6, r8
 80064e8:	0092      	lsls	r2, r2, #2
 80064ea:	b4c0      	push	{r6, r7}
 80064ec:	4680      	mov	r8, r0
 80064ee:	1c16      	adds	r6, r2, #0
 80064f0:	4446      	add	r6, r8
 80064f2:	4689      	mov	r9, r1
 80064f4:	2700      	movs	r7, #0
 80064f6:	2e00      	cmp	r6, #0
 80064f8:	d019      	beq.n	800652e <_fwalk_reent+0x4e>
 80064fa:	6875      	ldr	r5, [r6, #4]
 80064fc:	68b4      	ldr	r4, [r6, #8]
 80064fe:	3d01      	subs	r5, #1
 8006500:	d412      	bmi.n	8006528 <_fwalk_reent+0x48>
 8006502:	340c      	adds	r4, #12
 8006504:	8823      	ldrh	r3, [r4, #0]
 8006506:	1c21      	adds	r1, r4, #0
 8006508:	390c      	subs	r1, #12
 800650a:	2b00      	cmp	r3, #0
 800650c:	d009      	beq.n	8006522 <_fwalk_reent+0x42>
 800650e:	2b01      	cmp	r3, #1
 8006510:	d907      	bls.n	8006522 <_fwalk_reent+0x42>
 8006512:	2202      	movs	r2, #2
 8006514:	5ea3      	ldrsh	r3, [r4, r2]
 8006516:	3301      	adds	r3, #1
 8006518:	d003      	beq.n	8006522 <_fwalk_reent+0x42>
 800651a:	4640      	mov	r0, r8
 800651c:	f000 f80f 	bl	800653e <_fwalk_reent+0x5e>
 8006520:	4307      	orrs	r7, r0
 8006522:	3468      	adds	r4, #104	; 0x68
 8006524:	3d01      	subs	r5, #1
 8006526:	d2ed      	bcs.n	8006504 <_fwalk_reent+0x24>
 8006528:	6836      	ldr	r6, [r6, #0]
 800652a:	2e00      	cmp	r6, #0
 800652c:	d1e5      	bne.n	80064fa <_fwalk_reent+0x1a>
 800652e:	1c38      	adds	r0, r7, #0
 8006530:	bc0c      	pop	{r2, r3}
 8006532:	4690      	mov	r8, r2
 8006534:	4699      	mov	r9, r3
 8006536:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006538:	bc02      	pop	{r1}
 800653a:	4708      	bx	r1
 800653c:	4740      	bx	r8
 800653e:	4748      	bx	r9

08006540 <rshift>:
 8006540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006542:	2214      	movs	r2, #20
 8006544:	1812      	adds	r2, r2, r0
 8006546:	464f      	mov	r7, r9
 8006548:	4691      	mov	r9, r2
 800654a:	6902      	ldr	r2, [r0, #16]
 800654c:	4646      	mov	r6, r8
 800654e:	b4c0      	push	{r6, r7}
 8006550:	114b      	asrs	r3, r1, #5
 8006552:	4293      	cmp	r3, r2
 8006554:	da2e      	bge.n	80065b4 <rshift+0x74>
 8006556:	3304      	adds	r3, #4
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	3204      	adds	r2, #4
 800655c:	18c3      	adds	r3, r0, r3
 800655e:	1d1c      	adds	r4, r3, #4
 8006560:	0092      	lsls	r2, r2, #2
 8006562:	1882      	adds	r2, r0, r2
 8006564:	46a4      	mov	ip, r4
 8006566:	241f      	movs	r4, #31
 8006568:	3204      	adds	r2, #4
 800656a:	4021      	ands	r1, r4
 800656c:	d02c      	beq.n	80065c8 <rshift+0x88>
 800656e:	2420      	movs	r4, #32
 8006570:	1a64      	subs	r4, r4, r1
 8006572:	46a0      	mov	r8, r4
 8006574:	685c      	ldr	r4, [r3, #4]
 8006576:	4663      	mov	r3, ip
 8006578:	3304      	adds	r3, #4
 800657a:	40cc      	lsrs	r4, r1
 800657c:	429a      	cmp	r2, r3
 800657e:	d93e      	bls.n	80065fe <rshift+0xbe>
 8006580:	464d      	mov	r5, r9
 8006582:	681e      	ldr	r6, [r3, #0]
 8006584:	4647      	mov	r7, r8
 8006586:	40be      	lsls	r6, r7
 8006588:	4334      	orrs	r4, r6
 800658a:	c510      	stmia	r5!, {r4}
 800658c:	cb10      	ldmia	r3!, {r4}
 800658e:	40cc      	lsrs	r4, r1
 8006590:	429a      	cmp	r2, r3
 8006592:	d8f6      	bhi.n	8006582 <rshift+0x42>
 8006594:	4661      	mov	r1, ip
 8006596:	1a53      	subs	r3, r2, r1
 8006598:	3b05      	subs	r3, #5
 800659a:	089b      	lsrs	r3, r3, #2
 800659c:	3305      	adds	r3, #5
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	18c3      	adds	r3, r0, r3
 80065a2:	3304      	adds	r3, #4
 80065a4:	601c      	str	r4, [r3, #0]
 80065a6:	2c00      	cmp	r4, #0
 80065a8:	d025      	beq.n	80065f6 <rshift+0xb6>
 80065aa:	3304      	adds	r3, #4
 80065ac:	464c      	mov	r4, r9
 80065ae:	1b1f      	subs	r7, r3, r4
 80065b0:	10bf      	asrs	r7, r7, #2
 80065b2:	e01c      	b.n	80065ee <rshift+0xae>
 80065b4:	2300      	movs	r3, #0
 80065b6:	6103      	str	r3, [r0, #16]
 80065b8:	2300      	movs	r3, #0
 80065ba:	6143      	str	r3, [r0, #20]
 80065bc:	bc0c      	pop	{r2, r3}
 80065be:	4690      	mov	r8, r2
 80065c0:	4699      	mov	r9, r3
 80065c2:	bcf0      	pop	{r4, r5, r6, r7}
 80065c4:	bc01      	pop	{r0}
 80065c6:	4700      	bx	r0
 80065c8:	4663      	mov	r3, ip
 80065ca:	4649      	mov	r1, r9
 80065cc:	4562      	cmp	r2, ip
 80065ce:	d9f1      	bls.n	80065b4 <rshift+0x74>
 80065d0:	cb10      	ldmia	r3!, {r4}
 80065d2:	c110      	stmia	r1!, {r4}
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d8fb      	bhi.n	80065d0 <rshift+0x90>
 80065d8:	4666      	mov	r6, ip
 80065da:	43f3      	mvns	r3, r6
 80065dc:	189b      	adds	r3, r3, r2
 80065de:	089b      	lsrs	r3, r3, #2
 80065e0:	3305      	adds	r3, #5
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	18c3      	adds	r3, r0, r3
 80065e6:	3304      	adds	r3, #4
 80065e8:	4649      	mov	r1, r9
 80065ea:	1a5f      	subs	r7, r3, r1
 80065ec:	10bf      	asrs	r7, r7, #2
 80065ee:	6107      	str	r7, [r0, #16]
 80065f0:	2f00      	cmp	r7, #0
 80065f2:	d1e3      	bne.n	80065bc <rshift+0x7c>
 80065f4:	e7e0      	b.n	80065b8 <rshift+0x78>
 80065f6:	464a      	mov	r2, r9
 80065f8:	1a9f      	subs	r7, r3, r2
 80065fa:	10bf      	asrs	r7, r7, #2
 80065fc:	e7f7      	b.n	80065ee <rshift+0xae>
 80065fe:	464b      	mov	r3, r9
 8006600:	e7d0      	b.n	80065a4 <rshift+0x64>
 8006602:	46c0      	nop			; (mov r8, r8)

08006604 <__hexdig_init>:
 8006604:	b510      	push	{r4, lr}
 8006606:	4a11      	ldr	r2, [pc, #68]	; (800664c <__hexdig_init+0x48>)
 8006608:	4c11      	ldr	r4, [pc, #68]	; (8006650 <__hexdig_init+0x4c>)
 800660a:	2300      	movs	r3, #0
 800660c:	2130      	movs	r1, #48	; 0x30
 800660e:	1c18      	adds	r0, r3, #0
 8006610:	3010      	adds	r0, #16
 8006612:	3301      	adds	r3, #1
 8006614:	5450      	strb	r0, [r2, r1]
 8006616:	5ce1      	ldrb	r1, [r4, r3]
 8006618:	2900      	cmp	r1, #0
 800661a:	d1f8      	bne.n	800660e <__hexdig_init+0xa>
 800661c:	4c0d      	ldr	r4, [pc, #52]	; (8006654 <__hexdig_init+0x50>)
 800661e:	2300      	movs	r3, #0
 8006620:	2161      	movs	r1, #97	; 0x61
 8006622:	1c18      	adds	r0, r3, #0
 8006624:	301a      	adds	r0, #26
 8006626:	3301      	adds	r3, #1
 8006628:	5450      	strb	r0, [r2, r1]
 800662a:	5ce1      	ldrb	r1, [r4, r3]
 800662c:	2900      	cmp	r1, #0
 800662e:	d1f8      	bne.n	8006622 <__hexdig_init+0x1e>
 8006630:	4c09      	ldr	r4, [pc, #36]	; (8006658 <__hexdig_init+0x54>)
 8006632:	2300      	movs	r3, #0
 8006634:	2141      	movs	r1, #65	; 0x41
 8006636:	1c18      	adds	r0, r3, #0
 8006638:	301a      	adds	r0, #26
 800663a:	3301      	adds	r3, #1
 800663c:	5450      	strb	r0, [r2, r1]
 800663e:	5ce1      	ldrb	r1, [r4, r3]
 8006640:	2900      	cmp	r1, #0
 8006642:	d1f8      	bne.n	8006636 <__hexdig_init+0x32>
 8006644:	bc10      	pop	{r4}
 8006646:	bc01      	pop	{r0}
 8006648:	4700      	bx	r0
 800664a:	46c0      	nop			; (mov r8, r8)
 800664c:	20001e50 	.word	0x20001e50
 8006650:	0800dcec 	.word	0x0800dcec
 8006654:	0800dce4 	.word	0x0800dce4
 8006658:	0800dcdc 	.word	0x0800dcdc

0800665c <__gethex>:
 800665c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800665e:	465f      	mov	r7, fp
 8006660:	4656      	mov	r6, sl
 8006662:	4644      	mov	r4, r8
 8006664:	464d      	mov	r5, r9
 8006666:	b4f0      	push	{r4, r5, r6, r7}
 8006668:	b091      	sub	sp, #68	; 0x44
 800666a:	930f      	str	r3, [sp, #60]	; 0x3c
 800666c:	4688      	mov	r8, r1
 800666e:	4693      	mov	fp, r2
 8006670:	900c      	str	r0, [sp, #48]	; 0x30
 8006672:	f7fa fd9f 	bl	80011b4 <_localeconv_r>
 8006676:	6800      	ldr	r0, [r0, #0]
 8006678:	9007      	str	r0, [sp, #28]
 800667a:	f7f9 fd75 	bl	8000168 <strlen>
 800667e:	9f07      	ldr	r7, [sp, #28]
 8006680:	183b      	adds	r3, r7, r0
 8006682:	3b01      	subs	r3, #1
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	9008      	str	r0, [sp, #32]
 8006688:	9306      	str	r3, [sp, #24]
 800668a:	4ec5      	ldr	r6, [pc, #788]	; (80069a0 <__gethex+0x344>)
 800668c:	2330      	movs	r3, #48	; 0x30
 800668e:	5cf3      	ldrb	r3, [r6, r3]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d100      	bne.n	8006696 <__gethex+0x3a>
 8006694:	e127      	b.n	80068e6 <__gethex+0x28a>
 8006696:	4641      	mov	r1, r8
 8006698:	6808      	ldr	r0, [r1, #0]
 800669a:	7882      	ldrb	r2, [r0, #2]
 800669c:	1c84      	adds	r4, r0, #2
 800669e:	2a30      	cmp	r2, #48	; 0x30
 80066a0:	d000      	beq.n	80066a4 <__gethex+0x48>
 80066a2:	e1d4      	b.n	8006a4e <__gethex+0x3f2>
 80066a4:	2102      	movs	r1, #2
 80066a6:	4249      	negs	r1, r1
 80066a8:	1cc3      	adds	r3, r0, #3
 80066aa:	1a09      	subs	r1, r1, r0
 80066ac:	18cf      	adds	r7, r1, r3
 80066ae:	1c1c      	adds	r4, r3, #0
 80066b0:	3301      	adds	r3, #1
 80066b2:	1e5a      	subs	r2, r3, #1
 80066b4:	7812      	ldrb	r2, [r2, #0]
 80066b6:	2a30      	cmp	r2, #48	; 0x30
 80066b8:	d0f8      	beq.n	80066ac <__gethex+0x50>
 80066ba:	5cb3      	ldrb	r3, [r6, r2]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d100      	bne.n	80066c2 <__gethex+0x66>
 80066c0:	e0f0      	b.n	80068a4 <__gethex+0x248>
 80066c2:	7823      	ldrb	r3, [r4, #0]
 80066c4:	5cf3      	ldrb	r3, [r6, r3]
 80066c6:	2000      	movs	r0, #0
 80066c8:	1c22      	adds	r2, r4, #0
 80066ca:	4681      	mov	r9, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d100      	bne.n	80066d2 <__gethex+0x76>
 80066d0:	e1f7      	b.n	8006ac2 <__gethex+0x466>
 80066d2:	1c15      	adds	r5, r2, #0
 80066d4:	3501      	adds	r5, #1
 80066d6:	782b      	ldrb	r3, [r5, #0]
 80066d8:	5cf3      	ldrb	r3, [r6, r3]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1fa      	bne.n	80066d4 <__gethex+0x78>
 80066de:	2000      	movs	r0, #0
 80066e0:	1c14      	adds	r4, r2, #0
 80066e2:	4682      	mov	sl, r0
 80066e4:	1c28      	adds	r0, r5, #0
 80066e6:	9907      	ldr	r1, [sp, #28]
 80066e8:	9a08      	ldr	r2, [sp, #32]
 80066ea:	f7f9 fd45 	bl	8000178 <strncmp>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d023      	beq.n	800673a <__gethex+0xde>
 80066f2:	464a      	mov	r2, r9
 80066f4:	782b      	ldrb	r3, [r5, #0]
 80066f6:	2a00      	cmp	r2, #0
 80066f8:	d100      	bne.n	80066fc <__gethex+0xa0>
 80066fa:	e198      	b.n	8006a2e <__gethex+0x3d2>
 80066fc:	4648      	mov	r0, r9
 80066fe:	1b42      	subs	r2, r0, r5
 8006700:	0092      	lsls	r2, r2, #2
 8006702:	920b      	str	r2, [sp, #44]	; 0x2c
 8006704:	2b50      	cmp	r3, #80	; 0x50
 8006706:	d100      	bne.n	800670a <__gethex+0xae>
 8006708:	e09e      	b.n	8006848 <__gethex+0x1ec>
 800670a:	2b70      	cmp	r3, #112	; 0x70
 800670c:	d100      	bne.n	8006710 <__gethex+0xb4>
 800670e:	e09b      	b.n	8006848 <__gethex+0x1ec>
 8006710:	1c2b      	adds	r3, r5, #0
 8006712:	4640      	mov	r0, r8
 8006714:	4651      	mov	r1, sl
 8006716:	6003      	str	r3, [r0, #0]
 8006718:	2900      	cmp	r1, #0
 800671a:	d014      	beq.n	8006746 <__gethex+0xea>
 800671c:	427b      	negs	r3, r7
 800671e:	415f      	adcs	r7, r3
 8006720:	2406      	movs	r4, #6
 8006722:	427f      	negs	r7, r7
 8006724:	403c      	ands	r4, r7
 8006726:	1c20      	adds	r0, r4, #0
 8006728:	b011      	add	sp, #68	; 0x44
 800672a:	bc3c      	pop	{r2, r3, r4, r5}
 800672c:	4690      	mov	r8, r2
 800672e:	4699      	mov	r9, r3
 8006730:	46a2      	mov	sl, r4
 8006732:	46ab      	mov	fp, r5
 8006734:	bcf0      	pop	{r4, r5, r6, r7}
 8006736:	bc02      	pop	{r1}
 8006738:	4708      	bx	r1
 800673a:	4649      	mov	r1, r9
 800673c:	2900      	cmp	r1, #0
 800673e:	d100      	bne.n	8006742 <__gethex+0xe6>
 8006740:	e1af      	b.n	8006aa2 <__gethex+0x446>
 8006742:	782b      	ldrb	r3, [r5, #0]
 8006744:	e7da      	b.n	80066fc <__gethex+0xa0>
 8006746:	1b2b      	subs	r3, r5, r4
 8006748:	3b01      	subs	r3, #1
 800674a:	2100      	movs	r1, #0
 800674c:	2b07      	cmp	r3, #7
 800674e:	dd03      	ble.n	8006758 <__gethex+0xfc>
 8006750:	3101      	adds	r1, #1
 8006752:	105b      	asrs	r3, r3, #1
 8006754:	2b07      	cmp	r3, #7
 8006756:	dcfb      	bgt.n	8006750 <__gethex+0xf4>
 8006758:	980c      	ldr	r0, [sp, #48]	; 0x30
 800675a:	f000 fe3d 	bl	80073d8 <_Balloc>
 800675e:	900a      	str	r0, [sp, #40]	; 0x28
 8006760:	3014      	adds	r0, #20
 8006762:	900e      	str	r0, [sp, #56]	; 0x38
 8006764:	42ac      	cmp	r4, r5
 8006766:	d300      	bcc.n	800676a <__gethex+0x10e>
 8006768:	e1c9      	b.n	8006afe <__gethex+0x4a2>
 800676a:	4682      	mov	sl, r0
 800676c:	9808      	ldr	r0, [sp, #32]
 800676e:	2201      	movs	r2, #1
 8006770:	2700      	movs	r7, #0
 8006772:	1a12      	subs	r2, r2, r0
 8006774:	210f      	movs	r1, #15
 8006776:	46a0      	mov	r8, r4
 8006778:	1c2b      	adds	r3, r5, #0
 800677a:	920d      	str	r2, [sp, #52]	; 0x34
 800677c:	4689      	mov	r9, r1
 800677e:	1c3c      	adds	r4, r7, #0
 8006780:	e00c      	b.n	800679c <__gethex+0x140>
 8006782:	2f20      	cmp	r7, #32
 8006784:	d057      	beq.n	8006836 <__gethex+0x1da>
 8006786:	1c3a      	adds	r2, r7, #0
 8006788:	3704      	adds	r7, #4
 800678a:	782b      	ldrb	r3, [r5, #0]
 800678c:	5cf3      	ldrb	r3, [r6, r3]
 800678e:	4648      	mov	r0, r9
 8006790:	4003      	ands	r3, r0
 8006792:	4093      	lsls	r3, r2
 8006794:	431c      	orrs	r4, r3
 8006796:	1c2b      	adds	r3, r5, #0
 8006798:	4598      	cmp	r8, r3
 800679a:	d213      	bcs.n	80067c4 <__gethex+0x168>
 800679c:	1e5d      	subs	r5, r3, #1
 800679e:	782b      	ldrb	r3, [r5, #0]
 80067a0:	9a06      	ldr	r2, [sp, #24]
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d1ed      	bne.n	8006782 <__gethex+0x126>
 80067a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067a8:	18eb      	adds	r3, r5, r3
 80067aa:	9309      	str	r3, [sp, #36]	; 0x24
 80067ac:	4598      	cmp	r8, r3
 80067ae:	d8e8      	bhi.n	8006782 <__gethex+0x126>
 80067b0:	1c18      	adds	r0, r3, #0
 80067b2:	9907      	ldr	r1, [sp, #28]
 80067b4:	9a08      	ldr	r2, [sp, #32]
 80067b6:	f7f9 fcdf 	bl	8000178 <strncmp>
 80067ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067bc:	2800      	cmp	r0, #0
 80067be:	d1e0      	bne.n	8006782 <__gethex+0x126>
 80067c0:	4598      	cmp	r8, r3
 80067c2:	d3eb      	bcc.n	800679c <__gethex+0x140>
 80067c4:	46a0      	mov	r8, r4
 80067c6:	4653      	mov	r3, sl
 80067c8:	4647      	mov	r7, r8
 80067ca:	c380      	stmia	r3!, {r7}
 80067cc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80067ce:	1bdb      	subs	r3, r3, r7
 80067d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80067d2:	109c      	asrs	r4, r3, #2
 80067d4:	613c      	str	r4, [r7, #16]
 80067d6:	4640      	mov	r0, r8
 80067d8:	f000 fed8 	bl	800758c <__hi0bits>
 80067dc:	0164      	lsls	r4, r4, #5
 80067de:	1a24      	subs	r4, r4, r0
 80067e0:	4658      	mov	r0, fp
 80067e2:	6805      	ldr	r5, [r0, #0]
 80067e4:	42ac      	cmp	r4, r5
 80067e6:	dd00      	ble.n	80067ea <__gethex+0x18e>
 80067e8:	e0fa      	b.n	80069e0 <__gethex+0x384>
 80067ea:	2600      	movs	r6, #0
 80067ec:	42ac      	cmp	r4, r5
 80067ee:	da00      	bge.n	80067f2 <__gethex+0x196>
 80067f0:	e120      	b.n	8006a34 <__gethex+0x3d8>
 80067f2:	4658      	mov	r0, fp
 80067f4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80067f6:	6880      	ldr	r0, [r0, #8]
 80067f8:	4287      	cmp	r7, r0
 80067fa:	dd00      	ble.n	80067fe <__gethex+0x1a2>
 80067fc:	e0c0      	b.n	8006980 <__gethex+0x324>
 80067fe:	465a      	mov	r2, fp
 8006800:	6853      	ldr	r3, [r2, #4]
 8006802:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006804:	429f      	cmp	r7, r3
 8006806:	da00      	bge.n	800680a <__gethex+0x1ae>
 8006808:	e0cc      	b.n	80069a4 <__gethex+0x348>
 800680a:	2401      	movs	r4, #1
 800680c:	2e00      	cmp	r6, #0
 800680e:	d00b      	beq.n	8006828 <__gethex+0x1cc>
 8006810:	4658      	mov	r0, fp
 8006812:	68c3      	ldr	r3, [r0, #12]
 8006814:	2b02      	cmp	r3, #2
 8006816:	d100      	bne.n	800681a <__gethex+0x1be>
 8006818:	e17d      	b.n	8006b16 <__gethex+0x4ba>
 800681a:	2b03      	cmp	r3, #3
 800681c:	d100      	bne.n	8006820 <__gethex+0x1c4>
 800681e:	e175      	b.n	8006b0c <__gethex+0x4b0>
 8006820:	2b01      	cmp	r3, #1
 8006822:	d063      	beq.n	80068ec <__gethex+0x290>
 8006824:	2310      	movs	r3, #16
 8006826:	431c      	orrs	r4, r3
 8006828:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800682a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800682c:	6007      	str	r7, [r0, #0]
 800682e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006830:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006832:	6007      	str	r7, [r0, #0]
 8006834:	e777      	b.n	8006726 <__gethex+0xca>
 8006836:	4657      	mov	r7, sl
 8006838:	3704      	adds	r7, #4
 800683a:	46ba      	mov	sl, r7
 800683c:	3f04      	subs	r7, #4
 800683e:	c710      	stmia	r7!, {r4}
 8006840:	2200      	movs	r2, #0
 8006842:	2704      	movs	r7, #4
 8006844:	2400      	movs	r4, #0
 8006846:	e7a0      	b.n	800678a <__gethex+0x12e>
 8006848:	786b      	ldrb	r3, [r5, #1]
 800684a:	2b2b      	cmp	r3, #43	; 0x2b
 800684c:	d100      	bne.n	8006850 <__gethex+0x1f4>
 800684e:	e0c4      	b.n	80069da <__gethex+0x37e>
 8006850:	2b2d      	cmp	r3, #45	; 0x2d
 8006852:	d100      	bne.n	8006856 <__gethex+0x1fa>
 8006854:	e0bc      	b.n	80069d0 <__gethex+0x374>
 8006856:	2000      	movs	r0, #0
 8006858:	1c6a      	adds	r2, r5, #1
 800685a:	4684      	mov	ip, r0
 800685c:	5cf1      	ldrb	r1, [r6, r3]
 800685e:	1c2b      	adds	r3, r5, #0
 8006860:	2900      	cmp	r1, #0
 8006862:	d100      	bne.n	8006866 <__gethex+0x20a>
 8006864:	e755      	b.n	8006712 <__gethex+0xb6>
 8006866:	2919      	cmp	r1, #25
 8006868:	dd00      	ble.n	800686c <__gethex+0x210>
 800686a:	e752      	b.n	8006712 <__gethex+0xb6>
 800686c:	1c53      	adds	r3, r2, #1
 800686e:	7852      	ldrb	r2, [r2, #1]
 8006870:	5cb2      	ldrb	r2, [r6, r2]
 8006872:	3910      	subs	r1, #16
 8006874:	2a00      	cmp	r2, #0
 8006876:	d10b      	bne.n	8006890 <__gethex+0x234>
 8006878:	e00c      	b.n	8006894 <__gethex+0x238>
 800687a:	0088      	lsls	r0, r1, #2
 800687c:	1841      	adds	r1, r0, r1
 800687e:	0049      	lsls	r1, r1, #1
 8006880:	188a      	adds	r2, r1, r2
 8006882:	3301      	adds	r3, #1
 8006884:	1c11      	adds	r1, r2, #0
 8006886:	781a      	ldrb	r2, [r3, #0]
 8006888:	5cb2      	ldrb	r2, [r6, r2]
 800688a:	3910      	subs	r1, #16
 800688c:	2a00      	cmp	r2, #0
 800688e:	d001      	beq.n	8006894 <__gethex+0x238>
 8006890:	2a19      	cmp	r2, #25
 8006892:	ddf2      	ble.n	800687a <__gethex+0x21e>
 8006894:	4660      	mov	r0, ip
 8006896:	2800      	cmp	r0, #0
 8006898:	d000      	beq.n	800689c <__gethex+0x240>
 800689a:	4249      	negs	r1, r1
 800689c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800689e:	1852      	adds	r2, r2, r1
 80068a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80068a2:	e736      	b.n	8006712 <__gethex+0xb6>
 80068a4:	1c20      	adds	r0, r4, #0
 80068a6:	9907      	ldr	r1, [sp, #28]
 80068a8:	9a08      	ldr	r2, [sp, #32]
 80068aa:	f7f9 fc65 	bl	8000178 <strncmp>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d16f      	bne.n	8006992 <__gethex+0x336>
 80068b2:	9b08      	ldr	r3, [sp, #32]
 80068b4:	18e5      	adds	r5, r4, r3
 80068b6:	782b      	ldrb	r3, [r5, #0]
 80068b8:	5cf2      	ldrb	r2, [r6, r3]
 80068ba:	2a00      	cmp	r2, #0
 80068bc:	d100      	bne.n	80068c0 <__gethex+0x264>
 80068be:	e0c8      	b.n	8006a52 <__gethex+0x3f6>
 80068c0:	1c2a      	adds	r2, r5, #0
 80068c2:	2b30      	cmp	r3, #48	; 0x30
 80068c4:	d000      	beq.n	80068c8 <__gethex+0x26c>
 80068c6:	e107      	b.n	8006ad8 <__gethex+0x47c>
 80068c8:	3201      	adds	r2, #1
 80068ca:	7813      	ldrb	r3, [r2, #0]
 80068cc:	2b30      	cmp	r3, #48	; 0x30
 80068ce:	d0fb      	beq.n	80068c8 <__gethex+0x26c>
 80068d0:	5cf3      	ldrb	r3, [r6, r3]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d000      	beq.n	80068d8 <__gethex+0x27c>
 80068d6:	e0ff      	b.n	8006ad8 <__gethex+0x47c>
 80068d8:	2101      	movs	r1, #1
 80068da:	46a9      	mov	r9, r5
 80068dc:	1c14      	adds	r4, r2, #0
 80068de:	1c15      	adds	r5, r2, #0
 80068e0:	468a      	mov	sl, r1
 80068e2:	2701      	movs	r7, #1
 80068e4:	e6fe      	b.n	80066e4 <__gethex+0x88>
 80068e6:	f7ff fe8d 	bl	8006604 <__hexdig_init>
 80068ea:	e6d4      	b.n	8006696 <__gethex+0x3a>
 80068ec:	07b1      	lsls	r1, r6, #30
 80068ee:	d599      	bpl.n	8006824 <__gethex+0x1c8>
 80068f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	4316      	orrs	r6, r2
 80068f6:	4233      	tst	r3, r6
 80068f8:	d094      	beq.n	8006824 <__gethex+0x1c8>
 80068fa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80068fc:	693e      	ldr	r6, [r7, #16]
 80068fe:	1d30      	adds	r0, r6, #4
 8006900:	0080      	lsls	r0, r0, #2
 8006902:	1838      	adds	r0, r7, r0
 8006904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006906:	3004      	adds	r0, #4
 8006908:	2100      	movs	r1, #0
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	1c57      	adds	r7, r2, #1
 800690e:	d000      	beq.n	8006912 <__gethex+0x2b6>
 8006910:	e119      	b.n	8006b46 <__gethex+0x4ea>
 8006912:	c302      	stmia	r3!, {r1}
 8006914:	4298      	cmp	r0, r3
 8006916:	d8f8      	bhi.n	800690a <__gethex+0x2ae>
 8006918:	980a      	ldr	r0, [sp, #40]	; 0x28
 800691a:	6880      	ldr	r0, [r0, #8]
 800691c:	1c33      	adds	r3, r6, #0
 800691e:	4286      	cmp	r6, r0
 8006920:	db00      	blt.n	8006924 <__gethex+0x2c8>
 8006922:	e12a      	b.n	8006b7a <__gethex+0x51e>
 8006924:	1d1a      	adds	r2, r3, #4
 8006926:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006928:	0092      	lsls	r2, r2, #2
 800692a:	18ba      	adds	r2, r7, r2
 800692c:	2101      	movs	r1, #1
 800692e:	3301      	adds	r3, #1
 8006930:	6051      	str	r1, [r2, #4]
 8006932:	613b      	str	r3, [r7, #16]
 8006934:	2c02      	cmp	r4, #2
 8006936:	d100      	bne.n	800693a <__gethex+0x2de>
 8006938:	e108      	b.n	8006b4c <__gethex+0x4f0>
 800693a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800693c:	6900      	ldr	r0, [r0, #16]
 800693e:	4286      	cmp	r6, r0
 8006940:	db11      	blt.n	8006966 <__gethex+0x30a>
 8006942:	231f      	movs	r3, #31
 8006944:	401d      	ands	r5, r3
 8006946:	2421      	movs	r4, #33	; 0x21
 8006948:	2d00      	cmp	r5, #0
 800694a:	d100      	bne.n	800694e <__gethex+0x2f2>
 800694c:	e76c      	b.n	8006828 <__gethex+0x1cc>
 800694e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006950:	1cf3      	adds	r3, r6, #3
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	18fb      	adds	r3, r7, r3
 8006956:	6858      	ldr	r0, [r3, #4]
 8006958:	f000 fe18 	bl	800758c <__hi0bits>
 800695c:	2320      	movs	r3, #32
 800695e:	1b5d      	subs	r5, r3, r5
 8006960:	42a8      	cmp	r0, r5
 8006962:	db00      	blt.n	8006966 <__gethex+0x30a>
 8006964:	e760      	b.n	8006828 <__gethex+0x1cc>
 8006966:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006968:	2101      	movs	r1, #1
 800696a:	f7ff fde9 	bl	8006540 <rshift>
 800696e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006970:	4658      	mov	r0, fp
 8006972:	6883      	ldr	r3, [r0, #8]
 8006974:	3701      	adds	r7, #1
 8006976:	970b      	str	r7, [sp, #44]	; 0x2c
 8006978:	2421      	movs	r4, #33	; 0x21
 800697a:	429f      	cmp	r7, r3
 800697c:	dc00      	bgt.n	8006980 <__gethex+0x324>
 800697e:	e753      	b.n	8006828 <__gethex+0x1cc>
 8006980:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006982:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006984:	f000 fd52 	bl	800742c <_Bfree>
 8006988:	991a      	ldr	r1, [sp, #104]	; 0x68
 800698a:	2300      	movs	r3, #0
 800698c:	600b      	str	r3, [r1, #0]
 800698e:	24a3      	movs	r4, #163	; 0xa3
 8006990:	e6c9      	b.n	8006726 <__gethex+0xca>
 8006992:	2100      	movs	r1, #0
 8006994:	2201      	movs	r2, #1
 8006996:	7823      	ldrb	r3, [r4, #0]
 8006998:	1c25      	adds	r5, r4, #0
 800699a:	910b      	str	r1, [sp, #44]	; 0x2c
 800699c:	4692      	mov	sl, r2
 800699e:	e6b1      	b.n	8006704 <__gethex+0xa8>
 80069a0:	20001e50 	.word	0x20001e50
 80069a4:	1bdc      	subs	r4, r3, r7
 80069a6:	42a5      	cmp	r5, r4
 80069a8:	dc58      	bgt.n	8006a5c <__gethex+0x400>
 80069aa:	68d2      	ldr	r2, [r2, #12]
 80069ac:	2a02      	cmp	r2, #2
 80069ae:	d100      	bne.n	80069b2 <__gethex+0x356>
 80069b0:	e095      	b.n	8006ade <__gethex+0x482>
 80069b2:	2a03      	cmp	r2, #3
 80069b4:	d100      	bne.n	80069b8 <__gethex+0x35c>
 80069b6:	e0c1      	b.n	8006b3c <__gethex+0x4e0>
 80069b8:	2a01      	cmp	r2, #1
 80069ba:	d100      	bne.n	80069be <__gethex+0x362>
 80069bc:	e0af      	b.n	8006b1e <__gethex+0x4c2>
 80069be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80069c0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80069c2:	f000 fd33 	bl	800742c <_Bfree>
 80069c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80069c8:	2300      	movs	r3, #0
 80069ca:	600b      	str	r3, [r1, #0]
 80069cc:	2450      	movs	r4, #80	; 0x50
 80069ce:	e6aa      	b.n	8006726 <__gethex+0xca>
 80069d0:	2101      	movs	r1, #1
 80069d2:	468c      	mov	ip, r1
 80069d4:	1caa      	adds	r2, r5, #2
 80069d6:	78ab      	ldrb	r3, [r5, #2]
 80069d8:	e740      	b.n	800685c <__gethex+0x200>
 80069da:	2200      	movs	r2, #0
 80069dc:	4694      	mov	ip, r2
 80069de:	e7f9      	b.n	80069d4 <__gethex+0x378>
 80069e0:	1b64      	subs	r4, r4, r5
 80069e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80069e4:	1c21      	adds	r1, r4, #0
 80069e6:	f001 f981 	bl	8007cec <__any_on>
 80069ea:	2600      	movs	r6, #0
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d016      	beq.n	8006a1e <__gethex+0x3c2>
 80069f0:	1e63      	subs	r3, r4, #1
 80069f2:	221f      	movs	r2, #31
 80069f4:	401a      	ands	r2, r3
 80069f6:	2101      	movs	r1, #1
 80069f8:	4091      	lsls	r1, r2
 80069fa:	1c0a      	adds	r2, r1, #0
 80069fc:	1159      	asrs	r1, r3, #5
 80069fe:	3104      	adds	r1, #4
 8006a00:	0089      	lsls	r1, r1, #2
 8006a02:	1879      	adds	r1, r7, r1
 8006a04:	6849      	ldr	r1, [r1, #4]
 8006a06:	2601      	movs	r6, #1
 8006a08:	4211      	tst	r1, r2
 8006a0a:	d008      	beq.n	8006a1e <__gethex+0x3c2>
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	dd7b      	ble.n	8006b08 <__gethex+0x4ac>
 8006a10:	1ea1      	subs	r1, r4, #2
 8006a12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a14:	f001 f96a 	bl	8007cec <__any_on>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d075      	beq.n	8006b08 <__gethex+0x4ac>
 8006a1c:	2603      	movs	r6, #3
 8006a1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a20:	1c21      	adds	r1, r4, #0
 8006a22:	f7ff fd8d 	bl	8006540 <rshift>
 8006a26:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006a28:	193f      	adds	r7, r7, r4
 8006a2a:	970b      	str	r7, [sp, #44]	; 0x2c
 8006a2c:	e6e1      	b.n	80067f2 <__gethex+0x196>
 8006a2e:	2000      	movs	r0, #0
 8006a30:	900b      	str	r0, [sp, #44]	; 0x2c
 8006a32:	e667      	b.n	8006704 <__gethex+0xa8>
 8006a34:	1b2c      	subs	r4, r5, r4
 8006a36:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006a38:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a3a:	1c22      	adds	r2, r4, #0
 8006a3c:	f000 ff08 	bl	8007850 <__lshift>
 8006a40:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006a42:	900a      	str	r0, [sp, #40]	; 0x28
 8006a44:	1b3f      	subs	r7, r7, r4
 8006a46:	3014      	adds	r0, #20
 8006a48:	970b      	str	r7, [sp, #44]	; 0x2c
 8006a4a:	900e      	str	r0, [sp, #56]	; 0x38
 8006a4c:	e6d1      	b.n	80067f2 <__gethex+0x196>
 8006a4e:	2700      	movs	r7, #0
 8006a50:	e633      	b.n	80066ba <__gethex+0x5e>
 8006a52:	2100      	movs	r1, #0
 8006a54:	2201      	movs	r2, #1
 8006a56:	910b      	str	r1, [sp, #44]	; 0x2c
 8006a58:	4692      	mov	sl, r2
 8006a5a:	e653      	b.n	8006704 <__gethex+0xa8>
 8006a5c:	1e67      	subs	r7, r4, #1
 8006a5e:	2e00      	cmp	r6, #0
 8006a60:	d12d      	bne.n	8006abe <__gethex+0x462>
 8006a62:	2f00      	cmp	r7, #0
 8006a64:	dd04      	ble.n	8006a70 <__gethex+0x414>
 8006a66:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a68:	1c39      	adds	r1, r7, #0
 8006a6a:	f001 f93f 	bl	8007cec <__any_on>
 8006a6e:	1c06      	adds	r6, r0, #0
 8006a70:	221f      	movs	r2, #31
 8006a72:	117b      	asrs	r3, r7, #5
 8006a74:	4017      	ands	r7, r2
 8006a76:	2201      	movs	r2, #1
 8006a78:	40ba      	lsls	r2, r7
 8006a7a:	1c17      	adds	r7, r2, #0
 8006a7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	58d3      	ldr	r3, [r2, r3]
 8006a82:	423b      	tst	r3, r7
 8006a84:	d001      	beq.n	8006a8a <__gethex+0x42e>
 8006a86:	2302      	movs	r3, #2
 8006a88:	431e      	orrs	r6, r3
 8006a8a:	1c21      	adds	r1, r4, #0
 8006a8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a8e:	465f      	mov	r7, fp
 8006a90:	f7ff fd56 	bl	8006540 <rshift>
 8006a94:	687f      	ldr	r7, [r7, #4]
 8006a96:	1b2d      	subs	r5, r5, r4
 8006a98:	970b      	str	r7, [sp, #44]	; 0x2c
 8006a9a:	2402      	movs	r4, #2
 8006a9c:	e6b6      	b.n	800680c <__gethex+0x1b0>
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	4692      	mov	sl, r2
 8006aa2:	9b08      	ldr	r3, [sp, #32]
 8006aa4:	18e9      	adds	r1, r5, r3
 8006aa6:	780b      	ldrb	r3, [r1, #0]
 8006aa8:	5cf2      	ldrb	r2, [r6, r3]
 8006aaa:	1c0d      	adds	r5, r1, #0
 8006aac:	2a00      	cmp	r2, #0
 8006aae:	d004      	beq.n	8006aba <__gethex+0x45e>
 8006ab0:	3501      	adds	r5, #1
 8006ab2:	782b      	ldrb	r3, [r5, #0]
 8006ab4:	5cf2      	ldrb	r2, [r6, r3]
 8006ab6:	2a00      	cmp	r2, #0
 8006ab8:	d1fa      	bne.n	8006ab0 <__gethex+0x454>
 8006aba:	4689      	mov	r9, r1
 8006abc:	e61e      	b.n	80066fc <__gethex+0xa0>
 8006abe:	2601      	movs	r6, #1
 8006ac0:	e7d6      	b.n	8006a70 <__gethex+0x414>
 8006ac2:	1c20      	adds	r0, r4, #0
 8006ac4:	9907      	ldr	r1, [sp, #28]
 8006ac6:	9a08      	ldr	r2, [sp, #32]
 8006ac8:	f7f9 fb56 	bl	8000178 <strncmp>
 8006acc:	1c25      	adds	r5, r4, #0
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d0e5      	beq.n	8006a9e <__gethex+0x442>
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	468a      	mov	sl, r1
 8006ad6:	e60c      	b.n	80066f2 <__gethex+0x96>
 8006ad8:	46a9      	mov	r9, r5
 8006ada:	2701      	movs	r7, #1
 8006adc:	e5f9      	b.n	80066d2 <__gethex+0x76>
 8006ade:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	d000      	beq.n	8006ae6 <__gethex+0x48a>
 8006ae4:	e76b      	b.n	80069be <__gethex+0x362>
 8006ae6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006ae8:	603b      	str	r3, [r7, #0]
 8006aea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006aec:	2301      	movs	r3, #1
 8006aee:	613b      	str	r3, [r7, #16]
 8006af0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006af2:	981a      	ldr	r0, [sp, #104]	; 0x68
 8006af4:	603b      	str	r3, [r7, #0]
 8006af6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006af8:	2462      	movs	r4, #98	; 0x62
 8006afa:	6007      	str	r7, [r0, #0]
 8006afc:	e613      	b.n	8006726 <__gethex+0xca>
 8006afe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006b00:	2200      	movs	r2, #0
 8006b02:	468a      	mov	sl, r1
 8006b04:	4690      	mov	r8, r2
 8006b06:	e65e      	b.n	80067c6 <__gethex+0x16a>
 8006b08:	2602      	movs	r6, #2
 8006b0a:	e788      	b.n	8006a1e <__gethex+0x3c2>
 8006b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d100      	bne.n	8006b14 <__gethex+0x4b8>
 8006b12:	e687      	b.n	8006824 <__gethex+0x1c8>
 8006b14:	e6f1      	b.n	80068fa <__gethex+0x29e>
 8006b16:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006b18:	2301      	movs	r3, #1
 8006b1a:	1bdb      	subs	r3, r3, r7
 8006b1c:	e7f7      	b.n	8006b0e <__gethex+0x4b2>
 8006b1e:	42ac      	cmp	r4, r5
 8006b20:	d000      	beq.n	8006b24 <__gethex+0x4c8>
 8006b22:	e74c      	b.n	80069be <__gethex+0x362>
 8006b24:	2d01      	cmp	r5, #1
 8006b26:	ddde      	ble.n	8006ae6 <__gethex+0x48a>
 8006b28:	1e69      	subs	r1, r5, #1
 8006b2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b2c:	f001 f8de 	bl	8007cec <__any_on>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	d100      	bne.n	8006b36 <__gethex+0x4da>
 8006b34:	e743      	b.n	80069be <__gethex+0x362>
 8006b36:	4658      	mov	r0, fp
 8006b38:	6843      	ldr	r3, [r0, #4]
 8006b3a:	e7d4      	b.n	8006ae6 <__gethex+0x48a>
 8006b3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006b3e:	2a00      	cmp	r2, #0
 8006b40:	d100      	bne.n	8006b44 <__gethex+0x4e8>
 8006b42:	e73c      	b.n	80069be <__gethex+0x362>
 8006b44:	e7cf      	b.n	8006ae6 <__gethex+0x48a>
 8006b46:	3201      	adds	r2, #1
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	e6f3      	b.n	8006934 <__gethex+0x2d8>
 8006b4c:	4658      	mov	r0, fp
 8006b4e:	6803      	ldr	r3, [r0, #0]
 8006b50:	3b01      	subs	r3, #1
 8006b52:	2422      	movs	r4, #34	; 0x22
 8006b54:	42ab      	cmp	r3, r5
 8006b56:	d000      	beq.n	8006b5a <__gethex+0x4fe>
 8006b58:	e666      	b.n	8006828 <__gethex+0x1cc>
 8006b5a:	231f      	movs	r3, #31
 8006b5c:	402b      	ands	r3, r5
 8006b5e:	2201      	movs	r2, #1
 8006b60:	409a      	lsls	r2, r3
 8006b62:	1c13      	adds	r3, r2, #0
 8006b64:	116a      	asrs	r2, r5, #5
 8006b66:	3204      	adds	r2, #4
 8006b68:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006b6a:	0092      	lsls	r2, r2, #2
 8006b6c:	18ba      	adds	r2, r7, r2
 8006b6e:	6852      	ldr	r2, [r2, #4]
 8006b70:	4013      	ands	r3, r2
 8006b72:	1e5a      	subs	r2, r3, #1
 8006b74:	4193      	sbcs	r3, r2
 8006b76:	1ae4      	subs	r4, r4, r3
 8006b78:	e656      	b.n	8006828 <__gethex+0x1cc>
 8006b7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b7c:	6849      	ldr	r1, [r1, #4]
 8006b7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006b80:	9103      	str	r1, [sp, #12]
 8006b82:	3101      	adds	r1, #1
 8006b84:	f000 fc28 	bl	80073d8 <_Balloc>
 8006b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b8a:	6912      	ldr	r2, [r2, #16]
 8006b8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b8e:	9202      	str	r2, [sp, #8]
 8006b90:	3202      	adds	r2, #2
 8006b92:	1c07      	adds	r7, r0, #0
 8006b94:	310c      	adds	r1, #12
 8006b96:	0092      	lsls	r2, r2, #2
 8006b98:	300c      	adds	r0, #12
 8006b9a:	f000 fbcf 	bl	800733c <memcpy>
 8006b9e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006ba0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ba2:	f000 fc43 	bl	800742c <_Bfree>
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	970a      	str	r7, [sp, #40]	; 0x28
 8006baa:	e6bb      	b.n	8006924 <__gethex+0x2c8>

08006bac <__hexnan>:
 8006bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bae:	4644      	mov	r4, r8
 8006bb0:	465f      	mov	r7, fp
 8006bb2:	4656      	mov	r6, sl
 8006bb4:	464d      	mov	r5, r9
 8006bb6:	b4f0      	push	{r4, r5, r6, r7}
 8006bb8:	b087      	sub	sp, #28
 8006bba:	9005      	str	r0, [sp, #20]
 8006bbc:	4f71      	ldr	r7, [pc, #452]	; (8006d84 <__hexnan+0x1d8>)
 8006bbe:	2330      	movs	r3, #48	; 0x30
 8006bc0:	5cfb      	ldrb	r3, [r7, r3]
 8006bc2:	1c0c      	adds	r4, r1, #0
 8006bc4:	4690      	mov	r8, r2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d100      	bne.n	8006bcc <__hexnan+0x20>
 8006bca:	e0cc      	b.n	8006d66 <__hexnan+0x1ba>
 8006bcc:	6822      	ldr	r2, [r4, #0]
 8006bce:	211f      	movs	r1, #31
 8006bd0:	1153      	asrs	r3, r2, #5
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4011      	ands	r1, r2
 8006bd6:	4443      	add	r3, r8
 8006bd8:	9104      	str	r1, [sp, #16]
 8006bda:	2900      	cmp	r1, #0
 8006bdc:	d000      	beq.n	8006be0 <__hexnan+0x34>
 8006bde:	3304      	adds	r3, #4
 8006be0:	3b04      	subs	r3, #4
 8006be2:	9303      	str	r3, [sp, #12]
 8006be4:	9903      	ldr	r1, [sp, #12]
 8006be6:	9c05      	ldr	r4, [sp, #20]
 8006be8:	2300      	movs	r3, #0
 8006bea:	600b      	str	r3, [r1, #0]
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	4689      	mov	r9, r1
 8006bf0:	1c0e      	adds	r6, r1, #0
 8006bf2:	7859      	ldrb	r1, [r3, #1]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	9202      	str	r2, [sp, #8]
 8006bfa:	4694      	mov	ip, r2
 8006bfc:	2900      	cmp	r1, #0
 8006bfe:	d03c      	beq.n	8006c7a <__hexnan+0xce>
 8006c00:	5c7a      	ldrb	r2, [r7, r1]
 8006c02:	2a00      	cmp	r2, #0
 8006c04:	d166      	bne.n	8006cd4 <__hexnan+0x128>
 8006c06:	2920      	cmp	r1, #32
 8006c08:	d878      	bhi.n	8006cfc <__hexnan+0x150>
 8006c0a:	9c02      	ldr	r4, [sp, #8]
 8006c0c:	45a4      	cmp	ip, r4
 8006c0e:	dd30      	ble.n	8006c72 <__hexnan+0xc6>
 8006c10:	0fc1      	lsrs	r1, r0, #31
 8006c12:	2407      	movs	r4, #7
 8006c14:	4284      	cmp	r4, r0
 8006c16:	414a      	adcs	r2, r1
 8006c18:	0612      	lsls	r2, r2, #24
 8006c1a:	d020      	beq.n	8006c5e <__hexnan+0xb2>
 8006c1c:	454e      	cmp	r6, r9
 8006c1e:	d21e      	bcs.n	8006c5e <__hexnan+0xb2>
 8006c20:	2108      	movs	r1, #8
 8006c22:	1a08      	subs	r0, r1, r0
 8006c24:	0080      	lsls	r0, r0, #2
 8006c26:	4682      	mov	sl, r0
 8006c28:	2220      	movs	r2, #32
 8006c2a:	1a14      	subs	r4, r2, r0
 8006c2c:	1c1a      	adds	r2, r3, #0
 8006c2e:	4653      	mov	r3, sl
 8006c30:	46a3      	mov	fp, r4
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	6834      	ldr	r4, [r6, #0]
 8006c36:	1c30      	adds	r0, r6, #0
 8006c38:	1d31      	adds	r1, r6, #4
 8006c3a:	464d      	mov	r5, r9
 8006c3c:	4692      	mov	sl, r2
 8006c3e:	46b1      	mov	r9, r6
 8006c40:	465e      	mov	r6, fp
 8006c42:	680a      	ldr	r2, [r1, #0]
 8006c44:	1c13      	adds	r3, r2, #0
 8006c46:	40b3      	lsls	r3, r6
 8006c48:	431c      	orrs	r4, r3
 8006c4a:	9b00      	ldr	r3, [sp, #0]
 8006c4c:	c010      	stmia	r0!, {r4}
 8006c4e:	1c14      	adds	r4, r2, #0
 8006c50:	40dc      	lsrs	r4, r3
 8006c52:	c110      	stmia	r1!, {r4}
 8006c54:	4285      	cmp	r5, r0
 8006c56:	d8f4      	bhi.n	8006c42 <__hexnan+0x96>
 8006c58:	464e      	mov	r6, r9
 8006c5a:	4653      	mov	r3, sl
 8006c5c:	46a9      	mov	r9, r5
 8006c5e:	2008      	movs	r0, #8
 8006c60:	4546      	cmp	r6, r8
 8006c62:	d906      	bls.n	8006c72 <__hexnan+0xc6>
 8006c64:	3e04      	subs	r6, #4
 8006c66:	2400      	movs	r4, #0
 8006c68:	4662      	mov	r2, ip
 8006c6a:	6034      	str	r4, [r6, #0]
 8006c6c:	9202      	str	r2, [sp, #8]
 8006c6e:	46b1      	mov	r9, r6
 8006c70:	2000      	movs	r0, #0
 8006c72:	3301      	adds	r3, #1
 8006c74:	7859      	ldrb	r1, [r3, #1]
 8006c76:	2900      	cmp	r1, #0
 8006c78:	d1c2      	bne.n	8006c00 <__hexnan+0x54>
 8006c7a:	4662      	mov	r2, ip
 8006c7c:	2a00      	cmp	r2, #0
 8006c7e:	d040      	beq.n	8006d02 <__hexnan+0x156>
 8006c80:	0fc1      	lsrs	r1, r0, #31
 8006c82:	2300      	movs	r3, #0
 8006c84:	2207      	movs	r2, #7
 8006c86:	4282      	cmp	r2, r0
 8006c88:	414b      	adcs	r3, r1
 8006c8a:	061b      	lsls	r3, r3, #24
 8006c8c:	d001      	beq.n	8006c92 <__hexnan+0xe6>
 8006c8e:	454e      	cmp	r6, r9
 8006c90:	d341      	bcc.n	8006d16 <__hexnan+0x16a>
 8006c92:	45b0      	cmp	r8, r6
 8006c94:	d258      	bcs.n	8006d48 <__hexnan+0x19c>
 8006c96:	9803      	ldr	r0, [sp, #12]
 8006c98:	4642      	mov	r2, r8
 8006c9a:	ce02      	ldmia	r6!, {r1}
 8006c9c:	1c13      	adds	r3, r2, #0
 8006c9e:	c302      	stmia	r3!, {r1}
 8006ca0:	1c1a      	adds	r2, r3, #0
 8006ca2:	42b0      	cmp	r0, r6
 8006ca4:	d2f9      	bcs.n	8006c9a <__hexnan+0xee>
 8006ca6:	9903      	ldr	r1, [sp, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	c304      	stmia	r3!, {r2}
 8006cac:	4299      	cmp	r1, r3
 8006cae:	d2fc      	bcs.n	8006caa <__hexnan+0xfe>
 8006cb0:	9903      	ldr	r1, [sp, #12]
 8006cb2:	680b      	ldr	r3, [r1, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10b      	bne.n	8006cd0 <__hexnan+0x124>
 8006cb8:	9903      	ldr	r1, [sp, #12]
 8006cba:	4588      	cmp	r8, r1
 8006cbc:	d056      	beq.n	8006d6c <__hexnan+0x1c0>
 8006cbe:	1c0b      	adds	r3, r1, #0
 8006cc0:	4642      	mov	r2, r8
 8006cc2:	e001      	b.n	8006cc8 <__hexnan+0x11c>
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d052      	beq.n	8006d6e <__hexnan+0x1c2>
 8006cc8:	3b04      	subs	r3, #4
 8006cca:	681c      	ldr	r4, [r3, #0]
 8006ccc:	2c00      	cmp	r4, #0
 8006cce:	d0f9      	beq.n	8006cc4 <__hexnan+0x118>
 8006cd0:	2005      	movs	r0, #5
 8006cd2:	e017      	b.n	8006d04 <__hexnan+0x158>
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	448c      	add	ip, r1
 8006cda:	2808      	cmp	r0, #8
 8006cdc:	dc07      	bgt.n	8006cee <__hexnan+0x142>
 8006cde:	6834      	ldr	r4, [r6, #0]
 8006ce0:	0121      	lsls	r1, r4, #4
 8006ce2:	240f      	movs	r4, #15
 8006ce4:	4022      	ands	r2, r4
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	6032      	str	r2, [r6, #0]
 8006cea:	3301      	adds	r3, #1
 8006cec:	e7c2      	b.n	8006c74 <__hexnan+0xc8>
 8006cee:	4546      	cmp	r6, r8
 8006cf0:	d9bf      	bls.n	8006c72 <__hexnan+0xc6>
 8006cf2:	3e04      	subs	r6, #4
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	6031      	str	r1, [r6, #0]
 8006cf8:	2001      	movs	r0, #1
 8006cfa:	e7f2      	b.n	8006ce2 <__hexnan+0x136>
 8006cfc:	4662      	mov	r2, ip
 8006cfe:	2929      	cmp	r1, #41	; 0x29
 8006d00:	d03c      	beq.n	8006d7c <__hexnan+0x1d0>
 8006d02:	2004      	movs	r0, #4
 8006d04:	b007      	add	sp, #28
 8006d06:	bc3c      	pop	{r2, r3, r4, r5}
 8006d08:	4690      	mov	r8, r2
 8006d0a:	4699      	mov	r9, r3
 8006d0c:	46a2      	mov	sl, r4
 8006d0e:	46ab      	mov	fp, r5
 8006d10:	bcf0      	pop	{r4, r5, r6, r7}
 8006d12:	bc02      	pop	{r1}
 8006d14:	4708      	bx	r1
 8006d16:	2308      	movs	r3, #8
 8006d18:	1a18      	subs	r0, r3, r0
 8006d1a:	0080      	lsls	r0, r0, #2
 8006d1c:	2720      	movs	r7, #32
 8006d1e:	1a3f      	subs	r7, r7, r0
 8006d20:	6831      	ldr	r1, [r6, #0]
 8006d22:	1c32      	adds	r2, r6, #0
 8006d24:	1d33      	adds	r3, r6, #4
 8006d26:	46b4      	mov	ip, r6
 8006d28:	1c3e      	adds	r6, r7, #0
 8006d2a:	1c07      	adds	r7, r0, #0
 8006d2c:	4648      	mov	r0, r9
 8006d2e:	681c      	ldr	r4, [r3, #0]
 8006d30:	1c25      	adds	r5, r4, #0
 8006d32:	40b5      	lsls	r5, r6
 8006d34:	4329      	orrs	r1, r5
 8006d36:	c202      	stmia	r2!, {r1}
 8006d38:	1c21      	adds	r1, r4, #0
 8006d3a:	40f9      	lsrs	r1, r7
 8006d3c:	c302      	stmia	r3!, {r1}
 8006d3e:	4290      	cmp	r0, r2
 8006d40:	d8f5      	bhi.n	8006d2e <__hexnan+0x182>
 8006d42:	4666      	mov	r6, ip
 8006d44:	45b0      	cmp	r8, r6
 8006d46:	d3a6      	bcc.n	8006c96 <__hexnan+0xea>
 8006d48:	9a04      	ldr	r2, [sp, #16]
 8006d4a:	2a00      	cmp	r2, #0
 8006d4c:	d013      	beq.n	8006d76 <__hexnan+0x1ca>
 8006d4e:	9904      	ldr	r1, [sp, #16]
 8006d50:	2220      	movs	r2, #32
 8006d52:	2301      	movs	r3, #1
 8006d54:	1a52      	subs	r2, r2, r1
 8006d56:	425b      	negs	r3, r3
 8006d58:	40d3      	lsrs	r3, r2
 8006d5a:	9a03      	ldr	r2, [sp, #12]
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	9c03      	ldr	r4, [sp, #12]
 8006d60:	4013      	ands	r3, r2
 8006d62:	6023      	str	r3, [r4, #0]
 8006d64:	e7a6      	b.n	8006cb4 <__hexnan+0x108>
 8006d66:	f7ff fc4d 	bl	8006604 <__hexdig_init>
 8006d6a:	e72f      	b.n	8006bcc <__hexnan+0x20>
 8006d6c:	4643      	mov	r3, r8
 8006d6e:	2201      	movs	r2, #1
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	2005      	movs	r0, #5
 8006d74:	e7c6      	b.n	8006d04 <__hexnan+0x158>
 8006d76:	9c03      	ldr	r4, [sp, #12]
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	e79b      	b.n	8006cb4 <__hexnan+0x108>
 8006d7c:	9c05      	ldr	r4, [sp, #20]
 8006d7e:	3302      	adds	r3, #2
 8006d80:	6023      	str	r3, [r4, #0]
 8006d82:	e77b      	b.n	8006c7c <__hexnan+0xd0>
 8006d84:	20001e50 	.word	0x20001e50

08006d88 <_malloc_r>:
 8006d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d8a:	4656      	mov	r6, sl
 8006d8c:	4644      	mov	r4, r8
 8006d8e:	465f      	mov	r7, fp
 8006d90:	464d      	mov	r5, r9
 8006d92:	b4f0      	push	{r4, r5, r6, r7}
 8006d94:	1c0c      	adds	r4, r1, #0
 8006d96:	340b      	adds	r4, #11
 8006d98:	b083      	sub	sp, #12
 8006d9a:	1c06      	adds	r6, r0, #0
 8006d9c:	2c16      	cmp	r4, #22
 8006d9e:	d92e      	bls.n	8006dfe <_malloc_r+0x76>
 8006da0:	2307      	movs	r3, #7
 8006da2:	439c      	bics	r4, r3
 8006da4:	0fe3      	lsrs	r3, r4, #31
 8006da6:	428c      	cmp	r4, r1
 8006da8:	d32d      	bcc.n	8006e06 <_malloc_r+0x7e>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d12b      	bne.n	8006e06 <_malloc_r+0x7e>
 8006dae:	1c30      	adds	r0, r6, #0
 8006db0:	f000 fb0c 	bl	80073cc <__malloc_lock>
 8006db4:	4bc0      	ldr	r3, [pc, #768]	; (80070b8 <_malloc_r+0x330>)
 8006db6:	429c      	cmp	r4, r3
 8006db8:	d829      	bhi.n	8006e0e <_malloc_r+0x86>
 8006dba:	08e2      	lsrs	r2, r4, #3
 8006dbc:	4dbf      	ldr	r5, [pc, #764]	; (80070bc <_malloc_r+0x334>)
 8006dbe:	00d3      	lsls	r3, r2, #3
 8006dc0:	18eb      	adds	r3, r5, r3
 8006dc2:	68df      	ldr	r7, [r3, #12]
 8006dc4:	429f      	cmp	r7, r3
 8006dc6:	d100      	bne.n	8006dca <_malloc_r+0x42>
 8006dc8:	e1d8      	b.n	800717c <_malloc_r+0x3f4>
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	2303      	movs	r3, #3
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	4399      	bics	r1, r3
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	60da      	str	r2, [r3, #12]
 8006dd6:	6093      	str	r3, [r2, #8]
 8006dd8:	187b      	adds	r3, r7, r1
 8006dda:	6858      	ldr	r0, [r3, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	4302      	orrs	r2, r0
 8006de0:	605a      	str	r2, [r3, #4]
 8006de2:	1c30      	adds	r0, r6, #0
 8006de4:	f000 faf4 	bl	80073d0 <__malloc_unlock>
 8006de8:	1c38      	adds	r0, r7, #0
 8006dea:	3008      	adds	r0, #8
 8006dec:	b003      	add	sp, #12
 8006dee:	bc3c      	pop	{r2, r3, r4, r5}
 8006df0:	4690      	mov	r8, r2
 8006df2:	4699      	mov	r9, r3
 8006df4:	46a2      	mov	sl, r4
 8006df6:	46ab      	mov	fp, r5
 8006df8:	bcf0      	pop	{r4, r5, r6, r7}
 8006dfa:	bc02      	pop	{r1}
 8006dfc:	4708      	bx	r1
 8006dfe:	2410      	movs	r4, #16
 8006e00:	2300      	movs	r3, #0
 8006e02:	428c      	cmp	r4, r1
 8006e04:	d2d1      	bcs.n	8006daa <_malloc_r+0x22>
 8006e06:	230c      	movs	r3, #12
 8006e08:	6033      	str	r3, [r6, #0]
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	e7ee      	b.n	8006dec <_malloc_r+0x64>
 8006e0e:	0a63      	lsrs	r3, r4, #9
 8006e10:	d100      	bne.n	8006e14 <_malloc_r+0x8c>
 8006e12:	e08b      	b.n	8006f2c <_malloc_r+0x1a4>
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d900      	bls.n	8006e1a <_malloc_r+0x92>
 8006e18:	e142      	b.n	80070a0 <_malloc_r+0x318>
 8006e1a:	09a3      	lsrs	r3, r4, #6
 8006e1c:	3338      	adds	r3, #56	; 0x38
 8006e1e:	4698      	mov	r8, r3
 8006e20:	0059      	lsls	r1, r3, #1
 8006e22:	4da6      	ldr	r5, [pc, #664]	; (80070bc <_malloc_r+0x334>)
 8006e24:	0089      	lsls	r1, r1, #2
 8006e26:	1869      	adds	r1, r5, r1
 8006e28:	68cf      	ldr	r7, [r1, #12]
 8006e2a:	42b9      	cmp	r1, r7
 8006e2c:	d013      	beq.n	8006e56 <_malloc_r+0xce>
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	2303      	movs	r3, #3
 8006e32:	439a      	bics	r2, r3
 8006e34:	1b13      	subs	r3, r2, r4
 8006e36:	2b0f      	cmp	r3, #15
 8006e38:	dc7c      	bgt.n	8006f34 <_malloc_r+0x1ac>
 8006e3a:	2003      	movs	r0, #3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	db07      	blt.n	8006e50 <_malloc_r+0xc8>
 8006e40:	e07c      	b.n	8006f3c <_malloc_r+0x1b4>
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	4382      	bics	r2, r0
 8006e46:	1b13      	subs	r3, r2, r4
 8006e48:	2b0f      	cmp	r3, #15
 8006e4a:	dc73      	bgt.n	8006f34 <_malloc_r+0x1ac>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	da75      	bge.n	8006f3c <_malloc_r+0x1b4>
 8006e50:	68ff      	ldr	r7, [r7, #12]
 8006e52:	42b9      	cmp	r1, r7
 8006e54:	d1f5      	bne.n	8006e42 <_malloc_r+0xba>
 8006e56:	2101      	movs	r1, #1
 8006e58:	4488      	add	r8, r1
 8006e5a:	1c2b      	adds	r3, r5, #0
 8006e5c:	692f      	ldr	r7, [r5, #16]
 8006e5e:	3308      	adds	r3, #8
 8006e60:	429f      	cmp	r7, r3
 8006e62:	d100      	bne.n	8006e66 <_malloc_r+0xde>
 8006e64:	e167      	b.n	8007136 <_malloc_r+0x3ae>
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	2203      	movs	r2, #3
 8006e6a:	4390      	bics	r0, r2
 8006e6c:	1c02      	adds	r2, r0, #0
 8006e6e:	1b01      	subs	r1, r0, r4
 8006e70:	290f      	cmp	r1, #15
 8006e72:	dd00      	ble.n	8006e76 <_malloc_r+0xee>
 8006e74:	e14e      	b.n	8007114 <_malloc_r+0x38c>
 8006e76:	616b      	str	r3, [r5, #20]
 8006e78:	612b      	str	r3, [r5, #16]
 8006e7a:	2900      	cmp	r1, #0
 8006e7c:	da6d      	bge.n	8006f5a <_malloc_r+0x1d2>
 8006e7e:	4b90      	ldr	r3, [pc, #576]	; (80070c0 <_malloc_r+0x338>)
 8006e80:	4298      	cmp	r0, r3
 8006e82:	d900      	bls.n	8006e86 <_malloc_r+0xfe>
 8006e84:	e126      	b.n	80070d4 <_malloc_r+0x34c>
 8006e86:	08c2      	lsrs	r2, r0, #3
 8006e88:	1093      	asrs	r3, r2, #2
 8006e8a:	2001      	movs	r0, #1
 8006e8c:	4098      	lsls	r0, r3
 8006e8e:	686b      	ldr	r3, [r5, #4]
 8006e90:	00d2      	lsls	r2, r2, #3
 8006e92:	4318      	orrs	r0, r3
 8006e94:	18ab      	adds	r3, r5, r2
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	60ba      	str	r2, [r7, #8]
 8006e9c:	6068      	str	r0, [r5, #4]
 8006e9e:	609f      	str	r7, [r3, #8]
 8006ea0:	60d7      	str	r7, [r2, #12]
 8006ea2:	4641      	mov	r1, r8
 8006ea4:	108b      	asrs	r3, r1, #2
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	4099      	lsls	r1, r3
 8006eaa:	4281      	cmp	r1, r0
 8006eac:	d85a      	bhi.n	8006f64 <_malloc_r+0x1dc>
 8006eae:	4201      	tst	r1, r0
 8006eb0:	d10d      	bne.n	8006ece <_malloc_r+0x146>
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	439a      	bics	r2, r3
 8006eb8:	1c13      	adds	r3, r2, #0
 8006eba:	3304      	adds	r3, #4
 8006ebc:	0049      	lsls	r1, r1, #1
 8006ebe:	4698      	mov	r8, r3
 8006ec0:	4201      	tst	r1, r0
 8006ec2:	d104      	bne.n	8006ece <_malloc_r+0x146>
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	0049      	lsls	r1, r1, #1
 8006ec8:	4498      	add	r8, r3
 8006eca:	4201      	tst	r1, r0
 8006ecc:	d0fa      	beq.n	8006ec4 <_malloc_r+0x13c>
 8006ece:	2003      	movs	r0, #3
 8006ed0:	4684      	mov	ip, r0
 8006ed2:	4642      	mov	r2, r8
 8006ed4:	00d3      	lsls	r3, r2, #3
 8006ed6:	195b      	adds	r3, r3, r5
 8006ed8:	469a      	mov	sl, r3
 8006eda:	1c18      	adds	r0, r3, #0
 8006edc:	46c1      	mov	r9, r8
 8006ede:	68c7      	ldr	r7, [r0, #12]
 8006ee0:	42b8      	cmp	r0, r7
 8006ee2:	d107      	bne.n	8006ef4 <_malloc_r+0x16c>
 8006ee4:	e129      	b.n	800713a <_malloc_r+0x3b2>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	db00      	blt.n	8006eec <_malloc_r+0x164>
 8006eea:	e150      	b.n	800718e <_malloc_r+0x406>
 8006eec:	68ff      	ldr	r7, [r7, #12]
 8006eee:	42b8      	cmp	r0, r7
 8006ef0:	d100      	bne.n	8006ef4 <_malloc_r+0x16c>
 8006ef2:	e122      	b.n	800713a <_malloc_r+0x3b2>
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	4663      	mov	r3, ip
 8006ef8:	439a      	bics	r2, r3
 8006efa:	1b13      	subs	r3, r2, r4
 8006efc:	2b0f      	cmp	r3, #15
 8006efe:	ddf2      	ble.n	8006ee6 <_malloc_r+0x15e>
 8006f00:	2001      	movs	r0, #1
 8006f02:	193a      	adds	r2, r7, r4
 8006f04:	4304      	orrs	r4, r0
 8006f06:	68b9      	ldr	r1, [r7, #8]
 8006f08:	607c      	str	r4, [r7, #4]
 8006f0a:	68fc      	ldr	r4, [r7, #12]
 8006f0c:	4318      	orrs	r0, r3
 8006f0e:	60cc      	str	r4, [r1, #12]
 8006f10:	60a1      	str	r1, [r4, #8]
 8006f12:	616a      	str	r2, [r5, #20]
 8006f14:	612a      	str	r2, [r5, #16]
 8006f16:	3508      	adds	r5, #8
 8006f18:	6050      	str	r0, [r2, #4]
 8006f1a:	60d5      	str	r5, [r2, #12]
 8006f1c:	1c30      	adds	r0, r6, #0
 8006f1e:	6095      	str	r5, [r2, #8]
 8006f20:	50d3      	str	r3, [r2, r3]
 8006f22:	f000 fa55 	bl	80073d0 <__malloc_unlock>
 8006f26:	1c38      	adds	r0, r7, #0
 8006f28:	3008      	adds	r0, #8
 8006f2a:	e75f      	b.n	8006dec <_malloc_r+0x64>
 8006f2c:	08e1      	lsrs	r1, r4, #3
 8006f2e:	4688      	mov	r8, r1
 8006f30:	0049      	lsls	r1, r1, #1
 8006f32:	e776      	b.n	8006e22 <_malloc_r+0x9a>
 8006f34:	2301      	movs	r3, #1
 8006f36:	425b      	negs	r3, r3
 8006f38:	4498      	add	r8, r3
 8006f3a:	e78c      	b.n	8006e56 <_malloc_r+0xce>
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	68f9      	ldr	r1, [r7, #12]
 8006f40:	18ba      	adds	r2, r7, r2
 8006f42:	6850      	ldr	r0, [r2, #4]
 8006f44:	60d9      	str	r1, [r3, #12]
 8006f46:	608b      	str	r3, [r1, #8]
 8006f48:	2301      	movs	r3, #1
 8006f4a:	4303      	orrs	r3, r0
 8006f4c:	1c30      	adds	r0, r6, #0
 8006f4e:	6053      	str	r3, [r2, #4]
 8006f50:	f000 fa3e 	bl	80073d0 <__malloc_unlock>
 8006f54:	1c38      	adds	r0, r7, #0
 8006f56:	3008      	adds	r0, #8
 8006f58:	e748      	b.n	8006dec <_malloc_r+0x64>
 8006f5a:	183a      	adds	r2, r7, r0
 8006f5c:	6851      	ldr	r1, [r2, #4]
 8006f5e:	2301      	movs	r3, #1
 8006f60:	430b      	orrs	r3, r1
 8006f62:	e7f3      	b.n	8006f4c <_malloc_r+0x1c4>
 8006f64:	68af      	ldr	r7, [r5, #8]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	2303      	movs	r3, #3
 8006f6a:	4398      	bics	r0, r3
 8006f6c:	4681      	mov	r9, r0
 8006f6e:	4284      	cmp	r4, r0
 8006f70:	d803      	bhi.n	8006f7a <_malloc_r+0x1f2>
 8006f72:	1b03      	subs	r3, r0, r4
 8006f74:	2b0f      	cmp	r3, #15
 8006f76:	dd00      	ble.n	8006f7a <_malloc_r+0x1f2>
 8006f78:	e084      	b.n	8007084 <_malloc_r+0x2fc>
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	1879      	adds	r1, r7, r1
 8006f7e:	4a51      	ldr	r2, [pc, #324]	; (80070c4 <_malloc_r+0x33c>)
 8006f80:	9101      	str	r1, [sp, #4]
 8006f82:	4951      	ldr	r1, [pc, #324]	; (80070c8 <_malloc_r+0x340>)
 8006f84:	6810      	ldr	r0, [r2, #0]
 8006f86:	4692      	mov	sl, r2
 8006f88:	688a      	ldr	r2, [r1, #8]
 8006f8a:	1823      	adds	r3, r4, r0
 8006f8c:	468b      	mov	fp, r1
 8006f8e:	3201      	adds	r2, #1
 8006f90:	d100      	bne.n	8006f94 <_malloc_r+0x20c>
 8006f92:	e13f      	b.n	8007214 <_malloc_r+0x48c>
 8006f94:	484d      	ldr	r0, [pc, #308]	; (80070cc <_malloc_r+0x344>)
 8006f96:	181b      	adds	r3, r3, r0
 8006f98:	0b1b      	lsrs	r3, r3, #12
 8006f9a:	031b      	lsls	r3, r3, #12
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	9900      	ldr	r1, [sp, #0]
 8006fa0:	1c30      	adds	r0, r6, #0
 8006fa2:	f001 f8c5 	bl	8008130 <_sbrk_r>
 8006fa6:	1c01      	adds	r1, r0, #0
 8006fa8:	4680      	mov	r8, r0
 8006faa:	3101      	adds	r1, #1
 8006fac:	d05f      	beq.n	800706e <_malloc_r+0x2e6>
 8006fae:	9a01      	ldr	r2, [sp, #4]
 8006fb0:	4282      	cmp	r2, r0
 8006fb2:	d900      	bls.n	8006fb6 <_malloc_r+0x22e>
 8006fb4:	e103      	b.n	80071be <_malloc_r+0x436>
 8006fb6:	4651      	mov	r1, sl
 8006fb8:	9800      	ldr	r0, [sp, #0]
 8006fba:	6849      	ldr	r1, [r1, #4]
 8006fbc:	1843      	adds	r3, r0, r1
 8006fbe:	9801      	ldr	r0, [sp, #4]
 8006fc0:	4652      	mov	r2, sl
 8006fc2:	6053      	str	r3, [r2, #4]
 8006fc4:	4540      	cmp	r0, r8
 8006fc6:	d100      	bne.n	8006fca <_malloc_r+0x242>
 8006fc8:	e132      	b.n	8007230 <_malloc_r+0x4a8>
 8006fca:	465a      	mov	r2, fp
 8006fcc:	6892      	ldr	r2, [r2, #8]
 8006fce:	3201      	adds	r2, #1
 8006fd0:	d100      	bne.n	8006fd4 <_malloc_r+0x24c>
 8006fd2:	e144      	b.n	800725e <_malloc_r+0x4d6>
 8006fd4:	9801      	ldr	r0, [sp, #4]
 8006fd6:	4641      	mov	r1, r8
 8006fd8:	1a0a      	subs	r2, r1, r0
 8006fda:	189b      	adds	r3, r3, r2
 8006fdc:	4651      	mov	r1, sl
 8006fde:	604b      	str	r3, [r1, #4]
 8006fe0:	2307      	movs	r3, #7
 8006fe2:	4642      	mov	r2, r8
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	d100      	bne.n	8006fea <_malloc_r+0x262>
 8006fe8:	e0fb      	b.n	80071e2 <_malloc_r+0x45a>
 8006fea:	1ad2      	subs	r2, r2, r3
 8006fec:	3208      	adds	r2, #8
 8006fee:	4690      	mov	r8, r2
 8006ff0:	4a37      	ldr	r2, [pc, #220]	; (80070d0 <_malloc_r+0x348>)
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	9800      	ldr	r0, [sp, #0]
 8006ff6:	1c02      	adds	r2, r0, #0
 8006ff8:	4442      	add	r2, r8
 8006ffa:	0512      	lsls	r2, r2, #20
 8006ffc:	0d12      	lsrs	r2, r2, #20
 8006ffe:	1a9a      	subs	r2, r3, r2
 8007000:	1c11      	adds	r1, r2, #0
 8007002:	1c30      	adds	r0, r6, #0
 8007004:	4693      	mov	fp, r2
 8007006:	f001 f893 	bl	8008130 <_sbrk_r>
 800700a:	1c41      	adds	r1, r0, #1
 800700c:	d100      	bne.n	8007010 <_malloc_r+0x288>
 800700e:	e11a      	b.n	8007246 <_malloc_r+0x4be>
 8007010:	4642      	mov	r2, r8
 8007012:	1a80      	subs	r0, r0, r2
 8007014:	4458      	add	r0, fp
 8007016:	2301      	movs	r3, #1
 8007018:	4318      	orrs	r0, r3
 800701a:	4652      	mov	r2, sl
 800701c:	6851      	ldr	r1, [r2, #4]
 800701e:	1c0b      	adds	r3, r1, #0
 8007020:	445b      	add	r3, fp
 8007022:	4641      	mov	r1, r8
 8007024:	6053      	str	r3, [r2, #4]
 8007026:	60a9      	str	r1, [r5, #8]
 8007028:	6048      	str	r0, [r1, #4]
 800702a:	42af      	cmp	r7, r5
 800702c:	d013      	beq.n	8007056 <_malloc_r+0x2ce>
 800702e:	464a      	mov	r2, r9
 8007030:	2a0f      	cmp	r2, #15
 8007032:	d800      	bhi.n	8007036 <_malloc_r+0x2ae>
 8007034:	e0e1      	b.n	80071fa <_malloc_r+0x472>
 8007036:	464a      	mov	r2, r9
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	2107      	movs	r1, #7
 800703c:	3a0c      	subs	r2, #12
 800703e:	438a      	bics	r2, r1
 8007040:	2101      	movs	r1, #1
 8007042:	4001      	ands	r1, r0
 8007044:	4311      	orrs	r1, r2
 8007046:	6079      	str	r1, [r7, #4]
 8007048:	2005      	movs	r0, #5
 800704a:	18b9      	adds	r1, r7, r2
 800704c:	6048      	str	r0, [r1, #4]
 800704e:	6088      	str	r0, [r1, #8]
 8007050:	2a0f      	cmp	r2, #15
 8007052:	d900      	bls.n	8007056 <_malloc_r+0x2ce>
 8007054:	e0fb      	b.n	800724e <_malloc_r+0x4c6>
 8007056:	4652      	mov	r2, sl
 8007058:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800705a:	4293      	cmp	r3, r2
 800705c:	d901      	bls.n	8007062 <_malloc_r+0x2da>
 800705e:	4650      	mov	r0, sl
 8007060:	62c3      	str	r3, [r0, #44]	; 0x2c
 8007062:	4651      	mov	r1, sl
 8007064:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8007066:	428b      	cmp	r3, r1
 8007068:	d901      	bls.n	800706e <_malloc_r+0x2e6>
 800706a:	4652      	mov	r2, sl
 800706c:	6313      	str	r3, [r2, #48]	; 0x30
 800706e:	68af      	ldr	r7, [r5, #8]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	2303      	movs	r3, #3
 8007074:	439a      	bics	r2, r3
 8007076:	1b13      	subs	r3, r2, r4
 8007078:	4294      	cmp	r4, r2
 800707a:	d900      	bls.n	800707e <_malloc_r+0x2f6>
 800707c:	e0a3      	b.n	80071c6 <_malloc_r+0x43e>
 800707e:	2b0f      	cmp	r3, #15
 8007080:	dc00      	bgt.n	8007084 <_malloc_r+0x2fc>
 8007082:	e0a0      	b.n	80071c6 <_malloc_r+0x43e>
 8007084:	2201      	movs	r2, #1
 8007086:	1c21      	adds	r1, r4, #0
 8007088:	4311      	orrs	r1, r2
 800708a:	193c      	adds	r4, r7, r4
 800708c:	4313      	orrs	r3, r2
 800708e:	6079      	str	r1, [r7, #4]
 8007090:	1c30      	adds	r0, r6, #0
 8007092:	60ac      	str	r4, [r5, #8]
 8007094:	6063      	str	r3, [r4, #4]
 8007096:	f000 f99b 	bl	80073d0 <__malloc_unlock>
 800709a:	1c38      	adds	r0, r7, #0
 800709c:	3008      	adds	r0, #8
 800709e:	e6a5      	b.n	8006dec <_malloc_r+0x64>
 80070a0:	2b14      	cmp	r3, #20
 80070a2:	d800      	bhi.n	80070a6 <_malloc_r+0x31e>
 80070a4:	e082      	b.n	80071ac <_malloc_r+0x424>
 80070a6:	2b54      	cmp	r3, #84	; 0x54
 80070a8:	d900      	bls.n	80070ac <_malloc_r+0x324>
 80070aa:	e091      	b.n	80071d0 <_malloc_r+0x448>
 80070ac:	0b23      	lsrs	r3, r4, #12
 80070ae:	336e      	adds	r3, #110	; 0x6e
 80070b0:	4698      	mov	r8, r3
 80070b2:	0059      	lsls	r1, r3, #1
 80070b4:	e6b5      	b.n	8006e22 <_malloc_r+0x9a>
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	000001f7 	.word	0x000001f7
 80070bc:	200005c0 	.word	0x200005c0
 80070c0:	000001ff 	.word	0x000001ff
 80070c4:	20000b9c 	.word	0x20000b9c
 80070c8:	200009c0 	.word	0x200009c0
 80070cc:	0000100f 	.word	0x0000100f
 80070d0:	00001008 	.word	0x00001008
 80070d4:	0a43      	lsrs	r3, r0, #9
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d96c      	bls.n	80071b4 <_malloc_r+0x42c>
 80070da:	2b14      	cmp	r3, #20
 80070dc:	d900      	bls.n	80070e0 <_malloc_r+0x358>
 80070de:	e09c      	b.n	800721a <_malloc_r+0x492>
 80070e0:	335b      	adds	r3, #91	; 0x5b
 80070e2:	469a      	mov	sl, r3
 80070e4:	0058      	lsls	r0, r3, #1
 80070e6:	0080      	lsls	r0, r0, #2
 80070e8:	1940      	adds	r0, r0, r5
 80070ea:	6883      	ldr	r3, [r0, #8]
 80070ec:	4681      	mov	r9, r0
 80070ee:	2003      	movs	r0, #3
 80070f0:	4684      	mov	ip, r0
 80070f2:	454b      	cmp	r3, r9
 80070f4:	d078      	beq.n	80071e8 <_malloc_r+0x460>
 80070f6:	6859      	ldr	r1, [r3, #4]
 80070f8:	4660      	mov	r0, ip
 80070fa:	4381      	bics	r1, r0
 80070fc:	428a      	cmp	r2, r1
 80070fe:	d202      	bcs.n	8007106 <_malloc_r+0x37e>
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	4599      	cmp	r9, r3
 8007104:	d1f7      	bne.n	80070f6 <_malloc_r+0x36e>
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	6868      	ldr	r0, [r5, #4]
 800710a:	60fa      	str	r2, [r7, #12]
 800710c:	60bb      	str	r3, [r7, #8]
 800710e:	60df      	str	r7, [r3, #12]
 8007110:	6097      	str	r7, [r2, #8]
 8007112:	e6c6      	b.n	8006ea2 <_malloc_r+0x11a>
 8007114:	2001      	movs	r0, #1
 8007116:	193a      	adds	r2, r7, r4
 8007118:	4304      	orrs	r4, r0
 800711a:	4308      	orrs	r0, r1
 800711c:	607c      	str	r4, [r7, #4]
 800711e:	616a      	str	r2, [r5, #20]
 8007120:	612a      	str	r2, [r5, #16]
 8007122:	6050      	str	r0, [r2, #4]
 8007124:	60d3      	str	r3, [r2, #12]
 8007126:	1c30      	adds	r0, r6, #0
 8007128:	6093      	str	r3, [r2, #8]
 800712a:	5051      	str	r1, [r2, r1]
 800712c:	f000 f950 	bl	80073d0 <__malloc_unlock>
 8007130:	1c38      	adds	r0, r7, #0
 8007132:	3008      	adds	r0, #8
 8007134:	e65a      	b.n	8006dec <_malloc_r+0x64>
 8007136:	6868      	ldr	r0, [r5, #4]
 8007138:	e6b3      	b.n	8006ea2 <_malloc_r+0x11a>
 800713a:	2201      	movs	r2, #1
 800713c:	4491      	add	r9, r2
 800713e:	4663      	mov	r3, ip
 8007140:	464a      	mov	r2, r9
 8007142:	3008      	adds	r0, #8
 8007144:	4213      	tst	r3, r2
 8007146:	d000      	beq.n	800714a <_malloc_r+0x3c2>
 8007148:	e6c9      	b.n	8006ede <_malloc_r+0x156>
 800714a:	4652      	mov	r2, sl
 800714c:	4643      	mov	r3, r8
 800714e:	4660      	mov	r0, ip
 8007150:	4218      	tst	r0, r3
 8007152:	d100      	bne.n	8007156 <_malloc_r+0x3ce>
 8007154:	e098      	b.n	8007288 <_malloc_r+0x500>
 8007156:	1c10      	adds	r0, r2, #0
 8007158:	6812      	ldr	r2, [r2, #0]
 800715a:	3808      	subs	r0, #8
 800715c:	3b01      	subs	r3, #1
 800715e:	4282      	cmp	r2, r0
 8007160:	d0f5      	beq.n	800714e <_malloc_r+0x3c6>
 8007162:	686b      	ldr	r3, [r5, #4]
 8007164:	0049      	lsls	r1, r1, #1
 8007166:	4299      	cmp	r1, r3
 8007168:	d900      	bls.n	800716c <_malloc_r+0x3e4>
 800716a:	e6fb      	b.n	8006f64 <_malloc_r+0x1dc>
 800716c:	2900      	cmp	r1, #0
 800716e:	d100      	bne.n	8007172 <_malloc_r+0x3ea>
 8007170:	e6f8      	b.n	8006f64 <_malloc_r+0x1dc>
 8007172:	4219      	tst	r1, r3
 8007174:	d100      	bne.n	8007178 <_malloc_r+0x3f0>
 8007176:	e08b      	b.n	8007290 <_malloc_r+0x508>
 8007178:	46c8      	mov	r8, r9
 800717a:	e6aa      	b.n	8006ed2 <_malloc_r+0x14a>
 800717c:	1c3b      	adds	r3, r7, #0
 800717e:	697f      	ldr	r7, [r7, #20]
 8007180:	3202      	adds	r2, #2
 8007182:	3308      	adds	r3, #8
 8007184:	4690      	mov	r8, r2
 8007186:	42bb      	cmp	r3, r7
 8007188:	d100      	bne.n	800718c <_malloc_r+0x404>
 800718a:	e666      	b.n	8006e5a <_malloc_r+0xd2>
 800718c:	e61d      	b.n	8006dca <_malloc_r+0x42>
 800718e:	18ba      	adds	r2, r7, r2
 8007190:	6850      	ldr	r0, [r2, #4]
 8007192:	2301      	movs	r3, #1
 8007194:	4303      	orrs	r3, r0
 8007196:	6053      	str	r3, [r2, #4]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	1c30      	adds	r0, r6, #0
 800719e:	60da      	str	r2, [r3, #12]
 80071a0:	6093      	str	r3, [r2, #8]
 80071a2:	f000 f915 	bl	80073d0 <__malloc_unlock>
 80071a6:	1c38      	adds	r0, r7, #0
 80071a8:	3008      	adds	r0, #8
 80071aa:	e61f      	b.n	8006dec <_malloc_r+0x64>
 80071ac:	335b      	adds	r3, #91	; 0x5b
 80071ae:	4698      	mov	r8, r3
 80071b0:	0059      	lsls	r1, r3, #1
 80071b2:	e636      	b.n	8006e22 <_malloc_r+0x9a>
 80071b4:	0981      	lsrs	r1, r0, #6
 80071b6:	3138      	adds	r1, #56	; 0x38
 80071b8:	468a      	mov	sl, r1
 80071ba:	0048      	lsls	r0, r1, #1
 80071bc:	e793      	b.n	80070e6 <_malloc_r+0x35e>
 80071be:	42af      	cmp	r7, r5
 80071c0:	d000      	beq.n	80071c4 <_malloc_r+0x43c>
 80071c2:	e754      	b.n	800706e <_malloc_r+0x2e6>
 80071c4:	e6f7      	b.n	8006fb6 <_malloc_r+0x22e>
 80071c6:	1c30      	adds	r0, r6, #0
 80071c8:	f000 f902 	bl	80073d0 <__malloc_unlock>
 80071cc:	2000      	movs	r0, #0
 80071ce:	e60d      	b.n	8006dec <_malloc_r+0x64>
 80071d0:	22aa      	movs	r2, #170	; 0xaa
 80071d2:	0052      	lsls	r2, r2, #1
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d815      	bhi.n	8007204 <_malloc_r+0x47c>
 80071d8:	0be3      	lsrs	r3, r4, #15
 80071da:	3377      	adds	r3, #119	; 0x77
 80071dc:	4698      	mov	r8, r3
 80071de:	0059      	lsls	r1, r3, #1
 80071e0:	e61f      	b.n	8006e22 <_malloc_r+0x9a>
 80071e2:	2380      	movs	r3, #128	; 0x80
 80071e4:	015b      	lsls	r3, r3, #5
 80071e6:	e705      	b.n	8006ff4 <_malloc_r+0x26c>
 80071e8:	4652      	mov	r2, sl
 80071ea:	1091      	asrs	r1, r2, #2
 80071ec:	2001      	movs	r0, #1
 80071ee:	4088      	lsls	r0, r1
 80071f0:	6869      	ldr	r1, [r5, #4]
 80071f2:	4308      	orrs	r0, r1
 80071f4:	6068      	str	r0, [r5, #4]
 80071f6:	1c1a      	adds	r2, r3, #0
 80071f8:	e787      	b.n	800710a <_malloc_r+0x382>
 80071fa:	2301      	movs	r3, #1
 80071fc:	604b      	str	r3, [r1, #4]
 80071fe:	4647      	mov	r7, r8
 8007200:	2200      	movs	r2, #0
 8007202:	e738      	b.n	8007076 <_malloc_r+0x2ee>
 8007204:	4a26      	ldr	r2, [pc, #152]	; (80072a0 <_malloc_r+0x518>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d80e      	bhi.n	8007228 <_malloc_r+0x4a0>
 800720a:	0ca3      	lsrs	r3, r4, #18
 800720c:	337c      	adds	r3, #124	; 0x7c
 800720e:	4698      	mov	r8, r3
 8007210:	0059      	lsls	r1, r3, #1
 8007212:	e606      	b.n	8006e22 <_malloc_r+0x9a>
 8007214:	3310      	adds	r3, #16
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	e6c1      	b.n	8006f9e <_malloc_r+0x216>
 800721a:	2b54      	cmp	r3, #84	; 0x54
 800721c:	d823      	bhi.n	8007266 <_malloc_r+0x4de>
 800721e:	0b01      	lsrs	r1, r0, #12
 8007220:	316e      	adds	r1, #110	; 0x6e
 8007222:	468a      	mov	sl, r1
 8007224:	0048      	lsls	r0, r1, #1
 8007226:	e75e      	b.n	80070e6 <_malloc_r+0x35e>
 8007228:	227e      	movs	r2, #126	; 0x7e
 800722a:	21fc      	movs	r1, #252	; 0xfc
 800722c:	4690      	mov	r8, r2
 800722e:	e5f8      	b.n	8006e22 <_malloc_r+0x9a>
 8007230:	0502      	lsls	r2, r0, #20
 8007232:	d000      	beq.n	8007236 <_malloc_r+0x4ae>
 8007234:	e6c9      	b.n	8006fca <_malloc_r+0x242>
 8007236:	9900      	ldr	r1, [sp, #0]
 8007238:	1c08      	adds	r0, r1, #0
 800723a:	68aa      	ldr	r2, [r5, #8]
 800723c:	4448      	add	r0, r9
 800723e:	2101      	movs	r1, #1
 8007240:	4301      	orrs	r1, r0
 8007242:	6051      	str	r1, [r2, #4]
 8007244:	e707      	b.n	8007056 <_malloc_r+0x2ce>
 8007246:	2300      	movs	r3, #0
 8007248:	2001      	movs	r0, #1
 800724a:	469b      	mov	fp, r3
 800724c:	e6e5      	b.n	800701a <_malloc_r+0x292>
 800724e:	1c39      	adds	r1, r7, #0
 8007250:	3108      	adds	r1, #8
 8007252:	1c30      	adds	r0, r6, #0
 8007254:	f7ff f850 	bl	80062f8 <_free_r>
 8007258:	4651      	mov	r1, sl
 800725a:	684b      	ldr	r3, [r1, #4]
 800725c:	e6fb      	b.n	8007056 <_malloc_r+0x2ce>
 800725e:	4643      	mov	r3, r8
 8007260:	4658      	mov	r0, fp
 8007262:	6083      	str	r3, [r0, #8]
 8007264:	e6bc      	b.n	8006fe0 <_malloc_r+0x258>
 8007266:	21aa      	movs	r1, #170	; 0xaa
 8007268:	0049      	lsls	r1, r1, #1
 800726a:	428b      	cmp	r3, r1
 800726c:	d804      	bhi.n	8007278 <_malloc_r+0x4f0>
 800726e:	0bc1      	lsrs	r1, r0, #15
 8007270:	3177      	adds	r1, #119	; 0x77
 8007272:	468a      	mov	sl, r1
 8007274:	0048      	lsls	r0, r1, #1
 8007276:	e736      	b.n	80070e6 <_malloc_r+0x35e>
 8007278:	4909      	ldr	r1, [pc, #36]	; (80072a0 <_malloc_r+0x518>)
 800727a:	428b      	cmp	r3, r1
 800727c:	d80c      	bhi.n	8007298 <_malloc_r+0x510>
 800727e:	0c81      	lsrs	r1, r0, #18
 8007280:	317c      	adds	r1, #124	; 0x7c
 8007282:	468a      	mov	sl, r1
 8007284:	0048      	lsls	r0, r1, #1
 8007286:	e72e      	b.n	80070e6 <_malloc_r+0x35e>
 8007288:	686b      	ldr	r3, [r5, #4]
 800728a:	438b      	bics	r3, r1
 800728c:	606b      	str	r3, [r5, #4]
 800728e:	e769      	b.n	8007164 <_malloc_r+0x3dc>
 8007290:	2204      	movs	r2, #4
 8007292:	4491      	add	r9, r2
 8007294:	0049      	lsls	r1, r1, #1
 8007296:	e76c      	b.n	8007172 <_malloc_r+0x3ea>
 8007298:	217e      	movs	r1, #126	; 0x7e
 800729a:	20fc      	movs	r0, #252	; 0xfc
 800729c:	468a      	mov	sl, r1
 800729e:	e722      	b.n	80070e6 <_malloc_r+0x35e>
 80072a0:	00000554 	.word	0x00000554

080072a4 <memchr>:
 80072a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072a6:	060c      	lsls	r4, r1, #24
 80072a8:	0e24      	lsrs	r4, r4, #24
 80072aa:	0783      	lsls	r3, r0, #30
 80072ac:	d03f      	beq.n	800732e <memchr+0x8a>
 80072ae:	1e53      	subs	r3, r2, #1
 80072b0:	2a00      	cmp	r2, #0
 80072b2:	d01f      	beq.n	80072f4 <memchr+0x50>
 80072b4:	7802      	ldrb	r2, [r0, #0]
 80072b6:	42a2      	cmp	r2, r4
 80072b8:	d01d      	beq.n	80072f6 <memchr+0x52>
 80072ba:	2503      	movs	r5, #3
 80072bc:	e005      	b.n	80072ca <memchr+0x26>
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d018      	beq.n	80072f4 <memchr+0x50>
 80072c2:	7802      	ldrb	r2, [r0, #0]
 80072c4:	3b01      	subs	r3, #1
 80072c6:	42a2      	cmp	r2, r4
 80072c8:	d015      	beq.n	80072f6 <memchr+0x52>
 80072ca:	3001      	adds	r0, #1
 80072cc:	4228      	tst	r0, r5
 80072ce:	d1f6      	bne.n	80072be <memchr+0x1a>
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d813      	bhi.n	80072fc <memchr+0x58>
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00d      	beq.n	80072f4 <memchr+0x50>
 80072d8:	7802      	ldrb	r2, [r0, #0]
 80072da:	42a2      	cmp	r2, r4
 80072dc:	d00b      	beq.n	80072f6 <memchr+0x52>
 80072de:	1c42      	adds	r2, r0, #1
 80072e0:	18c3      	adds	r3, r0, r3
 80072e2:	e004      	b.n	80072ee <memchr+0x4a>
 80072e4:	3201      	adds	r2, #1
 80072e6:	1e51      	subs	r1, r2, #1
 80072e8:	7809      	ldrb	r1, [r1, #0]
 80072ea:	42a1      	cmp	r1, r4
 80072ec:	d003      	beq.n	80072f6 <memchr+0x52>
 80072ee:	1c10      	adds	r0, r2, #0
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d1f7      	bne.n	80072e4 <memchr+0x40>
 80072f4:	2000      	movs	r0, #0
 80072f6:	bcf0      	pop	{r4, r5, r6, r7}
 80072f8:	bc02      	pop	{r1}
 80072fa:	4708      	bx	r1
 80072fc:	27ff      	movs	r7, #255	; 0xff
 80072fe:	4039      	ands	r1, r7
 8007300:	020f      	lsls	r7, r1, #8
 8007302:	4339      	orrs	r1, r7
 8007304:	4d0b      	ldr	r5, [pc, #44]	; (8007334 <memchr+0x90>)
 8007306:	040f      	lsls	r7, r1, #16
 8007308:	430f      	orrs	r7, r1
 800730a:	46ac      	mov	ip, r5
 800730c:	1c01      	adds	r1, r0, #0
 800730e:	680a      	ldr	r2, [r1, #0]
 8007310:	4e09      	ldr	r6, [pc, #36]	; (8007338 <memchr+0x94>)
 8007312:	407a      	eors	r2, r7
 8007314:	1995      	adds	r5, r2, r6
 8007316:	4395      	bics	r5, r2
 8007318:	1c2a      	adds	r2, r5, #0
 800731a:	4665      	mov	r5, ip
 800731c:	3004      	adds	r0, #4
 800731e:	422a      	tst	r2, r5
 8007320:	d103      	bne.n	800732a <memchr+0x86>
 8007322:	3b04      	subs	r3, #4
 8007324:	2b03      	cmp	r3, #3
 8007326:	d8f1      	bhi.n	800730c <memchr+0x68>
 8007328:	e7d4      	b.n	80072d4 <memchr+0x30>
 800732a:	1c08      	adds	r0, r1, #0
 800732c:	e7d2      	b.n	80072d4 <memchr+0x30>
 800732e:	1c13      	adds	r3, r2, #0
 8007330:	e7ce      	b.n	80072d0 <memchr+0x2c>
 8007332:	46c0      	nop			; (mov r8, r8)
 8007334:	80808080 	.word	0x80808080
 8007338:	fefefeff 	.word	0xfefefeff

0800733c <memcpy>:
 800733c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800733e:	2a0f      	cmp	r2, #15
 8007340:	d93a      	bls.n	80073b8 <memcpy+0x7c>
 8007342:	1c0b      	adds	r3, r1, #0
 8007344:	4303      	orrs	r3, r0
 8007346:	079c      	lsls	r4, r3, #30
 8007348:	d13b      	bne.n	80073c2 <memcpy+0x86>
 800734a:	1c13      	adds	r3, r2, #0
 800734c:	3b10      	subs	r3, #16
 800734e:	091b      	lsrs	r3, r3, #4
 8007350:	3301      	adds	r3, #1
 8007352:	011b      	lsls	r3, r3, #4
 8007354:	18cc      	adds	r4, r1, r3
 8007356:	1c05      	adds	r5, r0, #0
 8007358:	680e      	ldr	r6, [r1, #0]
 800735a:	602e      	str	r6, [r5, #0]
 800735c:	684e      	ldr	r6, [r1, #4]
 800735e:	606e      	str	r6, [r5, #4]
 8007360:	688e      	ldr	r6, [r1, #8]
 8007362:	60ae      	str	r6, [r5, #8]
 8007364:	68ce      	ldr	r6, [r1, #12]
 8007366:	3110      	adds	r1, #16
 8007368:	60ee      	str	r6, [r5, #12]
 800736a:	3510      	adds	r5, #16
 800736c:	428c      	cmp	r4, r1
 800736e:	d1f3      	bne.n	8007358 <memcpy+0x1c>
 8007370:	250f      	movs	r5, #15
 8007372:	18c3      	adds	r3, r0, r3
 8007374:	4015      	ands	r5, r2
 8007376:	2d03      	cmp	r5, #3
 8007378:	d926      	bls.n	80073c8 <memcpy+0x8c>
 800737a:	3d04      	subs	r5, #4
 800737c:	08ad      	lsrs	r5, r5, #2
 800737e:	00af      	lsls	r7, r5, #2
 8007380:	3704      	adds	r7, #4
 8007382:	46ac      	mov	ip, r5
 8007384:	1c21      	adds	r1, r4, #0
 8007386:	19e7      	adds	r7, r4, r7
 8007388:	1c1d      	adds	r5, r3, #0
 800738a:	c940      	ldmia	r1!, {r6}
 800738c:	c540      	stmia	r5!, {r6}
 800738e:	42b9      	cmp	r1, r7
 8007390:	d1fb      	bne.n	800738a <memcpy+0x4e>
 8007392:	4661      	mov	r1, ip
 8007394:	3101      	adds	r1, #1
 8007396:	0089      	lsls	r1, r1, #2
 8007398:	2503      	movs	r5, #3
 800739a:	402a      	ands	r2, r5
 800739c:	1864      	adds	r4, r4, r1
 800739e:	185b      	adds	r3, r3, r1
 80073a0:	2a00      	cmp	r2, #0
 80073a2:	d006      	beq.n	80073b2 <memcpy+0x76>
 80073a4:	189a      	adds	r2, r3, r2
 80073a6:	7821      	ldrb	r1, [r4, #0]
 80073a8:	7019      	strb	r1, [r3, #0]
 80073aa:	3301      	adds	r3, #1
 80073ac:	3401      	adds	r4, #1
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d1f9      	bne.n	80073a6 <memcpy+0x6a>
 80073b2:	bcf0      	pop	{r4, r5, r6, r7}
 80073b4:	bc02      	pop	{r1}
 80073b6:	4708      	bx	r1
 80073b8:	1c0c      	adds	r4, r1, #0
 80073ba:	1c03      	adds	r3, r0, #0
 80073bc:	2a00      	cmp	r2, #0
 80073be:	d1f1      	bne.n	80073a4 <memcpy+0x68>
 80073c0:	e7f7      	b.n	80073b2 <memcpy+0x76>
 80073c2:	1c03      	adds	r3, r0, #0
 80073c4:	1c0c      	adds	r4, r1, #0
 80073c6:	e7ed      	b.n	80073a4 <memcpy+0x68>
 80073c8:	1c2a      	adds	r2, r5, #0
 80073ca:	e7f7      	b.n	80073bc <memcpy+0x80>

080073cc <__malloc_lock>:
 80073cc:	4770      	bx	lr
 80073ce:	46c0      	nop			; (mov r8, r8)

080073d0 <__malloc_unlock>:
 80073d0:	4770      	bx	lr
 80073d2:	46c0      	nop			; (mov r8, r8)
 80073d4:	0000      	movs	r0, r0
	...

080073d8 <_Balloc>:
 80073d8:	b570      	push	{r4, r5, r6, lr}
 80073da:	1c04      	adds	r4, r0, #0
 80073dc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80073de:	1c0d      	adds	r5, r1, #0
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d00c      	beq.n	80073fe <_Balloc+0x26>
 80073e4:	00aa      	lsls	r2, r5, #2
 80073e6:	1882      	adds	r2, r0, r2
 80073e8:	6810      	ldr	r0, [r2, #0]
 80073ea:	2800      	cmp	r0, #0
 80073ec:	d011      	beq.n	8007412 <_Balloc+0x3a>
 80073ee:	6803      	ldr	r3, [r0, #0]
 80073f0:	6013      	str	r3, [r2, #0]
 80073f2:	2200      	movs	r2, #0
 80073f4:	6102      	str	r2, [r0, #16]
 80073f6:	60c2      	str	r2, [r0, #12]
 80073f8:	bc70      	pop	{r4, r5, r6}
 80073fa:	bc02      	pop	{r1}
 80073fc:	4708      	bx	r1
 80073fe:	1c20      	adds	r0, r4, #0
 8007400:	2104      	movs	r1, #4
 8007402:	2221      	movs	r2, #33	; 0x21
 8007404:	f001 fba8 	bl	8008b58 <_calloc_r>
 8007408:	64e0      	str	r0, [r4, #76]	; 0x4c
 800740a:	2800      	cmp	r0, #0
 800740c:	d1ea      	bne.n	80073e4 <_Balloc+0xc>
 800740e:	2000      	movs	r0, #0
 8007410:	e7f2      	b.n	80073f8 <_Balloc+0x20>
 8007412:	2601      	movs	r6, #1
 8007414:	40ae      	lsls	r6, r5
 8007416:	1d72      	adds	r2, r6, #5
 8007418:	0092      	lsls	r2, r2, #2
 800741a:	1c20      	adds	r0, r4, #0
 800741c:	2101      	movs	r1, #1
 800741e:	f001 fb9b 	bl	8008b58 <_calloc_r>
 8007422:	2800      	cmp	r0, #0
 8007424:	d0f3      	beq.n	800740e <_Balloc+0x36>
 8007426:	6045      	str	r5, [r0, #4]
 8007428:	6086      	str	r6, [r0, #8]
 800742a:	e7e2      	b.n	80073f2 <_Balloc+0x1a>

0800742c <_Bfree>:
 800742c:	b500      	push	{lr}
 800742e:	2900      	cmp	r1, #0
 8007430:	d006      	beq.n	8007440 <_Bfree+0x14>
 8007432:	684a      	ldr	r2, [r1, #4]
 8007434:	0093      	lsls	r3, r2, #2
 8007436:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007438:	18d3      	adds	r3, r2, r3
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	600a      	str	r2, [r1, #0]
 800743e:	6019      	str	r1, [r3, #0]
 8007440:	bc01      	pop	{r0}
 8007442:	4700      	bx	r0

08007444 <__multadd>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	464d      	mov	r5, r9
 8007448:	4644      	mov	r4, r8
 800744a:	465f      	mov	r7, fp
 800744c:	4656      	mov	r6, sl
 800744e:	4698      	mov	r8, r3
 8007450:	690b      	ldr	r3, [r1, #16]
 8007452:	b4f0      	push	{r4, r5, r6, r7}
 8007454:	1c0d      	adds	r5, r1, #0
 8007456:	4683      	mov	fp, r0
 8007458:	468a      	mov	sl, r1
 800745a:	4699      	mov	r9, r3
 800745c:	3514      	adds	r5, #20
 800745e:	2400      	movs	r4, #0
 8007460:	682e      	ldr	r6, [r5, #0]
 8007462:	0437      	lsls	r7, r6, #16
 8007464:	0c3f      	lsrs	r7, r7, #16
 8007466:	4357      	muls	r7, r2
 8007468:	0c36      	lsrs	r6, r6, #16
 800746a:	4356      	muls	r6, r2
 800746c:	4447      	add	r7, r8
 800746e:	0c3b      	lsrs	r3, r7, #16
 8007470:	199e      	adds	r6, r3, r6
 8007472:	043f      	lsls	r7, r7, #16
 8007474:	0c31      	lsrs	r1, r6, #16
 8007476:	0c3f      	lsrs	r7, r7, #16
 8007478:	0436      	lsls	r6, r6, #16
 800747a:	19f6      	adds	r6, r6, r7
 800747c:	3401      	adds	r4, #1
 800747e:	4688      	mov	r8, r1
 8007480:	c540      	stmia	r5!, {r6}
 8007482:	45a1      	cmp	r9, r4
 8007484:	dcec      	bgt.n	8007460 <__multadd+0x1c>
 8007486:	2900      	cmp	r1, #0
 8007488:	d00d      	beq.n	80074a6 <__multadd+0x62>
 800748a:	4652      	mov	r2, sl
 800748c:	6892      	ldr	r2, [r2, #8]
 800748e:	4591      	cmp	r9, r2
 8007490:	da12      	bge.n	80074b8 <__multadd+0x74>
 8007492:	464b      	mov	r3, r9
 8007494:	3304      	adds	r3, #4
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4453      	add	r3, sl
 800749a:	4642      	mov	r2, r8
 800749c:	605a      	str	r2, [r3, #4]
 800749e:	464b      	mov	r3, r9
 80074a0:	3301      	adds	r3, #1
 80074a2:	4651      	mov	r1, sl
 80074a4:	610b      	str	r3, [r1, #16]
 80074a6:	4650      	mov	r0, sl
 80074a8:	bc3c      	pop	{r2, r3, r4, r5}
 80074aa:	4690      	mov	r8, r2
 80074ac:	4699      	mov	r9, r3
 80074ae:	46a2      	mov	sl, r4
 80074b0:	46ab      	mov	fp, r5
 80074b2:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b4:	bc02      	pop	{r1}
 80074b6:	4708      	bx	r1
 80074b8:	4653      	mov	r3, sl
 80074ba:	6859      	ldr	r1, [r3, #4]
 80074bc:	4658      	mov	r0, fp
 80074be:	3101      	adds	r1, #1
 80074c0:	f7ff ff8a 	bl	80073d8 <_Balloc>
 80074c4:	4653      	mov	r3, sl
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	4651      	mov	r1, sl
 80074ca:	3202      	adds	r2, #2
 80074cc:	1c04      	adds	r4, r0, #0
 80074ce:	310c      	adds	r1, #12
 80074d0:	0092      	lsls	r2, r2, #2
 80074d2:	300c      	adds	r0, #12
 80074d4:	f7ff ff32 	bl	800733c <memcpy>
 80074d8:	4651      	mov	r1, sl
 80074da:	6849      	ldr	r1, [r1, #4]
 80074dc:	008b      	lsls	r3, r1, #2
 80074de:	4659      	mov	r1, fp
 80074e0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80074e2:	18d3      	adds	r3, r2, r3
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	4651      	mov	r1, sl
 80074e8:	600a      	str	r2, [r1, #0]
 80074ea:	46a2      	mov	sl, r4
 80074ec:	6019      	str	r1, [r3, #0]
 80074ee:	e7d0      	b.n	8007492 <__multadd+0x4e>

080074f0 <__s2b>:
 80074f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f2:	4646      	mov	r6, r8
 80074f4:	464f      	mov	r7, r9
 80074f6:	b4c0      	push	{r6, r7}
 80074f8:	1c06      	adds	r6, r0, #0
 80074fa:	1c18      	adds	r0, r3, #0
 80074fc:	1c0c      	adds	r4, r1, #0
 80074fe:	3008      	adds	r0, #8
 8007500:	2109      	movs	r1, #9
 8007502:	4690      	mov	r8, r2
 8007504:	1c1f      	adds	r7, r3, #0
 8007506:	f001 ec98 	blx	8008e38 <__aeabi_idiv>
 800750a:	2801      	cmp	r0, #1
 800750c:	dd3b      	ble.n	8007586 <__s2b+0x96>
 800750e:	2501      	movs	r5, #1
 8007510:	2100      	movs	r1, #0
 8007512:	006d      	lsls	r5, r5, #1
 8007514:	3101      	adds	r1, #1
 8007516:	42a8      	cmp	r0, r5
 8007518:	dcfb      	bgt.n	8007512 <__s2b+0x22>
 800751a:	1c30      	adds	r0, r6, #0
 800751c:	f7ff ff5c 	bl	80073d8 <_Balloc>
 8007520:	9b08      	ldr	r3, [sp, #32]
 8007522:	6143      	str	r3, [r0, #20]
 8007524:	2301      	movs	r3, #1
 8007526:	6103      	str	r3, [r0, #16]
 8007528:	4643      	mov	r3, r8
 800752a:	1c01      	adds	r1, r0, #0
 800752c:	2b09      	cmp	r3, #9
 800752e:	dd27      	ble.n	8007580 <__s2b+0x90>
 8007530:	2309      	movs	r3, #9
 8007532:	191b      	adds	r3, r3, r4
 8007534:	4699      	mov	r9, r3
 8007536:	4444      	add	r4, r8
 8007538:	1c1d      	adds	r5, r3, #0
 800753a:	782b      	ldrb	r3, [r5, #0]
 800753c:	1c30      	adds	r0, r6, #0
 800753e:	3b30      	subs	r3, #48	; 0x30
 8007540:	220a      	movs	r2, #10
 8007542:	f7ff ff7f 	bl	8007444 <__multadd>
 8007546:	3501      	adds	r5, #1
 8007548:	1c01      	adds	r1, r0, #0
 800754a:	42a5      	cmp	r5, r4
 800754c:	d1f5      	bne.n	800753a <__s2b+0x4a>
 800754e:	464c      	mov	r4, r9
 8007550:	4444      	add	r4, r8
 8007552:	3c08      	subs	r4, #8
 8007554:	4643      	mov	r3, r8
 8007556:	429f      	cmp	r7, r3
 8007558:	dd0b      	ble.n	8007572 <__s2b+0x82>
 800755a:	1aff      	subs	r7, r7, r3
 800755c:	19e7      	adds	r7, r4, r7
 800755e:	7823      	ldrb	r3, [r4, #0]
 8007560:	1c30      	adds	r0, r6, #0
 8007562:	3b30      	subs	r3, #48	; 0x30
 8007564:	220a      	movs	r2, #10
 8007566:	f7ff ff6d 	bl	8007444 <__multadd>
 800756a:	3401      	adds	r4, #1
 800756c:	1c01      	adds	r1, r0, #0
 800756e:	42bc      	cmp	r4, r7
 8007570:	d1f5      	bne.n	800755e <__s2b+0x6e>
 8007572:	1c08      	adds	r0, r1, #0
 8007574:	bc0c      	pop	{r2, r3}
 8007576:	4690      	mov	r8, r2
 8007578:	4699      	mov	r9, r3
 800757a:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757c:	bc02      	pop	{r1}
 800757e:	4708      	bx	r1
 8007580:	340a      	adds	r4, #10
 8007582:	2309      	movs	r3, #9
 8007584:	e7e7      	b.n	8007556 <__s2b+0x66>
 8007586:	2100      	movs	r1, #0
 8007588:	e7c7      	b.n	800751a <__s2b+0x2a>
 800758a:	46c0      	nop			; (mov r8, r8)

0800758c <__hi0bits>:
 800758c:	1c03      	adds	r3, r0, #0
 800758e:	0c02      	lsrs	r2, r0, #16
 8007590:	b500      	push	{lr}
 8007592:	2000      	movs	r0, #0
 8007594:	2a00      	cmp	r2, #0
 8007596:	d101      	bne.n	800759c <__hi0bits+0x10>
 8007598:	041b      	lsls	r3, r3, #16
 800759a:	2010      	movs	r0, #16
 800759c:	0e1a      	lsrs	r2, r3, #24
 800759e:	d101      	bne.n	80075a4 <__hi0bits+0x18>
 80075a0:	3008      	adds	r0, #8
 80075a2:	021b      	lsls	r3, r3, #8
 80075a4:	0f1a      	lsrs	r2, r3, #28
 80075a6:	d101      	bne.n	80075ac <__hi0bits+0x20>
 80075a8:	3004      	adds	r0, #4
 80075aa:	011b      	lsls	r3, r3, #4
 80075ac:	0f9a      	lsrs	r2, r3, #30
 80075ae:	d101      	bne.n	80075b4 <__hi0bits+0x28>
 80075b0:	3002      	adds	r0, #2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	db03      	blt.n	80075c0 <__hi0bits+0x34>
 80075b8:	3001      	adds	r0, #1
 80075ba:	005a      	lsls	r2, r3, #1
 80075bc:	d400      	bmi.n	80075c0 <__hi0bits+0x34>
 80075be:	2020      	movs	r0, #32
 80075c0:	bc02      	pop	{r1}
 80075c2:	4708      	bx	r1

080075c4 <__lo0bits>:
 80075c4:	6803      	ldr	r3, [r0, #0]
 80075c6:	b500      	push	{lr}
 80075c8:	0759      	lsls	r1, r3, #29
 80075ca:	d00a      	beq.n	80075e2 <__lo0bits+0x1e>
 80075cc:	2200      	movs	r2, #0
 80075ce:	07d9      	lsls	r1, r3, #31
 80075d0:	d404      	bmi.n	80075dc <__lo0bits+0x18>
 80075d2:	079a      	lsls	r2, r3, #30
 80075d4:	d421      	bmi.n	800761a <__lo0bits+0x56>
 80075d6:	089b      	lsrs	r3, r3, #2
 80075d8:	6003      	str	r3, [r0, #0]
 80075da:	2202      	movs	r2, #2
 80075dc:	1c10      	adds	r0, r2, #0
 80075de:	bc02      	pop	{r1}
 80075e0:	4708      	bx	r1
 80075e2:	0419      	lsls	r1, r3, #16
 80075e4:	2200      	movs	r2, #0
 80075e6:	2900      	cmp	r1, #0
 80075e8:	d101      	bne.n	80075ee <__lo0bits+0x2a>
 80075ea:	0c1b      	lsrs	r3, r3, #16
 80075ec:	2210      	movs	r2, #16
 80075ee:	21ff      	movs	r1, #255	; 0xff
 80075f0:	4219      	tst	r1, r3
 80075f2:	d101      	bne.n	80075f8 <__lo0bits+0x34>
 80075f4:	3208      	adds	r2, #8
 80075f6:	0a1b      	lsrs	r3, r3, #8
 80075f8:	0719      	lsls	r1, r3, #28
 80075fa:	d101      	bne.n	8007600 <__lo0bits+0x3c>
 80075fc:	3204      	adds	r2, #4
 80075fe:	091b      	lsrs	r3, r3, #4
 8007600:	0799      	lsls	r1, r3, #30
 8007602:	d101      	bne.n	8007608 <__lo0bits+0x44>
 8007604:	3202      	adds	r2, #2
 8007606:	089b      	lsrs	r3, r3, #2
 8007608:	07d9      	lsls	r1, r3, #31
 800760a:	d404      	bmi.n	8007616 <__lo0bits+0x52>
 800760c:	085b      	lsrs	r3, r3, #1
 800760e:	d101      	bne.n	8007614 <__lo0bits+0x50>
 8007610:	2220      	movs	r2, #32
 8007612:	e7e3      	b.n	80075dc <__lo0bits+0x18>
 8007614:	3201      	adds	r2, #1
 8007616:	6003      	str	r3, [r0, #0]
 8007618:	e7e0      	b.n	80075dc <__lo0bits+0x18>
 800761a:	085b      	lsrs	r3, r3, #1
 800761c:	6003      	str	r3, [r0, #0]
 800761e:	2201      	movs	r2, #1
 8007620:	e7dc      	b.n	80075dc <__lo0bits+0x18>
 8007622:	46c0      	nop			; (mov r8, r8)

08007624 <__i2b>:
 8007624:	b510      	push	{r4, lr}
 8007626:	1c0c      	adds	r4, r1, #0
 8007628:	2101      	movs	r1, #1
 800762a:	f7ff fed5 	bl	80073d8 <_Balloc>
 800762e:	2301      	movs	r3, #1
 8007630:	6144      	str	r4, [r0, #20]
 8007632:	6103      	str	r3, [r0, #16]
 8007634:	bc10      	pop	{r4}
 8007636:	bc02      	pop	{r1}
 8007638:	4708      	bx	r1
 800763a:	46c0      	nop			; (mov r8, r8)

0800763c <__multiply>:
 800763c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800763e:	465f      	mov	r7, fp
 8007640:	4656      	mov	r6, sl
 8007642:	464d      	mov	r5, r9
 8007644:	4644      	mov	r4, r8
 8007646:	b4f0      	push	{r4, r5, r6, r7}
 8007648:	690e      	ldr	r6, [r1, #16]
 800764a:	6917      	ldr	r7, [r2, #16]
 800764c:	b085      	sub	sp, #20
 800764e:	1c0d      	adds	r5, r1, #0
 8007650:	4690      	mov	r8, r2
 8007652:	42be      	cmp	r6, r7
 8007654:	da04      	bge.n	8007660 <__multiply+0x24>
 8007656:	1c33      	adds	r3, r6, #0
 8007658:	1c15      	adds	r5, r2, #0
 800765a:	1c3e      	adds	r6, r7, #0
 800765c:	4688      	mov	r8, r1
 800765e:	1c1f      	adds	r7, r3, #0
 8007660:	68ab      	ldr	r3, [r5, #8]
 8007662:	19f2      	adds	r2, r6, r7
 8007664:	6869      	ldr	r1, [r5, #4]
 8007666:	4691      	mov	r9, r2
 8007668:	429a      	cmp	r2, r3
 800766a:	dd00      	ble.n	800766e <__multiply+0x32>
 800766c:	3101      	adds	r1, #1
 800766e:	f7ff feb3 	bl	80073d8 <_Balloc>
 8007672:	464b      	mov	r3, r9
 8007674:	3304      	adds	r3, #4
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	18c3      	adds	r3, r0, r3
 800767a:	1c02      	adds	r2, r0, #0
 800767c:	3304      	adds	r3, #4
 800767e:	469c      	mov	ip, r3
 8007680:	3214      	adds	r2, #20
 8007682:	9003      	str	r0, [sp, #12]
 8007684:	1c13      	adds	r3, r2, #0
 8007686:	2100      	movs	r1, #0
 8007688:	4660      	mov	r0, ip
 800768a:	4562      	cmp	r2, ip
 800768c:	d203      	bcs.n	8007696 <__multiply+0x5a>
 800768e:	c302      	stmia	r3!, {r1}
 8007690:	4298      	cmp	r0, r3
 8007692:	d8fc      	bhi.n	800768e <__multiply+0x52>
 8007694:	4684      	mov	ip, r0
 8007696:	3604      	adds	r6, #4
 8007698:	1d3b      	adds	r3, r7, #4
 800769a:	00b6      	lsls	r6, r6, #2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	1c29      	adds	r1, r5, #0
 80076a0:	4443      	add	r3, r8
 80076a2:	19ad      	adds	r5, r5, r6
 80076a4:	4646      	mov	r6, r8
 80076a6:	3114      	adds	r1, #20
 80076a8:	3304      	adds	r3, #4
 80076aa:	3614      	adds	r6, #20
 80076ac:	9102      	str	r1, [sp, #8]
 80076ae:	3504      	adds	r5, #4
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	4693      	mov	fp, r2
 80076b4:	429e      	cmp	r6, r3
 80076b6:	d253      	bcs.n	8007760 <__multiply+0x124>
 80076b8:	6833      	ldr	r3, [r6, #0]
 80076ba:	041f      	lsls	r7, r3, #16
 80076bc:	0c3f      	lsrs	r7, r7, #16
 80076be:	d023      	beq.n	8007708 <__multiply+0xcc>
 80076c0:	1c39      	adds	r1, r7, #0
 80076c2:	2400      	movs	r4, #0
 80076c4:	9a02      	ldr	r2, [sp, #8]
 80076c6:	46aa      	mov	sl, r5
 80076c8:	465b      	mov	r3, fp
 80076ca:	1c27      	adds	r7, r4, #0
 80076cc:	46b0      	mov	r8, r6
 80076ce:	1c0d      	adds	r5, r1, #0
 80076d0:	ca10      	ldmia	r2!, {r4}
 80076d2:	0420      	lsls	r0, r4, #16
 80076d4:	0c00      	lsrs	r0, r0, #16
 80076d6:	1c29      	adds	r1, r5, #0
 80076d8:	4341      	muls	r1, r0
 80076da:	0c24      	lsrs	r4, r4, #16
 80076dc:	436c      	muls	r4, r5
 80076de:	681e      	ldr	r6, [r3, #0]
 80076e0:	0430      	lsls	r0, r6, #16
 80076e2:	0c00      	lsrs	r0, r0, #16
 80076e4:	1808      	adds	r0, r1, r0
 80076e6:	19c0      	adds	r0, r0, r7
 80076e8:	0c31      	lsrs	r1, r6, #16
 80076ea:	0c07      	lsrs	r7, r0, #16
 80076ec:	1861      	adds	r1, r4, r1
 80076ee:	19c9      	adds	r1, r1, r7
 80076f0:	0400      	lsls	r0, r0, #16
 80076f2:	0c0f      	lsrs	r7, r1, #16
 80076f4:	0c00      	lsrs	r0, r0, #16
 80076f6:	0409      	lsls	r1, r1, #16
 80076f8:	4301      	orrs	r1, r0
 80076fa:	c302      	stmia	r3!, {r1}
 80076fc:	4592      	cmp	sl, r2
 80076fe:	d8e7      	bhi.n	80076d0 <__multiply+0x94>
 8007700:	601f      	str	r7, [r3, #0]
 8007702:	4646      	mov	r6, r8
 8007704:	6833      	ldr	r3, [r6, #0]
 8007706:	4655      	mov	r5, sl
 8007708:	0c1f      	lsrs	r7, r3, #16
 800770a:	d023      	beq.n	8007754 <__multiply+0x118>
 800770c:	4659      	mov	r1, fp
 800770e:	680a      	ldr	r2, [r1, #0]
 8007710:	9b02      	ldr	r3, [sp, #8]
 8007712:	9500      	str	r5, [sp, #0]
 8007714:	1c10      	adds	r0, r2, #0
 8007716:	2400      	movs	r4, #0
 8007718:	46b2      	mov	sl, r6
 800771a:	4698      	mov	r8, r3
 800771c:	cb40      	ldmia	r3!, {r6}
 800771e:	0436      	lsls	r6, r6, #16
 8007720:	0c36      	lsrs	r6, r6, #16
 8007722:	437e      	muls	r6, r7
 8007724:	0c00      	lsrs	r0, r0, #16
 8007726:	1830      	adds	r0, r6, r0
 8007728:	1904      	adds	r4, r0, r4
 800772a:	0412      	lsls	r2, r2, #16
 800772c:	0420      	lsls	r0, r4, #16
 800772e:	0c12      	lsrs	r2, r2, #16
 8007730:	4302      	orrs	r2, r0
 8007732:	c104      	stmia	r1!, {r2}
 8007734:	6808      	ldr	r0, [r1, #0]
 8007736:	4645      	mov	r5, r8
 8007738:	0402      	lsls	r2, r0, #16
 800773a:	0c16      	lsrs	r6, r2, #16
 800773c:	886a      	ldrh	r2, [r5, #2]
 800773e:	437a      	muls	r2, r7
 8007740:	0c24      	lsrs	r4, r4, #16
 8007742:	18b2      	adds	r2, r6, r2
 8007744:	9e00      	ldr	r6, [sp, #0]
 8007746:	1912      	adds	r2, r2, r4
 8007748:	0c14      	lsrs	r4, r2, #16
 800774a:	429e      	cmp	r6, r3
 800774c:	d8e5      	bhi.n	800771a <__multiply+0xde>
 800774e:	9d00      	ldr	r5, [sp, #0]
 8007750:	600a      	str	r2, [r1, #0]
 8007752:	4656      	mov	r6, sl
 8007754:	9a01      	ldr	r2, [sp, #4]
 8007756:	2104      	movs	r1, #4
 8007758:	3604      	adds	r6, #4
 800775a:	448b      	add	fp, r1
 800775c:	42b2      	cmp	r2, r6
 800775e:	d8ab      	bhi.n	80076b8 <__multiply+0x7c>
 8007760:	464a      	mov	r2, r9
 8007762:	2a00      	cmp	r2, #0
 8007764:	dd0e      	ble.n	8007784 <__multiply+0x148>
 8007766:	4663      	mov	r3, ip
 8007768:	3b04      	subs	r3, #4
 800776a:	681c      	ldr	r4, [r3, #0]
 800776c:	2c00      	cmp	r4, #0
 800776e:	d109      	bne.n	8007784 <__multiply+0x148>
 8007770:	464a      	mov	r2, r9
 8007772:	e003      	b.n	800777c <__multiply+0x140>
 8007774:	3b04      	subs	r3, #4
 8007776:	681d      	ldr	r5, [r3, #0]
 8007778:	2d00      	cmp	r5, #0
 800777a:	d102      	bne.n	8007782 <__multiply+0x146>
 800777c:	3a01      	subs	r2, #1
 800777e:	2a00      	cmp	r2, #0
 8007780:	d1f8      	bne.n	8007774 <__multiply+0x138>
 8007782:	4691      	mov	r9, r2
 8007784:	9903      	ldr	r1, [sp, #12]
 8007786:	464e      	mov	r6, r9
 8007788:	1c08      	adds	r0, r1, #0
 800778a:	610e      	str	r6, [r1, #16]
 800778c:	b005      	add	sp, #20
 800778e:	bc3c      	pop	{r2, r3, r4, r5}
 8007790:	4690      	mov	r8, r2
 8007792:	4699      	mov	r9, r3
 8007794:	46a2      	mov	sl, r4
 8007796:	46ab      	mov	fp, r5
 8007798:	bcf0      	pop	{r4, r5, r6, r7}
 800779a:	bc02      	pop	{r1}
 800779c:	4708      	bx	r1
 800779e:	46c0      	nop			; (mov r8, r8)

080077a0 <__pow5mult>:
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	464f      	mov	r7, r9
 80077a4:	4646      	mov	r6, r8
 80077a6:	2303      	movs	r3, #3
 80077a8:	b4c0      	push	{r6, r7}
 80077aa:	4681      	mov	r9, r0
 80077ac:	1c0f      	adds	r7, r1, #0
 80077ae:	1c14      	adds	r4, r2, #0
 80077b0:	4013      	ands	r3, r2
 80077b2:	d136      	bne.n	8007822 <__pow5mult+0x82>
 80077b4:	10a4      	asrs	r4, r4, #2
 80077b6:	d022      	beq.n	80077fe <__pow5mult+0x5e>
 80077b8:	4649      	mov	r1, r9
 80077ba:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80077bc:	2e00      	cmp	r6, #0
 80077be:	d039      	beq.n	8007834 <__pow5mult+0x94>
 80077c0:	2301      	movs	r3, #1
 80077c2:	4698      	mov	r8, r3
 80077c4:	e005      	b.n	80077d2 <__pow5mult+0x32>
 80077c6:	1064      	asrs	r4, r4, #1
 80077c8:	d019      	beq.n	80077fe <__pow5mult+0x5e>
 80077ca:	6835      	ldr	r5, [r6, #0]
 80077cc:	2d00      	cmp	r5, #0
 80077ce:	d01d      	beq.n	800780c <__pow5mult+0x6c>
 80077d0:	1c2e      	adds	r6, r5, #0
 80077d2:	4641      	mov	r1, r8
 80077d4:	4221      	tst	r1, r4
 80077d6:	d0f6      	beq.n	80077c6 <__pow5mult+0x26>
 80077d8:	4648      	mov	r0, r9
 80077da:	1c39      	adds	r1, r7, #0
 80077dc:	1c32      	adds	r2, r6, #0
 80077de:	f7ff ff2d 	bl	800763c <__multiply>
 80077e2:	2f00      	cmp	r7, #0
 80077e4:	d01b      	beq.n	800781e <__pow5mult+0x7e>
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	4649      	mov	r1, r9
 80077ea:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80077ec:	0093      	lsls	r3, r2, #2
 80077ee:	18cb      	adds	r3, r1, r3
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	1064      	asrs	r4, r4, #1
 80077f4:	603a      	str	r2, [r7, #0]
 80077f6:	601f      	str	r7, [r3, #0]
 80077f8:	1c07      	adds	r7, r0, #0
 80077fa:	2c00      	cmp	r4, #0
 80077fc:	d1e5      	bne.n	80077ca <__pow5mult+0x2a>
 80077fe:	1c38      	adds	r0, r7, #0
 8007800:	bc0c      	pop	{r2, r3}
 8007802:	4690      	mov	r8, r2
 8007804:	4699      	mov	r9, r3
 8007806:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007808:	bc02      	pop	{r1}
 800780a:	4708      	bx	r1
 800780c:	1c31      	adds	r1, r6, #0
 800780e:	1c32      	adds	r2, r6, #0
 8007810:	4648      	mov	r0, r9
 8007812:	f7ff ff13 	bl	800763c <__multiply>
 8007816:	6030      	str	r0, [r6, #0]
 8007818:	6005      	str	r5, [r0, #0]
 800781a:	1c06      	adds	r6, r0, #0
 800781c:	e7d9      	b.n	80077d2 <__pow5mult+0x32>
 800781e:	1c07      	adds	r7, r0, #0
 8007820:	e7d1      	b.n	80077c6 <__pow5mult+0x26>
 8007822:	4a09      	ldr	r2, [pc, #36]	; (8007848 <__pow5mult+0xa8>)
 8007824:	3b01      	subs	r3, #1
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	589a      	ldr	r2, [r3, r2]
 800782a:	2300      	movs	r3, #0
 800782c:	f7ff fe0a 	bl	8007444 <__multadd>
 8007830:	1c07      	adds	r7, r0, #0
 8007832:	e7bf      	b.n	80077b4 <__pow5mult+0x14>
 8007834:	4648      	mov	r0, r9
 8007836:	4905      	ldr	r1, [pc, #20]	; (800784c <__pow5mult+0xac>)
 8007838:	f7ff fef4 	bl	8007624 <__i2b>
 800783c:	464a      	mov	r2, r9
 800783e:	2300      	movs	r3, #0
 8007840:	6490      	str	r0, [r2, #72]	; 0x48
 8007842:	1c06      	adds	r6, r0, #0
 8007844:	6003      	str	r3, [r0, #0]
 8007846:	e7bb      	b.n	80077c0 <__pow5mult+0x20>
 8007848:	0800dcf8 	.word	0x0800dcf8
 800784c:	00000271 	.word	0x00000271

08007850 <__lshift>:
 8007850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007852:	464d      	mov	r5, r9
 8007854:	4644      	mov	r4, r8
 8007856:	4656      	mov	r6, sl
 8007858:	465f      	mov	r7, fp
 800785a:	b4f0      	push	{r4, r5, r6, r7}
 800785c:	1c0e      	adds	r6, r1, #0
 800785e:	b083      	sub	sp, #12
 8007860:	9001      	str	r0, [sp, #4]
 8007862:	6930      	ldr	r0, [r6, #16]
 8007864:	1155      	asrs	r5, r2, #5
 8007866:	1940      	adds	r0, r0, r5
 8007868:	1c04      	adds	r4, r0, #0
 800786a:	68b3      	ldr	r3, [r6, #8]
 800786c:	3401      	adds	r4, #1
 800786e:	4690      	mov	r8, r2
 8007870:	6849      	ldr	r1, [r1, #4]
 8007872:	4681      	mov	r9, r0
 8007874:	429c      	cmp	r4, r3
 8007876:	dd03      	ble.n	8007880 <__lshift+0x30>
 8007878:	3101      	adds	r1, #1
 800787a:	005b      	lsls	r3, r3, #1
 800787c:	429c      	cmp	r4, r3
 800787e:	dcfb      	bgt.n	8007878 <__lshift+0x28>
 8007880:	9801      	ldr	r0, [sp, #4]
 8007882:	f7ff fda9 	bl	80073d8 <_Balloc>
 8007886:	1c02      	adds	r2, r0, #0
 8007888:	4683      	mov	fp, r0
 800788a:	3214      	adds	r2, #20
 800788c:	2d00      	cmp	r5, #0
 800788e:	dd09      	ble.n	80078a4 <__lshift+0x54>
 8007890:	2300      	movs	r3, #0
 8007892:	2100      	movs	r1, #0
 8007894:	3301      	adds	r3, #1
 8007896:	c202      	stmia	r2!, {r1}
 8007898:	42ab      	cmp	r3, r5
 800789a:	d1fb      	bne.n	8007894 <__lshift+0x44>
 800789c:	1d1a      	adds	r2, r3, #4
 800789e:	0092      	lsls	r2, r2, #2
 80078a0:	445a      	add	r2, fp
 80078a2:	3204      	adds	r2, #4
 80078a4:	6935      	ldr	r5, [r6, #16]
 80078a6:	3504      	adds	r5, #4
 80078a8:	4641      	mov	r1, r8
 80078aa:	00ad      	lsls	r5, r5, #2
 80078ac:	201f      	movs	r0, #31
 80078ae:	1c33      	adds	r3, r6, #0
 80078b0:	1975      	adds	r5, r6, r5
 80078b2:	4001      	ands	r1, r0
 80078b4:	3314      	adds	r3, #20
 80078b6:	3504      	adds	r5, #4
 80078b8:	4688      	mov	r8, r1
 80078ba:	2900      	cmp	r1, #0
 80078bc:	d027      	beq.n	800790e <__lshift+0xbe>
 80078be:	2020      	movs	r0, #32
 80078c0:	1a41      	subs	r1, r0, r1
 80078c2:	468c      	mov	ip, r1
 80078c4:	2100      	movs	r1, #0
 80078c6:	681f      	ldr	r7, [r3, #0]
 80078c8:	4640      	mov	r0, r8
 80078ca:	4087      	lsls	r7, r0
 80078cc:	4339      	orrs	r1, r7
 80078ce:	c202      	stmia	r2!, {r1}
 80078d0:	cb02      	ldmia	r3!, {r1}
 80078d2:	4667      	mov	r7, ip
 80078d4:	40f9      	lsrs	r1, r7
 80078d6:	429d      	cmp	r5, r3
 80078d8:	d8f5      	bhi.n	80078c6 <__lshift+0x76>
 80078da:	6011      	str	r1, [r2, #0]
 80078dc:	2900      	cmp	r1, #0
 80078de:	d001      	beq.n	80078e4 <__lshift+0x94>
 80078e0:	464c      	mov	r4, r9
 80078e2:	3402      	adds	r4, #2
 80078e4:	9f01      	ldr	r7, [sp, #4]
 80078e6:	6871      	ldr	r1, [r6, #4]
 80078e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078ea:	008b      	lsls	r3, r1, #2
 80078ec:	4658      	mov	r0, fp
 80078ee:	18d3      	adds	r3, r2, r3
 80078f0:	3c01      	subs	r4, #1
 80078f2:	6104      	str	r4, [r0, #16]
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	6030      	str	r0, [r6, #0]
 80078f8:	4658      	mov	r0, fp
 80078fa:	601e      	str	r6, [r3, #0]
 80078fc:	b003      	add	sp, #12
 80078fe:	bc3c      	pop	{r2, r3, r4, r5}
 8007900:	4690      	mov	r8, r2
 8007902:	4699      	mov	r9, r3
 8007904:	46a2      	mov	sl, r4
 8007906:	46ab      	mov	fp, r5
 8007908:	bcf0      	pop	{r4, r5, r6, r7}
 800790a:	bc02      	pop	{r1}
 800790c:	4708      	bx	r1
 800790e:	cb02      	ldmia	r3!, {r1}
 8007910:	c202      	stmia	r2!, {r1}
 8007912:	429d      	cmp	r5, r3
 8007914:	d9e6      	bls.n	80078e4 <__lshift+0x94>
 8007916:	cb02      	ldmia	r3!, {r1}
 8007918:	c202      	stmia	r2!, {r1}
 800791a:	429d      	cmp	r5, r3
 800791c:	d8f7      	bhi.n	800790e <__lshift+0xbe>
 800791e:	e7e1      	b.n	80078e4 <__lshift+0x94>

08007920 <__mcmp>:
 8007920:	b530      	push	{r4, r5, lr}
 8007922:	690a      	ldr	r2, [r1, #16]
 8007924:	6904      	ldr	r4, [r0, #16]
 8007926:	1c03      	adds	r3, r0, #0
 8007928:	1aa0      	subs	r0, r4, r2
 800792a:	d10f      	bne.n	800794c <__mcmp+0x2c>
 800792c:	3204      	adds	r2, #4
 800792e:	0092      	lsls	r2, r2, #2
 8007930:	1c1d      	adds	r5, r3, #0
 8007932:	1889      	adds	r1, r1, r2
 8007934:	189b      	adds	r3, r3, r2
 8007936:	3514      	adds	r5, #20
 8007938:	3304      	adds	r3, #4
 800793a:	3104      	adds	r1, #4
 800793c:	3b04      	subs	r3, #4
 800793e:	3904      	subs	r1, #4
 8007940:	681c      	ldr	r4, [r3, #0]
 8007942:	680a      	ldr	r2, [r1, #0]
 8007944:	4294      	cmp	r4, r2
 8007946:	d104      	bne.n	8007952 <__mcmp+0x32>
 8007948:	429d      	cmp	r5, r3
 800794a:	d3f7      	bcc.n	800793c <__mcmp+0x1c>
 800794c:	bc30      	pop	{r4, r5}
 800794e:	bc02      	pop	{r1}
 8007950:	4708      	bx	r1
 8007952:	4294      	cmp	r4, r2
 8007954:	4180      	sbcs	r0, r0
 8007956:	2301      	movs	r3, #1
 8007958:	4318      	orrs	r0, r3
 800795a:	e7f7      	b.n	800794c <__mcmp+0x2c>

0800795c <__mdiff>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	464f      	mov	r7, r9
 8007960:	4646      	mov	r6, r8
 8007962:	b4c0      	push	{r6, r7}
 8007964:	1c0c      	adds	r4, r1, #0
 8007966:	1c07      	adds	r7, r0, #0
 8007968:	1c08      	adds	r0, r1, #0
 800796a:	1c11      	adds	r1, r2, #0
 800796c:	1c15      	adds	r5, r2, #0
 800796e:	f7ff ffd7 	bl	8007920 <__mcmp>
 8007972:	1e06      	subs	r6, r0, #0
 8007974:	d060      	beq.n	8007a38 <__mdiff+0xdc>
 8007976:	db5a      	blt.n	8007a2e <__mdiff+0xd2>
 8007978:	2600      	movs	r6, #0
 800797a:	1c38      	adds	r0, r7, #0
 800797c:	6861      	ldr	r1, [r4, #4]
 800797e:	f7ff fd2b 	bl	80073d8 <_Balloc>
 8007982:	4684      	mov	ip, r0
 8007984:	60c6      	str	r6, [r0, #12]
 8007986:	6920      	ldr	r0, [r4, #16]
 8007988:	1d03      	adds	r3, r0, #4
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	18e3      	adds	r3, r4, r3
 800798e:	3304      	adds	r3, #4
 8007990:	4698      	mov	r8, r3
 8007992:	692b      	ldr	r3, [r5, #16]
 8007994:	3304      	adds	r3, #4
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	18eb      	adds	r3, r5, r3
 800799a:	3304      	adds	r3, #4
 800799c:	1c21      	adds	r1, r4, #0
 800799e:	1c2a      	adds	r2, r5, #0
 80079a0:	4667      	mov	r7, ip
 80079a2:	4699      	mov	r9, r3
 80079a4:	3114      	adds	r1, #20
 80079a6:	3214      	adds	r2, #20
 80079a8:	3714      	adds	r7, #20
 80079aa:	2600      	movs	r6, #0
 80079ac:	c920      	ldmia	r1!, {r5}
 80079ae:	ca10      	ldmia	r2!, {r4}
 80079b0:	042b      	lsls	r3, r5, #16
 80079b2:	0c1b      	lsrs	r3, r3, #16
 80079b4:	199e      	adds	r6, r3, r6
 80079b6:	0423      	lsls	r3, r4, #16
 80079b8:	0c1b      	lsrs	r3, r3, #16
 80079ba:	1af3      	subs	r3, r6, r3
 80079bc:	0c24      	lsrs	r4, r4, #16
 80079be:	0c2d      	lsrs	r5, r5, #16
 80079c0:	141e      	asrs	r6, r3, #16
 80079c2:	1b2d      	subs	r5, r5, r4
 80079c4:	19ad      	adds	r5, r5, r6
 80079c6:	041b      	lsls	r3, r3, #16
 80079c8:	0c1b      	lsrs	r3, r3, #16
 80079ca:	142e      	asrs	r6, r5, #16
 80079cc:	042d      	lsls	r5, r5, #16
 80079ce:	431d      	orrs	r5, r3
 80079d0:	1c3b      	adds	r3, r7, #0
 80079d2:	c320      	stmia	r3!, {r5}
 80079d4:	1c0c      	adds	r4, r1, #0
 80079d6:	1c1f      	adds	r7, r3, #0
 80079d8:	4591      	cmp	r9, r2
 80079da:	d8e7      	bhi.n	80079ac <__mdiff+0x50>
 80079dc:	4699      	mov	r9, r3
 80079de:	4588      	cmp	r8, r1
 80079e0:	d914      	bls.n	8007a0c <__mdiff+0xb0>
 80079e2:	cc80      	ldmia	r4!, {r7}
 80079e4:	043a      	lsls	r2, r7, #16
 80079e6:	0c12      	lsrs	r2, r2, #16
 80079e8:	1992      	adds	r2, r2, r6
 80079ea:	1415      	asrs	r5, r2, #16
 80079ec:	0c3f      	lsrs	r7, r7, #16
 80079ee:	19ed      	adds	r5, r5, r7
 80079f0:	0412      	lsls	r2, r2, #16
 80079f2:	142e      	asrs	r6, r5, #16
 80079f4:	0c12      	lsrs	r2, r2, #16
 80079f6:	042d      	lsls	r5, r5, #16
 80079f8:	4315      	orrs	r5, r2
 80079fa:	c320      	stmia	r3!, {r5}
 80079fc:	45a0      	cmp	r8, r4
 80079fe:	d8f0      	bhi.n	80079e2 <__mdiff+0x86>
 8007a00:	43cb      	mvns	r3, r1
 8007a02:	4443      	add	r3, r8
 8007a04:	089b      	lsrs	r3, r3, #2
 8007a06:	3301      	adds	r3, #1
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	444b      	add	r3, r9
 8007a0c:	3b04      	subs	r3, #4
 8007a0e:	2d00      	cmp	r5, #0
 8007a10:	d104      	bne.n	8007a1c <__mdiff+0xc0>
 8007a12:	3b04      	subs	r3, #4
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	3801      	subs	r0, #1
 8007a18:	2a00      	cmp	r2, #0
 8007a1a:	d0fa      	beq.n	8007a12 <__mdiff+0xb6>
 8007a1c:	4663      	mov	r3, ip
 8007a1e:	6118      	str	r0, [r3, #16]
 8007a20:	4660      	mov	r0, ip
 8007a22:	bc0c      	pop	{r2, r3}
 8007a24:	4690      	mov	r8, r2
 8007a26:	4699      	mov	r9, r3
 8007a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a2a:	bc02      	pop	{r1}
 8007a2c:	4708      	bx	r1
 8007a2e:	1c23      	adds	r3, r4, #0
 8007a30:	2601      	movs	r6, #1
 8007a32:	1c2c      	adds	r4, r5, #0
 8007a34:	1c1d      	adds	r5, r3, #0
 8007a36:	e7a0      	b.n	800797a <__mdiff+0x1e>
 8007a38:	1c38      	adds	r0, r7, #0
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	f7ff fccc 	bl	80073d8 <_Balloc>
 8007a40:	2301      	movs	r3, #1
 8007a42:	4684      	mov	ip, r0
 8007a44:	6103      	str	r3, [r0, #16]
 8007a46:	6146      	str	r6, [r0, #20]
 8007a48:	e7ea      	b.n	8007a20 <__mdiff+0xc4>
 8007a4a:	46c0      	nop			; (mov r8, r8)

08007a4c <__ulp>:
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <__ulp+0x40>)
 8007a4e:	4a10      	ldr	r2, [pc, #64]	; (8007a90 <__ulp+0x44>)
 8007a50:	400b      	ands	r3, r1
 8007a52:	189b      	adds	r3, r3, r2
 8007a54:	b510      	push	{r4, lr}
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	dd04      	ble.n	8007a64 <__ulp+0x18>
 8007a5a:	1c19      	adds	r1, r3, #0
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	bc10      	pop	{r4}
 8007a60:	bc04      	pop	{r2}
 8007a62:	4710      	bx	r2
 8007a64:	425b      	negs	r3, r3
 8007a66:	151b      	asrs	r3, r3, #20
 8007a68:	2000      	movs	r0, #0
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	2b13      	cmp	r3, #19
 8007a6e:	dd07      	ble.n	8007a80 <__ulp+0x34>
 8007a70:	2201      	movs	r2, #1
 8007a72:	2b32      	cmp	r3, #50	; 0x32
 8007a74:	dc02      	bgt.n	8007a7c <__ulp+0x30>
 8007a76:	2433      	movs	r4, #51	; 0x33
 8007a78:	1ae3      	subs	r3, r4, r3
 8007a7a:	409a      	lsls	r2, r3
 8007a7c:	1c10      	adds	r0, r2, #0
 8007a7e:	e7ee      	b.n	8007a5e <__ulp+0x12>
 8007a80:	2280      	movs	r2, #128	; 0x80
 8007a82:	0312      	lsls	r2, r2, #12
 8007a84:	1c11      	adds	r1, r2, #0
 8007a86:	4119      	asrs	r1, r3
 8007a88:	2000      	movs	r0, #0
 8007a8a:	e7e8      	b.n	8007a5e <__ulp+0x12>
 8007a8c:	7ff00000 	.word	0x7ff00000
 8007a90:	fcc00000 	.word	0xfcc00000

08007a94 <__b2d>:
 8007a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a96:	6904      	ldr	r4, [r0, #16]
 8007a98:	3404      	adds	r4, #4
 8007a9a:	00a4      	lsls	r4, r4, #2
 8007a9c:	1904      	adds	r4, r0, r4
 8007a9e:	6825      	ldr	r5, [r4, #0]
 8007aa0:	4647      	mov	r7, r8
 8007aa2:	b480      	push	{r7}
 8007aa4:	1c06      	adds	r6, r0, #0
 8007aa6:	1c28      	adds	r0, r5, #0
 8007aa8:	1c0f      	adds	r7, r1, #0
 8007aaa:	f7ff fd6f 	bl	800758c <__hi0bits>
 8007aae:	2320      	movs	r3, #32
 8007ab0:	1a1b      	subs	r3, r3, r0
 8007ab2:	3614      	adds	r6, #20
 8007ab4:	603b      	str	r3, [r7, #0]
 8007ab6:	280a      	cmp	r0, #10
 8007ab8:	dc19      	bgt.n	8007aee <__b2d+0x5a>
 8007aba:	270b      	movs	r7, #11
 8007abc:	1a3f      	subs	r7, r7, r0
 8007abe:	1c29      	adds	r1, r5, #0
 8007ac0:	40f9      	lsrs	r1, r7
 8007ac2:	4688      	mov	r8, r1
 8007ac4:	491b      	ldr	r1, [pc, #108]	; (8007b34 <__b2d+0xa0>)
 8007ac6:	1c0b      	adds	r3, r1, #0
 8007ac8:	4641      	mov	r1, r8
 8007aca:	430b      	orrs	r3, r1
 8007acc:	2100      	movs	r1, #0
 8007ace:	42a6      	cmp	r6, r4
 8007ad0:	d202      	bcs.n	8007ad8 <__b2d+0x44>
 8007ad2:	3c04      	subs	r4, #4
 8007ad4:	6821      	ldr	r1, [r4, #0]
 8007ad6:	40f9      	lsrs	r1, r7
 8007ad8:	3015      	adds	r0, #21
 8007ada:	4085      	lsls	r5, r0
 8007adc:	1c0a      	adds	r2, r1, #0
 8007ade:	432a      	orrs	r2, r5
 8007ae0:	1c10      	adds	r0, r2, #0
 8007ae2:	1c19      	adds	r1, r3, #0
 8007ae4:	bc04      	pop	{r2}
 8007ae6:	4690      	mov	r8, r2
 8007ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8007aea:	bc04      	pop	{r2}
 8007aec:	4710      	bx	r2
 8007aee:	2100      	movs	r1, #0
 8007af0:	42a6      	cmp	r6, r4
 8007af2:	d201      	bcs.n	8007af8 <__b2d+0x64>
 8007af4:	3c04      	subs	r4, #4
 8007af6:	6821      	ldr	r1, [r4, #0]
 8007af8:	1c07      	adds	r7, r0, #0
 8007afa:	3f0b      	subs	r7, #11
 8007afc:	2f00      	cmp	r7, #0
 8007afe:	d013      	beq.n	8007b28 <__b2d+0x94>
 8007b00:	232b      	movs	r3, #43	; 0x2b
 8007b02:	1a18      	subs	r0, r3, r0
 8007b04:	4b0b      	ldr	r3, [pc, #44]	; (8007b34 <__b2d+0xa0>)
 8007b06:	40bd      	lsls	r5, r7
 8007b08:	432b      	orrs	r3, r5
 8007b0a:	469c      	mov	ip, r3
 8007b0c:	1c0d      	adds	r5, r1, #0
 8007b0e:	40c5      	lsrs	r5, r0
 8007b10:	4663      	mov	r3, ip
 8007b12:	432b      	orrs	r3, r5
 8007b14:	2500      	movs	r5, #0
 8007b16:	42b4      	cmp	r4, r6
 8007b18:	d902      	bls.n	8007b20 <__b2d+0x8c>
 8007b1a:	3c04      	subs	r4, #4
 8007b1c:	6825      	ldr	r5, [r4, #0]
 8007b1e:	40c5      	lsrs	r5, r0
 8007b20:	40b9      	lsls	r1, r7
 8007b22:	1c2a      	adds	r2, r5, #0
 8007b24:	430a      	orrs	r2, r1
 8007b26:	e7db      	b.n	8007ae0 <__b2d+0x4c>
 8007b28:	4802      	ldr	r0, [pc, #8]	; (8007b34 <__b2d+0xa0>)
 8007b2a:	1c03      	adds	r3, r0, #0
 8007b2c:	432b      	orrs	r3, r5
 8007b2e:	1c0a      	adds	r2, r1, #0
 8007b30:	e7d6      	b.n	8007ae0 <__b2d+0x4c>
 8007b32:	46c0      	nop			; (mov r8, r8)
 8007b34:	3ff00000 	.word	0x3ff00000

08007b38 <__d2b>:
 8007b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	1c1d      	adds	r5, r3, #0
 8007b40:	1c14      	adds	r4, r2, #0
 8007b42:	f7ff fc49 	bl	80073d8 <_Balloc>
 8007b46:	032a      	lsls	r2, r5, #12
 8007b48:	006b      	lsls	r3, r5, #1
 8007b4a:	1c06      	adds	r6, r0, #0
 8007b4c:	0b12      	lsrs	r2, r2, #12
 8007b4e:	0d5f      	lsrs	r7, r3, #21
 8007b50:	d002      	beq.n	8007b58 <__d2b+0x20>
 8007b52:	2380      	movs	r3, #128	; 0x80
 8007b54:	035b      	lsls	r3, r3, #13
 8007b56:	431a      	orrs	r2, r3
 8007b58:	9201      	str	r2, [sp, #4]
 8007b5a:	2c00      	cmp	r4, #0
 8007b5c:	d01a      	beq.n	8007b94 <__d2b+0x5c>
 8007b5e:	4668      	mov	r0, sp
 8007b60:	9400      	str	r4, [sp, #0]
 8007b62:	f7ff fd2f 	bl	80075c4 <__lo0bits>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d132      	bne.n	8007bd0 <__d2b+0x98>
 8007b6a:	9b00      	ldr	r3, [sp, #0]
 8007b6c:	9c01      	ldr	r4, [sp, #4]
 8007b6e:	6173      	str	r3, [r6, #20]
 8007b70:	61b4      	str	r4, [r6, #24]
 8007b72:	4263      	negs	r3, r4
 8007b74:	4163      	adcs	r3, r4
 8007b76:	2402      	movs	r4, #2
 8007b78:	1ae4      	subs	r4, r4, r3
 8007b7a:	6134      	str	r4, [r6, #16]
 8007b7c:	2f00      	cmp	r7, #0
 8007b7e:	d014      	beq.n	8007baa <__d2b+0x72>
 8007b80:	4a19      	ldr	r2, [pc, #100]	; (8007be8 <__d2b+0xb0>)
 8007b82:	9908      	ldr	r1, [sp, #32]
 8007b84:	18bb      	adds	r3, r7, r2
 8007b86:	181b      	adds	r3, r3, r0
 8007b88:	600b      	str	r3, [r1, #0]
 8007b8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b8c:	2335      	movs	r3, #53	; 0x35
 8007b8e:	1a18      	subs	r0, r3, r0
 8007b90:	6010      	str	r0, [r2, #0]
 8007b92:	e018      	b.n	8007bc6 <__d2b+0x8e>
 8007b94:	a801      	add	r0, sp, #4
 8007b96:	f7ff fd15 	bl	80075c4 <__lo0bits>
 8007b9a:	9901      	ldr	r1, [sp, #4]
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	6171      	str	r1, [r6, #20]
 8007ba0:	6133      	str	r3, [r6, #16]
 8007ba2:	3020      	adds	r0, #32
 8007ba4:	2401      	movs	r4, #1
 8007ba6:	2f00      	cmp	r7, #0
 8007ba8:	d1ea      	bne.n	8007b80 <__d2b+0x48>
 8007baa:	4b10      	ldr	r3, [pc, #64]	; (8007bec <__d2b+0xb4>)
 8007bac:	18c0      	adds	r0, r0, r3
 8007bae:	1ce3      	adds	r3, r4, #3
 8007bb0:	9908      	ldr	r1, [sp, #32]
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	18f3      	adds	r3, r6, r3
 8007bb6:	6008      	str	r0, [r1, #0]
 8007bb8:	6858      	ldr	r0, [r3, #4]
 8007bba:	f7ff fce7 	bl	800758c <__hi0bits>
 8007bbe:	0164      	lsls	r4, r4, #5
 8007bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bc2:	1a24      	subs	r4, r4, r0
 8007bc4:	6014      	str	r4, [r2, #0]
 8007bc6:	1c30      	adds	r0, r6, #0
 8007bc8:	b003      	add	sp, #12
 8007bca:	bcf0      	pop	{r4, r5, r6, r7}
 8007bcc:	bc02      	pop	{r1}
 8007bce:	4708      	bx	r1
 8007bd0:	9c01      	ldr	r4, [sp, #4]
 8007bd2:	2320      	movs	r3, #32
 8007bd4:	1a1b      	subs	r3, r3, r0
 8007bd6:	1c21      	adds	r1, r4, #0
 8007bd8:	4099      	lsls	r1, r3
 8007bda:	9a00      	ldr	r2, [sp, #0]
 8007bdc:	1c0b      	adds	r3, r1, #0
 8007bde:	4313      	orrs	r3, r2
 8007be0:	40c4      	lsrs	r4, r0
 8007be2:	6173      	str	r3, [r6, #20]
 8007be4:	9401      	str	r4, [sp, #4]
 8007be6:	e7c3      	b.n	8007b70 <__d2b+0x38>
 8007be8:	fffffbcd 	.word	0xfffffbcd
 8007bec:	fffffbce 	.word	0xfffffbce

08007bf0 <__ratio>:
 8007bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bf2:	4657      	mov	r7, sl
 8007bf4:	464e      	mov	r6, r9
 8007bf6:	4645      	mov	r5, r8
 8007bf8:	b4e0      	push	{r5, r6, r7}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	4689      	mov	r9, r1
 8007bfe:	a902      	add	r1, sp, #8
 8007c00:	4680      	mov	r8, r0
 8007c02:	f7ff ff47 	bl	8007a94 <__b2d>
 8007c06:	1c06      	adds	r6, r0, #0
 8007c08:	1c0f      	adds	r7, r1, #0
 8007c0a:	4648      	mov	r0, r9
 8007c0c:	a903      	add	r1, sp, #12
 8007c0e:	f7ff ff41 	bl	8007a94 <__b2d>
 8007c12:	1c02      	adds	r2, r0, #0
 8007c14:	1c0b      	adds	r3, r1, #0
 8007c16:	9802      	ldr	r0, [sp, #8]
 8007c18:	9903      	ldr	r1, [sp, #12]
 8007c1a:	1a40      	subs	r0, r0, r1
 8007c1c:	4641      	mov	r1, r8
 8007c1e:	4682      	mov	sl, r0
 8007c20:	6908      	ldr	r0, [r1, #16]
 8007c22:	4684      	mov	ip, r0
 8007c24:	4648      	mov	r0, r9
 8007c26:	6901      	ldr	r1, [r0, #16]
 8007c28:	4660      	mov	r0, ip
 8007c2a:	1a41      	subs	r1, r0, r1
 8007c2c:	0149      	lsls	r1, r1, #5
 8007c2e:	4451      	add	r1, sl
 8007c30:	9200      	str	r2, [sp, #0]
 8007c32:	9301      	str	r3, [sp, #4]
 8007c34:	2900      	cmp	r1, #0
 8007c36:	dd0e      	ble.n	8007c56 <__ratio+0x66>
 8007c38:	0509      	lsls	r1, r1, #20
 8007c3a:	19cd      	adds	r5, r1, r7
 8007c3c:	1c2f      	adds	r7, r5, #0
 8007c3e:	1c30      	adds	r0, r6, #0
 8007c40:	1c39      	adds	r1, r7, #0
 8007c42:	f001 ecfa 	blx	8009638 <__aeabi_ddiv>
 8007c46:	b004      	add	sp, #16
 8007c48:	bc1c      	pop	{r2, r3, r4}
 8007c4a:	4690      	mov	r8, r2
 8007c4c:	4699      	mov	r9, r3
 8007c4e:	46a2      	mov	sl, r4
 8007c50:	bcf0      	pop	{r4, r5, r6, r7}
 8007c52:	bc04      	pop	{r2}
 8007c54:	4710      	bx	r2
 8007c56:	9b01      	ldr	r3, [sp, #4]
 8007c58:	0509      	lsls	r1, r1, #20
 8007c5a:	1a59      	subs	r1, r3, r1
 8007c5c:	9101      	str	r1, [sp, #4]
 8007c5e:	9a00      	ldr	r2, [sp, #0]
 8007c60:	9b01      	ldr	r3, [sp, #4]
 8007c62:	e7ec      	b.n	8007c3e <__ratio+0x4e>

08007c64 <_mprec_log10>:
 8007c64:	b510      	push	{r4, lr}
 8007c66:	1c04      	adds	r4, r0, #0
 8007c68:	2817      	cmp	r0, #23
 8007c6a:	dd0b      	ble.n	8007c84 <_mprec_log10+0x20>
 8007c6c:	4909      	ldr	r1, [pc, #36]	; (8007c94 <_mprec_log10+0x30>)
 8007c6e:	4808      	ldr	r0, [pc, #32]	; (8007c90 <_mprec_log10+0x2c>)
 8007c70:	4a09      	ldr	r2, [pc, #36]	; (8007c98 <_mprec_log10+0x34>)
 8007c72:	4b0a      	ldr	r3, [pc, #40]	; (8007c9c <_mprec_log10+0x38>)
 8007c74:	3c01      	subs	r4, #1
 8007c76:	f001 eb98 	blx	80093a8 <__aeabi_dmul>
 8007c7a:	2c00      	cmp	r4, #0
 8007c7c:	d1f8      	bne.n	8007c70 <_mprec_log10+0xc>
 8007c7e:	bc10      	pop	{r4}
 8007c80:	bc04      	pop	{r2}
 8007c82:	4710      	bx	r2
 8007c84:	4b06      	ldr	r3, [pc, #24]	; (8007ca0 <_mprec_log10+0x3c>)
 8007c86:	00c4      	lsls	r4, r0, #3
 8007c88:	191c      	adds	r4, r3, r4
 8007c8a:	6920      	ldr	r0, [r4, #16]
 8007c8c:	6961      	ldr	r1, [r4, #20]
 8007c8e:	e7f6      	b.n	8007c7e <_mprec_log10+0x1a>
 8007c90:	00000000 	.word	0x00000000
 8007c94:	3ff00000 	.word	0x3ff00000
 8007c98:	00000000 	.word	0x00000000
 8007c9c:	40240000 	.word	0x40240000
 8007ca0:	0800dcf8 	.word	0x0800dcf8

08007ca4 <__copybits>:
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	6915      	ldr	r5, [r2, #16]
 8007ca8:	1e4e      	subs	r6, r1, #1
 8007caa:	3504      	adds	r5, #4
 8007cac:	1176      	asrs	r6, r6, #5
 8007cae:	00ad      	lsls	r5, r5, #2
 8007cb0:	3601      	adds	r6, #1
 8007cb2:	1c13      	adds	r3, r2, #0
 8007cb4:	1955      	adds	r5, r2, r5
 8007cb6:	00b6      	lsls	r6, r6, #2
 8007cb8:	3314      	adds	r3, #20
 8007cba:	3504      	adds	r5, #4
 8007cbc:	1986      	adds	r6, r0, r6
 8007cbe:	42ab      	cmp	r3, r5
 8007cc0:	d20a      	bcs.n	8007cd8 <__copybits+0x34>
 8007cc2:	1c01      	adds	r1, r0, #0
 8007cc4:	cb10      	ldmia	r3!, {r4}
 8007cc6:	c110      	stmia	r1!, {r4}
 8007cc8:	429d      	cmp	r5, r3
 8007cca:	d8fb      	bhi.n	8007cc4 <__copybits+0x20>
 8007ccc:	1aab      	subs	r3, r5, r2
 8007cce:	3b15      	subs	r3, #21
 8007cd0:	089b      	lsrs	r3, r3, #2
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	18c0      	adds	r0, r0, r3
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4286      	cmp	r6, r0
 8007cdc:	d902      	bls.n	8007ce4 <__copybits+0x40>
 8007cde:	c008      	stmia	r0!, {r3}
 8007ce0:	4286      	cmp	r6, r0
 8007ce2:	d8fc      	bhi.n	8007cde <__copybits+0x3a>
 8007ce4:	bc70      	pop	{r4, r5, r6}
 8007ce6:	bc01      	pop	{r0}
 8007ce8:	4700      	bx	r0
 8007cea:	46c0      	nop			; (mov r8, r8)

08007cec <__any_on>:
 8007cec:	1c03      	adds	r3, r0, #0
 8007cee:	1c02      	adds	r2, r0, #0
 8007cf0:	6900      	ldr	r0, [r0, #16]
 8007cf2:	b530      	push	{r4, r5, lr}
 8007cf4:	3314      	adds	r3, #20
 8007cf6:	114c      	asrs	r4, r1, #5
 8007cf8:	42a0      	cmp	r0, r4
 8007cfa:	da11      	bge.n	8007d20 <__any_on+0x34>
 8007cfc:	1c04      	adds	r4, r0, #0
 8007cfe:	1d20      	adds	r0, r4, #4
 8007d00:	0080      	lsls	r0, r0, #2
 8007d02:	1810      	adds	r0, r2, r0
 8007d04:	1d02      	adds	r2, r0, #4
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d303      	bcc.n	8007d12 <__any_on+0x26>
 8007d0a:	e01a      	b.n	8007d42 <__any_on+0x56>
 8007d0c:	4283      	cmp	r3, r0
 8007d0e:	d218      	bcs.n	8007d42 <__any_on+0x56>
 8007d10:	3804      	subs	r0, #4
 8007d12:	6802      	ldr	r2, [r0, #0]
 8007d14:	2a00      	cmp	r2, #0
 8007d16:	d0f9      	beq.n	8007d0c <__any_on+0x20>
 8007d18:	2001      	movs	r0, #1
 8007d1a:	bc30      	pop	{r4, r5}
 8007d1c:	bc02      	pop	{r1}
 8007d1e:	4708      	bx	r1
 8007d20:	42a0      	cmp	r0, r4
 8007d22:	ddec      	ble.n	8007cfe <__any_on+0x12>
 8007d24:	201f      	movs	r0, #31
 8007d26:	4001      	ands	r1, r0
 8007d28:	d0e9      	beq.n	8007cfe <__any_on+0x12>
 8007d2a:	1d20      	adds	r0, r4, #4
 8007d2c:	0080      	lsls	r0, r0, #2
 8007d2e:	1810      	adds	r0, r2, r0
 8007d30:	6845      	ldr	r5, [r0, #4]
 8007d32:	1c28      	adds	r0, r5, #0
 8007d34:	40c8      	lsrs	r0, r1
 8007d36:	4088      	lsls	r0, r1
 8007d38:	1c01      	adds	r1, r0, #0
 8007d3a:	2001      	movs	r0, #1
 8007d3c:	42a9      	cmp	r1, r5
 8007d3e:	d1ec      	bne.n	8007d1a <__any_on+0x2e>
 8007d40:	e7dd      	b.n	8007cfe <__any_on+0x12>
 8007d42:	2000      	movs	r0, #0
 8007d44:	e7e9      	b.n	8007d1a <__any_on+0x2e>
 8007d46:	46c0      	nop			; (mov r8, r8)

08007d48 <_realloc_r>:
 8007d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d4a:	465f      	mov	r7, fp
 8007d4c:	4644      	mov	r4, r8
 8007d4e:	4656      	mov	r6, sl
 8007d50:	464d      	mov	r5, r9
 8007d52:	b4f0      	push	{r4, r5, r6, r7}
 8007d54:	4693      	mov	fp, r2
 8007d56:	b085      	sub	sp, #20
 8007d58:	1c07      	adds	r7, r0, #0
 8007d5a:	1c0c      	adds	r4, r1, #0
 8007d5c:	2900      	cmp	r1, #0
 8007d5e:	d100      	bne.n	8007d62 <_realloc_r+0x1a>
 8007d60:	e103      	b.n	8007f6a <_realloc_r+0x222>
 8007d62:	1c26      	adds	r6, r4, #0
 8007d64:	3e08      	subs	r6, #8
 8007d66:	f7ff fb31 	bl	80073cc <__malloc_lock>
 8007d6a:	6873      	ldr	r3, [r6, #4]
 8007d6c:	2203      	movs	r2, #3
 8007d6e:	1c18      	adds	r0, r3, #0
 8007d70:	465d      	mov	r5, fp
 8007d72:	4390      	bics	r0, r2
 8007d74:	350b      	adds	r5, #11
 8007d76:	4680      	mov	r8, r0
 8007d78:	2d16      	cmp	r5, #22
 8007d7a:	d865      	bhi.n	8007e48 <_realloc_r+0x100>
 8007d7c:	2110      	movs	r1, #16
 8007d7e:	9101      	str	r1, [sp, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	2510      	movs	r5, #16
 8007d84:	455d      	cmp	r5, fp
 8007d86:	d200      	bcs.n	8007d8a <_realloc_r+0x42>
 8007d88:	e0f4      	b.n	8007f74 <_realloc_r+0x22c>
 8007d8a:	2a00      	cmp	r2, #0
 8007d8c:	d000      	beq.n	8007d90 <_realloc_r+0x48>
 8007d8e:	e0f1      	b.n	8007f74 <_realloc_r+0x22c>
 8007d90:	9801      	ldr	r0, [sp, #4]
 8007d92:	4580      	cmp	r8, r0
 8007d94:	da5d      	bge.n	8007e52 <_realloc_r+0x10a>
 8007d96:	48d4      	ldr	r0, [pc, #848]	; (80080e8 <_realloc_r+0x3a0>)
 8007d98:	4641      	mov	r1, r8
 8007d9a:	6880      	ldr	r0, [r0, #8]
 8007d9c:	1872      	adds	r2, r6, r1
 8007d9e:	9002      	str	r0, [sp, #8]
 8007da0:	4290      	cmp	r0, r2
 8007da2:	d100      	bne.n	8007da6 <_realloc_r+0x5e>
 8007da4:	e0eb      	b.n	8007f7e <_realloc_r+0x236>
 8007da6:	6851      	ldr	r1, [r2, #4]
 8007da8:	2001      	movs	r0, #1
 8007daa:	468a      	mov	sl, r1
 8007dac:	4381      	bics	r1, r0
 8007dae:	4689      	mov	r9, r1
 8007db0:	4491      	add	r9, r2
 8007db2:	4684      	mov	ip, r0
 8007db4:	4648      	mov	r0, r9
 8007db6:	6841      	ldr	r1, [r0, #4]
 8007db8:	4660      	mov	r0, ip
 8007dba:	4201      	tst	r1, r0
 8007dbc:	d064      	beq.n	8007e88 <_realloc_r+0x140>
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	468c      	mov	ip, r1
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	07d9      	lsls	r1, r3, #31
 8007dc6:	d500      	bpl.n	8007dca <_realloc_r+0x82>
 8007dc8:	e07d      	b.n	8007ec6 <_realloc_r+0x17e>
 8007dca:	6833      	ldr	r3, [r6, #0]
 8007dcc:	1af3      	subs	r3, r6, r3
 8007dce:	469a      	mov	sl, r3
 8007dd0:	4651      	mov	r1, sl
 8007dd2:	6848      	ldr	r0, [r1, #4]
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	4398      	bics	r0, r3
 8007dd8:	1c03      	adds	r3, r0, #0
 8007dda:	2a00      	cmp	r2, #0
 8007ddc:	d100      	bne.n	8007de0 <_realloc_r+0x98>
 8007dde:	e099      	b.n	8007f14 <_realloc_r+0x1cc>
 8007de0:	9802      	ldr	r0, [sp, #8]
 8007de2:	4443      	add	r3, r8
 8007de4:	4282      	cmp	r2, r0
 8007de6:	d100      	bne.n	8007dea <_realloc_r+0xa2>
 8007de8:	e102      	b.n	8007ff0 <_realloc_r+0x2a8>
 8007dea:	4699      	mov	r9, r3
 8007dec:	9302      	str	r3, [sp, #8]
 8007dee:	9b01      	ldr	r3, [sp, #4]
 8007df0:	44e1      	add	r9, ip
 8007df2:	4599      	cmp	r9, r3
 8007df4:	da00      	bge.n	8007df8 <_realloc_r+0xb0>
 8007df6:	e08f      	b.n	8007f18 <_realloc_r+0x1d0>
 8007df8:	6893      	ldr	r3, [r2, #8]
 8007dfa:	68d1      	ldr	r1, [r2, #12]
 8007dfc:	60d9      	str	r1, [r3, #12]
 8007dfe:	608b      	str	r3, [r1, #8]
 8007e00:	4650      	mov	r0, sl
 8007e02:	68c2      	ldr	r2, [r0, #12]
 8007e04:	6883      	ldr	r3, [r0, #8]
 8007e06:	60da      	str	r2, [r3, #12]
 8007e08:	6093      	str	r3, [r2, #8]
 8007e0a:	4642      	mov	r2, r8
 8007e0c:	4656      	mov	r6, sl
 8007e0e:	3a04      	subs	r2, #4
 8007e10:	3608      	adds	r6, #8
 8007e12:	2a24      	cmp	r2, #36	; 0x24
 8007e14:	d900      	bls.n	8007e18 <_realloc_r+0xd0>
 8007e16:	e136      	b.n	8008086 <_realloc_r+0x33e>
 8007e18:	1c33      	adds	r3, r6, #0
 8007e1a:	2a13      	cmp	r2, #19
 8007e1c:	d909      	bls.n	8007e32 <_realloc_r+0xea>
 8007e1e:	6821      	ldr	r1, [r4, #0]
 8007e20:	6081      	str	r1, [r0, #8]
 8007e22:	6863      	ldr	r3, [r4, #4]
 8007e24:	60c3      	str	r3, [r0, #12]
 8007e26:	2a1b      	cmp	r2, #27
 8007e28:	d900      	bls.n	8007e2c <_realloc_r+0xe4>
 8007e2a:	e135      	b.n	8008098 <_realloc_r+0x350>
 8007e2c:	4653      	mov	r3, sl
 8007e2e:	3310      	adds	r3, #16
 8007e30:	3408      	adds	r4, #8
 8007e32:	6820      	ldr	r0, [r4, #0]
 8007e34:	6018      	str	r0, [r3, #0]
 8007e36:	6861      	ldr	r1, [r4, #4]
 8007e38:	6059      	str	r1, [r3, #4]
 8007e3a:	68a4      	ldr	r4, [r4, #8]
 8007e3c:	609c      	str	r4, [r3, #8]
 8007e3e:	4652      	mov	r2, sl
 8007e40:	1c34      	adds	r4, r6, #0
 8007e42:	6853      	ldr	r3, [r2, #4]
 8007e44:	4656      	mov	r6, sl
 8007e46:	e005      	b.n	8007e54 <_realloc_r+0x10c>
 8007e48:	2207      	movs	r2, #7
 8007e4a:	4395      	bics	r5, r2
 8007e4c:	9501      	str	r5, [sp, #4]
 8007e4e:	0fea      	lsrs	r2, r5, #31
 8007e50:	e798      	b.n	8007d84 <_realloc_r+0x3c>
 8007e52:	46c1      	mov	r9, r8
 8007e54:	4649      	mov	r1, r9
 8007e56:	1b4a      	subs	r2, r1, r5
 8007e58:	2a0f      	cmp	r2, #15
 8007e5a:	d823      	bhi.n	8007ea4 <_realloc_r+0x15c>
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	4013      	ands	r3, r2
 8007e60:	430b      	orrs	r3, r1
 8007e62:	6073      	str	r3, [r6, #4]
 8007e64:	444e      	add	r6, r9
 8007e66:	6871      	ldr	r1, [r6, #4]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	6072      	str	r2, [r6, #4]
 8007e6c:	1c38      	adds	r0, r7, #0
 8007e6e:	f7ff faaf 	bl	80073d0 <__malloc_unlock>
 8007e72:	46a1      	mov	r9, r4
 8007e74:	4648      	mov	r0, r9
 8007e76:	b005      	add	sp, #20
 8007e78:	bc3c      	pop	{r2, r3, r4, r5}
 8007e7a:	4690      	mov	r8, r2
 8007e7c:	4699      	mov	r9, r3
 8007e7e:	46a2      	mov	sl, r4
 8007e80:	46ab      	mov	fp, r5
 8007e82:	bcf0      	pop	{r4, r5, r6, r7}
 8007e84:	bc02      	pop	{r1}
 8007e86:	4708      	bx	r1
 8007e88:	2003      	movs	r0, #3
 8007e8a:	4651      	mov	r1, sl
 8007e8c:	4381      	bics	r1, r0
 8007e8e:	4689      	mov	r9, r1
 8007e90:	9801      	ldr	r0, [sp, #4]
 8007e92:	44c1      	add	r9, r8
 8007e94:	468c      	mov	ip, r1
 8007e96:	4581      	cmp	r9, r0
 8007e98:	db94      	blt.n	8007dc4 <_realloc_r+0x7c>
 8007e9a:	68d1      	ldr	r1, [r2, #12]
 8007e9c:	6892      	ldr	r2, [r2, #8]
 8007e9e:	60d1      	str	r1, [r2, #12]
 8007ea0:	608a      	str	r2, [r1, #8]
 8007ea2:	e7d7      	b.n	8007e54 <_realloc_r+0x10c>
 8007ea4:	2001      	movs	r0, #1
 8007ea6:	4003      	ands	r3, r0
 8007ea8:	1971      	adds	r1, r6, r5
 8007eaa:	431d      	orrs	r5, r3
 8007eac:	1c13      	adds	r3, r2, #0
 8007eae:	4303      	orrs	r3, r0
 8007eb0:	6075      	str	r5, [r6, #4]
 8007eb2:	604b      	str	r3, [r1, #4]
 8007eb4:	188a      	adds	r2, r1, r2
 8007eb6:	6853      	ldr	r3, [r2, #4]
 8007eb8:	4318      	orrs	r0, r3
 8007eba:	6050      	str	r0, [r2, #4]
 8007ebc:	3108      	adds	r1, #8
 8007ebe:	1c38      	adds	r0, r7, #0
 8007ec0:	f7fe fa1a 	bl	80062f8 <_free_r>
 8007ec4:	e7d2      	b.n	8007e6c <_realloc_r+0x124>
 8007ec6:	1c38      	adds	r0, r7, #0
 8007ec8:	4659      	mov	r1, fp
 8007eca:	f7fe ff5d 	bl	8006d88 <_malloc_r>
 8007ece:	4681      	mov	r9, r0
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d01b      	beq.n	8007f0c <_realloc_r+0x1c4>
 8007ed4:	6873      	ldr	r3, [r6, #4]
 8007ed6:	1c02      	adds	r2, r0, #0
 8007ed8:	2101      	movs	r1, #1
 8007eda:	1c18      	adds	r0, r3, #0
 8007edc:	4388      	bics	r0, r1
 8007ede:	3a08      	subs	r2, #8
 8007ee0:	1831      	adds	r1, r6, r0
 8007ee2:	428a      	cmp	r2, r1
 8007ee4:	d100      	bne.n	8007ee8 <_realloc_r+0x1a0>
 8007ee6:	e0c8      	b.n	800807a <_realloc_r+0x332>
 8007ee8:	4642      	mov	r2, r8
 8007eea:	3a04      	subs	r2, #4
 8007eec:	2a24      	cmp	r2, #36	; 0x24
 8007eee:	d87a      	bhi.n	8007fe6 <_realloc_r+0x29e>
 8007ef0:	2a13      	cmp	r2, #19
 8007ef2:	d851      	bhi.n	8007f98 <_realloc_r+0x250>
 8007ef4:	464b      	mov	r3, r9
 8007ef6:	1c22      	adds	r2, r4, #0
 8007ef8:	6811      	ldr	r1, [r2, #0]
 8007efa:	6019      	str	r1, [r3, #0]
 8007efc:	6850      	ldr	r0, [r2, #4]
 8007efe:	6058      	str	r0, [r3, #4]
 8007f00:	6892      	ldr	r2, [r2, #8]
 8007f02:	609a      	str	r2, [r3, #8]
 8007f04:	1c38      	adds	r0, r7, #0
 8007f06:	1c21      	adds	r1, r4, #0
 8007f08:	f7fe f9f6 	bl	80062f8 <_free_r>
 8007f0c:	1c38      	adds	r0, r7, #0
 8007f0e:	f7ff fa5f 	bl	80073d0 <__malloc_unlock>
 8007f12:	e7af      	b.n	8007e74 <_realloc_r+0x12c>
 8007f14:	4443      	add	r3, r8
 8007f16:	9302      	str	r3, [sp, #8]
 8007f18:	9a02      	ldr	r2, [sp, #8]
 8007f1a:	9b01      	ldr	r3, [sp, #4]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	dbd2      	blt.n	8007ec6 <_realloc_r+0x17e>
 8007f20:	4650      	mov	r0, sl
 8007f22:	68c2      	ldr	r2, [r0, #12]
 8007f24:	6883      	ldr	r3, [r0, #8]
 8007f26:	60da      	str	r2, [r3, #12]
 8007f28:	6093      	str	r3, [r2, #8]
 8007f2a:	4642      	mov	r2, r8
 8007f2c:	4656      	mov	r6, sl
 8007f2e:	3a04      	subs	r2, #4
 8007f30:	3608      	adds	r6, #8
 8007f32:	2a24      	cmp	r2, #36	; 0x24
 8007f34:	d83c      	bhi.n	8007fb0 <_realloc_r+0x268>
 8007f36:	1c33      	adds	r3, r6, #0
 8007f38:	2a13      	cmp	r2, #19
 8007f3a:	d909      	bls.n	8007f50 <_realloc_r+0x208>
 8007f3c:	6821      	ldr	r1, [r4, #0]
 8007f3e:	6081      	str	r1, [r0, #8]
 8007f40:	6863      	ldr	r3, [r4, #4]
 8007f42:	60c3      	str	r3, [r0, #12]
 8007f44:	2a1b      	cmp	r2, #27
 8007f46:	d900      	bls.n	8007f4a <_realloc_r+0x202>
 8007f48:	e0ba      	b.n	80080c0 <_realloc_r+0x378>
 8007f4a:	4653      	mov	r3, sl
 8007f4c:	3310      	adds	r3, #16
 8007f4e:	3408      	adds	r4, #8
 8007f50:	6820      	ldr	r0, [r4, #0]
 8007f52:	6018      	str	r0, [r3, #0]
 8007f54:	6861      	ldr	r1, [r4, #4]
 8007f56:	6059      	str	r1, [r3, #4]
 8007f58:	68a4      	ldr	r4, [r4, #8]
 8007f5a:	9802      	ldr	r0, [sp, #8]
 8007f5c:	609c      	str	r4, [r3, #8]
 8007f5e:	4652      	mov	r2, sl
 8007f60:	1c34      	adds	r4, r6, #0
 8007f62:	6853      	ldr	r3, [r2, #4]
 8007f64:	4681      	mov	r9, r0
 8007f66:	4656      	mov	r6, sl
 8007f68:	e774      	b.n	8007e54 <_realloc_r+0x10c>
 8007f6a:	1c11      	adds	r1, r2, #0
 8007f6c:	f7fe ff0c 	bl	8006d88 <_malloc_r>
 8007f70:	4681      	mov	r9, r0
 8007f72:	e77f      	b.n	8007e74 <_realloc_r+0x12c>
 8007f74:	230c      	movs	r3, #12
 8007f76:	2200      	movs	r2, #0
 8007f78:	603b      	str	r3, [r7, #0]
 8007f7a:	4691      	mov	r9, r2
 8007f7c:	e77a      	b.n	8007e74 <_realloc_r+0x12c>
 8007f7e:	9902      	ldr	r1, [sp, #8]
 8007f80:	6849      	ldr	r1, [r1, #4]
 8007f82:	2203      	movs	r2, #3
 8007f84:	4391      	bics	r1, r2
 8007f86:	1c0a      	adds	r2, r1, #0
 8007f88:	468c      	mov	ip, r1
 8007f8a:	2110      	movs	r1, #16
 8007f8c:	4442      	add	r2, r8
 8007f8e:	1949      	adds	r1, r1, r5
 8007f90:	428a      	cmp	r2, r1
 8007f92:	da18      	bge.n	8007fc6 <_realloc_r+0x27e>
 8007f94:	9a02      	ldr	r2, [sp, #8]
 8007f96:	e715      	b.n	8007dc4 <_realloc_r+0x7c>
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	4648      	mov	r0, r9
 8007f9c:	6003      	str	r3, [r0, #0]
 8007f9e:	6861      	ldr	r1, [r4, #4]
 8007fa0:	6041      	str	r1, [r0, #4]
 8007fa2:	2a1b      	cmp	r2, #27
 8007fa4:	d85d      	bhi.n	8008062 <_realloc_r+0x31a>
 8007fa6:	464b      	mov	r3, r9
 8007fa8:	1c22      	adds	r2, r4, #0
 8007faa:	3308      	adds	r3, #8
 8007fac:	3208      	adds	r2, #8
 8007fae:	e7a3      	b.n	8007ef8 <_realloc_r+0x1b0>
 8007fb0:	1c21      	adds	r1, r4, #0
 8007fb2:	1c30      	adds	r0, r6, #0
 8007fb4:	f000 fe5a 	bl	8008c6c <memmove>
 8007fb8:	9a02      	ldr	r2, [sp, #8]
 8007fba:	4651      	mov	r1, sl
 8007fbc:	1c34      	adds	r4, r6, #0
 8007fbe:	684b      	ldr	r3, [r1, #4]
 8007fc0:	4691      	mov	r9, r2
 8007fc2:	4656      	mov	r6, sl
 8007fc4:	e746      	b.n	8007e54 <_realloc_r+0x10c>
 8007fc6:	4b48      	ldr	r3, [pc, #288]	; (80080e8 <_realloc_r+0x3a0>)
 8007fc8:	1971      	adds	r1, r6, r5
 8007fca:	6099      	str	r1, [r3, #8]
 8007fcc:	1b52      	subs	r2, r2, r5
 8007fce:	2301      	movs	r3, #1
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	604a      	str	r2, [r1, #4]
 8007fd4:	6870      	ldr	r0, [r6, #4]
 8007fd6:	4003      	ands	r3, r0
 8007fd8:	431d      	orrs	r5, r3
 8007fda:	6075      	str	r5, [r6, #4]
 8007fdc:	1c38      	adds	r0, r7, #0
 8007fde:	f7ff f9f7 	bl	80073d0 <__malloc_unlock>
 8007fe2:	46a1      	mov	r9, r4
 8007fe4:	e746      	b.n	8007e74 <_realloc_r+0x12c>
 8007fe6:	4648      	mov	r0, r9
 8007fe8:	1c21      	adds	r1, r4, #0
 8007fea:	f000 fe3f 	bl	8008c6c <memmove>
 8007fee:	e789      	b.n	8007f04 <_realloc_r+0x1bc>
 8007ff0:	9302      	str	r3, [sp, #8]
 8007ff2:	4463      	add	r3, ip
 8007ff4:	1c1a      	adds	r2, r3, #0
 8007ff6:	9303      	str	r3, [sp, #12]
 8007ff8:	1c2b      	adds	r3, r5, #0
 8007ffa:	3310      	adds	r3, #16
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	db8b      	blt.n	8007f18 <_realloc_r+0x1d0>
 8008000:	4653      	mov	r3, sl
 8008002:	68da      	ldr	r2, [r3, #12]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	2008      	movs	r0, #8
 8008008:	60da      	str	r2, [r3, #12]
 800800a:	6093      	str	r3, [r2, #8]
 800800c:	4642      	mov	r2, r8
 800800e:	4681      	mov	r9, r0
 8008010:	3a04      	subs	r2, #4
 8008012:	44d1      	add	r9, sl
 8008014:	2a24      	cmp	r2, #36	; 0x24
 8008016:	d872      	bhi.n	80080fe <_realloc_r+0x3b6>
 8008018:	464b      	mov	r3, r9
 800801a:	2a13      	cmp	r2, #19
 800801c:	d908      	bls.n	8008030 <_realloc_r+0x2e8>
 800801e:	6821      	ldr	r1, [r4, #0]
 8008020:	4653      	mov	r3, sl
 8008022:	6099      	str	r1, [r3, #8]
 8008024:	6860      	ldr	r0, [r4, #4]
 8008026:	60d8      	str	r0, [r3, #12]
 8008028:	2a1b      	cmp	r2, #27
 800802a:	d86d      	bhi.n	8008108 <_realloc_r+0x3c0>
 800802c:	3310      	adds	r3, #16
 800802e:	3408      	adds	r4, #8
 8008030:	6820      	ldr	r0, [r4, #0]
 8008032:	6018      	str	r0, [r3, #0]
 8008034:	6861      	ldr	r1, [r4, #4]
 8008036:	6059      	str	r1, [r3, #4]
 8008038:	68a4      	ldr	r4, [r4, #8]
 800803a:	609c      	str	r4, [r3, #8]
 800803c:	4653      	mov	r3, sl
 800803e:	195a      	adds	r2, r3, r5
 8008040:	9b03      	ldr	r3, [sp, #12]
 8008042:	1b59      	subs	r1, r3, r5
 8008044:	2301      	movs	r3, #1
 8008046:	4319      	orrs	r1, r3
 8008048:	4827      	ldr	r0, [pc, #156]	; (80080e8 <_realloc_r+0x3a0>)
 800804a:	6051      	str	r1, [r2, #4]
 800804c:	6082      	str	r2, [r0, #8]
 800804e:	4650      	mov	r0, sl
 8008050:	6840      	ldr	r0, [r0, #4]
 8008052:	4003      	ands	r3, r0
 8008054:	431d      	orrs	r5, r3
 8008056:	4651      	mov	r1, sl
 8008058:	604d      	str	r5, [r1, #4]
 800805a:	1c38      	adds	r0, r7, #0
 800805c:	f7ff f9b8 	bl	80073d0 <__malloc_unlock>
 8008060:	e708      	b.n	8007e74 <_realloc_r+0x12c>
 8008062:	68a3      	ldr	r3, [r4, #8]
 8008064:	4648      	mov	r0, r9
 8008066:	6083      	str	r3, [r0, #8]
 8008068:	68e1      	ldr	r1, [r4, #12]
 800806a:	60c1      	str	r1, [r0, #12]
 800806c:	2a24      	cmp	r2, #36	; 0x24
 800806e:	d01e      	beq.n	80080ae <_realloc_r+0x366>
 8008070:	464b      	mov	r3, r9
 8008072:	1c22      	adds	r2, r4, #0
 8008074:	3310      	adds	r3, #16
 8008076:	3210      	adds	r2, #16
 8008078:	e73e      	b.n	8007ef8 <_realloc_r+0x1b0>
 800807a:	6852      	ldr	r2, [r2, #4]
 800807c:	2103      	movs	r1, #3
 800807e:	438a      	bics	r2, r1
 8008080:	4691      	mov	r9, r2
 8008082:	44c1      	add	r9, r8
 8008084:	e6e6      	b.n	8007e54 <_realloc_r+0x10c>
 8008086:	1c30      	adds	r0, r6, #0
 8008088:	1c21      	adds	r1, r4, #0
 800808a:	f000 fdef 	bl	8008c6c <memmove>
 800808e:	4650      	mov	r0, sl
 8008090:	1c34      	adds	r4, r6, #0
 8008092:	6843      	ldr	r3, [r0, #4]
 8008094:	4656      	mov	r6, sl
 8008096:	e6dd      	b.n	8007e54 <_realloc_r+0x10c>
 8008098:	68a0      	ldr	r0, [r4, #8]
 800809a:	4651      	mov	r1, sl
 800809c:	6108      	str	r0, [r1, #16]
 800809e:	68e3      	ldr	r3, [r4, #12]
 80080a0:	614b      	str	r3, [r1, #20]
 80080a2:	2a24      	cmp	r2, #36	; 0x24
 80080a4:	d017      	beq.n	80080d6 <_realloc_r+0x38e>
 80080a6:	4653      	mov	r3, sl
 80080a8:	3318      	adds	r3, #24
 80080aa:	3410      	adds	r4, #16
 80080ac:	e6c1      	b.n	8007e32 <_realloc_r+0xea>
 80080ae:	6922      	ldr	r2, [r4, #16]
 80080b0:	6102      	str	r2, [r0, #16]
 80080b2:	6960      	ldr	r0, [r4, #20]
 80080b4:	464b      	mov	r3, r9
 80080b6:	1c22      	adds	r2, r4, #0
 80080b8:	6158      	str	r0, [r3, #20]
 80080ba:	3218      	adds	r2, #24
 80080bc:	3318      	adds	r3, #24
 80080be:	e71b      	b.n	8007ef8 <_realloc_r+0x1b0>
 80080c0:	68a0      	ldr	r0, [r4, #8]
 80080c2:	4651      	mov	r1, sl
 80080c4:	6108      	str	r0, [r1, #16]
 80080c6:	68e3      	ldr	r3, [r4, #12]
 80080c8:	614b      	str	r3, [r1, #20]
 80080ca:	2a24      	cmp	r2, #36	; 0x24
 80080cc:	d00e      	beq.n	80080ec <_realloc_r+0x3a4>
 80080ce:	4653      	mov	r3, sl
 80080d0:	3318      	adds	r3, #24
 80080d2:	3410      	adds	r4, #16
 80080d4:	e73c      	b.n	8007f50 <_realloc_r+0x208>
 80080d6:	6920      	ldr	r0, [r4, #16]
 80080d8:	4651      	mov	r1, sl
 80080da:	6188      	str	r0, [r1, #24]
 80080dc:	6962      	ldr	r2, [r4, #20]
 80080de:	4653      	mov	r3, sl
 80080e0:	61ca      	str	r2, [r1, #28]
 80080e2:	3320      	adds	r3, #32
 80080e4:	3418      	adds	r4, #24
 80080e6:	e6a4      	b.n	8007e32 <_realloc_r+0xea>
 80080e8:	200005c0 	.word	0x200005c0
 80080ec:	6920      	ldr	r0, [r4, #16]
 80080ee:	4651      	mov	r1, sl
 80080f0:	6188      	str	r0, [r1, #24]
 80080f2:	6962      	ldr	r2, [r4, #20]
 80080f4:	4653      	mov	r3, sl
 80080f6:	61ca      	str	r2, [r1, #28]
 80080f8:	3320      	adds	r3, #32
 80080fa:	3418      	adds	r4, #24
 80080fc:	e728      	b.n	8007f50 <_realloc_r+0x208>
 80080fe:	4648      	mov	r0, r9
 8008100:	1c21      	adds	r1, r4, #0
 8008102:	f000 fdb3 	bl	8008c6c <memmove>
 8008106:	e799      	b.n	800803c <_realloc_r+0x2f4>
 8008108:	68a1      	ldr	r1, [r4, #8]
 800810a:	4653      	mov	r3, sl
 800810c:	6119      	str	r1, [r3, #16]
 800810e:	68e0      	ldr	r0, [r4, #12]
 8008110:	6158      	str	r0, [r3, #20]
 8008112:	2a24      	cmp	r2, #36	; 0x24
 8008114:	d002      	beq.n	800811c <_realloc_r+0x3d4>
 8008116:	3318      	adds	r3, #24
 8008118:	3410      	adds	r4, #16
 800811a:	e789      	b.n	8008030 <_realloc_r+0x2e8>
 800811c:	6921      	ldr	r1, [r4, #16]
 800811e:	6199      	str	r1, [r3, #24]
 8008120:	6963      	ldr	r3, [r4, #20]
 8008122:	4652      	mov	r2, sl
 8008124:	61d3      	str	r3, [r2, #28]
 8008126:	4653      	mov	r3, sl
 8008128:	3320      	adds	r3, #32
 800812a:	3418      	adds	r4, #24
 800812c:	e780      	b.n	8008030 <_realloc_r+0x2e8>
 800812e:	46c0      	nop			; (mov r8, r8)

08008130 <_sbrk_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4c08      	ldr	r4, [pc, #32]	; (8008154 <_sbrk_r+0x24>)
 8008134:	2300      	movs	r3, #0
 8008136:	1c05      	adds	r5, r0, #0
 8008138:	1c08      	adds	r0, r1, #0
 800813a:	6023      	str	r3, [r4, #0]
 800813c:	f7fc fc9e 	bl	8004a7c <_sbrk>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d002      	beq.n	800814a <_sbrk_r+0x1a>
 8008144:	bc38      	pop	{r3, r4, r5}
 8008146:	bc02      	pop	{r1}
 8008148:	4708      	bx	r1
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0f9      	beq.n	8008144 <_sbrk_r+0x14>
 8008150:	602b      	str	r3, [r5, #0]
 8008152:	e7f7      	b.n	8008144 <_sbrk_r+0x14>
 8008154:	20001e4c 	.word	0x20001e4c

08008158 <__ssprint_r>:
 8008158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800815a:	465f      	mov	r7, fp
 800815c:	464d      	mov	r5, r9
 800815e:	4644      	mov	r4, r8
 8008160:	4656      	mov	r6, sl
 8008162:	b4f0      	push	{r4, r5, r6, r7}
 8008164:	6893      	ldr	r3, [r2, #8]
 8008166:	b083      	sub	sp, #12
 8008168:	9001      	str	r0, [sp, #4]
 800816a:	1c0d      	adds	r5, r1, #0
 800816c:	4690      	mov	r8, r2
 800816e:	6817      	ldr	r7, [r2, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d100      	bne.n	8008176 <__ssprint_r+0x1e>
 8008174:	e07e      	b.n	8008274 <__ssprint_r+0x11c>
 8008176:	6808      	ldr	r0, [r1, #0]
 8008178:	2400      	movs	r4, #0
 800817a:	2100      	movs	r1, #0
 800817c:	4689      	mov	r9, r1
 800817e:	68ab      	ldr	r3, [r5, #8]
 8008180:	2c00      	cmp	r4, #0
 8008182:	d048      	beq.n	8008216 <__ssprint_r+0xbe>
 8008184:	1c1e      	adds	r6, r3, #0
 8008186:	469a      	mov	sl, r3
 8008188:	429c      	cmp	r4, r3
 800818a:	d34e      	bcc.n	800822a <__ssprint_r+0xd2>
 800818c:	2290      	movs	r2, #144	; 0x90
 800818e:	89ab      	ldrh	r3, [r5, #12]
 8008190:	00d2      	lsls	r2, r2, #3
 8008192:	4213      	tst	r3, r2
 8008194:	d02e      	beq.n	80081f4 <__ssprint_r+0x9c>
 8008196:	6929      	ldr	r1, [r5, #16]
 8008198:	696a      	ldr	r2, [r5, #20]
 800819a:	1a40      	subs	r0, r0, r1
 800819c:	4683      	mov	fp, r0
 800819e:	0050      	lsls	r0, r2, #1
 80081a0:	1882      	adds	r2, r0, r2
 80081a2:	0fd0      	lsrs	r0, r2, #31
 80081a4:	1882      	adds	r2, r0, r2
 80081a6:	1c60      	adds	r0, r4, #1
 80081a8:	1052      	asrs	r2, r2, #1
 80081aa:	4458      	add	r0, fp
 80081ac:	4692      	mov	sl, r2
 80081ae:	4282      	cmp	r2, r0
 80081b0:	d201      	bcs.n	80081b6 <__ssprint_r+0x5e>
 80081b2:	4682      	mov	sl, r0
 80081b4:	1c02      	adds	r2, r0, #0
 80081b6:	2080      	movs	r0, #128	; 0x80
 80081b8:	00c0      	lsls	r0, r0, #3
 80081ba:	4203      	tst	r3, r0
 80081bc:	d038      	beq.n	8008230 <__ssprint_r+0xd8>
 80081be:	9801      	ldr	r0, [sp, #4]
 80081c0:	1c11      	adds	r1, r2, #0
 80081c2:	f7fe fde1 	bl	8006d88 <_malloc_r>
 80081c6:	1e06      	subs	r6, r0, #0
 80081c8:	d057      	beq.n	800827a <__ssprint_r+0x122>
 80081ca:	465a      	mov	r2, fp
 80081cc:	1c30      	adds	r0, r6, #0
 80081ce:	6929      	ldr	r1, [r5, #16]
 80081d0:	f7ff f8b4 	bl	800733c <memcpy>
 80081d4:	89ab      	ldrh	r3, [r5, #12]
 80081d6:	4a2b      	ldr	r2, [pc, #172]	; (8008284 <__ssprint_r+0x12c>)
 80081d8:	4013      	ands	r3, r2
 80081da:	2280      	movs	r2, #128	; 0x80
 80081dc:	4313      	orrs	r3, r2
 80081de:	81ab      	strh	r3, [r5, #12]
 80081e0:	4652      	mov	r2, sl
 80081e2:	4659      	mov	r1, fp
 80081e4:	1870      	adds	r0, r6, r1
 80081e6:	1a53      	subs	r3, r2, r1
 80081e8:	6028      	str	r0, [r5, #0]
 80081ea:	616a      	str	r2, [r5, #20]
 80081ec:	60ab      	str	r3, [r5, #8]
 80081ee:	612e      	str	r6, [r5, #16]
 80081f0:	46a2      	mov	sl, r4
 80081f2:	1c26      	adds	r6, r4, #0
 80081f4:	4649      	mov	r1, r9
 80081f6:	4652      	mov	r2, sl
 80081f8:	f000 fd38 	bl	8008c6c <memmove>
 80081fc:	6829      	ldr	r1, [r5, #0]
 80081fe:	4642      	mov	r2, r8
 8008200:	68ab      	ldr	r3, [r5, #8]
 8008202:	6892      	ldr	r2, [r2, #8]
 8008204:	1c08      	adds	r0, r1, #0
 8008206:	1b9b      	subs	r3, r3, r6
 8008208:	4450      	add	r0, sl
 800820a:	1b14      	subs	r4, r2, r4
 800820c:	4641      	mov	r1, r8
 800820e:	60ab      	str	r3, [r5, #8]
 8008210:	6028      	str	r0, [r5, #0]
 8008212:	608c      	str	r4, [r1, #8]
 8008214:	d023      	beq.n	800825e <__ssprint_r+0x106>
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	687c      	ldr	r4, [r7, #4]
 800821a:	4689      	mov	r9, r1
 800821c:	3708      	adds	r7, #8
 800821e:	2c00      	cmp	r4, #0
 8008220:	d0f9      	beq.n	8008216 <__ssprint_r+0xbe>
 8008222:	1c1e      	adds	r6, r3, #0
 8008224:	469a      	mov	sl, r3
 8008226:	429c      	cmp	r4, r3
 8008228:	d2b0      	bcs.n	800818c <__ssprint_r+0x34>
 800822a:	1c26      	adds	r6, r4, #0
 800822c:	46a2      	mov	sl, r4
 800822e:	e7e1      	b.n	80081f4 <__ssprint_r+0x9c>
 8008230:	9801      	ldr	r0, [sp, #4]
 8008232:	f7ff fd89 	bl	8007d48 <_realloc_r>
 8008236:	1e06      	subs	r6, r0, #0
 8008238:	d1d2      	bne.n	80081e0 <__ssprint_r+0x88>
 800823a:	9801      	ldr	r0, [sp, #4]
 800823c:	6929      	ldr	r1, [r5, #16]
 800823e:	f7fe f85b 	bl	80062f8 <_free_r>
 8008242:	9801      	ldr	r0, [sp, #4]
 8008244:	230c      	movs	r3, #12
 8008246:	6003      	str	r3, [r0, #0]
 8008248:	89aa      	ldrh	r2, [r5, #12]
 800824a:	2340      	movs	r3, #64	; 0x40
 800824c:	4313      	orrs	r3, r2
 800824e:	81ab      	strh	r3, [r5, #12]
 8008250:	4640      	mov	r0, r8
 8008252:	2300      	movs	r3, #0
 8008254:	6083      	str	r3, [r0, #8]
 8008256:	6043      	str	r3, [r0, #4]
 8008258:	2001      	movs	r0, #1
 800825a:	4240      	negs	r0, r0
 800825c:	e001      	b.n	8008262 <__ssprint_r+0x10a>
 800825e:	604c      	str	r4, [r1, #4]
 8008260:	2000      	movs	r0, #0
 8008262:	b003      	add	sp, #12
 8008264:	bc3c      	pop	{r2, r3, r4, r5}
 8008266:	4690      	mov	r8, r2
 8008268:	4699      	mov	r9, r3
 800826a:	46a2      	mov	sl, r4
 800826c:	46ab      	mov	fp, r5
 800826e:	bcf0      	pop	{r4, r5, r6, r7}
 8008270:	bc02      	pop	{r1}
 8008272:	4708      	bx	r1
 8008274:	6053      	str	r3, [r2, #4]
 8008276:	2000      	movs	r0, #0
 8008278:	e7f3      	b.n	8008262 <__ssprint_r+0x10a>
 800827a:	9901      	ldr	r1, [sp, #4]
 800827c:	230c      	movs	r3, #12
 800827e:	600b      	str	r3, [r1, #0]
 8008280:	e7e2      	b.n	8008248 <__ssprint_r+0xf0>
 8008282:	46c0      	nop			; (mov r8, r8)
 8008284:	fffffb7f 	.word	0xfffffb7f

08008288 <_svfiprintf_r>:
 8008288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800828a:	465f      	mov	r7, fp
 800828c:	4644      	mov	r4, r8
 800828e:	4656      	mov	r6, sl
 8008290:	464d      	mov	r5, r9
 8008292:	b4f0      	push	{r4, r5, r6, r7}
 8008294:	b0af      	sub	sp, #188	; 0xbc
 8008296:	9005      	str	r0, [sp, #20]
 8008298:	9308      	str	r3, [sp, #32]
 800829a:	898b      	ldrh	r3, [r1, #12]
 800829c:	468b      	mov	fp, r1
 800829e:	1c14      	adds	r4, r2, #0
 80082a0:	0618      	lsls	r0, r3, #24
 80082a2:	d504      	bpl.n	80082ae <_svfiprintf_r+0x26>
 80082a4:	6909      	ldr	r1, [r1, #16]
 80082a6:	2900      	cmp	r1, #0
 80082a8:	d101      	bne.n	80082ae <_svfiprintf_r+0x26>
 80082aa:	f000 fc1a 	bl	8008ae2 <_svfiprintf_r+0x85a>
 80082ae:	46a1      	mov	r9, r4
 80082b0:	2400      	movs	r4, #0
 80082b2:	940c      	str	r4, [sp, #48]	; 0x30
 80082b4:	9406      	str	r4, [sp, #24]
 80082b6:	466c      	mov	r4, sp
 80082b8:	a91e      	add	r1, sp, #120	; 0x78
 80082ba:	3477      	adds	r4, #119	; 0x77
 80082bc:	2300      	movs	r3, #0
 80082be:	4688      	mov	r8, r1
 80082c0:	9111      	str	r1, [sp, #68]	; 0x44
 80082c2:	1c0f      	adds	r7, r1, #0
 80082c4:	1b09      	subs	r1, r1, r4
 80082c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80082c8:	9312      	str	r3, [sp, #72]	; 0x48
 80082ca:	9401      	str	r4, [sp, #4]
 80082cc:	910d      	str	r1, [sp, #52]	; 0x34
 80082ce:	464d      	mov	r5, r9
 80082d0:	782b      	ldrb	r3, [r5, #0]
 80082d2:	1c2c      	adds	r4, r5, #0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d019      	beq.n	800830c <_svfiprintf_r+0x84>
 80082d8:	2b25      	cmp	r3, #37	; 0x25
 80082da:	d102      	bne.n	80082e2 <_svfiprintf_r+0x5a>
 80082dc:	e016      	b.n	800830c <_svfiprintf_r+0x84>
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <_svfiprintf_r+0x62>
 80082e2:	3401      	adds	r4, #1
 80082e4:	7823      	ldrb	r3, [r4, #0]
 80082e6:	2b25      	cmp	r3, #37	; 0x25
 80082e8:	d1f9      	bne.n	80082de <_svfiprintf_r+0x56>
 80082ea:	1b66      	subs	r6, r4, r5
 80082ec:	d00e      	beq.n	800830c <_svfiprintf_r+0x84>
 80082ee:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80082f0:	1983      	adds	r3, r0, r6
 80082f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80082f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082f6:	3301      	adds	r3, #1
 80082f8:	603d      	str	r5, [r7, #0]
 80082fa:	607e      	str	r6, [r7, #4]
 80082fc:	9312      	str	r3, [sp, #72]	; 0x48
 80082fe:	2b07      	cmp	r3, #7
 8008300:	dd00      	ble.n	8008304 <_svfiprintf_r+0x7c>
 8008302:	e323      	b.n	800894c <_svfiprintf_r+0x6c4>
 8008304:	3708      	adds	r7, #8
 8008306:	9906      	ldr	r1, [sp, #24]
 8008308:	1989      	adds	r1, r1, r6
 800830a:	9106      	str	r1, [sp, #24]
 800830c:	7823      	ldrb	r3, [r4, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d100      	bne.n	8008314 <_svfiprintf_r+0x8c>
 8008312:	e2f2      	b.n	80088fa <_svfiprintf_r+0x672>
 8008314:	1c65      	adds	r5, r4, #1
 8008316:	2401      	movs	r4, #1
 8008318:	4264      	negs	r4, r4
 800831a:	223f      	movs	r2, #63	; 0x3f
 800831c:	2300      	movs	r3, #0
 800831e:	446a      	add	r2, sp
 8008320:	46a1      	mov	r9, r4
 8008322:	2400      	movs	r4, #0
 8008324:	7013      	strb	r3, [r2, #0]
 8008326:	9407      	str	r4, [sp, #28]
 8008328:	2280      	movs	r2, #128	; 0x80
 800832a:	2304      	movs	r3, #4
 800832c:	9402      	str	r4, [sp, #8]
 800832e:	49cd      	ldr	r1, [pc, #820]	; (8008664 <_svfiprintf_r+0x3dc>)
 8008330:	2000      	movs	r0, #0
 8008332:	2610      	movs	r6, #16
 8008334:	4692      	mov	sl, r2
 8008336:	469c      	mov	ip, r3
 8008338:	782b      	ldrb	r3, [r5, #0]
 800833a:	3501      	adds	r5, #1
 800833c:	1c1a      	adds	r2, r3, #0
 800833e:	3a20      	subs	r2, #32
 8008340:	2a58      	cmp	r2, #88	; 0x58
 8008342:	d800      	bhi.n	8008346 <_svfiprintf_r+0xbe>
 8008344:	e118      	b.n	8008578 <_svfiprintf_r+0x2f0>
 8008346:	213f      	movs	r1, #63	; 0x3f
 8008348:	4469      	add	r1, sp
 800834a:	7008      	strb	r0, [r1, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d100      	bne.n	8008352 <_svfiprintf_r+0xca>
 8008350:	e2d3      	b.n	80088fa <_svfiprintf_r+0x672>
 8008352:	aa14      	add	r2, sp, #80	; 0x50
 8008354:	2401      	movs	r4, #1
 8008356:	7013      	strb	r3, [r2, #0]
 8008358:	2300      	movs	r3, #0
 800835a:	700b      	strb	r3, [r1, #0]
 800835c:	9403      	str	r4, [sp, #12]
 800835e:	9404      	str	r4, [sp, #16]
 8008360:	920b      	str	r2, [sp, #44]	; 0x2c
 8008362:	2400      	movs	r4, #0
 8008364:	9409      	str	r4, [sp, #36]	; 0x24
 8008366:	9c02      	ldr	r4, [sp, #8]
 8008368:	2302      	movs	r3, #2
 800836a:	401c      	ands	r4, r3
 800836c:	940a      	str	r4, [sp, #40]	; 0x28
 800836e:	d002      	beq.n	8008376 <_svfiprintf_r+0xee>
 8008370:	9c03      	ldr	r4, [sp, #12]
 8008372:	3402      	adds	r4, #2
 8008374:	9403      	str	r4, [sp, #12]
 8008376:	9c02      	ldr	r4, [sp, #8]
 8008378:	2384      	movs	r3, #132	; 0x84
 800837a:	401c      	ands	r4, r3
 800837c:	46a2      	mov	sl, r4
 800837e:	d138      	bne.n	80083f2 <_svfiprintf_r+0x16a>
 8008380:	9807      	ldr	r0, [sp, #28]
 8008382:	9903      	ldr	r1, [sp, #12]
 8008384:	1a44      	subs	r4, r0, r1
 8008386:	2c00      	cmp	r4, #0
 8008388:	dd33      	ble.n	80083f2 <_svfiprintf_r+0x16a>
 800838a:	4eb7      	ldr	r6, [pc, #732]	; (8008668 <_svfiprintf_r+0x3e0>)
 800838c:	2c10      	cmp	r4, #16
 800838e:	dd24      	ble.n	80083da <_svfiprintf_r+0x152>
 8008390:	2210      	movs	r2, #16
 8008392:	1c3b      	adds	r3, r7, #0
 8008394:	4691      	mov	r9, r2
 8008396:	465f      	mov	r7, fp
 8008398:	46ab      	mov	fp, r5
 800839a:	9d05      	ldr	r5, [sp, #20]
 800839c:	e003      	b.n	80083a6 <_svfiprintf_r+0x11e>
 800839e:	3c10      	subs	r4, #16
 80083a0:	3308      	adds	r3, #8
 80083a2:	2c10      	cmp	r4, #16
 80083a4:	dd16      	ble.n	80083d4 <_svfiprintf_r+0x14c>
 80083a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083a8:	3210      	adds	r2, #16
 80083aa:	9213      	str	r2, [sp, #76]	; 0x4c
 80083ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083ae:	4648      	mov	r0, r9
 80083b0:	3201      	adds	r2, #1
 80083b2:	601e      	str	r6, [r3, #0]
 80083b4:	6058      	str	r0, [r3, #4]
 80083b6:	9212      	str	r2, [sp, #72]	; 0x48
 80083b8:	2a07      	cmp	r2, #7
 80083ba:	ddf0      	ble.n	800839e <_svfiprintf_r+0x116>
 80083bc:	1c28      	adds	r0, r5, #0
 80083be:	1c39      	adds	r1, r7, #0
 80083c0:	aa11      	add	r2, sp, #68	; 0x44
 80083c2:	f7ff fec9 	bl	8008158 <__ssprint_r>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d000      	beq.n	80083cc <_svfiprintf_r+0x144>
 80083ca:	e332      	b.n	8008a32 <_svfiprintf_r+0x7aa>
 80083cc:	3c10      	subs	r4, #16
 80083ce:	4643      	mov	r3, r8
 80083d0:	2c10      	cmp	r4, #16
 80083d2:	dce8      	bgt.n	80083a6 <_svfiprintf_r+0x11e>
 80083d4:	465d      	mov	r5, fp
 80083d6:	46bb      	mov	fp, r7
 80083d8:	1c1f      	adds	r7, r3, #0
 80083da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80083dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083de:	607c      	str	r4, [r7, #4]
 80083e0:	3301      	adds	r3, #1
 80083e2:	190c      	adds	r4, r1, r4
 80083e4:	603e      	str	r6, [r7, #0]
 80083e6:	9413      	str	r4, [sp, #76]	; 0x4c
 80083e8:	9312      	str	r3, [sp, #72]	; 0x48
 80083ea:	2b07      	cmp	r3, #7
 80083ec:	dd00      	ble.n	80083f0 <_svfiprintf_r+0x168>
 80083ee:	e316      	b.n	8008a1e <_svfiprintf_r+0x796>
 80083f0:	3708      	adds	r7, #8
 80083f2:	223f      	movs	r2, #63	; 0x3f
 80083f4:	446a      	add	r2, sp
 80083f6:	7813      	ldrb	r3, [r2, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00c      	beq.n	8008416 <_svfiprintf_r+0x18e>
 80083fc:	2301      	movs	r3, #1
 80083fe:	607b      	str	r3, [r7, #4]
 8008400:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008402:	3301      	adds	r3, #1
 8008404:	9313      	str	r3, [sp, #76]	; 0x4c
 8008406:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008408:	3301      	adds	r3, #1
 800840a:	603a      	str	r2, [r7, #0]
 800840c:	9312      	str	r3, [sp, #72]	; 0x48
 800840e:	2b07      	cmp	r3, #7
 8008410:	dd00      	ble.n	8008414 <_svfiprintf_r+0x18c>
 8008412:	e2ad      	b.n	8008970 <_svfiprintf_r+0x6e8>
 8008414:	3708      	adds	r7, #8
 8008416:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008418:	2c00      	cmp	r4, #0
 800841a:	d00d      	beq.n	8008438 <_svfiprintf_r+0x1b0>
 800841c:	ab10      	add	r3, sp, #64	; 0x40
 800841e:	603b      	str	r3, [r7, #0]
 8008420:	2302      	movs	r3, #2
 8008422:	607b      	str	r3, [r7, #4]
 8008424:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008426:	3302      	adds	r3, #2
 8008428:	9313      	str	r3, [sp, #76]	; 0x4c
 800842a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800842c:	3301      	adds	r3, #1
 800842e:	9312      	str	r3, [sp, #72]	; 0x48
 8008430:	2b07      	cmp	r3, #7
 8008432:	dd00      	ble.n	8008436 <_svfiprintf_r+0x1ae>
 8008434:	e2a5      	b.n	8008982 <_svfiprintf_r+0x6fa>
 8008436:	3708      	adds	r7, #8
 8008438:	4650      	mov	r0, sl
 800843a:	2880      	cmp	r0, #128	; 0x80
 800843c:	d100      	bne.n	8008440 <_svfiprintf_r+0x1b8>
 800843e:	e212      	b.n	8008866 <_svfiprintf_r+0x5de>
 8008440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008442:	9904      	ldr	r1, [sp, #16]
 8008444:	1a44      	subs	r4, r0, r1
 8008446:	2c00      	cmp	r4, #0
 8008448:	dd3a      	ble.n	80084c0 <_svfiprintf_r+0x238>
 800844a:	4e87      	ldr	r6, [pc, #540]	; (8008668 <_svfiprintf_r+0x3e0>)
 800844c:	2c10      	cmp	r4, #16
 800844e:	dd2a      	ble.n	80084a6 <_svfiprintf_r+0x21e>
 8008450:	2210      	movs	r2, #16
 8008452:	1992      	adds	r2, r2, r6
 8008454:	2310      	movs	r3, #16
 8008456:	4699      	mov	r9, r3
 8008458:	4692      	mov	sl, r2
 800845a:	1c3b      	adds	r3, r7, #0
 800845c:	1c37      	adds	r7, r6, #0
 800845e:	465e      	mov	r6, fp
 8008460:	46ab      	mov	fp, r5
 8008462:	9d05      	ldr	r5, [sp, #20]
 8008464:	e003      	b.n	800846e <_svfiprintf_r+0x1e6>
 8008466:	3c10      	subs	r4, #16
 8008468:	3308      	adds	r3, #8
 800846a:	2c10      	cmp	r4, #16
 800846c:	dd17      	ble.n	800849e <_svfiprintf_r+0x216>
 800846e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008470:	3210      	adds	r2, #16
 8008472:	9213      	str	r2, [sp, #76]	; 0x4c
 8008474:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008476:	4650      	mov	r0, sl
 8008478:	4649      	mov	r1, r9
 800847a:	3201      	adds	r2, #1
 800847c:	6018      	str	r0, [r3, #0]
 800847e:	6059      	str	r1, [r3, #4]
 8008480:	9212      	str	r2, [sp, #72]	; 0x48
 8008482:	2a07      	cmp	r2, #7
 8008484:	ddef      	ble.n	8008466 <_svfiprintf_r+0x1de>
 8008486:	1c28      	adds	r0, r5, #0
 8008488:	1c31      	adds	r1, r6, #0
 800848a:	aa11      	add	r2, sp, #68	; 0x44
 800848c:	f7ff fe64 	bl	8008158 <__ssprint_r>
 8008490:	2800      	cmp	r0, #0
 8008492:	d000      	beq.n	8008496 <_svfiprintf_r+0x20e>
 8008494:	e258      	b.n	8008948 <_svfiprintf_r+0x6c0>
 8008496:	3c10      	subs	r4, #16
 8008498:	4643      	mov	r3, r8
 800849a:	2c10      	cmp	r4, #16
 800849c:	dce7      	bgt.n	800846e <_svfiprintf_r+0x1e6>
 800849e:	465d      	mov	r5, fp
 80084a0:	46b3      	mov	fp, r6
 80084a2:	1c3e      	adds	r6, r7, #0
 80084a4:	1c1f      	adds	r7, r3, #0
 80084a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084aa:	3610      	adds	r6, #16
 80084ac:	607c      	str	r4, [r7, #4]
 80084ae:	3301      	adds	r3, #1
 80084b0:	1914      	adds	r4, r2, r4
 80084b2:	603e      	str	r6, [r7, #0]
 80084b4:	9413      	str	r4, [sp, #76]	; 0x4c
 80084b6:	9312      	str	r3, [sp, #72]	; 0x48
 80084b8:	2b07      	cmp	r3, #7
 80084ba:	dd00      	ble.n	80084be <_svfiprintf_r+0x236>
 80084bc:	e24f      	b.n	800895e <_svfiprintf_r+0x6d6>
 80084be:	3708      	adds	r7, #8
 80084c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80084c2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80084c4:	603c      	str	r4, [r7, #0]
 80084c6:	9c04      	ldr	r4, [sp, #16]
 80084c8:	1903      	adds	r3, r0, r4
 80084ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80084cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084ce:	3301      	adds	r3, #1
 80084d0:	607c      	str	r4, [r7, #4]
 80084d2:	9312      	str	r3, [sp, #72]	; 0x48
 80084d4:	2b07      	cmp	r3, #7
 80084d6:	dd00      	ble.n	80084da <_svfiprintf_r+0x252>
 80084d8:	e206      	b.n	80088e8 <_svfiprintf_r+0x660>
 80084da:	1c3b      	adds	r3, r7, #0
 80084dc:	3308      	adds	r3, #8
 80084de:	9c02      	ldr	r4, [sp, #8]
 80084e0:	0764      	lsls	r4, r4, #29
 80084e2:	d539      	bpl.n	8008558 <_svfiprintf_r+0x2d0>
 80084e4:	9807      	ldr	r0, [sp, #28]
 80084e6:	9903      	ldr	r1, [sp, #12]
 80084e8:	1a44      	subs	r4, r0, r1
 80084ea:	2c00      	cmp	r4, #0
 80084ec:	dd34      	ble.n	8008558 <_svfiprintf_r+0x2d0>
 80084ee:	4e5e      	ldr	r6, [pc, #376]	; (8008668 <_svfiprintf_r+0x3e0>)
 80084f0:	2c10      	cmp	r4, #16
 80084f2:	dd1f      	ble.n	8008534 <_svfiprintf_r+0x2ac>
 80084f4:	46a9      	mov	r9, r5
 80084f6:	2710      	movs	r7, #16
 80084f8:	465d      	mov	r5, fp
 80084fa:	e003      	b.n	8008504 <_svfiprintf_r+0x27c>
 80084fc:	3c10      	subs	r4, #16
 80084fe:	3308      	adds	r3, #8
 8008500:	2c10      	cmp	r4, #16
 8008502:	dd15      	ble.n	8008530 <_svfiprintf_r+0x2a8>
 8008504:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008506:	3210      	adds	r2, #16
 8008508:	9213      	str	r2, [sp, #76]	; 0x4c
 800850a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800850c:	3201      	adds	r2, #1
 800850e:	601e      	str	r6, [r3, #0]
 8008510:	605f      	str	r7, [r3, #4]
 8008512:	9212      	str	r2, [sp, #72]	; 0x48
 8008514:	2a07      	cmp	r2, #7
 8008516:	ddf1      	ble.n	80084fc <_svfiprintf_r+0x274>
 8008518:	9805      	ldr	r0, [sp, #20]
 800851a:	1c29      	adds	r1, r5, #0
 800851c:	aa11      	add	r2, sp, #68	; 0x44
 800851e:	f7ff fe1b 	bl	8008158 <__ssprint_r>
 8008522:	2800      	cmp	r0, #0
 8008524:	d000      	beq.n	8008528 <_svfiprintf_r+0x2a0>
 8008526:	e2c7      	b.n	8008ab8 <_svfiprintf_r+0x830>
 8008528:	3c10      	subs	r4, #16
 800852a:	4643      	mov	r3, r8
 800852c:	2c10      	cmp	r4, #16
 800852e:	dce9      	bgt.n	8008504 <_svfiprintf_r+0x27c>
 8008530:	46ab      	mov	fp, r5
 8008532:	464d      	mov	r5, r9
 8008534:	605c      	str	r4, [r3, #4]
 8008536:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008538:	601e      	str	r6, [r3, #0]
 800853a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800853c:	18a4      	adds	r4, r4, r2
 800853e:	3301      	adds	r3, #1
 8008540:	9413      	str	r4, [sp, #76]	; 0x4c
 8008542:	9312      	str	r3, [sp, #72]	; 0x48
 8008544:	2b07      	cmp	r3, #7
 8008546:	dd08      	ble.n	800855a <_svfiprintf_r+0x2d2>
 8008548:	9805      	ldr	r0, [sp, #20]
 800854a:	4659      	mov	r1, fp
 800854c:	aa11      	add	r2, sp, #68	; 0x44
 800854e:	f7ff fe03 	bl	8008158 <__ssprint_r>
 8008552:	2800      	cmp	r0, #0
 8008554:	d000      	beq.n	8008558 <_svfiprintf_r+0x2d0>
 8008556:	e1d8      	b.n	800890a <_svfiprintf_r+0x682>
 8008558:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800855a:	9b03      	ldr	r3, [sp, #12]
 800855c:	9807      	ldr	r0, [sp, #28]
 800855e:	4283      	cmp	r3, r0
 8008560:	da00      	bge.n	8008564 <_svfiprintf_r+0x2dc>
 8008562:	1c03      	adds	r3, r0, #0
 8008564:	9906      	ldr	r1, [sp, #24]
 8008566:	18c9      	adds	r1, r1, r3
 8008568:	9106      	str	r1, [sp, #24]
 800856a:	2c00      	cmp	r4, #0
 800856c:	d000      	beq.n	8008570 <_svfiprintf_r+0x2e8>
 800856e:	e1dd      	b.n	800892c <_svfiprintf_r+0x6a4>
 8008570:	2300      	movs	r3, #0
 8008572:	9312      	str	r3, [sp, #72]	; 0x48
 8008574:	4647      	mov	r7, r8
 8008576:	e6ab      	b.n	80082d0 <_svfiprintf_r+0x48>
 8008578:	0092      	lsls	r2, r2, #2
 800857a:	588a      	ldr	r2, [r1, r2]
 800857c:	4697      	mov	pc, r2
 800857e:	9c02      	ldr	r4, [sp, #8]
 8008580:	4334      	orrs	r4, r6
 8008582:	9402      	str	r4, [sp, #8]
 8008584:	e6d8      	b.n	8008338 <_svfiprintf_r+0xb0>
 8008586:	9c02      	ldr	r4, [sp, #8]
 8008588:	2310      	movs	r3, #16
 800858a:	431c      	orrs	r4, r3
 800858c:	9402      	str	r4, [sp, #8]
 800858e:	9c02      	ldr	r4, [sp, #8]
 8008590:	06e4      	lsls	r4, r4, #27
 8008592:	d403      	bmi.n	800859c <_svfiprintf_r+0x314>
 8008594:	9c02      	ldr	r4, [sp, #8]
 8008596:	0664      	lsls	r4, r4, #25
 8008598:	d500      	bpl.n	800859c <_svfiprintf_r+0x314>
 800859a:	e260      	b.n	8008a5e <_svfiprintf_r+0x7d6>
 800859c:	9c08      	ldr	r4, [sp, #32]
 800859e:	6826      	ldr	r6, [r4, #0]
 80085a0:	1c31      	adds	r1, r6, #0
 80085a2:	3404      	adds	r4, #4
 80085a4:	1e4b      	subs	r3, r1, #1
 80085a6:	4199      	sbcs	r1, r3
 80085a8:	9408      	str	r4, [sp, #32]
 80085aa:	2300      	movs	r3, #0
 80085ac:	e012      	b.n	80085d4 <_svfiprintf_r+0x34c>
 80085ae:	9c02      	ldr	r4, [sp, #8]
 80085b0:	2310      	movs	r3, #16
 80085b2:	431c      	orrs	r4, r3
 80085b4:	9402      	str	r4, [sp, #8]
 80085b6:	9c02      	ldr	r4, [sp, #8]
 80085b8:	06e4      	lsls	r4, r4, #27
 80085ba:	d403      	bmi.n	80085c4 <_svfiprintf_r+0x33c>
 80085bc:	9c02      	ldr	r4, [sp, #8]
 80085be:	0664      	lsls	r4, r4, #25
 80085c0:	d500      	bpl.n	80085c4 <_svfiprintf_r+0x33c>
 80085c2:	e252      	b.n	8008a6a <_svfiprintf_r+0x7e2>
 80085c4:	9c08      	ldr	r4, [sp, #32]
 80085c6:	6826      	ldr	r6, [r4, #0]
 80085c8:	3404      	adds	r4, #4
 80085ca:	1c31      	adds	r1, r6, #0
 80085cc:	9408      	str	r4, [sp, #32]
 80085ce:	1e4b      	subs	r3, r1, #1
 80085d0:	4199      	sbcs	r1, r3
 80085d2:	2301      	movs	r3, #1
 80085d4:	203f      	movs	r0, #63	; 0x3f
 80085d6:	2200      	movs	r2, #0
 80085d8:	4468      	add	r0, sp
 80085da:	7002      	strb	r2, [r0, #0]
 80085dc:	2400      	movs	r4, #0
 80085de:	464a      	mov	r2, r9
 80085e0:	2a00      	cmp	r2, #0
 80085e2:	db03      	blt.n	80085ec <_svfiprintf_r+0x364>
 80085e4:	9802      	ldr	r0, [sp, #8]
 80085e6:	2280      	movs	r2, #128	; 0x80
 80085e8:	4390      	bics	r0, r2
 80085ea:	9002      	str	r0, [sp, #8]
 80085ec:	464a      	mov	r2, r9
 80085ee:	2a00      	cmp	r2, #0
 80085f0:	d102      	bne.n	80085f8 <_svfiprintf_r+0x370>
 80085f2:	2900      	cmp	r1, #0
 80085f4:	d100      	bne.n	80085f8 <_svfiprintf_r+0x370>
 80085f6:	e11a      	b.n	800882e <_svfiprintf_r+0x5a6>
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d100      	bne.n	80085fe <_svfiprintf_r+0x376>
 80085fc:	e1e8      	b.n	80089d0 <_svfiprintf_r+0x748>
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d100      	bne.n	8008604 <_svfiprintf_r+0x37c>
 8008602:	e1cc      	b.n	800899e <_svfiprintf_r+0x716>
 8008604:	466b      	mov	r3, sp
 8008606:	3377      	adds	r3, #119	; 0x77
 8008608:	2107      	movs	r1, #7
 800860a:	1c0a      	adds	r2, r1, #0
 800860c:	4032      	ands	r2, r6
 800860e:	3230      	adds	r2, #48	; 0x30
 8008610:	1c18      	adds	r0, r3, #0
 8008612:	701a      	strb	r2, [r3, #0]
 8008614:	08f6      	lsrs	r6, r6, #3
 8008616:	3b01      	subs	r3, #1
 8008618:	2e00      	cmp	r6, #0
 800861a:	d1f6      	bne.n	800860a <_svfiprintf_r+0x382>
 800861c:	900b      	str	r0, [sp, #44]	; 0x2c
 800861e:	1c01      	adds	r1, r0, #0
 8008620:	9802      	ldr	r0, [sp, #8]
 8008622:	07c0      	lsls	r0, r0, #31
 8008624:	d400      	bmi.n	8008628 <_svfiprintf_r+0x3a0>
 8008626:	e206      	b.n	8008a36 <_svfiprintf_r+0x7ae>
 8008628:	2a30      	cmp	r2, #48	; 0x30
 800862a:	d100      	bne.n	800862e <_svfiprintf_r+0x3a6>
 800862c:	e266      	b.n	8008afc <_svfiprintf_r+0x874>
 800862e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008630:	3901      	subs	r1, #1
 8008632:	2330      	movs	r3, #48	; 0x30
 8008634:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008636:	700b      	strb	r3, [r1, #0]
 8008638:	4641      	mov	r1, r8
 800863a:	1a89      	subs	r1, r1, r2
 800863c:	9104      	str	r1, [sp, #16]
 800863e:	e104      	b.n	800884a <_svfiprintf_r+0x5c2>
 8008640:	9c08      	ldr	r4, [sp, #32]
 8008642:	6824      	ldr	r4, [r4, #0]
 8008644:	9407      	str	r4, [sp, #28]
 8008646:	9c08      	ldr	r4, [sp, #32]
 8008648:	3404      	adds	r4, #4
 800864a:	9408      	str	r4, [sp, #32]
 800864c:	9c07      	ldr	r4, [sp, #28]
 800864e:	2c00      	cmp	r4, #0
 8008650:	db00      	blt.n	8008654 <_svfiprintf_r+0x3cc>
 8008652:	e671      	b.n	8008338 <_svfiprintf_r+0xb0>
 8008654:	4264      	negs	r4, r4
 8008656:	9407      	str	r4, [sp, #28]
 8008658:	9c02      	ldr	r4, [sp, #8]
 800865a:	4662      	mov	r2, ip
 800865c:	4314      	orrs	r4, r2
 800865e:	9402      	str	r4, [sp, #8]
 8008660:	e66a      	b.n	8008338 <_svfiprintf_r+0xb0>
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	0800de20 	.word	0x0800de20
 8008668:	0800df84 	.word	0x0800df84
 800866c:	243f      	movs	r4, #63	; 0x3f
 800866e:	446c      	add	r4, sp
 8008670:	7020      	strb	r0, [r4, #0]
 8008672:	9c02      	ldr	r4, [sp, #8]
 8008674:	06e4      	lsls	r4, r4, #27
 8008676:	d403      	bmi.n	8008680 <_svfiprintf_r+0x3f8>
 8008678:	9c02      	ldr	r4, [sp, #8]
 800867a:	0664      	lsls	r4, r4, #25
 800867c:	d500      	bpl.n	8008680 <_svfiprintf_r+0x3f8>
 800867e:	e1fc      	b.n	8008a7a <_svfiprintf_r+0x7f2>
 8008680:	9c08      	ldr	r4, [sp, #32]
 8008682:	6826      	ldr	r6, [r4, #0]
 8008684:	3404      	adds	r4, #4
 8008686:	9408      	str	r4, [sp, #32]
 8008688:	2e00      	cmp	r6, #0
 800868a:	da00      	bge.n	800868e <_svfiprintf_r+0x406>
 800868c:	e1fe      	b.n	8008a8c <_svfiprintf_r+0x804>
 800868e:	203f      	movs	r0, #63	; 0x3f
 8008690:	4468      	add	r0, sp
 8008692:	1c31      	adds	r1, r6, #0
 8008694:	1e4b      	subs	r3, r1, #1
 8008696:	4199      	sbcs	r1, r3
 8008698:	7804      	ldrb	r4, [r0, #0]
 800869a:	2301      	movs	r3, #1
 800869c:	e79f      	b.n	80085de <_svfiprintf_r+0x356>
 800869e:	9a08      	ldr	r2, [sp, #32]
 80086a0:	1c14      	adds	r4, r2, #0
 80086a2:	6812      	ldr	r2, [r2, #0]
 80086a4:	3404      	adds	r4, #4
 80086a6:	ab14      	add	r3, sp, #80	; 0x50
 80086a8:	203f      	movs	r0, #63	; 0x3f
 80086aa:	9408      	str	r4, [sp, #32]
 80086ac:	701a      	strb	r2, [r3, #0]
 80086ae:	2401      	movs	r4, #1
 80086b0:	2200      	movs	r2, #0
 80086b2:	4468      	add	r0, sp
 80086b4:	7002      	strb	r2, [r0, #0]
 80086b6:	9403      	str	r4, [sp, #12]
 80086b8:	9404      	str	r4, [sp, #16]
 80086ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80086bc:	e651      	b.n	8008362 <_svfiprintf_r+0xda>
 80086be:	213f      	movs	r1, #63	; 0x3f
 80086c0:	4cc0      	ldr	r4, [pc, #768]	; (80089c4 <_svfiprintf_r+0x73c>)
 80086c2:	4469      	add	r1, sp
 80086c4:	7008      	strb	r0, [r1, #0]
 80086c6:	940c      	str	r4, [sp, #48]	; 0x30
 80086c8:	9c02      	ldr	r4, [sp, #8]
 80086ca:	06e4      	lsls	r4, r4, #27
 80086cc:	d403      	bmi.n	80086d6 <_svfiprintf_r+0x44e>
 80086ce:	9c02      	ldr	r4, [sp, #8]
 80086d0:	0664      	lsls	r4, r4, #25
 80086d2:	d500      	bpl.n	80086d6 <_svfiprintf_r+0x44e>
 80086d4:	e1cc      	b.n	8008a70 <_svfiprintf_r+0x7e8>
 80086d6:	9c08      	ldr	r4, [sp, #32]
 80086d8:	6826      	ldr	r6, [r4, #0]
 80086da:	3404      	adds	r4, #4
 80086dc:	9408      	str	r4, [sp, #32]
 80086de:	9c02      	ldr	r4, [sp, #8]
 80086e0:	07e4      	lsls	r4, r4, #31
 80086e2:	d500      	bpl.n	80086e6 <_svfiprintf_r+0x45e>
 80086e4:	e18f      	b.n	8008a06 <_svfiprintf_r+0x77e>
 80086e6:	1c31      	adds	r1, r6, #0
 80086e8:	1e4b      	subs	r3, r1, #1
 80086ea:	4199      	sbcs	r1, r3
 80086ec:	2302      	movs	r3, #2
 80086ee:	e771      	b.n	80085d4 <_svfiprintf_r+0x34c>
 80086f0:	213f      	movs	r1, #63	; 0x3f
 80086f2:	4cb5      	ldr	r4, [pc, #724]	; (80089c8 <_svfiprintf_r+0x740>)
 80086f4:	4469      	add	r1, sp
 80086f6:	7008      	strb	r0, [r1, #0]
 80086f8:	940c      	str	r4, [sp, #48]	; 0x30
 80086fa:	e7e5      	b.n	80086c8 <_svfiprintf_r+0x440>
 80086fc:	9c02      	ldr	r4, [sp, #8]
 80086fe:	2240      	movs	r2, #64	; 0x40
 8008700:	4314      	orrs	r4, r2
 8008702:	9402      	str	r4, [sp, #8]
 8008704:	e618      	b.n	8008338 <_svfiprintf_r+0xb0>
 8008706:	223f      	movs	r2, #63	; 0x3f
 8008708:	9c02      	ldr	r4, [sp, #8]
 800870a:	446a      	add	r2, sp
 800870c:	7010      	strb	r0, [r2, #0]
 800870e:	06e4      	lsls	r4, r4, #27
 8008710:	d500      	bpl.n	8008714 <_svfiprintf_r+0x48c>
 8008712:	e19c      	b.n	8008a4e <_svfiprintf_r+0x7c6>
 8008714:	9c02      	ldr	r4, [sp, #8]
 8008716:	0664      	lsls	r4, r4, #25
 8008718:	d400      	bmi.n	800871c <_svfiprintf_r+0x494>
 800871a:	e198      	b.n	8008a4e <_svfiprintf_r+0x7c6>
 800871c:	9808      	ldr	r0, [sp, #32]
 800871e:	9c08      	ldr	r4, [sp, #32]
 8008720:	4669      	mov	r1, sp
 8008722:	2218      	movs	r2, #24
 8008724:	6800      	ldr	r0, [r0, #0]
 8008726:	5a52      	ldrh	r2, [r2, r1]
 8008728:	3404      	adds	r4, #4
 800872a:	9000      	str	r0, [sp, #0]
 800872c:	8002      	strh	r2, [r0, #0]
 800872e:	9408      	str	r4, [sp, #32]
 8008730:	e5ce      	b.n	80082d0 <_svfiprintf_r+0x48>
 8008732:	9c08      	ldr	r4, [sp, #32]
 8008734:	203f      	movs	r0, #63	; 0x3f
 8008736:	9e08      	ldr	r6, [sp, #32]
 8008738:	6824      	ldr	r4, [r4, #0]
 800873a:	2300      	movs	r3, #0
 800873c:	4468      	add	r0, sp
 800873e:	7003      	strb	r3, [r0, #0]
 8008740:	3604      	adds	r6, #4
 8008742:	940b      	str	r4, [sp, #44]	; 0x2c
 8008744:	2c00      	cmp	r4, #0
 8008746:	d100      	bne.n	800874a <_svfiprintf_r+0x4c2>
 8008748:	e1dd      	b.n	8008b06 <_svfiprintf_r+0x87e>
 800874a:	4648      	mov	r0, r9
 800874c:	2800      	cmp	r0, #0
 800874e:	da00      	bge.n	8008752 <_svfiprintf_r+0x4ca>
 8008750:	e1a7      	b.n	8008aa2 <_svfiprintf_r+0x81a>
 8008752:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008754:	2100      	movs	r1, #0
 8008756:	464a      	mov	r2, r9
 8008758:	f7fe fda4 	bl	80072a4 <memchr>
 800875c:	2800      	cmp	r0, #0
 800875e:	d100      	bne.n	8008762 <_svfiprintf_r+0x4da>
 8008760:	e1b6      	b.n	8008ad0 <_svfiprintf_r+0x848>
 8008762:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008764:	1b00      	subs	r0, r0, r4
 8008766:	9004      	str	r0, [sp, #16]
 8008768:	4548      	cmp	r0, r9
 800876a:	dd00      	ble.n	800876e <_svfiprintf_r+0x4e6>
 800876c:	e1b0      	b.n	8008ad0 <_svfiprintf_r+0x848>
 800876e:	203f      	movs	r0, #63	; 0x3f
 8008770:	4468      	add	r0, sp
 8008772:	2100      	movs	r1, #0
 8008774:	7804      	ldrb	r4, [r0, #0]
 8008776:	9608      	str	r6, [sp, #32]
 8008778:	9109      	str	r1, [sp, #36]	; 0x24
 800877a:	e068      	b.n	800884e <_svfiprintf_r+0x5c6>
 800877c:	782b      	ldrb	r3, [r5, #0]
 800877e:	3501      	adds	r5, #1
 8008780:	2b2a      	cmp	r3, #42	; 0x2a
 8008782:	d100      	bne.n	8008786 <_svfiprintf_r+0x4fe>
 8008784:	e1d0      	b.n	8008b28 <_svfiprintf_r+0x8a0>
 8008786:	1c1a      	adds	r2, r3, #0
 8008788:	3a30      	subs	r2, #48	; 0x30
 800878a:	2400      	movs	r4, #0
 800878c:	2a09      	cmp	r2, #9
 800878e:	d80f      	bhi.n	80087b0 <_svfiprintf_r+0x528>
 8008790:	00a3      	lsls	r3, r4, #2
 8008792:	191c      	adds	r4, r3, r4
 8008794:	782b      	ldrb	r3, [r5, #0]
 8008796:	0064      	lsls	r4, r4, #1
 8008798:	1914      	adds	r4, r2, r4
 800879a:	1c1a      	adds	r2, r3, #0
 800879c:	3a30      	subs	r2, #48	; 0x30
 800879e:	3501      	adds	r5, #1
 80087a0:	2a09      	cmp	r2, #9
 80087a2:	d9f5      	bls.n	8008790 <_svfiprintf_r+0x508>
 80087a4:	46a1      	mov	r9, r4
 80087a6:	2c00      	cmp	r4, #0
 80087a8:	db00      	blt.n	80087ac <_svfiprintf_r+0x524>
 80087aa:	e5c7      	b.n	800833c <_svfiprintf_r+0xb4>
 80087ac:	2401      	movs	r4, #1
 80087ae:	4264      	negs	r4, r4
 80087b0:	46a1      	mov	r9, r4
 80087b2:	e5c3      	b.n	800833c <_svfiprintf_r+0xb4>
 80087b4:	202b      	movs	r0, #43	; 0x2b
 80087b6:	e5bf      	b.n	8008338 <_svfiprintf_r+0xb0>
 80087b8:	9c02      	ldr	r4, [sp, #8]
 80087ba:	213f      	movs	r1, #63	; 0x3f
 80087bc:	2310      	movs	r3, #16
 80087be:	4469      	add	r1, sp
 80087c0:	431c      	orrs	r4, r3
 80087c2:	7008      	strb	r0, [r1, #0]
 80087c4:	9402      	str	r4, [sp, #8]
 80087c6:	e754      	b.n	8008672 <_svfiprintf_r+0x3ea>
 80087c8:	1c1a      	adds	r2, r3, #0
 80087ca:	2400      	movs	r4, #0
 80087cc:	3a30      	subs	r2, #48	; 0x30
 80087ce:	00a3      	lsls	r3, r4, #2
 80087d0:	191c      	adds	r4, r3, r4
 80087d2:	782b      	ldrb	r3, [r5, #0]
 80087d4:	0064      	lsls	r4, r4, #1
 80087d6:	18a4      	adds	r4, r4, r2
 80087d8:	1c1a      	adds	r2, r3, #0
 80087da:	3a30      	subs	r2, #48	; 0x30
 80087dc:	3501      	adds	r5, #1
 80087de:	2a09      	cmp	r2, #9
 80087e0:	d9f5      	bls.n	80087ce <_svfiprintf_r+0x546>
 80087e2:	9407      	str	r4, [sp, #28]
 80087e4:	e5aa      	b.n	800833c <_svfiprintf_r+0xb4>
 80087e6:	9c02      	ldr	r4, [sp, #8]
 80087e8:	4652      	mov	r2, sl
 80087ea:	4314      	orrs	r4, r2
 80087ec:	9402      	str	r4, [sp, #8]
 80087ee:	e5a3      	b.n	8008338 <_svfiprintf_r+0xb0>
 80087f0:	9b08      	ldr	r3, [sp, #32]
 80087f2:	1c1c      	adds	r4, r3, #0
 80087f4:	3404      	adds	r4, #4
 80087f6:	9408      	str	r4, [sp, #32]
 80087f8:	9c02      	ldr	r4, [sp, #8]
 80087fa:	681e      	ldr	r6, [r3, #0]
 80087fc:	2302      	movs	r3, #2
 80087fe:	431c      	orrs	r4, r3
 8008800:	2230      	movs	r2, #48	; 0x30
 8008802:	ab10      	add	r3, sp, #64	; 0x40
 8008804:	9402      	str	r4, [sp, #8]
 8008806:	4c70      	ldr	r4, [pc, #448]	; (80089c8 <_svfiprintf_r+0x740>)
 8008808:	701a      	strb	r2, [r3, #0]
 800880a:	1c31      	adds	r1, r6, #0
 800880c:	2278      	movs	r2, #120	; 0x78
 800880e:	705a      	strb	r2, [r3, #1]
 8008810:	940c      	str	r4, [sp, #48]	; 0x30
 8008812:	1e4b      	subs	r3, r1, #1
 8008814:	4199      	sbcs	r1, r3
 8008816:	2302      	movs	r3, #2
 8008818:	e6dc      	b.n	80085d4 <_svfiprintf_r+0x34c>
 800881a:	9c02      	ldr	r4, [sp, #8]
 800881c:	2201      	movs	r2, #1
 800881e:	4314      	orrs	r4, r2
 8008820:	9402      	str	r4, [sp, #8]
 8008822:	e589      	b.n	8008338 <_svfiprintf_r+0xb0>
 8008824:	2800      	cmp	r0, #0
 8008826:	d000      	beq.n	800882a <_svfiprintf_r+0x5a2>
 8008828:	e586      	b.n	8008338 <_svfiprintf_r+0xb0>
 800882a:	2020      	movs	r0, #32
 800882c:	e584      	b.n	8008338 <_svfiprintf_r+0xb0>
 800882e:	2b00      	cmp	r3, #0
 8008830:	d000      	beq.n	8008834 <_svfiprintf_r+0x5ac>
 8008832:	e084      	b.n	800893e <_svfiprintf_r+0x6b6>
 8008834:	9902      	ldr	r1, [sp, #8]
 8008836:	07c9      	lsls	r1, r1, #31
 8008838:	d400      	bmi.n	800883c <_svfiprintf_r+0x5b4>
 800883a:	e0ab      	b.n	8008994 <_svfiprintf_r+0x70c>
 800883c:	2277      	movs	r2, #119	; 0x77
 800883e:	2330      	movs	r3, #48	; 0x30
 8008840:	446a      	add	r2, sp
 8008842:	7013      	strb	r3, [r2, #0]
 8008844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008846:	920b      	str	r2, [sp, #44]	; 0x2c
 8008848:	9304      	str	r3, [sp, #16]
 800884a:	4648      	mov	r0, r9
 800884c:	9009      	str	r0, [sp, #36]	; 0x24
 800884e:	9804      	ldr	r0, [sp, #16]
 8008850:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008852:	9003      	str	r0, [sp, #12]
 8008854:	4288      	cmp	r0, r1
 8008856:	da00      	bge.n	800885a <_svfiprintf_r+0x5d2>
 8008858:	9103      	str	r1, [sp, #12]
 800885a:	9a03      	ldr	r2, [sp, #12]
 800885c:	1e63      	subs	r3, r4, #1
 800885e:	419c      	sbcs	r4, r3
 8008860:	1912      	adds	r2, r2, r4
 8008862:	9203      	str	r2, [sp, #12]
 8008864:	e57f      	b.n	8008366 <_svfiprintf_r+0xde>
 8008866:	9907      	ldr	r1, [sp, #28]
 8008868:	9a03      	ldr	r2, [sp, #12]
 800886a:	1a8c      	subs	r4, r1, r2
 800886c:	2c00      	cmp	r4, #0
 800886e:	dc00      	bgt.n	8008872 <_svfiprintf_r+0x5ea>
 8008870:	e5e6      	b.n	8008440 <_svfiprintf_r+0x1b8>
 8008872:	4e56      	ldr	r6, [pc, #344]	; (80089cc <_svfiprintf_r+0x744>)
 8008874:	2c10      	cmp	r4, #16
 8008876:	dd29      	ble.n	80088cc <_svfiprintf_r+0x644>
 8008878:	2310      	movs	r3, #16
 800887a:	199b      	adds	r3, r3, r6
 800887c:	2010      	movs	r0, #16
 800887e:	469a      	mov	sl, r3
 8008880:	4681      	mov	r9, r0
 8008882:	1c3b      	adds	r3, r7, #0
 8008884:	1c37      	adds	r7, r6, #0
 8008886:	465e      	mov	r6, fp
 8008888:	46ab      	mov	fp, r5
 800888a:	9d05      	ldr	r5, [sp, #20]
 800888c:	e003      	b.n	8008896 <_svfiprintf_r+0x60e>
 800888e:	3c10      	subs	r4, #16
 8008890:	3308      	adds	r3, #8
 8008892:	2c10      	cmp	r4, #16
 8008894:	dd16      	ble.n	80088c4 <_svfiprintf_r+0x63c>
 8008896:	464a      	mov	r2, r9
 8008898:	605a      	str	r2, [r3, #4]
 800889a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800889c:	3210      	adds	r2, #16
 800889e:	9213      	str	r2, [sp, #76]	; 0x4c
 80088a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088a2:	4651      	mov	r1, sl
 80088a4:	3201      	adds	r2, #1
 80088a6:	6019      	str	r1, [r3, #0]
 80088a8:	9212      	str	r2, [sp, #72]	; 0x48
 80088aa:	2a07      	cmp	r2, #7
 80088ac:	ddef      	ble.n	800888e <_svfiprintf_r+0x606>
 80088ae:	1c28      	adds	r0, r5, #0
 80088b0:	1c31      	adds	r1, r6, #0
 80088b2:	aa11      	add	r2, sp, #68	; 0x44
 80088b4:	f7ff fc50 	bl	8008158 <__ssprint_r>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d145      	bne.n	8008948 <_svfiprintf_r+0x6c0>
 80088bc:	3c10      	subs	r4, #16
 80088be:	4643      	mov	r3, r8
 80088c0:	2c10      	cmp	r4, #16
 80088c2:	dce8      	bgt.n	8008896 <_svfiprintf_r+0x60e>
 80088c4:	465d      	mov	r5, fp
 80088c6:	46b3      	mov	fp, r6
 80088c8:	1c3e      	adds	r6, r7, #0
 80088ca:	1c1f      	adds	r7, r3, #0
 80088cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80088ce:	607c      	str	r4, [r7, #4]
 80088d0:	191c      	adds	r4, r3, r4
 80088d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088d4:	3610      	adds	r6, #16
 80088d6:	3301      	adds	r3, #1
 80088d8:	603e      	str	r6, [r7, #0]
 80088da:	9413      	str	r4, [sp, #76]	; 0x4c
 80088dc:	9312      	str	r3, [sp, #72]	; 0x48
 80088de:	2b07      	cmp	r3, #7
 80088e0:	dd00      	ble.n	80088e4 <_svfiprintf_r+0x65c>
 80088e2:	e0eb      	b.n	8008abc <_svfiprintf_r+0x834>
 80088e4:	3708      	adds	r7, #8
 80088e6:	e5ab      	b.n	8008440 <_svfiprintf_r+0x1b8>
 80088e8:	9805      	ldr	r0, [sp, #20]
 80088ea:	4659      	mov	r1, fp
 80088ec:	aa11      	add	r2, sp, #68	; 0x44
 80088ee:	f7ff fc33 	bl	8008158 <__ssprint_r>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d109      	bne.n	800890a <_svfiprintf_r+0x682>
 80088f6:	4643      	mov	r3, r8
 80088f8:	e5f1      	b.n	80084de <_svfiprintf_r+0x256>
 80088fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088fc:	2a00      	cmp	r2, #0
 80088fe:	d004      	beq.n	800890a <_svfiprintf_r+0x682>
 8008900:	9805      	ldr	r0, [sp, #20]
 8008902:	4659      	mov	r1, fp
 8008904:	aa11      	add	r2, sp, #68	; 0x44
 8008906:	f7ff fc27 	bl	8008158 <__ssprint_r>
 800890a:	465c      	mov	r4, fp
 800890c:	89a3      	ldrh	r3, [r4, #12]
 800890e:	0658      	lsls	r0, r3, #25
 8008910:	d502      	bpl.n	8008918 <_svfiprintf_r+0x690>
 8008912:	2301      	movs	r3, #1
 8008914:	425b      	negs	r3, r3
 8008916:	9306      	str	r3, [sp, #24]
 8008918:	9806      	ldr	r0, [sp, #24]
 800891a:	b02f      	add	sp, #188	; 0xbc
 800891c:	bc3c      	pop	{r2, r3, r4, r5}
 800891e:	4690      	mov	r8, r2
 8008920:	4699      	mov	r9, r3
 8008922:	46a2      	mov	sl, r4
 8008924:	46ab      	mov	fp, r5
 8008926:	bcf0      	pop	{r4, r5, r6, r7}
 8008928:	bc02      	pop	{r1}
 800892a:	4708      	bx	r1
 800892c:	9805      	ldr	r0, [sp, #20]
 800892e:	4659      	mov	r1, fp
 8008930:	aa11      	add	r2, sp, #68	; 0x44
 8008932:	f7ff fc11 	bl	8008158 <__ssprint_r>
 8008936:	2800      	cmp	r0, #0
 8008938:	d100      	bne.n	800893c <_svfiprintf_r+0x6b4>
 800893a:	e619      	b.n	8008570 <_svfiprintf_r+0x2e8>
 800893c:	e7e5      	b.n	800890a <_svfiprintf_r+0x682>
 800893e:	2100      	movs	r1, #0
 8008940:	4643      	mov	r3, r8
 8008942:	9104      	str	r1, [sp, #16]
 8008944:	930b      	str	r3, [sp, #44]	; 0x2c
 8008946:	e780      	b.n	800884a <_svfiprintf_r+0x5c2>
 8008948:	46b3      	mov	fp, r6
 800894a:	e7de      	b.n	800890a <_svfiprintf_r+0x682>
 800894c:	9805      	ldr	r0, [sp, #20]
 800894e:	4659      	mov	r1, fp
 8008950:	aa11      	add	r2, sp, #68	; 0x44
 8008952:	f7ff fc01 	bl	8008158 <__ssprint_r>
 8008956:	2800      	cmp	r0, #0
 8008958:	d1d7      	bne.n	800890a <_svfiprintf_r+0x682>
 800895a:	4647      	mov	r7, r8
 800895c:	e4d3      	b.n	8008306 <_svfiprintf_r+0x7e>
 800895e:	9805      	ldr	r0, [sp, #20]
 8008960:	4659      	mov	r1, fp
 8008962:	aa11      	add	r2, sp, #68	; 0x44
 8008964:	f7ff fbf8 	bl	8008158 <__ssprint_r>
 8008968:	2800      	cmp	r0, #0
 800896a:	d1ce      	bne.n	800890a <_svfiprintf_r+0x682>
 800896c:	4647      	mov	r7, r8
 800896e:	e5a7      	b.n	80084c0 <_svfiprintf_r+0x238>
 8008970:	9805      	ldr	r0, [sp, #20]
 8008972:	4659      	mov	r1, fp
 8008974:	aa11      	add	r2, sp, #68	; 0x44
 8008976:	f7ff fbef 	bl	8008158 <__ssprint_r>
 800897a:	2800      	cmp	r0, #0
 800897c:	d1c5      	bne.n	800890a <_svfiprintf_r+0x682>
 800897e:	4647      	mov	r7, r8
 8008980:	e549      	b.n	8008416 <_svfiprintf_r+0x18e>
 8008982:	9805      	ldr	r0, [sp, #20]
 8008984:	4659      	mov	r1, fp
 8008986:	aa11      	add	r2, sp, #68	; 0x44
 8008988:	f7ff fbe6 	bl	8008158 <__ssprint_r>
 800898c:	2800      	cmp	r0, #0
 800898e:	d1bc      	bne.n	800890a <_svfiprintf_r+0x682>
 8008990:	4647      	mov	r7, r8
 8008992:	e551      	b.n	8008438 <_svfiprintf_r+0x1b0>
 8008994:	2000      	movs	r0, #0
 8008996:	4642      	mov	r2, r8
 8008998:	9004      	str	r0, [sp, #16]
 800899a:	920b      	str	r2, [sp, #44]	; 0x2c
 800899c:	e755      	b.n	800884a <_svfiprintf_r+0x5c2>
 800899e:	466b      	mov	r3, sp
 80089a0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80089a2:	3377      	adds	r3, #119	; 0x77
 80089a4:	220f      	movs	r2, #15
 80089a6:	1c19      	adds	r1, r3, #0
 80089a8:	1c13      	adds	r3, r2, #0
 80089aa:	4033      	ands	r3, r6
 80089ac:	5cc3      	ldrb	r3, [r0, r3]
 80089ae:	0936      	lsrs	r6, r6, #4
 80089b0:	700b      	strb	r3, [r1, #0]
 80089b2:	1e4b      	subs	r3, r1, #1
 80089b4:	2e00      	cmp	r6, #0
 80089b6:	d1f6      	bne.n	80089a6 <_svfiprintf_r+0x71e>
 80089b8:	4640      	mov	r0, r8
 80089ba:	1a40      	subs	r0, r0, r1
 80089bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80089be:	9004      	str	r0, [sp, #16]
 80089c0:	e743      	b.n	800884a <_svfiprintf_r+0x5c2>
 80089c2:	46c0      	nop			; (mov r8, r8)
 80089c4:	0800dc94 	.word	0x0800dc94
 80089c8:	0800dca8 	.word	0x0800dca8
 80089cc:	0800df84 	.word	0x0800df84
 80089d0:	2e09      	cmp	r6, #9
 80089d2:	d934      	bls.n	8008a3e <_svfiprintf_r+0x7b6>
 80089d4:	466b      	mov	r3, sp
 80089d6:	3377      	adds	r3, #119	; 0x77
 80089d8:	46a2      	mov	sl, r4
 80089da:	1c30      	adds	r0, r6, #0
 80089dc:	210a      	movs	r1, #10
 80089de:	1c1c      	adds	r4, r3, #0
 80089e0:	f000 ea1a 	blx	8008e18 <__aeabi_uidivmod>
 80089e4:	3130      	adds	r1, #48	; 0x30
 80089e6:	7021      	strb	r1, [r4, #0]
 80089e8:	1c30      	adds	r0, r6, #0
 80089ea:	210a      	movs	r1, #10
 80089ec:	f000 e996 	blx	8008d1c <__aeabi_uidiv>
 80089f0:	1e63      	subs	r3, r4, #1
 80089f2:	1c06      	adds	r6, r0, #0
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d1f0      	bne.n	80089da <_svfiprintf_r+0x752>
 80089f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80089fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089fc:	4642      	mov	r2, r8
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	4654      	mov	r4, sl
 8008a02:	9204      	str	r2, [sp, #16]
 8008a04:	e721      	b.n	800884a <_svfiprintf_r+0x5c2>
 8008a06:	2e00      	cmp	r6, #0
 8008a08:	d02c      	beq.n	8008a64 <_svfiprintf_r+0x7dc>
 8008a0a:	aa10      	add	r2, sp, #64	; 0x40
 8008a0c:	9c02      	ldr	r4, [sp, #8]
 8008a0e:	7053      	strb	r3, [r2, #1]
 8008a10:	2302      	movs	r3, #2
 8008a12:	2130      	movs	r1, #48	; 0x30
 8008a14:	431c      	orrs	r4, r3
 8008a16:	7011      	strb	r1, [r2, #0]
 8008a18:	9402      	str	r4, [sp, #8]
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	e5da      	b.n	80085d4 <_svfiprintf_r+0x34c>
 8008a1e:	9805      	ldr	r0, [sp, #20]
 8008a20:	4659      	mov	r1, fp
 8008a22:	aa11      	add	r2, sp, #68	; 0x44
 8008a24:	f7ff fb98 	bl	8008158 <__ssprint_r>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	d000      	beq.n	8008a2e <_svfiprintf_r+0x7a6>
 8008a2c:	e76d      	b.n	800890a <_svfiprintf_r+0x682>
 8008a2e:	4647      	mov	r7, r8
 8008a30:	e4df      	b.n	80083f2 <_svfiprintf_r+0x16a>
 8008a32:	46bb      	mov	fp, r7
 8008a34:	e769      	b.n	800890a <_svfiprintf_r+0x682>
 8008a36:	4642      	mov	r2, r8
 8008a38:	1a52      	subs	r2, r2, r1
 8008a3a:	9204      	str	r2, [sp, #16]
 8008a3c:	e705      	b.n	800884a <_svfiprintf_r+0x5c2>
 8008a3e:	2377      	movs	r3, #119	; 0x77
 8008a40:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008a42:	446b      	add	r3, sp
 8008a44:	3630      	adds	r6, #48	; 0x30
 8008a46:	701e      	strb	r6, [r3, #0]
 8008a48:	9004      	str	r0, [sp, #16]
 8008a4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a4c:	e6fd      	b.n	800884a <_svfiprintf_r+0x5c2>
 8008a4e:	9c08      	ldr	r4, [sp, #32]
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	9c06      	ldr	r4, [sp, #24]
 8008a54:	601c      	str	r4, [r3, #0]
 8008a56:	9c08      	ldr	r4, [sp, #32]
 8008a58:	3404      	adds	r4, #4
 8008a5a:	9408      	str	r4, [sp, #32]
 8008a5c:	e438      	b.n	80082d0 <_svfiprintf_r+0x48>
 8008a5e:	9c08      	ldr	r4, [sp, #32]
 8008a60:	8826      	ldrh	r6, [r4, #0]
 8008a62:	e59d      	b.n	80085a0 <_svfiprintf_r+0x318>
 8008a64:	2100      	movs	r1, #0
 8008a66:	2302      	movs	r3, #2
 8008a68:	e5b4      	b.n	80085d4 <_svfiprintf_r+0x34c>
 8008a6a:	9c08      	ldr	r4, [sp, #32]
 8008a6c:	8826      	ldrh	r6, [r4, #0]
 8008a6e:	e5ab      	b.n	80085c8 <_svfiprintf_r+0x340>
 8008a70:	9c08      	ldr	r4, [sp, #32]
 8008a72:	8826      	ldrh	r6, [r4, #0]
 8008a74:	3404      	adds	r4, #4
 8008a76:	9408      	str	r4, [sp, #32]
 8008a78:	e631      	b.n	80086de <_svfiprintf_r+0x456>
 8008a7a:	9c08      	ldr	r4, [sp, #32]
 8008a7c:	2600      	movs	r6, #0
 8008a7e:	5fa6      	ldrsh	r6, [r4, r6]
 8008a80:	9c08      	ldr	r4, [sp, #32]
 8008a82:	3404      	adds	r4, #4
 8008a84:	9408      	str	r4, [sp, #32]
 8008a86:	2e00      	cmp	r6, #0
 8008a88:	db00      	blt.n	8008a8c <_svfiprintf_r+0x804>
 8008a8a:	e600      	b.n	800868e <_svfiprintf_r+0x406>
 8008a8c:	213f      	movs	r1, #63	; 0x3f
 8008a8e:	232d      	movs	r3, #45	; 0x2d
 8008a90:	4469      	add	r1, sp
 8008a92:	4276      	negs	r6, r6
 8008a94:	700b      	strb	r3, [r1, #0]
 8008a96:	1c31      	adds	r1, r6, #0
 8008a98:	1e4b      	subs	r3, r1, #1
 8008a9a:	4199      	sbcs	r1, r3
 8008a9c:	242d      	movs	r4, #45	; 0x2d
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e59d      	b.n	80085de <_svfiprintf_r+0x356>
 8008aa2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008aa4:	f7f7 fb60 	bl	8000168 <strlen>
 8008aa8:	223f      	movs	r2, #63	; 0x3f
 8008aaa:	446a      	add	r2, sp
 8008aac:	2300      	movs	r3, #0
 8008aae:	9004      	str	r0, [sp, #16]
 8008ab0:	7814      	ldrb	r4, [r2, #0]
 8008ab2:	9608      	str	r6, [sp, #32]
 8008ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab6:	e6ca      	b.n	800884e <_svfiprintf_r+0x5c6>
 8008ab8:	46ab      	mov	fp, r5
 8008aba:	e726      	b.n	800890a <_svfiprintf_r+0x682>
 8008abc:	9805      	ldr	r0, [sp, #20]
 8008abe:	4659      	mov	r1, fp
 8008ac0:	aa11      	add	r2, sp, #68	; 0x44
 8008ac2:	f7ff fb49 	bl	8008158 <__ssprint_r>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d000      	beq.n	8008acc <_svfiprintf_r+0x844>
 8008aca:	e71e      	b.n	800890a <_svfiprintf_r+0x682>
 8008acc:	4647      	mov	r7, r8
 8008ace:	e4b7      	b.n	8008440 <_svfiprintf_r+0x1b8>
 8008ad0:	203f      	movs	r0, #63	; 0x3f
 8008ad2:	4468      	add	r0, sp
 8008ad4:	464a      	mov	r2, r9
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	7804      	ldrb	r4, [r0, #0]
 8008ada:	9608      	str	r6, [sp, #32]
 8008adc:	9204      	str	r2, [sp, #16]
 8008ade:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae0:	e6b5      	b.n	800884e <_svfiprintf_r+0x5c6>
 8008ae2:	9805      	ldr	r0, [sp, #20]
 8008ae4:	2140      	movs	r1, #64	; 0x40
 8008ae6:	f7fe f94f 	bl	8006d88 <_malloc_r>
 8008aea:	465a      	mov	r2, fp
 8008aec:	6010      	str	r0, [r2, #0]
 8008aee:	6110      	str	r0, [r2, #16]
 8008af0:	2800      	cmp	r0, #0
 8008af2:	d028      	beq.n	8008b46 <_svfiprintf_r+0x8be>
 8008af4:	2340      	movs	r3, #64	; 0x40
 8008af6:	6153      	str	r3, [r2, #20]
 8008af8:	f7ff fbd9 	bl	80082ae <_svfiprintf_r+0x26>
 8008afc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008afe:	4643      	mov	r3, r8
 8008b00:	1a1b      	subs	r3, r3, r0
 8008b02:	9304      	str	r3, [sp, #16]
 8008b04:	e6a1      	b.n	800884a <_svfiprintf_r+0x5c2>
 8008b06:	464c      	mov	r4, r9
 8008b08:	9404      	str	r4, [sp, #16]
 8008b0a:	2c06      	cmp	r4, #6
 8008b0c:	d906      	bls.n	8008b1c <_svfiprintf_r+0x894>
 8008b0e:	2406      	movs	r4, #6
 8008b10:	9404      	str	r4, [sp, #16]
 8008b12:	9403      	str	r4, [sp, #12]
 8008b14:	4c0f      	ldr	r4, [pc, #60]	; (8008b54 <_svfiprintf_r+0x8cc>)
 8008b16:	9608      	str	r6, [sp, #32]
 8008b18:	940b      	str	r4, [sp, #44]	; 0x2c
 8008b1a:	e422      	b.n	8008362 <_svfiprintf_r+0xda>
 8008b1c:	9c04      	ldr	r4, [sp, #16]
 8008b1e:	43e3      	mvns	r3, r4
 8008b20:	17db      	asrs	r3, r3, #31
 8008b22:	401c      	ands	r4, r3
 8008b24:	9403      	str	r4, [sp, #12]
 8008b26:	e7f5      	b.n	8008b14 <_svfiprintf_r+0x88c>
 8008b28:	9c08      	ldr	r4, [sp, #32]
 8008b2a:	9b08      	ldr	r3, [sp, #32]
 8008b2c:	6822      	ldr	r2, [r4, #0]
 8008b2e:	3304      	adds	r3, #4
 8008b30:	4691      	mov	r9, r2
 8008b32:	9308      	str	r3, [sp, #32]
 8008b34:	2a00      	cmp	r2, #0
 8008b36:	db01      	blt.n	8008b3c <_svfiprintf_r+0x8b4>
 8008b38:	f7ff fbfe 	bl	8008338 <_svfiprintf_r+0xb0>
 8008b3c:	2401      	movs	r4, #1
 8008b3e:	4264      	negs	r4, r4
 8008b40:	46a1      	mov	r9, r4
 8008b42:	f7ff fbf9 	bl	8008338 <_svfiprintf_r+0xb0>
 8008b46:	9c05      	ldr	r4, [sp, #20]
 8008b48:	230c      	movs	r3, #12
 8008b4a:	6023      	str	r3, [r4, #0]
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	425b      	negs	r3, r3
 8008b50:	9306      	str	r3, [sp, #24]
 8008b52:	e6e1      	b.n	8008918 <_svfiprintf_r+0x690>
 8008b54:	0800dcbc 	.word	0x0800dcbc

08008b58 <_calloc_r>:
 8008b58:	b510      	push	{r4, lr}
 8008b5a:	4351      	muls	r1, r2
 8008b5c:	f7fe f914 	bl	8006d88 <_malloc_r>
 8008b60:	1e04      	subs	r4, r0, #0
 8008b62:	d00e      	beq.n	8008b82 <_calloc_r+0x2a>
 8008b64:	1c23      	adds	r3, r4, #0
 8008b66:	3b08      	subs	r3, #8
 8008b68:	685a      	ldr	r2, [r3, #4]
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	439a      	bics	r2, r3
 8008b6e:	3a04      	subs	r2, #4
 8008b70:	2a24      	cmp	r2, #36	; 0x24
 8008b72:	d816      	bhi.n	8008ba2 <_calloc_r+0x4a>
 8008b74:	1c23      	adds	r3, r4, #0
 8008b76:	2a13      	cmp	r2, #19
 8008b78:	d807      	bhi.n	8008b8a <_calloc_r+0x32>
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	605a      	str	r2, [r3, #4]
 8008b80:	609a      	str	r2, [r3, #8]
 8008b82:	1c20      	adds	r0, r4, #0
 8008b84:	bc10      	pop	{r4}
 8008b86:	bc02      	pop	{r1}
 8008b88:	4708      	bx	r1
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	6063      	str	r3, [r4, #4]
 8008b90:	2a1b      	cmp	r2, #27
 8008b92:	d90b      	bls.n	8008bac <_calloc_r+0x54>
 8008b94:	60a3      	str	r3, [r4, #8]
 8008b96:	60e3      	str	r3, [r4, #12]
 8008b98:	2a24      	cmp	r2, #36	; 0x24
 8008b9a:	d00a      	beq.n	8008bb2 <_calloc_r+0x5a>
 8008b9c:	1c23      	adds	r3, r4, #0
 8008b9e:	3310      	adds	r3, #16
 8008ba0:	e7eb      	b.n	8008b7a <_calloc_r+0x22>
 8008ba2:	1c20      	adds	r0, r4, #0
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	f7f8 fbe7 	bl	8001378 <memset>
 8008baa:	e7ea      	b.n	8008b82 <_calloc_r+0x2a>
 8008bac:	1c23      	adds	r3, r4, #0
 8008bae:	3308      	adds	r3, #8
 8008bb0:	e7e3      	b.n	8008b7a <_calloc_r+0x22>
 8008bb2:	6123      	str	r3, [r4, #16]
 8008bb4:	6163      	str	r3, [r4, #20]
 8008bb6:	1c23      	adds	r3, r4, #0
 8008bb8:	3318      	adds	r3, #24
 8008bba:	e7de      	b.n	8008b7a <_calloc_r+0x22>

08008bbc <_fclose_r>:
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	1c05      	adds	r5, r0, #0
 8008bc0:	1e0c      	subs	r4, r1, #0
 8008bc2:	d008      	beq.n	8008bd6 <_fclose_r+0x1a>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d002      	beq.n	8008bce <_fclose_r+0x12>
 8008bc8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008bca:	2a00      	cmp	r2, #0
 8008bcc:	d034      	beq.n	8008c38 <_fclose_r+0x7c>
 8008bce:	220c      	movs	r2, #12
 8008bd0:	5ea3      	ldrsh	r3, [r4, r2]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d104      	bne.n	8008be0 <_fclose_r+0x24>
 8008bd6:	2600      	movs	r6, #0
 8008bd8:	1c30      	adds	r0, r6, #0
 8008bda:	bc70      	pop	{r4, r5, r6}
 8008bdc:	bc02      	pop	{r1}
 8008bde:	4708      	bx	r1
 8008be0:	1c28      	adds	r0, r5, #0
 8008be2:	1c21      	adds	r1, r4, #0
 8008be4:	f7fd fa1a 	bl	800601c <_fflush_r>
 8008be8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008bea:	1c06      	adds	r6, r0, #0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d005      	beq.n	8008bfc <_fclose_r+0x40>
 8008bf0:	1c28      	adds	r0, r5, #0
 8008bf2:	69e1      	ldr	r1, [r4, #28]
 8008bf4:	f000 f838 	bl	8008c68 <fclose+0x18>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	db20      	blt.n	8008c3e <_fclose_r+0x82>
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	061a      	lsls	r2, r3, #24
 8008c00:	d420      	bmi.n	8008c44 <_fclose_r+0x88>
 8008c02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008c04:	2900      	cmp	r1, #0
 8008c06:	d008      	beq.n	8008c1a <_fclose_r+0x5e>
 8008c08:	1c23      	adds	r3, r4, #0
 8008c0a:	3340      	adds	r3, #64	; 0x40
 8008c0c:	4299      	cmp	r1, r3
 8008c0e:	d002      	beq.n	8008c16 <_fclose_r+0x5a>
 8008c10:	1c28      	adds	r0, r5, #0
 8008c12:	f7fd fb71 	bl	80062f8 <_free_r>
 8008c16:	2300      	movs	r3, #0
 8008c18:	6323      	str	r3, [r4, #48]	; 0x30
 8008c1a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008c1c:	2900      	cmp	r1, #0
 8008c1e:	d004      	beq.n	8008c2a <_fclose_r+0x6e>
 8008c20:	1c28      	adds	r0, r5, #0
 8008c22:	f7fd fb69 	bl	80062f8 <_free_r>
 8008c26:	2300      	movs	r3, #0
 8008c28:	6463      	str	r3, [r4, #68]	; 0x44
 8008c2a:	f7fd faef 	bl	800620c <__sfp_lock_acquire>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	81a3      	strh	r3, [r4, #12]
 8008c32:	f7fd faed 	bl	8006210 <__sfp_lock_release>
 8008c36:	e7cf      	b.n	8008bd8 <_fclose_r+0x1c>
 8008c38:	f7fd fa76 	bl	8006128 <__sinit>
 8008c3c:	e7c7      	b.n	8008bce <_fclose_r+0x12>
 8008c3e:	2601      	movs	r6, #1
 8008c40:	4276      	negs	r6, r6
 8008c42:	e7db      	b.n	8008bfc <_fclose_r+0x40>
 8008c44:	1c28      	adds	r0, r5, #0
 8008c46:	6921      	ldr	r1, [r4, #16]
 8008c48:	f7fd fb56 	bl	80062f8 <_free_r>
 8008c4c:	e7d9      	b.n	8008c02 <_fclose_r+0x46>
 8008c4e:	46c0      	nop			; (mov r8, r8)

08008c50 <fclose>:
 8008c50:	b508      	push	{r3, lr}
 8008c52:	4b04      	ldr	r3, [pc, #16]	; (8008c64 <fclose+0x14>)
 8008c54:	1c01      	adds	r1, r0, #0
 8008c56:	6818      	ldr	r0, [r3, #0]
 8008c58:	f7ff ffb0 	bl	8008bbc <_fclose_r>
 8008c5c:	bc08      	pop	{r3}
 8008c5e:	bc02      	pop	{r1}
 8008c60:	4708      	bx	r1
 8008c62:	46c0      	nop			; (mov r8, r8)
 8008c64:	200000e8 	.word	0x200000e8
 8008c68:	4718      	bx	r3
 8008c6a:	46c0      	nop			; (mov r8, r8)

08008c6c <memmove>:
 8008c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c6e:	4288      	cmp	r0, r1
 8008c70:	d910      	bls.n	8008c94 <memmove+0x28>
 8008c72:	188d      	adds	r5, r1, r2
 8008c74:	42a8      	cmp	r0, r5
 8008c76:	d20d      	bcs.n	8008c94 <memmove+0x28>
 8008c78:	1886      	adds	r6, r0, r2
 8008c7a:	1e53      	subs	r3, r2, #1
 8008c7c:	4251      	negs	r1, r2
 8008c7e:	2a00      	cmp	r2, #0
 8008c80:	d005      	beq.n	8008c8e <memmove+0x22>
 8008c82:	186a      	adds	r2, r5, r1
 8008c84:	5cd4      	ldrb	r4, [r2, r3]
 8008c86:	1872      	adds	r2, r6, r1
 8008c88:	54d4      	strb	r4, [r2, r3]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	d2f9      	bcs.n	8008c82 <memmove+0x16>
 8008c8e:	bcf0      	pop	{r4, r5, r6, r7}
 8008c90:	bc02      	pop	{r1}
 8008c92:	4708      	bx	r1
 8008c94:	2a0f      	cmp	r2, #15
 8008c96:	d80b      	bhi.n	8008cb0 <memmove+0x44>
 8008c98:	1c0c      	adds	r4, r1, #0
 8008c9a:	1c03      	adds	r3, r0, #0
 8008c9c:	2a00      	cmp	r2, #0
 8008c9e:	d0f6      	beq.n	8008c8e <memmove+0x22>
 8008ca0:	189a      	adds	r2, r3, r2
 8008ca2:	7821      	ldrb	r1, [r4, #0]
 8008ca4:	7019      	strb	r1, [r3, #0]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	3401      	adds	r4, #1
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d1f9      	bne.n	8008ca2 <memmove+0x36>
 8008cae:	e7ee      	b.n	8008c8e <memmove+0x22>
 8008cb0:	1c0b      	adds	r3, r1, #0
 8008cb2:	4303      	orrs	r3, r0
 8008cb4:	079c      	lsls	r4, r3, #30
 8008cb6:	d12b      	bne.n	8008d10 <memmove+0xa4>
 8008cb8:	1c13      	adds	r3, r2, #0
 8008cba:	3b10      	subs	r3, #16
 8008cbc:	091b      	lsrs	r3, r3, #4
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	18cc      	adds	r4, r1, r3
 8008cc4:	1c05      	adds	r5, r0, #0
 8008cc6:	680e      	ldr	r6, [r1, #0]
 8008cc8:	602e      	str	r6, [r5, #0]
 8008cca:	684e      	ldr	r6, [r1, #4]
 8008ccc:	606e      	str	r6, [r5, #4]
 8008cce:	688e      	ldr	r6, [r1, #8]
 8008cd0:	60ae      	str	r6, [r5, #8]
 8008cd2:	68ce      	ldr	r6, [r1, #12]
 8008cd4:	3110      	adds	r1, #16
 8008cd6:	60ee      	str	r6, [r5, #12]
 8008cd8:	3510      	adds	r5, #16
 8008cda:	428c      	cmp	r4, r1
 8008cdc:	d1f3      	bne.n	8008cc6 <memmove+0x5a>
 8008cde:	250f      	movs	r5, #15
 8008ce0:	18c3      	adds	r3, r0, r3
 8008ce2:	4015      	ands	r5, r2
 8008ce4:	2d03      	cmp	r5, #3
 8008ce6:	d916      	bls.n	8008d16 <memmove+0xaa>
 8008ce8:	3d04      	subs	r5, #4
 8008cea:	08ad      	lsrs	r5, r5, #2
 8008cec:	00af      	lsls	r7, r5, #2
 8008cee:	3704      	adds	r7, #4
 8008cf0:	46ac      	mov	ip, r5
 8008cf2:	1c21      	adds	r1, r4, #0
 8008cf4:	19e7      	adds	r7, r4, r7
 8008cf6:	1c1d      	adds	r5, r3, #0
 8008cf8:	c940      	ldmia	r1!, {r6}
 8008cfa:	c540      	stmia	r5!, {r6}
 8008cfc:	42b9      	cmp	r1, r7
 8008cfe:	d1fb      	bne.n	8008cf8 <memmove+0x8c>
 8008d00:	4661      	mov	r1, ip
 8008d02:	3101      	adds	r1, #1
 8008d04:	0089      	lsls	r1, r1, #2
 8008d06:	2503      	movs	r5, #3
 8008d08:	402a      	ands	r2, r5
 8008d0a:	1864      	adds	r4, r4, r1
 8008d0c:	185b      	adds	r3, r3, r1
 8008d0e:	e7c5      	b.n	8008c9c <memmove+0x30>
 8008d10:	1c03      	adds	r3, r0, #0
 8008d12:	1c0c      	adds	r4, r1, #0
 8008d14:	e7c4      	b.n	8008ca0 <memmove+0x34>
 8008d16:	1c2a      	adds	r2, r5, #0
 8008d18:	e7c0      	b.n	8008c9c <memmove+0x30>
 8008d1a:	46c0      	nop			; (mov r8, r8)

08008d1c <__aeabi_uidiv>:
 8008d1c:	e2512001 	subs	r2, r1, #1
 8008d20:	012fff1e 	bxeq	lr
 8008d24:	3a000036 	bcc	8008e04 <__aeabi_uidiv+0xe8>
 8008d28:	e1500001 	cmp	r0, r1
 8008d2c:	9a000022 	bls	8008dbc <__aeabi_uidiv+0xa0>
 8008d30:	e1110002 	tst	r1, r2
 8008d34:	0a000023 	beq	8008dc8 <__aeabi_uidiv+0xac>
 8008d38:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 8008d3c:	01a01181 	lsleq	r1, r1, #3
 8008d40:	03a03008 	moveq	r3, #8
 8008d44:	13a03001 	movne	r3, #1
 8008d48:	e3510201 	cmp	r1, #268435456	; 0x10000000
 8008d4c:	31510000 	cmpcc	r1, r0
 8008d50:	31a01201 	lslcc	r1, r1, #4
 8008d54:	31a03203 	lslcc	r3, r3, #4
 8008d58:	3afffffa 	bcc	8008d48 <__aeabi_uidiv+0x2c>
 8008d5c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 8008d60:	31510000 	cmpcc	r1, r0
 8008d64:	31a01081 	lslcc	r1, r1, #1
 8008d68:	31a03083 	lslcc	r3, r3, #1
 8008d6c:	3afffffa 	bcc	8008d5c <__aeabi_uidiv+0x40>
 8008d70:	e3a02000 	mov	r2, #0
 8008d74:	e1500001 	cmp	r0, r1
 8008d78:	20400001 	subcs	r0, r0, r1
 8008d7c:	21822003 	orrcs	r2, r2, r3
 8008d80:	e15000a1 	cmp	r0, r1, lsr #1
 8008d84:	204000a1 	subcs	r0, r0, r1, lsr #1
 8008d88:	218220a3 	orrcs	r2, r2, r3, lsr #1
 8008d8c:	e1500121 	cmp	r0, r1, lsr #2
 8008d90:	20400121 	subcs	r0, r0, r1, lsr #2
 8008d94:	21822123 	orrcs	r2, r2, r3, lsr #2
 8008d98:	e15001a1 	cmp	r0, r1, lsr #3
 8008d9c:	204001a1 	subcs	r0, r0, r1, lsr #3
 8008da0:	218221a3 	orrcs	r2, r2, r3, lsr #3
 8008da4:	e3500000 	cmp	r0, #0
 8008da8:	11b03223 	lsrsne	r3, r3, #4
 8008dac:	11a01221 	lsrne	r1, r1, #4
 8008db0:	1affffef 	bne	8008d74 <__aeabi_uidiv+0x58>
 8008db4:	e1a00002 	mov	r0, r2
 8008db8:	e12fff1e 	bx	lr
 8008dbc:	03a00001 	moveq	r0, #1
 8008dc0:	13a00000 	movne	r0, #0
 8008dc4:	e12fff1e 	bx	lr
 8008dc8:	e3510801 	cmp	r1, #65536	; 0x10000
 8008dcc:	21a01821 	lsrcs	r1, r1, #16
 8008dd0:	23a02010 	movcs	r2, #16
 8008dd4:	33a02000 	movcc	r2, #0
 8008dd8:	e3510c01 	cmp	r1, #256	; 0x100
 8008ddc:	21a01421 	lsrcs	r1, r1, #8
 8008de0:	22822008 	addcs	r2, r2, #8
 8008de4:	e3510010 	cmp	r1, #16
 8008de8:	21a01221 	lsrcs	r1, r1, #4
 8008dec:	22822004 	addcs	r2, r2, #4
 8008df0:	e3510004 	cmp	r1, #4
 8008df4:	82822003 	addhi	r2, r2, #3
 8008df8:	908220a1 	addls	r2, r2, r1, lsr #1
 8008dfc:	e1a00230 	lsr	r0, r0, r2
 8008e00:	e12fff1e 	bx	lr
 8008e04:	e12fff1f 	bx	pc
 8008e08:	e1a00000 	nop			; (mov r0, r0)
 8008e0c:	e3500000 	cmp	r0, #0
 8008e10:	13e00000 	mvnne	r0, #0
 8008e14:	ea00102b 	b	800cec8 <____aeabi_idiv0_from_arm>

08008e18 <__aeabi_uidivmod>:
 8008e18:	e3510000 	cmp	r1, #0
 8008e1c:	0afffff8 	beq	8008e04 <__aeabi_uidiv+0xe8>
 8008e20:	e92d4003 	push	{r0, r1, lr}
 8008e24:	ebffffbc 	bl	8008d1c <__aeabi_uidiv>
 8008e28:	e8bd4006 	pop	{r1, r2, lr}
 8008e2c:	e0030092 	mul	r3, r2, r0
 8008e30:	e0411003 	sub	r1, r1, r3
 8008e34:	e12fff1e 	bx	lr

08008e38 <__aeabi_idiv>:
 8008e38:	e3510000 	cmp	r1, #0
 8008e3c:	0a000043 	beq	8008f50 <.divsi3_skip_div0_test+0x110>

08008e40 <.divsi3_skip_div0_test>:
 8008e40:	e020c001 	eor	ip, r0, r1
 8008e44:	42611000 	rsbmi	r1, r1, #0
 8008e48:	e2512001 	subs	r2, r1, #1
 8008e4c:	0a000027 	beq	8008ef0 <.divsi3_skip_div0_test+0xb0>
 8008e50:	e1b03000 	movs	r3, r0
 8008e54:	42603000 	rsbmi	r3, r0, #0
 8008e58:	e1530001 	cmp	r3, r1
 8008e5c:	9a000026 	bls	8008efc <.divsi3_skip_div0_test+0xbc>
 8008e60:	e1110002 	tst	r1, r2
 8008e64:	0a000028 	beq	8008f0c <.divsi3_skip_div0_test+0xcc>
 8008e68:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 8008e6c:	01a01181 	lsleq	r1, r1, #3
 8008e70:	03a02008 	moveq	r2, #8
 8008e74:	13a02001 	movne	r2, #1
 8008e78:	e3510201 	cmp	r1, #268435456	; 0x10000000
 8008e7c:	31510003 	cmpcc	r1, r3
 8008e80:	31a01201 	lslcc	r1, r1, #4
 8008e84:	31a02202 	lslcc	r2, r2, #4
 8008e88:	3afffffa 	bcc	8008e78 <.divsi3_skip_div0_test+0x38>
 8008e8c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 8008e90:	31510003 	cmpcc	r1, r3
 8008e94:	31a01081 	lslcc	r1, r1, #1
 8008e98:	31a02082 	lslcc	r2, r2, #1
 8008e9c:	3afffffa 	bcc	8008e8c <.divsi3_skip_div0_test+0x4c>
 8008ea0:	e3a00000 	mov	r0, #0
 8008ea4:	e1530001 	cmp	r3, r1
 8008ea8:	20433001 	subcs	r3, r3, r1
 8008eac:	21800002 	orrcs	r0, r0, r2
 8008eb0:	e15300a1 	cmp	r3, r1, lsr #1
 8008eb4:	204330a1 	subcs	r3, r3, r1, lsr #1
 8008eb8:	218000a2 	orrcs	r0, r0, r2, lsr #1
 8008ebc:	e1530121 	cmp	r3, r1, lsr #2
 8008ec0:	20433121 	subcs	r3, r3, r1, lsr #2
 8008ec4:	21800122 	orrcs	r0, r0, r2, lsr #2
 8008ec8:	e15301a1 	cmp	r3, r1, lsr #3
 8008ecc:	204331a1 	subcs	r3, r3, r1, lsr #3
 8008ed0:	218001a2 	orrcs	r0, r0, r2, lsr #3
 8008ed4:	e3530000 	cmp	r3, #0
 8008ed8:	11b02222 	lsrsne	r2, r2, #4
 8008edc:	11a01221 	lsrne	r1, r1, #4
 8008ee0:	1affffef 	bne	8008ea4 <.divsi3_skip_div0_test+0x64>
 8008ee4:	e35c0000 	cmp	ip, #0
 8008ee8:	42600000 	rsbmi	r0, r0, #0
 8008eec:	e12fff1e 	bx	lr
 8008ef0:	e13c0000 	teq	ip, r0
 8008ef4:	42600000 	rsbmi	r0, r0, #0
 8008ef8:	e12fff1e 	bx	lr
 8008efc:	33a00000 	movcc	r0, #0
 8008f00:	01a00fcc 	asreq	r0, ip, #31
 8008f04:	03800001 	orreq	r0, r0, #1
 8008f08:	e12fff1e 	bx	lr
 8008f0c:	e3510801 	cmp	r1, #65536	; 0x10000
 8008f10:	21a01821 	lsrcs	r1, r1, #16
 8008f14:	23a02010 	movcs	r2, #16
 8008f18:	33a02000 	movcc	r2, #0
 8008f1c:	e3510c01 	cmp	r1, #256	; 0x100
 8008f20:	21a01421 	lsrcs	r1, r1, #8
 8008f24:	22822008 	addcs	r2, r2, #8
 8008f28:	e3510010 	cmp	r1, #16
 8008f2c:	21a01221 	lsrcs	r1, r1, #4
 8008f30:	22822004 	addcs	r2, r2, #4
 8008f34:	e3510004 	cmp	r1, #4
 8008f38:	82822003 	addhi	r2, r2, #3
 8008f3c:	908220a1 	addls	r2, r2, r1, lsr #1
 8008f40:	e35c0000 	cmp	ip, #0
 8008f44:	e1a00233 	lsr	r0, r3, r2
 8008f48:	42600000 	rsbmi	r0, r0, #0
 8008f4c:	e12fff1e 	bx	lr
 8008f50:	e12fff1f 	bx	pc
 8008f54:	e1a00000 	nop			; (mov r0, r0)
 8008f58:	e3500000 	cmp	r0, #0
 8008f5c:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
 8008f60:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
 8008f64:	ea000fd7 	b	800cec8 <____aeabi_idiv0_from_arm>

08008f68 <__aeabi_idivmod>:
 8008f68:	e3510000 	cmp	r1, #0
 8008f6c:	0afffff7 	beq	8008f50 <.divsi3_skip_div0_test+0x110>
 8008f70:	e92d4003 	push	{r0, r1, lr}
 8008f74:	ebffffb1 	bl	8008e40 <.divsi3_skip_div0_test>
 8008f78:	e8bd4006 	pop	{r1, r2, lr}
 8008f7c:	e0030092 	mul	r3, r2, r0
 8008f80:	e0411003 	sub	r1, r1, r3
 8008f84:	e12fff1e 	bx	lr

08008f88 <__aeabi_idiv0>:
 8008f88:	4770      	bx	lr
 8008f8a:	46c0      	nop			; (mov r8, r8)

08008f8c <__aeabi_drsub>:
 8008f8c:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
 8008f90:	ea000000 	b	8008f98 <__adddf3>

08008f94 <__aeabi_dsub>:
 8008f94:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

08008f98 <__adddf3>:
 8008f98:	e92d4030 	push	{r4, r5, lr}
 8008f9c:	e1a04081 	lsl	r4, r1, #1
 8008fa0:	e1a05083 	lsl	r5, r3, #1
 8008fa4:	e1340005 	teq	r4, r5
 8008fa8:	01300002 	teqeq	r0, r2
 8008fac:	1194c000 	orrsne	ip, r4, r0
 8008fb0:	1195c002 	orrsne	ip, r5, r2
 8008fb4:	11f0cac4 	mvnsne	ip, r4, asr #21
 8008fb8:	11f0cac5 	mvnsne	ip, r5, asr #21
 8008fbc:	0a00008c 	beq	80091f4 <__adddf3+0x25c>
 8008fc0:	e1a04aa4 	lsr	r4, r4, #21
 8008fc4:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
 8008fc8:	b2655000 	rsblt	r5, r5, #0
 8008fcc:	da000006 	ble	8008fec <__adddf3+0x54>
 8008fd0:	e0844005 	add	r4, r4, r5
 8008fd4:	e0202002 	eor	r2, r0, r2
 8008fd8:	e0213003 	eor	r3, r1, r3
 8008fdc:	e0220000 	eor	r0, r2, r0
 8008fe0:	e0231001 	eor	r1, r3, r1
 8008fe4:	e0202002 	eor	r2, r0, r2
 8008fe8:	e0213003 	eor	r3, r1, r3
 8008fec:	e3550036 	cmp	r5, #54	; 0x36
 8008ff0:	88bd4030 	pophi	{r4, r5, lr}
 8008ff4:	812fff1e 	bxhi	lr
 8008ff8:	e3110102 	tst	r1, #-2147483648	; 0x80000000
 8008ffc:	e1a01601 	lsl	r1, r1, #12
 8009000:	e3a0c601 	mov	ip, #1048576	; 0x100000
 8009004:	e18c1621 	orr	r1, ip, r1, lsr #12
 8009008:	0a000001 	beq	8009014 <__adddf3+0x7c>
 800900c:	e2700000 	rsbs	r0, r0, #0
 8009010:	e2e11000 	rsc	r1, r1, #0
 8009014:	e3130102 	tst	r3, #-2147483648	; 0x80000000
 8009018:	e1a03603 	lsl	r3, r3, #12
 800901c:	e18c3623 	orr	r3, ip, r3, lsr #12
 8009020:	0a000001 	beq	800902c <__adddf3+0x94>
 8009024:	e2722000 	rsbs	r2, r2, #0
 8009028:	e2e33000 	rsc	r3, r3, #0
 800902c:	e1340005 	teq	r4, r5
 8009030:	0a000069 	beq	80091dc <__adddf3+0x244>
 8009034:	e2444001 	sub	r4, r4, #1
 8009038:	e275e020 	rsbs	lr, r5, #32
 800903c:	ba000005 	blt	8009058 <__adddf3+0xc0>
 8009040:	e1a0ce12 	lsl	ip, r2, lr
 8009044:	e0900532 	adds	r0, r0, r2, lsr r5
 8009048:	e2a11000 	adc	r1, r1, #0
 800904c:	e0900e13 	adds	r0, r0, r3, lsl lr
 8009050:	e0b11553 	adcs	r1, r1, r3, asr r5
 8009054:	ea000006 	b	8009074 <__adddf3+0xdc>
 8009058:	e2455020 	sub	r5, r5, #32
 800905c:	e28ee020 	add	lr, lr, #32
 8009060:	e3520001 	cmp	r2, #1
 8009064:	e1a0ce13 	lsl	ip, r3, lr
 8009068:	238cc002 	orrcs	ip, ip, #2
 800906c:	e0900553 	adds	r0, r0, r3, asr r5
 8009070:	e0b11fc3 	adcs	r1, r1, r3, asr #31
 8009074:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 8009078:	5a000002 	bpl	8009088 <__adddf3+0xf0>
 800907c:	e27cc000 	rsbs	ip, ip, #0
 8009080:	e2f00000 	rscs	r0, r0, #0
 8009084:	e2e11000 	rsc	r1, r1, #0
 8009088:	e3510601 	cmp	r1, #1048576	; 0x100000
 800908c:	3a00000f 	bcc	80090d0 <__adddf3+0x138>
 8009090:	e3510602 	cmp	r1, #2097152	; 0x200000
 8009094:	3a000006 	bcc	80090b4 <__adddf3+0x11c>
 8009098:	e1b010a1 	lsrs	r1, r1, #1
 800909c:	e1b00060 	rrxs	r0, r0
 80090a0:	e1a0c06c 	rrx	ip, ip
 80090a4:	e2844001 	add	r4, r4, #1
 80090a8:	e1a02a84 	lsl	r2, r4, #21
 80090ac:	e3720501 	cmn	r2, #4194304	; 0x400000
 80090b0:	2a00006b 	bcs	8009264 <__adddf3+0x2cc>
 80090b4:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
 80090b8:	01b0c0a0 	lsrseq	ip, r0, #1
 80090bc:	e2b00000 	adcs	r0, r0, #0
 80090c0:	e0a11a04 	adc	r1, r1, r4, lsl #20
 80090c4:	e1811005 	orr	r1, r1, r5
 80090c8:	e8bd4030 	pop	{r4, r5, lr}
 80090cc:	e12fff1e 	bx	lr
 80090d0:	e1b0c08c 	lsls	ip, ip, #1
 80090d4:	e0b00000 	adcs	r0, r0, r0
 80090d8:	e0a11001 	adc	r1, r1, r1
 80090dc:	e3110601 	tst	r1, #1048576	; 0x100000
 80090e0:	e2444001 	sub	r4, r4, #1
 80090e4:	1afffff2 	bne	80090b4 <__adddf3+0x11c>
 80090e8:	e3310000 	teq	r1, #0
 80090ec:	13a03014 	movne	r3, #20
 80090f0:	03a03034 	moveq	r3, #52	; 0x34
 80090f4:	01a01000 	moveq	r1, r0
 80090f8:	03a00000 	moveq	r0, #0
 80090fc:	e1a02001 	mov	r2, r1
 8009100:	e3520801 	cmp	r2, #65536	; 0x10000
 8009104:	21a02822 	lsrcs	r2, r2, #16
 8009108:	22433010 	subcs	r3, r3, #16
 800910c:	e3520c01 	cmp	r2, #256	; 0x100
 8009110:	21a02422 	lsrcs	r2, r2, #8
 8009114:	22433008 	subcs	r3, r3, #8
 8009118:	e3520010 	cmp	r2, #16
 800911c:	21a02222 	lsrcs	r2, r2, #4
 8009120:	22433004 	subcs	r3, r3, #4
 8009124:	e3520004 	cmp	r2, #4
 8009128:	22433002 	subcs	r3, r3, #2
 800912c:	304330a2 	subcc	r3, r3, r2, lsr #1
 8009130:	e04331a2 	sub	r3, r3, r2, lsr #3
 8009134:	e2532020 	subs	r2, r3, #32
 8009138:	aa000007 	bge	800915c <__adddf3+0x1c4>
 800913c:	e292200c 	adds	r2, r2, #12
 8009140:	da000004 	ble	8009158 <__adddf3+0x1c0>
 8009144:	e282c014 	add	ip, r2, #20
 8009148:	e262200c 	rsb	r2, r2, #12
 800914c:	e1a00c11 	lsl	r0, r1, ip
 8009150:	e1a01231 	lsr	r1, r1, r2
 8009154:	ea000004 	b	800916c <__adddf3+0x1d4>
 8009158:	e2822014 	add	r2, r2, #20
 800915c:	d262c020 	rsble	ip, r2, #32
 8009160:	e1a01211 	lsl	r1, r1, r2
 8009164:	d1811c30 	orrle	r1, r1, r0, lsr ip
 8009168:	d1a00210 	lslle	r0, r0, r2
 800916c:	e0544003 	subs	r4, r4, r3
 8009170:	a0811a04 	addge	r1, r1, r4, lsl #20
 8009174:	a1811005 	orrge	r1, r1, r5
 8009178:	a8bd4030 	popge	{r4, r5, lr}
 800917c:	a12fff1e 	bxge	lr
 8009180:	e1e04004 	mvn	r4, r4
 8009184:	e254401f 	subs	r4, r4, #31
 8009188:	aa00000f 	bge	80091cc <__adddf3+0x234>
 800918c:	e294400c 	adds	r4, r4, #12
 8009190:	ca000006 	bgt	80091b0 <__adddf3+0x218>
 8009194:	e2844014 	add	r4, r4, #20
 8009198:	e2642020 	rsb	r2, r4, #32
 800919c:	e1a00430 	lsr	r0, r0, r4
 80091a0:	e1800211 	orr	r0, r0, r1, lsl r2
 80091a4:	e1851431 	orr	r1, r5, r1, lsr r4
 80091a8:	e8bd4030 	pop	{r4, r5, lr}
 80091ac:	e12fff1e 	bx	lr
 80091b0:	e264400c 	rsb	r4, r4, #12
 80091b4:	e2642020 	rsb	r2, r4, #32
 80091b8:	e1a00230 	lsr	r0, r0, r2
 80091bc:	e1800411 	orr	r0, r0, r1, lsl r4
 80091c0:	e1a01005 	mov	r1, r5
 80091c4:	e8bd4030 	pop	{r4, r5, lr}
 80091c8:	e12fff1e 	bx	lr
 80091cc:	e1a00431 	lsr	r0, r1, r4
 80091d0:	e1a01005 	mov	r1, r5
 80091d4:	e8bd4030 	pop	{r4, r5, lr}
 80091d8:	e12fff1e 	bx	lr
 80091dc:	e3340000 	teq	r4, #0
 80091e0:	e2233601 	eor	r3, r3, #1048576	; 0x100000
 80091e4:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
 80091e8:	02844001 	addeq	r4, r4, #1
 80091ec:	12455001 	subne	r5, r5, #1
 80091f0:	eaffff8f 	b	8009034 <__adddf3+0x9c>
 80091f4:	e1f0cac4 	mvns	ip, r4, asr #21
 80091f8:	11f0cac5 	mvnsne	ip, r5, asr #21
 80091fc:	0a00001d 	beq	8009278 <__adddf3+0x2e0>
 8009200:	e1340005 	teq	r4, r5
 8009204:	01300002 	teqeq	r0, r2
 8009208:	0a000004 	beq	8009220 <__adddf3+0x288>
 800920c:	e194c000 	orrs	ip, r4, r0
 8009210:	01a01003 	moveq	r1, r3
 8009214:	01a00002 	moveq	r0, r2
 8009218:	e8bd4030 	pop	{r4, r5, lr}
 800921c:	e12fff1e 	bx	lr
 8009220:	e1310003 	teq	r1, r3
 8009224:	13a01000 	movne	r1, #0
 8009228:	13a00000 	movne	r0, #0
 800922c:	18bd4030 	popne	{r4, r5, lr}
 8009230:	112fff1e 	bxne	lr
 8009234:	e1b0caa4 	lsrs	ip, r4, #21
 8009238:	1a000004 	bne	8009250 <__adddf3+0x2b8>
 800923c:	e1b00080 	lsls	r0, r0, #1
 8009240:	e0b11001 	adcs	r1, r1, r1
 8009244:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
 8009248:	e8bd4030 	pop	{r4, r5, lr}
 800924c:	e12fff1e 	bx	lr
 8009250:	e2944501 	adds	r4, r4, #4194304	; 0x400000
 8009254:	32811601 	addcc	r1, r1, #1048576	; 0x100000
 8009258:	38bd4030 	popcc	{r4, r5, lr}
 800925c:	312fff1e 	bxcc	lr
 8009260:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 8009264:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
 8009268:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
 800926c:	e3a00000 	mov	r0, #0
 8009270:	e8bd4030 	pop	{r4, r5, lr}
 8009274:	e12fff1e 	bx	lr
 8009278:	e1f0cac4 	mvns	ip, r4, asr #21
 800927c:	11a01003 	movne	r1, r3
 8009280:	11a00002 	movne	r0, r2
 8009284:	01f0cac5 	mvnseq	ip, r5, asr #21
 8009288:	11a03001 	movne	r3, r1
 800928c:	11a02000 	movne	r2, r0
 8009290:	e1904601 	orrs	r4, r0, r1, lsl #12
 8009294:	01925603 	orrseq	r5, r2, r3, lsl #12
 8009298:	01310003 	teqeq	r1, r3
 800929c:	13811702 	orrne	r1, r1, #524288	; 0x80000
 80092a0:	e8bd4030 	pop	{r4, r5, lr}
 80092a4:	e12fff1e 	bx	lr

080092a8 <__aeabi_ui2d>:
 80092a8:	e3300000 	teq	r0, #0
 80092ac:	03a01000 	moveq	r1, #0
 80092b0:	012fff1e 	bxeq	lr
 80092b4:	e92d4030 	push	{r4, r5, lr}
 80092b8:	e3a04b01 	mov	r4, #1024	; 0x400
 80092bc:	e2844032 	add	r4, r4, #50	; 0x32
 80092c0:	e3a05000 	mov	r5, #0
 80092c4:	e3a01000 	mov	r1, #0
 80092c8:	eaffff86 	b	80090e8 <__adddf3+0x150>

080092cc <__aeabi_i2d>:
 80092cc:	e3300000 	teq	r0, #0
 80092d0:	03a01000 	moveq	r1, #0
 80092d4:	012fff1e 	bxeq	lr
 80092d8:	e92d4030 	push	{r4, r5, lr}
 80092dc:	e3a04b01 	mov	r4, #1024	; 0x400
 80092e0:	e2844032 	add	r4, r4, #50	; 0x32
 80092e4:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
 80092e8:	42600000 	rsbmi	r0, r0, #0
 80092ec:	e3a01000 	mov	r1, #0
 80092f0:	eaffff7c 	b	80090e8 <__adddf3+0x150>

080092f4 <__aeabi_f2d>:
 80092f4:	e1b02080 	lsls	r2, r0, #1
 80092f8:	e1a011c2 	asr	r1, r2, #3
 80092fc:	e1a01061 	rrx	r1, r1
 8009300:	e1a00e02 	lsl	r0, r2, #28
 8009304:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
 8009308:	133304ff 	teqne	r3, #-16777216	; 0xff000000
 800930c:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
 8009310:	112fff1e 	bxne	lr
 8009314:	e3320000 	teq	r2, #0
 8009318:	133304ff 	teqne	r3, #-16777216	; 0xff000000
 800931c:	012fff1e 	bxeq	lr
 8009320:	e92d4030 	push	{r4, r5, lr}
 8009324:	e3a04d0e 	mov	r4, #896	; 0x380
 8009328:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 800932c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
 8009330:	eaffff6c 	b	80090e8 <__adddf3+0x150>

08009334 <__aeabi_ul2d>:
 8009334:	e1902001 	orrs	r2, r0, r1
 8009338:	012fff1e 	bxeq	lr
 800933c:	e92d4030 	push	{r4, r5, lr}
 8009340:	e3a05000 	mov	r5, #0
 8009344:	ea000006 	b	8009364 <__aeabi_l2d+0x1c>

08009348 <__aeabi_l2d>:
 8009348:	e1902001 	orrs	r2, r0, r1
 800934c:	012fff1e 	bxeq	lr
 8009350:	e92d4030 	push	{r4, r5, lr}
 8009354:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
 8009358:	5a000001 	bpl	8009364 <__aeabi_l2d+0x1c>
 800935c:	e2700000 	rsbs	r0, r0, #0
 8009360:	e2e11000 	rsc	r1, r1, #0
 8009364:	e3a04b01 	mov	r4, #1024	; 0x400
 8009368:	e2844032 	add	r4, r4, #50	; 0x32
 800936c:	e1b0cb21 	lsrs	ip, r1, #22
 8009370:	0affff44 	beq	8009088 <__adddf3+0xf0>
 8009374:	e3a02003 	mov	r2, #3
 8009378:	e1b0c1ac 	lsrs	ip, ip, #3
 800937c:	12822003 	addne	r2, r2, #3
 8009380:	e1b0c1ac 	lsrs	ip, ip, #3
 8009384:	12822003 	addne	r2, r2, #3
 8009388:	e08221ac 	add	r2, r2, ip, lsr #3
 800938c:	e2623020 	rsb	r3, r2, #32
 8009390:	e1a0c310 	lsl	ip, r0, r3
 8009394:	e1a00230 	lsr	r0, r0, r2
 8009398:	e1800311 	orr	r0, r0, r1, lsl r3
 800939c:	e1a01231 	lsr	r1, r1, r2
 80093a0:	e0844002 	add	r4, r4, r2
 80093a4:	eaffff37 	b	8009088 <__adddf3+0xf0>

080093a8 <__aeabi_dmul>:
 80093a8:	e92d4070 	push	{r4, r5, r6, lr}
 80093ac:	e3a0c0ff 	mov	ip, #255	; 0xff
 80093b0:	e38ccc07 	orr	ip, ip, #1792	; 0x700
 80093b4:	e01c4a21 	ands	r4, ip, r1, lsr #20
 80093b8:	101c5a23 	andsne	r5, ip, r3, lsr #20
 80093bc:	1134000c 	teqne	r4, ip
 80093c0:	1135000c 	teqne	r5, ip
 80093c4:	0b000075 	bleq	80095a0 <__aeabi_dmul+0x1f8>
 80093c8:	e0844005 	add	r4, r4, r5
 80093cc:	e0216003 	eor	r6, r1, r3
 80093d0:	e1c11a8c 	bic	r1, r1, ip, lsl #21
 80093d4:	e1c33a8c 	bic	r3, r3, ip, lsl #21
 80093d8:	e1905601 	orrs	r5, r0, r1, lsl #12
 80093dc:	11925603 	orrsne	r5, r2, r3, lsl #12
 80093e0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 80093e4:	e3833601 	orr	r3, r3, #1048576	; 0x100000
 80093e8:	0a00001d 	beq	8009464 <__aeabi_dmul+0xbc>
 80093ec:	e08ec290 	umull	ip, lr, r0, r2
 80093f0:	e3a05000 	mov	r5, #0
 80093f4:	e0a5e291 	umlal	lr, r5, r1, r2
 80093f8:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
 80093fc:	e0a5e390 	umlal	lr, r5, r0, r3
 8009400:	e3a06000 	mov	r6, #0
 8009404:	e0a65391 	umlal	r5, r6, r1, r3
 8009408:	e33c0000 	teq	ip, #0
 800940c:	138ee001 	orrne	lr, lr, #1
 8009410:	e24440ff 	sub	r4, r4, #255	; 0xff
 8009414:	e3560c02 	cmp	r6, #512	; 0x200
 8009418:	e2c44c03 	sbc	r4, r4, #768	; 0x300
 800941c:	2a000002 	bcs	800942c <__aeabi_dmul+0x84>
 8009420:	e1b0e08e 	lsls	lr, lr, #1
 8009424:	e0b55005 	adcs	r5, r5, r5
 8009428:	e0a66006 	adc	r6, r6, r6
 800942c:	e1821586 	orr	r1, r2, r6, lsl #11
 8009430:	e1811aa5 	orr	r1, r1, r5, lsr #21
 8009434:	e1a00585 	lsl	r0, r5, #11
 8009438:	e1800aae 	orr	r0, r0, lr, lsr #21
 800943c:	e1a0e58e 	lsl	lr, lr, #11
 8009440:	e254c0fd 	subs	ip, r4, #253	; 0xfd
 8009444:	835c0c07 	cmphi	ip, #1792	; 0x700
 8009448:	8a000011 	bhi	8009494 <__aeabi_dmul+0xec>
 800944c:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
 8009450:	01b0e0a0 	lsrseq	lr, r0, #1
 8009454:	e2b00000 	adcs	r0, r0, #0
 8009458:	e0a11a04 	adc	r1, r1, r4, lsl #20
 800945c:	e8bd4070 	pop	{r4, r5, r6, lr}
 8009460:	e12fff1e 	bx	lr
 8009464:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
 8009468:	e1861001 	orr	r1, r6, r1
 800946c:	e1800002 	orr	r0, r0, r2
 8009470:	e0211003 	eor	r1, r1, r3
 8009474:	e05440ac 	subs	r4, r4, ip, lsr #1
 8009478:	c074500c 	rsbsgt	r5, r4, ip
 800947c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
 8009480:	c8bd4070 	popgt	{r4, r5, r6, lr}
 8009484:	c12fff1e 	bxgt	lr
 8009488:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 800948c:	e3a0e000 	mov	lr, #0
 8009490:	e2544001 	subs	r4, r4, #1
 8009494:	ca00005d 	bgt	8009610 <__aeabi_dmul+0x268>
 8009498:	e3740036 	cmn	r4, #54	; 0x36
 800949c:	d3a00000 	movle	r0, #0
 80094a0:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
 80094a4:	d8bd4070 	pople	{r4, r5, r6, lr}
 80094a8:	d12fff1e 	bxle	lr
 80094ac:	e2644000 	rsb	r4, r4, #0
 80094b0:	e2544020 	subs	r4, r4, #32
 80094b4:	aa00001a 	bge	8009524 <__aeabi_dmul+0x17c>
 80094b8:	e294400c 	adds	r4, r4, #12
 80094bc:	ca00000c 	bgt	80094f4 <__aeabi_dmul+0x14c>
 80094c0:	e2844014 	add	r4, r4, #20
 80094c4:	e2645020 	rsb	r5, r4, #32
 80094c8:	e1a03510 	lsl	r3, r0, r5
 80094cc:	e1a00430 	lsr	r0, r0, r4
 80094d0:	e1800511 	orr	r0, r0, r1, lsl r5
 80094d4:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
 80094d8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
 80094dc:	e0900fa3 	adds	r0, r0, r3, lsr #31
 80094e0:	e0a21431 	adc	r1, r2, r1, lsr r4
 80094e4:	e19ee083 	orrs	lr, lr, r3, lsl #1
 80094e8:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 80094ec:	e8bd4070 	pop	{r4, r5, r6, lr}
 80094f0:	e12fff1e 	bx	lr
 80094f4:	e264400c 	rsb	r4, r4, #12
 80094f8:	e2645020 	rsb	r5, r4, #32
 80094fc:	e1a03410 	lsl	r3, r0, r4
 8009500:	e1a00530 	lsr	r0, r0, r5
 8009504:	e1800411 	orr	r0, r0, r1, lsl r4
 8009508:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 800950c:	e0900fa3 	adds	r0, r0, r3, lsr #31
 8009510:	e2a11000 	adc	r1, r1, #0
 8009514:	e19ee083 	orrs	lr, lr, r3, lsl #1
 8009518:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 800951c:	e8bd4070 	pop	{r4, r5, r6, lr}
 8009520:	e12fff1e 	bx	lr
 8009524:	e2645020 	rsb	r5, r4, #32
 8009528:	e18ee510 	orr	lr, lr, r0, lsl r5
 800952c:	e1a03430 	lsr	r3, r0, r4
 8009530:	e1833511 	orr	r3, r3, r1, lsl r5
 8009534:	e1a00431 	lsr	r0, r1, r4
 8009538:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 800953c:	e1c00431 	bic	r0, r0, r1, lsr r4
 8009540:	e0800fa3 	add	r0, r0, r3, lsr #31
 8009544:	e19ee083 	orrs	lr, lr, r3, lsl #1
 8009548:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 800954c:	e8bd4070 	pop	{r4, r5, r6, lr}
 8009550:	e12fff1e 	bx	lr
 8009554:	e3340000 	teq	r4, #0
 8009558:	1a000008 	bne	8009580 <__aeabi_dmul+0x1d8>
 800955c:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
 8009560:	e1b00080 	lsls	r0, r0, #1
 8009564:	e0a11001 	adc	r1, r1, r1
 8009568:	e3110601 	tst	r1, #1048576	; 0x100000
 800956c:	02444001 	subeq	r4, r4, #1
 8009570:	0afffffa 	beq	8009560 <__aeabi_dmul+0x1b8>
 8009574:	e1811006 	orr	r1, r1, r6
 8009578:	e3350000 	teq	r5, #0
 800957c:	112fff1e 	bxne	lr
 8009580:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
 8009584:	e1b02082 	lsls	r2, r2, #1
 8009588:	e0a33003 	adc	r3, r3, r3
 800958c:	e3130601 	tst	r3, #1048576	; 0x100000
 8009590:	02455001 	subeq	r5, r5, #1
 8009594:	0afffffa 	beq	8009584 <__aeabi_dmul+0x1dc>
 8009598:	e1833006 	orr	r3, r3, r6
 800959c:	e12fff1e 	bx	lr
 80095a0:	e134000c 	teq	r4, ip
 80095a4:	e00c5a23 	and	r5, ip, r3, lsr #20
 80095a8:	1135000c 	teqne	r5, ip
 80095ac:	0a000007 	beq	80095d0 <__aeabi_dmul+0x228>
 80095b0:	e1906081 	orrs	r6, r0, r1, lsl #1
 80095b4:	11926083 	orrsne	r6, r2, r3, lsl #1
 80095b8:	1affffe5 	bne	8009554 <__aeabi_dmul+0x1ac>
 80095bc:	e0211003 	eor	r1, r1, r3
 80095c0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 80095c4:	e3a00000 	mov	r0, #0
 80095c8:	e8bd4070 	pop	{r4, r5, r6, lr}
 80095cc:	e12fff1e 	bx	lr
 80095d0:	e1906081 	orrs	r6, r0, r1, lsl #1
 80095d4:	01a00002 	moveq	r0, r2
 80095d8:	01a01003 	moveq	r1, r3
 80095dc:	11926083 	orrsne	r6, r2, r3, lsl #1
 80095e0:	0a000010 	beq	8009628 <__aeabi_dmul+0x280>
 80095e4:	e134000c 	teq	r4, ip
 80095e8:	1a000001 	bne	80095f4 <__aeabi_dmul+0x24c>
 80095ec:	e1906601 	orrs	r6, r0, r1, lsl #12
 80095f0:	1a00000c 	bne	8009628 <__aeabi_dmul+0x280>
 80095f4:	e135000c 	teq	r5, ip
 80095f8:	1a000003 	bne	800960c <__aeabi_dmul+0x264>
 80095fc:	e1926603 	orrs	r6, r2, r3, lsl #12
 8009600:	11a00002 	movne	r0, r2
 8009604:	11a01003 	movne	r1, r3
 8009608:	1a000006 	bne	8009628 <__aeabi_dmul+0x280>
 800960c:	e0211003 	eor	r1, r1, r3
 8009610:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 8009614:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
 8009618:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
 800961c:	e3a00000 	mov	r0, #0
 8009620:	e8bd4070 	pop	{r4, r5, r6, lr}
 8009624:	e12fff1e 	bx	lr
 8009628:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
 800962c:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
 8009630:	e8bd4070 	pop	{r4, r5, r6, lr}
 8009634:	e12fff1e 	bx	lr

08009638 <__aeabi_ddiv>:
 8009638:	e92d4070 	push	{r4, r5, r6, lr}
 800963c:	e3a0c0ff 	mov	ip, #255	; 0xff
 8009640:	e38ccc07 	orr	ip, ip, #1792	; 0x700
 8009644:	e01c4a21 	ands	r4, ip, r1, lsr #20
 8009648:	101c5a23 	andsne	r5, ip, r3, lsr #20
 800964c:	1134000c 	teqne	r4, ip
 8009650:	1135000c 	teqne	r5, ip
 8009654:	0b00005e 	bleq	80097d4 <__aeabi_ddiv+0x19c>
 8009658:	e0444005 	sub	r4, r4, r5
 800965c:	e021e003 	eor	lr, r1, r3
 8009660:	e1925603 	orrs	r5, r2, r3, lsl #12
 8009664:	e1a01601 	lsl	r1, r1, #12
 8009668:	0a00004c 	beq	80097a0 <__aeabi_ddiv+0x168>
 800966c:	e1a03603 	lsl	r3, r3, #12
 8009670:	e3a05201 	mov	r5, #268435456	; 0x10000000
 8009674:	e1853223 	orr	r3, r5, r3, lsr #4
 8009678:	e1833c22 	orr	r3, r3, r2, lsr #24
 800967c:	e1a02402 	lsl	r2, r2, #8
 8009680:	e1855221 	orr	r5, r5, r1, lsr #4
 8009684:	e1855c20 	orr	r5, r5, r0, lsr #24
 8009688:	e1a06400 	lsl	r6, r0, #8
 800968c:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
 8009690:	e1550003 	cmp	r5, r3
 8009694:	01560002 	cmpeq	r6, r2
 8009698:	e2a440fd 	adc	r4, r4, #253	; 0xfd
 800969c:	e2844c03 	add	r4, r4, #768	; 0x300
 80096a0:	2a000001 	bcs	80096ac <__aeabi_ddiv+0x74>
 80096a4:	e1b030a3 	lsrs	r3, r3, #1
 80096a8:	e1a02062 	rrx	r2, r2
 80096ac:	e0566002 	subs	r6, r6, r2
 80096b0:	e0c55003 	sbc	r5, r5, r3
 80096b4:	e1b030a3 	lsrs	r3, r3, #1
 80096b8:	e1a02062 	rrx	r2, r2
 80096bc:	e3a00601 	mov	r0, #1048576	; 0x100000
 80096c0:	e3a0c702 	mov	ip, #524288	; 0x80000
 80096c4:	e056e002 	subs	lr, r6, r2
 80096c8:	e0d5e003 	sbcs	lr, r5, r3
 80096cc:	20466002 	subcs	r6, r6, r2
 80096d0:	21a0500e 	movcs	r5, lr
 80096d4:	2180000c 	orrcs	r0, r0, ip
 80096d8:	e1b030a3 	lsrs	r3, r3, #1
 80096dc:	e1a02062 	rrx	r2, r2
 80096e0:	e056e002 	subs	lr, r6, r2
 80096e4:	e0d5e003 	sbcs	lr, r5, r3
 80096e8:	20466002 	subcs	r6, r6, r2
 80096ec:	21a0500e 	movcs	r5, lr
 80096f0:	218000ac 	orrcs	r0, r0, ip, lsr #1
 80096f4:	e1b030a3 	lsrs	r3, r3, #1
 80096f8:	e1a02062 	rrx	r2, r2
 80096fc:	e056e002 	subs	lr, r6, r2
 8009700:	e0d5e003 	sbcs	lr, r5, r3
 8009704:	20466002 	subcs	r6, r6, r2
 8009708:	21a0500e 	movcs	r5, lr
 800970c:	2180012c 	orrcs	r0, r0, ip, lsr #2
 8009710:	e1b030a3 	lsrs	r3, r3, #1
 8009714:	e1a02062 	rrx	r2, r2
 8009718:	e056e002 	subs	lr, r6, r2
 800971c:	e0d5e003 	sbcs	lr, r5, r3
 8009720:	20466002 	subcs	r6, r6, r2
 8009724:	21a0500e 	movcs	r5, lr
 8009728:	218001ac 	orrcs	r0, r0, ip, lsr #3
 800972c:	e195e006 	orrs	lr, r5, r6
 8009730:	0a00000d 	beq	800976c <__aeabi_ddiv+0x134>
 8009734:	e1a05205 	lsl	r5, r5, #4
 8009738:	e1855e26 	orr	r5, r5, r6, lsr #28
 800973c:	e1a06206 	lsl	r6, r6, #4
 8009740:	e1a03183 	lsl	r3, r3, #3
 8009744:	e1833ea2 	orr	r3, r3, r2, lsr #29
 8009748:	e1a02182 	lsl	r2, r2, #3
 800974c:	e1b0c22c 	lsrs	ip, ip, #4
 8009750:	1affffdb 	bne	80096c4 <__aeabi_ddiv+0x8c>
 8009754:	e3110601 	tst	r1, #1048576	; 0x100000
 8009758:	1a000006 	bne	8009778 <__aeabi_ddiv+0x140>
 800975c:	e1811000 	orr	r1, r1, r0
 8009760:	e3a00000 	mov	r0, #0
 8009764:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
 8009768:	eaffffd5 	b	80096c4 <__aeabi_ddiv+0x8c>
 800976c:	e3110601 	tst	r1, #1048576	; 0x100000
 8009770:	01811000 	orreq	r1, r1, r0
 8009774:	03a00000 	moveq	r0, #0
 8009778:	e254c0fd 	subs	ip, r4, #253	; 0xfd
 800977c:	835c0c07 	cmphi	ip, #1792	; 0x700
 8009780:	8affff43 	bhi	8009494 <__aeabi_dmul+0xec>
 8009784:	e055c003 	subs	ip, r5, r3
 8009788:	0056c002 	subseq	ip, r6, r2
 800978c:	01b0c0a0 	lsrseq	ip, r0, #1
 8009790:	e2b00000 	adcs	r0, r0, #0
 8009794:	e0a11a04 	adc	r1, r1, r4, lsl #20
 8009798:	e8bd4070 	pop	{r4, r5, r6, lr}
 800979c:	e12fff1e 	bx	lr
 80097a0:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
 80097a4:	e18e1621 	orr	r1, lr, r1, lsr #12
 80097a8:	e09440ac 	adds	r4, r4, ip, lsr #1
 80097ac:	c074500c 	rsbsgt	r5, r4, ip
 80097b0:	c1811a04 	orrgt	r1, r1, r4, lsl #20
 80097b4:	c8bd4070 	popgt	{r4, r5, r6, lr}
 80097b8:	c12fff1e 	bxgt	lr
 80097bc:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 80097c0:	e3a0e000 	mov	lr, #0
 80097c4:	e2544001 	subs	r4, r4, #1
 80097c8:	eaffff31 	b	8009494 <__aeabi_dmul+0xec>
 80097cc:	e185e006 	orr	lr, r5, r6
 80097d0:	eaffff2f 	b	8009494 <__aeabi_dmul+0xec>
 80097d4:	e00c5a23 	and	r5, ip, r3, lsr #20
 80097d8:	e134000c 	teq	r4, ip
 80097dc:	0135000c 	teqeq	r5, ip
 80097e0:	0affff90 	beq	8009628 <__aeabi_dmul+0x280>
 80097e4:	e134000c 	teq	r4, ip
 80097e8:	1a000006 	bne	8009808 <__aeabi_ddiv+0x1d0>
 80097ec:	e1904601 	orrs	r4, r0, r1, lsl #12
 80097f0:	1affff8c 	bne	8009628 <__aeabi_dmul+0x280>
 80097f4:	e135000c 	teq	r5, ip
 80097f8:	1affff83 	bne	800960c <__aeabi_dmul+0x264>
 80097fc:	e1a00002 	mov	r0, r2
 8009800:	e1a01003 	mov	r1, r3
 8009804:	eaffff87 	b	8009628 <__aeabi_dmul+0x280>
 8009808:	e135000c 	teq	r5, ip
 800980c:	1a000004 	bne	8009824 <__aeabi_ddiv+0x1ec>
 8009810:	e1925603 	orrs	r5, r2, r3, lsl #12
 8009814:	0affff68 	beq	80095bc <__aeabi_dmul+0x214>
 8009818:	e1a00002 	mov	r0, r2
 800981c:	e1a01003 	mov	r1, r3
 8009820:	eaffff80 	b	8009628 <__aeabi_dmul+0x280>
 8009824:	e1906081 	orrs	r6, r0, r1, lsl #1
 8009828:	11926083 	orrsne	r6, r2, r3, lsl #1
 800982c:	1affff48 	bne	8009554 <__aeabi_dmul+0x1ac>
 8009830:	e1904081 	orrs	r4, r0, r1, lsl #1
 8009834:	1affff74 	bne	800960c <__aeabi_dmul+0x264>
 8009838:	e1925083 	orrs	r5, r2, r3, lsl #1
 800983c:	1affff5e 	bne	80095bc <__aeabi_dmul+0x214>
 8009840:	eaffff78 	b	8009628 <__aeabi_dmul+0x280>

08009844 <__gedf2>:
 8009844:	e3e0c000 	mvn	ip, #0
 8009848:	ea000002 	b	8009858 <__cmpdf2+0x4>

0800984c <__ledf2>:
 800984c:	e3a0c001 	mov	ip, #1
 8009850:	ea000000 	b	8009858 <__cmpdf2+0x4>

08009854 <__cmpdf2>:
 8009854:	e3a0c001 	mov	ip, #1
 8009858:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 800985c:	e1a0c081 	lsl	ip, r1, #1
 8009860:	e1f0cacc 	mvns	ip, ip, asr #21
 8009864:	e1a0c083 	lsl	ip, r3, #1
 8009868:	11f0cacc 	mvnsne	ip, ip, asr #21
 800986c:	0a00000e 	beq	80098ac <__cmpdf2+0x58>
 8009870:	e28dd004 	add	sp, sp, #4
 8009874:	e190c081 	orrs	ip, r0, r1, lsl #1
 8009878:	0192c083 	orrseq	ip, r2, r3, lsl #1
 800987c:	11310003 	teqne	r1, r3
 8009880:	01300002 	teqeq	r0, r2
 8009884:	03a00000 	moveq	r0, #0
 8009888:	012fff1e 	bxeq	lr
 800988c:	e3700000 	cmn	r0, #0
 8009890:	e1310003 	teq	r1, r3
 8009894:	51510003 	cmppl	r1, r3
 8009898:	01500002 	cmpeq	r0, r2
 800989c:	21a00fc3 	asrcs	r0, r3, #31
 80098a0:	31e00fc3 	mvncc	r0, r3, asr #31
 80098a4:	e3800001 	orr	r0, r0, #1
 80098a8:	e12fff1e 	bx	lr
 80098ac:	e1a0c081 	lsl	ip, r1, #1
 80098b0:	e1f0cacc 	mvns	ip, ip, asr #21
 80098b4:	1a000001 	bne	80098c0 <__cmpdf2+0x6c>
 80098b8:	e190c601 	orrs	ip, r0, r1, lsl #12
 80098bc:	1a000004 	bne	80098d4 <__cmpdf2+0x80>
 80098c0:	e1a0c083 	lsl	ip, r3, #1
 80098c4:	e1f0cacc 	mvns	ip, ip, asr #21
 80098c8:	1affffe8 	bne	8009870 <__cmpdf2+0x1c>
 80098cc:	e192c603 	orrs	ip, r2, r3, lsl #12
 80098d0:	0affffe6 	beq	8009870 <__cmpdf2+0x1c>
 80098d4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 80098d8:	e12fff1e 	bx	lr

080098dc <__aeabi_cdrcmple>:
 80098dc:	e1a0c000 	mov	ip, r0
 80098e0:	e1a00002 	mov	r0, r2
 80098e4:	e1a0200c 	mov	r2, ip
 80098e8:	e1a0c001 	mov	ip, r1
 80098ec:	e1a01003 	mov	r1, r3
 80098f0:	e1a0300c 	mov	r3, ip
 80098f4:	eaffffff 	b	80098f8 <__aeabi_cdcmpeq>

080098f8 <__aeabi_cdcmpeq>:
 80098f8:	e92d4001 	push	{r0, lr}
 80098fc:	ebffffd4 	bl	8009854 <__cmpdf2>
 8009900:	e3500000 	cmp	r0, #0
 8009904:	43700000 	cmnmi	r0, #0
 8009908:	e8bd4001 	pop	{r0, lr}
 800990c:	e12fff1e 	bx	lr

08009910 <__aeabi_dcmpeq>:
 8009910:	e52de008 	str	lr, [sp, #-8]!
 8009914:	ebfffff7 	bl	80098f8 <__aeabi_cdcmpeq>
 8009918:	03a00001 	moveq	r0, #1
 800991c:	13a00000 	movne	r0, #0
 8009920:	e49de008 	ldr	lr, [sp], #8
 8009924:	e12fff1e 	bx	lr

08009928 <__aeabi_dcmplt>:
 8009928:	e52de008 	str	lr, [sp, #-8]!
 800992c:	ebfffff1 	bl	80098f8 <__aeabi_cdcmpeq>
 8009930:	33a00001 	movcc	r0, #1
 8009934:	23a00000 	movcs	r0, #0
 8009938:	e49de008 	ldr	lr, [sp], #8
 800993c:	e12fff1e 	bx	lr

08009940 <__aeabi_dcmple>:
 8009940:	e52de008 	str	lr, [sp, #-8]!
 8009944:	ebffffeb 	bl	80098f8 <__aeabi_cdcmpeq>
 8009948:	93a00001 	movls	r0, #1
 800994c:	83a00000 	movhi	r0, #0
 8009950:	e49de008 	ldr	lr, [sp], #8
 8009954:	e12fff1e 	bx	lr

08009958 <__aeabi_dcmpge>:
 8009958:	e52de008 	str	lr, [sp, #-8]!
 800995c:	ebffffde 	bl	80098dc <__aeabi_cdrcmple>
 8009960:	93a00001 	movls	r0, #1
 8009964:	83a00000 	movhi	r0, #0
 8009968:	e49de008 	ldr	lr, [sp], #8
 800996c:	e12fff1e 	bx	lr

08009970 <__aeabi_dcmpgt>:
 8009970:	e52de008 	str	lr, [sp, #-8]!
 8009974:	ebffffd8 	bl	80098dc <__aeabi_cdrcmple>
 8009978:	33a00001 	movcc	r0, #1
 800997c:	23a00000 	movcs	r0, #0
 8009980:	e49de008 	ldr	lr, [sp], #8
 8009984:	e12fff1e 	bx	lr

08009988 <__aeabi_d2iz>:
 8009988:	e1a02081 	lsl	r2, r1, #1
 800998c:	e2922602 	adds	r2, r2, #2097152	; 0x200000
 8009990:	2a00000c 	bcs	80099c8 <__aeabi_d2iz+0x40>
 8009994:	5a000009 	bpl	80099c0 <__aeabi_d2iz+0x38>
 8009998:	e3e03e3e 	mvn	r3, #992	; 0x3e0
 800999c:	e0532ac2 	subs	r2, r3, r2, asr #21
 80099a0:	9a00000a 	bls	80099d0 <__aeabi_d2iz+0x48>
 80099a4:	e1a03581 	lsl	r3, r1, #11
 80099a8:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
 80099ac:	e1833aa0 	orr	r3, r3, r0, lsr #21
 80099b0:	e3110102 	tst	r1, #-2147483648	; 0x80000000
 80099b4:	e1a00233 	lsr	r0, r3, r2
 80099b8:	12600000 	rsbne	r0, r0, #0
 80099bc:	e12fff1e 	bx	lr
 80099c0:	e3a00000 	mov	r0, #0
 80099c4:	e12fff1e 	bx	lr
 80099c8:	e1900601 	orrs	r0, r0, r1, lsl #12
 80099cc:	1a000002 	bne	80099dc <__aeabi_d2iz+0x54>
 80099d0:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
 80099d4:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
 80099d8:	e12fff1e 	bx	lr
 80099dc:	e3a00000 	mov	r0, #0
 80099e0:	e12fff1e 	bx	lr

080099e4 <__aeabi_d2uiz>:
 80099e4:	e1b02081 	lsls	r2, r1, #1
 80099e8:	2a00000a 	bcs	8009a18 <__aeabi_d2uiz+0x34>
 80099ec:	e2922602 	adds	r2, r2, #2097152	; 0x200000
 80099f0:	2a00000a 	bcs	8009a20 <__aeabi_d2uiz+0x3c>
 80099f4:	5a000007 	bpl	8009a18 <__aeabi_d2uiz+0x34>
 80099f8:	e3e03e3e 	mvn	r3, #992	; 0x3e0
 80099fc:	e0532ac2 	subs	r2, r3, r2, asr #21
 8009a00:	4a000008 	bmi	8009a28 <__aeabi_d2uiz+0x44>
 8009a04:	e1a03581 	lsl	r3, r1, #11
 8009a08:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
 8009a0c:	e1833aa0 	orr	r3, r3, r0, lsr #21
 8009a10:	e1a00233 	lsr	r0, r3, r2
 8009a14:	e12fff1e 	bx	lr
 8009a18:	e3a00000 	mov	r0, #0
 8009a1c:	e12fff1e 	bx	lr
 8009a20:	e1900601 	orrs	r0, r0, r1, lsl #12
 8009a24:	1a000001 	bne	8009a30 <__aeabi_d2uiz+0x4c>
 8009a28:	e3e00000 	mvn	r0, #0
 8009a2c:	e12fff1e 	bx	lr
 8009a30:	e3a00000 	mov	r0, #0
 8009a34:	e12fff1e 	bx	lr

08009a38 <__aeabi_d2f>:
 8009a38:	e1a02081 	lsl	r2, r1, #1
 8009a3c:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
 8009a40:	2253c602 	subscs	ip, r3, #2097152	; 0x200000
 8009a44:	227cc57f 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8009a48:	9a000006 	bls	8009a68 <__aeabi_d2f+0x30>
 8009a4c:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
 8009a50:	e1a02180 	lsl	r2, r0, #3
 8009a54:	e18c0ea0 	orr	r0, ip, r0, lsr #29
 8009a58:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
 8009a5c:	e0a00103 	adc	r0, r0, r3, lsl #2
 8009a60:	03c00001 	biceq	r0, r0, #1
 8009a64:	e12fff1e 	bx	lr
 8009a68:	e3110101 	tst	r1, #1073741824	; 0x40000000
 8009a6c:	1a00000f 	bne	8009ab0 <__aeabi_d2f+0x78>
 8009a70:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
 8009a74:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
 8009a78:	b12fff1e 	bxlt	lr
 8009a7c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 8009a80:	e1a02aa2 	lsr	r2, r2, #21
 8009a84:	e2622018 	rsb	r2, r2, #24
 8009a88:	e262c020 	rsb	ip, r2, #32
 8009a8c:	e1b03c10 	lsls	r3, r0, ip
 8009a90:	e1a00230 	lsr	r0, r0, r2
 8009a94:	13800001 	orrne	r0, r0, #1
 8009a98:	e1a03581 	lsl	r3, r1, #11
 8009a9c:	e1a035a3 	lsr	r3, r3, #11
 8009aa0:	e1800c13 	orr	r0, r0, r3, lsl ip
 8009aa4:	e1a03233 	lsr	r3, r3, r2
 8009aa8:	e1a03083 	lsl	r3, r3, #1
 8009aac:	eaffffe6 	b	8009a4c <__aeabi_d2f+0x14>
 8009ab0:	e1f03ac2 	mvns	r3, r2, asr #21
 8009ab4:	1a000003 	bne	8009ac8 <__aeabi_d2f+0x90>
 8009ab8:	e1903601 	orrs	r3, r0, r1, lsl #12
 8009abc:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
 8009ac0:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
 8009ac4:	112fff1e 	bxne	lr
 8009ac8:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
 8009acc:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
 8009ad0:	e3800502 	orr	r0, r0, #8388608	; 0x800000
 8009ad4:	e12fff1e 	bx	lr

08009ad8 <LED_Tick>:
void Test_DCMOTOR();



void LED_Tick( void )
{
 8009ad8:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 8009ada:	f64a 7375 	movw	r3, #44917	; 0xaf75
 8009ade:	2000      	movs	r0, #0
 8009ae0:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009ae4:	4798      	blx	r3
 8009ae6:	bd08      	pop	{r3, pc}

08009ae8 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8009ae8:	b500      	push	{lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 8009aea:	4b0b      	ldr	r3, [pc, #44]	; (8009b18 <main+0x30>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8009aec:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 8009aee:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8009af0:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8009af2:	4b0a      	ldr	r3, [pc, #40]	; (8009b1c <main+0x34>)
 8009af4:	4798      	blx	r3
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8009af6:	4d0a      	ldr	r5, [pc, #40]	; (8009b20 <main+0x38>)
 8009af8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009afc:	2202      	movs	r2, #2
 8009afe:	4620      	mov	r0, r4
 8009b00:	4b08      	ldr	r3, [pc, #32]	; (8009b24 <main+0x3c>)
 8009b02:	9400      	str	r4, [sp, #0]
 8009b04:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );	
 8009b06:	4620      	mov	r0, r4
 8009b08:	4b07      	ldr	r3, [pc, #28]	; (8009b28 <main+0x40>)
 8009b0a:	4798      	blx	r3
	//
	//Ap_RadioMenu_ExeCmd();    
	//Ap_GLcdMenu_ExeCmd();    
	//Ap_EduMenu_ExeCmd();

	Lb_printf("ezExplorer\n");
 8009b0c:	4807      	ldr	r0, [pc, #28]	; (8009b2c <main+0x44>)
 8009b0e:	4b08      	ldr	r3, [pc, #32]	; (8009b30 <main+0x48>)
 8009b10:	4798      	blx	r3
 8009b12:	4c08      	ldr	r4, [pc, #32]	; (8009b34 <main+0x4c>)
    while(1)
    {
    	//Test_DCMOTOR();
    	Ap_StrCmd_ExeCmd();
 8009b14:	47a0      	blx	r4
 8009b16:	e7fd      	b.n	8009b14 <main+0x2c>
 8009b18:	0800ab89 	.word	0x0800ab89
 8009b1c:	08009b39 	.word	0x08009b39
 8009b20:	0800b149 	.word	0x0800b149
 8009b24:	08009ad9 	.word	0x08009ad9
 8009b28:	0800b169 	.word	0x0800b169
 8009b2c:	0800ced0 	.word	0x0800ced0
 8009b30:	0800a7f1 	.word	0x0800a7f1
 8009b34:	0800a0e1 	.word	0x0800a0e1

08009b38 <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 8009b38:	b508      	push	{r3, lr}
	{
		Lb_printf("Radio Init Fail\n");
	}
	*/

	Ap_StrCmd_Init();
 8009b3a:	f649 43ad 	movw	r3, #40109	; 0x9cad
 8009b3e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009b42:	4798      	blx	r3
	Ap_StrCmd_List();
 8009b44:	f24a 23a5 	movw	r3, #41637	; 0xa2a5
 8009b48:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009b4c:	4798      	blx	r3
 8009b4e:	bd08      	pop	{r3, pc}

08009b50 <Ap_StrCmd_PutFunc>:

void Ap_StrCmd_Echo( u8 OpCode,  void *arg );


void Ap_StrCmd_PutFunc( char Ch )
{
 8009b50:	b508      	push	{r3, lr}
	Hw_Uart_Putch( HW_USE_UART_CH_STRCMD, Ch );
 8009b52:	f64a 6351 	movw	r3, #44625	; 0xae51

void Ap_StrCmd_Echo( u8 OpCode,  void *arg );


void Ap_StrCmd_PutFunc( char Ch )
{
 8009b56:	4601      	mov	r1, r0
	Hw_Uart_Putch( HW_USE_UART_CH_STRCMD, Ch );
 8009b58:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	4798      	blx	r3
 8009b60:	bd08      	pop	{r3, pc}
 8009b62:	bf00      	nop

08009b64 <Ap_StrCmd_CallBack_RxdISR>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CallBack_RxdISR( char Ch )
{	
 8009b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if( Ap_StrCmd_ChSize >= AP_STRCMD_STR_MAX )
 8009b66:	4b1a      	ldr	r3, [pc, #104]	; (8009bd0 <Ap_StrCmd_CallBack_RxdISR+0x6c>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CallBack_RxdISR( char Ch )
{	
 8009b68:	4604      	mov	r4, r0

	if( Ap_StrCmd_ChSize >= AP_STRCMD_STR_MAX )
 8009b6a:	881a      	ldrh	r2, [r3, #0]
 8009b6c:	b292      	uxth	r2, r2
 8009b6e:	2a3b      	cmp	r2, #59	; 0x3b
 8009b70:	d901      	bls.n	8009b76 <Ap_StrCmd_CallBack_RxdISR+0x12>
	{
		Ap_StrCmd_ChSize = 0;
 8009b72:	2200      	movs	r2, #0
 8009b74:	801a      	strh	r2, [r3, #0]
	}
	
	//Ch = toupper( Ch );
	
	Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = Ch;
 8009b76:	8818      	ldrh	r0, [r3, #0]
	
	Ap_StrCmd_ChSize++;
 8009b78:	8819      	ldrh	r1, [r3, #0]
		Ap_StrCmd_ChSize = 0;
	}
	
	//Ch = toupper( Ch );
	
	Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = Ch;
 8009b7a:	4a16      	ldr	r2, [pc, #88]	; (8009bd4 <Ap_StrCmd_CallBack_RxdISR+0x70>)
	
	Ap_StrCmd_ChSize++;
 8009b7c:	3101      	adds	r1, #1
		Ap_StrCmd_ChSize = 0;
	}
	
	//Ch = toupper( Ch );
	
	Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = Ch;
 8009b7e:	b280      	uxth	r0, r0
	
	Ap_StrCmd_ChSize++;
 8009b80:	b289      	uxth	r1, r1
	

	if( Ch == 0x0D )  // '\n'
 8009b82:	2c0d      	cmp	r4, #13
	
	//Ch = toupper( Ch );
	
	Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = Ch;
	
	Ap_StrCmd_ChSize++;
 8009b84:	8019      	strh	r1, [r3, #0]
		Ap_StrCmd_ChSize = 0;
	}
	
	//Ch = toupper( Ch );
	
	Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = Ch;
 8009b86:	5414      	strb	r4, [r2, r0]
 8009b88:	4b11      	ldr	r3, [pc, #68]	; (8009bd0 <Ap_StrCmd_CallBack_RxdISR+0x6c>)
	
	Ap_StrCmd_ChSize++;
	

	if( Ch == 0x0D )  // '\n'
 8009b8a:	d010      	beq.n	8009bae <Ap_StrCmd_CallBack_RxdISR+0x4a>
		Ap_StrCmd_LoopCheck = 1;
		
		Ap_StrCmd_Q_Push( AP_STRCMD_Q_RX_CH, (AP_STRCMD_CMD_OBJ *)Ap_StrCmd_CmdStr );
	}

	if( Ap_StrCmd_EchoEnable == TRUE )
 8009b8c:	4b12      	ldr	r3, [pc, #72]	; (8009bd8 <Ap_StrCmd_CallBack_RxdISR+0x74>)
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d000      	beq.n	8009b96 <Ap_StrCmd_CallBack_RxdISR+0x32>
 8009b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
		if( Ap_StrCmd_PutchPtr != NULL_FUNC )
 8009b96:	4d11      	ldr	r5, [pc, #68]	; (8009bdc <Ap_StrCmd_CallBack_RxdISR+0x78>)
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0fa      	beq.n	8009b94 <Ap_StrCmd_CallBack_RxdISR+0x30>
		{

			(*Ap_StrCmd_PutchPtr)( Ch );
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	4798      	blx	r3
			
			if( Ch == '\r' )
 8009ba2:	2c0d      	cmp	r4, #13
 8009ba4:	d1f6      	bne.n	8009b94 <Ap_StrCmd_CallBack_RxdISR+0x30>
			{
				(*Ap_StrCmd_PutchPtr)( '\n' );	
 8009ba6:	682b      	ldr	r3, [r5, #0]
 8009ba8:	200a      	movs	r0, #10
 8009baa:	4798      	blx	r3
 8009bac:	e7f2      	b.n	8009b94 <Ap_StrCmd_CallBack_RxdISR+0x30>
	Ap_StrCmd_ChSize++;
	

	if( Ch == 0x0D )  // '\n'
	{
		Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = 0;
 8009bae:	2600      	movs	r6, #0
 8009bb0:	881f      	ldrh	r7, [r3, #0]
		
		Ap_StrCmd_ChSize    = 0;
 8009bb2:	801e      	strh	r6, [r3, #0]
		Ap_StrCmd_DlyCheck  = 1;
 8009bb4:	4b0a      	ldr	r3, [pc, #40]	; (8009be0 <Ap_StrCmd_CallBack_RxdISR+0x7c>)
 8009bb6:	2501      	movs	r5, #1
 8009bb8:	701d      	strb	r5, [r3, #0]
		
		Ap_StrCmd_CmdCheck  = 1;
 8009bba:	4b0a      	ldr	r3, [pc, #40]	; (8009be4 <Ap_StrCmd_CallBack_RxdISR+0x80>)
	Ap_StrCmd_ChSize++;
	

	if( Ch == 0x0D )  // '\n'
	{
		Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = 0;
 8009bbc:	b2bf      	uxth	r7, r7
		
		Ap_StrCmd_ChSize    = 0;
		Ap_StrCmd_DlyCheck  = 1;
		
		Ap_StrCmd_CmdCheck  = 1;
 8009bbe:	701d      	strb	r5, [r3, #0]
		Ap_StrCmd_LoopCheck = 1;
 8009bc0:	4b09      	ldr	r3, [pc, #36]	; (8009be8 <Ap_StrCmd_CallBack_RxdISR+0x84>)
		
		Ap_StrCmd_Q_Push( AP_STRCMD_Q_RX_CH, (AP_STRCMD_CMD_OBJ *)Ap_StrCmd_CmdStr );
 8009bc2:	4630      	mov	r0, r6
		
		Ap_StrCmd_ChSize    = 0;
		Ap_StrCmd_DlyCheck  = 1;
		
		Ap_StrCmd_CmdCheck  = 1;
		Ap_StrCmd_LoopCheck = 1;
 8009bc4:	701d      	strb	r5, [r3, #0]
		
		Ap_StrCmd_Q_Push( AP_STRCMD_Q_RX_CH, (AP_STRCMD_CMD_OBJ *)Ap_StrCmd_CmdStr );
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	4b08      	ldr	r3, [pc, #32]	; (8009bec <Ap_StrCmd_CallBack_RxdISR+0x88>)
	Ap_StrCmd_ChSize++;
	

	if( Ch == 0x0D )  // '\n'
	{
		Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = 0;
 8009bca:	55d6      	strb	r6, [r2, r7]
		Ap_StrCmd_DlyCheck  = 1;
		
		Ap_StrCmd_CmdCheck  = 1;
		Ap_StrCmd_LoopCheck = 1;
		
		Ap_StrCmd_Q_Push( AP_STRCMD_Q_RX_CH, (AP_STRCMD_CMD_OBJ *)Ap_StrCmd_CmdStr );
 8009bcc:	4798      	blx	r3
 8009bce:	e7dd      	b.n	8009b8c <Ap_StrCmd_CallBack_RxdISR+0x28>
 8009bd0:	20000f7c 	.word	0x20000f7c
 8009bd4:	20000f80 	.word	0x20000f80
 8009bd8:	20000a00 	.word	0x20000a00
 8009bdc:	20000fc8 	.word	0x20000fc8
 8009be0:	20000fbc 	.word	0x20000fbc
 8009be4:	20000f7e 	.word	0x20000f7e
 8009be8:	20000fcc 	.word	0x20000fcc
 8009bec:	0800a14d 	.word	0x0800a14d

08009bf0 <Ap_StrCmd_AddCmd>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
{
 8009bf0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
 8009bf4:	4f2b      	ldr	r7, [pc, #172]	; (8009ca4 <Ap_StrCmd_AddCmd+0xb4>)
 8009bf6:	883b      	ldrh	r3, [r7, #0]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	2b13      	cmp	r3, #19
 8009bfc:	d84b      	bhi.n	8009c96 <Ap_StrCmd_AddCmd+0xa6>
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
 8009bfe:	f8b7 8000 	ldrh.w	r8, [r7]
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009c02:	7804      	ldrb	r4, [r0, #0]
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
{

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
 8009c04:	fa1f f888 	uxth.w	r8, r8
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009c08:	2c00      	cmp	r4, #0
 8009c0a:	d048      	beq.n	8009c9e <Ap_StrCmd_AddCmd+0xae>
 8009c0c:	2400      	movs	r4, #0

		Size++;
 8009c0e:	3401      	adds	r4, #1
 8009c10:	b2a4      	uxth	r4, r4
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009c12:	5d03      	ldrb	r3, [r0, r4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1fa      	bne.n	8009c0e <Ap_StrCmd_AddCmd+0x1e>
     TITLE   : Ap_StrCmd_AddCmd
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
 8009c18:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8009ca8 <Ap_StrCmd_AddCmd+0xb8>
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8009c1c:	b144      	cbz	r4, 8009c30 <Ap_StrCmd_AddCmd+0x40>
     TITLE   : Ap_StrCmd_AddCmd
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
 8009c1e:	262c      	movs	r6, #44	; 0x2c
 8009c20:	fb06 c608 	mla	r6, r6, r8, ip

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
	{
		Dest[i] = Origin[i];
 8009c24:	5cc5      	ldrb	r5, [r0, r3]
 8009c26:	54f5      	strb	r5, [r6, r3]
 8009c28:	3301      	adds	r3, #1
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8009c2a:	b29d      	uxth	r5, r3
 8009c2c:	42a5      	cmp	r5, r4
 8009c2e:	d3f9      	bcc.n	8009c24 <Ap_StrCmd_AddCmd+0x34>
	{
		Dest[i] = Origin[i];
	}
	Dest[i] = 0;
 8009c30:	232c      	movs	r3, #44	; 0x2c
 8009c32:	fb03 4408 	mla	r4, r3, r8, r4
 8009c36:	2000      	movs	r0, #0
 8009c38:	f80c 0004 	strb.w	r0, [ip, r4]
{

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
 8009c3c:	f8b7 9000 	ldrh.w	r9, [r7]
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009c40:	780b      	ldrb	r3, [r1, #0]
{

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
 8009c42:	fa1f f989 	uxth.w	r9, r9
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d027      	beq.n	8009c9a <Ap_StrCmd_AddCmd+0xaa>

		Size++;
 8009c4a:	3001      	adds	r0, #1
 8009c4c:	b280      	uxth	r0, r0
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009c4e:	5c0b      	ldrb	r3, [r1, r0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1fa      	bne.n	8009c4a <Ap_StrCmd_AddCmd+0x5a>
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8009c54:	b158      	cbz	r0, 8009c6e <Ap_StrCmd_AddCmd+0x7e>
     TITLE   : Ap_StrCmd_AddCmd
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
 8009c56:	f04f 082c 	mov.w	r8, #44	; 0x2c
 8009c5a:	fb08 c809 	mla	r8, r8, r9, ip

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
	{
		Dest[i] = Origin[i];
 8009c5e:	5cce      	ldrb	r6, [r1, r3]
     TITLE   : Ap_StrCmd_AddCmd
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
 8009c60:	eb08 0503 	add.w	r5, r8, r3
 8009c64:	3301      	adds	r3, #1
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8009c66:	b29c      	uxth	r4, r3
 8009c68:	4284      	cmp	r4, r0
	{
		Dest[i] = Origin[i];
 8009c6a:	752e      	strb	r6, [r5, #20]
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8009c6c:	d3f7      	bcc.n	8009c5e <Ap_StrCmd_AddCmd+0x6e>

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
	AP_STRCMD_DIC_FUNC_SET( Ap_StrCmd_Size, Func_Ptr );
 8009c6e:	883c      	ldrh	r4, [r7, #0]

	for( i=0; i<Size; i++ )
	{
		Dest[i] = Origin[i];
	}
	Dest[i] = 0;
 8009c70:	232c      	movs	r3, #44	; 0x2c
 8009c72:	fb03 c909 	mla	r9, r3, r9, ip

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
	AP_STRCMD_DIC_FUNC_SET( Ap_StrCmd_Size, Func_Ptr );
 8009c76:	b2a4      	uxth	r4, r4

	Ap_StrCmd_Size++;
 8009c78:	8839      	ldrh	r1, [r7, #0]

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
	AP_STRCMD_DIC_FUNC_SET( Ap_StrCmd_Size, Func_Ptr );
 8009c7a:	fb03 cc04 	mla	ip, r3, r4, ip

	Ap_StrCmd_Size++;
 8009c7e:	3101      	adds	r1, #1

	for( i=0; i<Size; i++ )
	{
		Dest[i] = Origin[i];
	}
	Dest[i] = 0;
 8009c80:	4448      	add	r0, r9
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
	AP_STRCMD_DIC_FUNC_SET( Ap_StrCmd_Size, Func_Ptr );

	Ap_StrCmd_Size++;
 8009c82:	b289      	uxth	r1, r1

	for( i=0; i<Size; i++ )
	{
		Dest[i] = Origin[i];
	}
	Dest[i] = 0;
 8009c84:	2300      	movs	r3, #0
 8009c86:	7503      	strb	r3, [r0, #20]

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
	AP_STRCMD_DIC_FUNC_SET( Ap_StrCmd_Size, Func_Ptr );
 8009c88:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28

	Ap_StrCmd_Size++;
 8009c8c:	8039      	strh	r1, [r7, #0]
 8009c8e:	2001      	movs	r0, #1
	
	return TRUE;
}
 8009c90:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8009c94:	4770      	bx	lr
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
{

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
 8009c96:	2000      	movs	r0, #0
 8009c98:	e7fa      	b.n	8009c90 <Ap_StrCmd_AddCmd+0xa0>
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	e7e7      	b.n	8009c6e <Ap_StrCmd_AddCmd+0x7e>
 8009c9e:	f8df c008 	ldr.w	ip, [pc, #8]	; 8009ca8 <Ap_StrCmd_AddCmd+0xb8>
 8009ca2:	e7c5      	b.n	8009c30 <Ap_StrCmd_AddCmd+0x40>
 8009ca4:	20000fc4 	.word	0x20000fc4
 8009ca8:	20000bd0 	.word	0x20000bd0

08009cac <Ap_StrCmd_Init>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Init( void )
{
 8009cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cae:	4b17      	ldr	r3, [pc, #92]	; (8009d0c <Ap_StrCmd_Init+0x60>)
		
	//----- 명령어 사전 포인터 초기화
	//
	for( i=0; i<AP_STRCMD_DIC_MAX; i++)
	{
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
 8009cb0:	2100      	movs	r1, #0
     TITLE   : Ap_StrCmd_Init
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Init( void )
 8009cb2:	f503 725c 	add.w	r2, r3, #880	; 0x370
		
	//----- 명령어 사전 포인터 초기화
	//
	for( i=0; i<AP_STRCMD_DIC_MAX; i++)
	{
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
 8009cb6:	6299      	str	r1, [r3, #40]	; 0x28
 8009cb8:	332c      	adds	r3, #44	; 0x2c
 8009cba:	2400      	movs	r4, #0
{
	int i;
		
	//----- 명령어 사전 포인터 초기화
	//
	for( i=0; i<AP_STRCMD_DIC_MAX; i++)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d1fa      	bne.n	8009cb6 <Ap_StrCmd_Init+0xa>
	{
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
	}    
		
	Ap_StrCmd_Size     	= 0;				
 8009cc0:	4f13      	ldr	r7, [pc, #76]	; (8009d10 <Ap_StrCmd_Init+0x64>)
	Ap_StrCmd_ChSize   	= 0;
	Ap_StrCmd_CmdCheck 	= 0;	
	
	Ap_StrCmd_PutchPtr 	= NULL;
 8009cc2:	4e14      	ldr	r6, [pc, #80]	; (8009d14 <Ap_StrCmd_Init+0x68>)
	for( i=0; i<AP_STRCMD_DIC_MAX; i++)
	{
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
	}    
		
	Ap_StrCmd_Size     	= 0;				
 8009cc4:	803c      	strh	r4, [r7, #0]
	Ap_StrCmd_ChSize   	= 0;
 8009cc6:	4f14      	ldr	r7, [pc, #80]	; (8009d18 <Ap_StrCmd_Init+0x6c>)
	Ap_StrCmd_PutchPtr 	= NULL;
	Ap_StrCmd_PrintPtr 	= NULL;
	
	Ap_StrCmd_EchoEnable = FALSE;

	Ap_StrCmd_AddCmd( "HELP", "Menu Help",        Ap_StrCmd_ShowMenuHelp );	
 8009cc8:	4d14      	ldr	r5, [pc, #80]	; (8009d1c <Ap_StrCmd_Init+0x70>)
	{
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
	}    
		
	Ap_StrCmd_Size     	= 0;				
	Ap_StrCmd_ChSize   	= 0;
 8009cca:	803c      	strh	r4, [r7, #0]
	Ap_StrCmd_CmdCheck 	= 0;	
	
	Ap_StrCmd_PutchPtr 	= NULL;
	Ap_StrCmd_PrintPtr 	= NULL;
 8009ccc:	4f14      	ldr	r7, [pc, #80]	; (8009d20 <Ap_StrCmd_Init+0x74>)
	
	Ap_StrCmd_EchoEnable = FALSE;

	Ap_StrCmd_AddCmd( "HELP", "Menu Help",        Ap_StrCmd_ShowMenuHelp );	
 8009cce:	4915      	ldr	r1, [pc, #84]	; (8009d24 <Ap_StrCmd_Init+0x78>)
	Ap_StrCmd_Size     	= 0;				
	Ap_StrCmd_ChSize   	= 0;
	Ap_StrCmd_CmdCheck 	= 0;	
	
	Ap_StrCmd_PutchPtr 	= NULL;
	Ap_StrCmd_PrintPtr 	= NULL;
 8009cd0:	603c      	str	r4, [r7, #0]
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
	}    
		
	Ap_StrCmd_Size     	= 0;				
	Ap_StrCmd_ChSize   	= 0;
	Ap_StrCmd_CmdCheck 	= 0;	
 8009cd2:	4f15      	ldr	r7, [pc, #84]	; (8009d28 <Ap_StrCmd_Init+0x7c>)
	Ap_StrCmd_PutchPtr 	= NULL;
	Ap_StrCmd_PrintPtr 	= NULL;
	
	Ap_StrCmd_EchoEnable = FALSE;

	Ap_StrCmd_AddCmd( "HELP", "Menu Help",        Ap_StrCmd_ShowMenuHelp );	
 8009cd4:	4a15      	ldr	r2, [pc, #84]	; (8009d2c <Ap_StrCmd_Init+0x80>)
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
	}    
		
	Ap_StrCmd_Size     	= 0;				
	Ap_StrCmd_ChSize   	= 0;
	Ap_StrCmd_CmdCheck 	= 0;	
 8009cd6:	703c      	strb	r4, [r7, #0]
	
	Ap_StrCmd_PutchPtr 	= NULL;
	Ap_StrCmd_PrintPtr 	= NULL;
	
	Ap_StrCmd_EchoEnable = FALSE;
 8009cd8:	4f15      	ldr	r7, [pc, #84]	; (8009d30 <Ap_StrCmd_Init+0x84>)

	Ap_StrCmd_AddCmd( "HELP", "Menu Help",        Ap_StrCmd_ShowMenuHelp );	
 8009cda:	4816      	ldr	r0, [pc, #88]	; (8009d34 <Ap_StrCmd_Init+0x88>)
		
	Ap_StrCmd_Size     	= 0;				
	Ap_StrCmd_ChSize   	= 0;
	Ap_StrCmd_CmdCheck 	= 0;	
	
	Ap_StrCmd_PutchPtr 	= NULL;
 8009cdc:	6034      	str	r4, [r6, #0]
	Ap_StrCmd_PrintPtr 	= NULL;
	
	Ap_StrCmd_EchoEnable = FALSE;
 8009cde:	703c      	strb	r4, [r7, #0]

	Ap_StrCmd_AddCmd( "HELP", "Menu Help",        Ap_StrCmd_ShowMenuHelp );	
 8009ce0:	47a8      	blx	r5
	Ap_StrCmd_AddCmd( "MENU", "Display Menu",     Ap_StrCmd_ShowMenu );
 8009ce2:	4915      	ldr	r1, [pc, #84]	; (8009d38 <Ap_StrCmd_Init+0x8c>)
 8009ce4:	4a15      	ldr	r2, [pc, #84]	; (8009d3c <Ap_StrCmd_Init+0x90>)
 8009ce6:	4816      	ldr	r0, [pc, #88]	; (8009d40 <Ap_StrCmd_Init+0x94>)
 8009ce8:	47a8      	blx	r5
	Ap_StrCmd_AddCmd( "INFO", "Info",     		  Ap_StrCmd_ShowInfo );
 8009cea:	4916      	ldr	r1, [pc, #88]	; (8009d44 <Ap_StrCmd_Init+0x98>)
 8009cec:	4a16      	ldr	r2, [pc, #88]	; (8009d48 <Ap_StrCmd_Init+0x9c>)
 8009cee:	4817      	ldr	r0, [pc, #92]	; (8009d4c <Ap_StrCmd_Init+0xa0>)
 8009cf0:	47a8      	blx	r5
	Ap_StrCmd_AddCmd( "ECHO", "Echo",     		  Ap_StrCmd_Echo );
 8009cf2:	4917      	ldr	r1, [pc, #92]	; (8009d50 <Ap_StrCmd_Init+0xa4>)
 8009cf4:	4a17      	ldr	r2, [pc, #92]	; (8009d54 <Ap_StrCmd_Init+0xa8>)
 8009cf6:	4818      	ldr	r0, [pc, #96]	; (8009d58 <Ap_StrCmd_Init+0xac>)
 8009cf8:	47a8      	blx	r5


	Ap_StrCmd_Q_Init();
 8009cfa:	4b18      	ldr	r3, [pc, #96]	; (8009d5c <Ap_StrCmd_Init+0xb0>)
 8009cfc:	4798      	blx	r3
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_SetFunc_Putch( void (*FuncPtr)( char ) )
{
	Ap_StrCmd_PutchPtr = FuncPtr;
 8009cfe:	4b18      	ldr	r3, [pc, #96]	; (8009d60 <Ap_StrCmd_Init+0xb4>)

	//-- 통신 함수 설정 
	//
	Ap_StrCmd_SetFunc_Putch( Ap_StrCmd_PutFunc );

	Hw_Uart_SetReceiveFuncISR( HW_USE_UART_CH_STRCMD, Ap_StrCmd_CallBack_RxdISR );
 8009d00:	4620      	mov	r0, r4
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_SetFunc_Putch( void (*FuncPtr)( char ) )
{
	Ap_StrCmd_PutchPtr = FuncPtr;
 8009d02:	6033      	str	r3, [r6, #0]

	//-- 통신 함수 설정 
	//
	Ap_StrCmd_SetFunc_Putch( Ap_StrCmd_PutFunc );

	Hw_Uart_SetReceiveFuncISR( HW_USE_UART_CH_STRCMD, Ap_StrCmd_CallBack_RxdISR );
 8009d04:	4917      	ldr	r1, [pc, #92]	; (8009d64 <Ap_StrCmd_Init+0xb8>)
 8009d06:	4b18      	ldr	r3, [pc, #96]	; (8009d68 <Ap_StrCmd_Init+0xbc>)
 8009d08:	4798      	blx	r3
 8009d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d0c:	20000bd0 	.word	0x20000bd0
 8009d10:	20000fc4 	.word	0x20000fc4
 8009d14:	20000fc8 	.word	0x20000fc8
 8009d18:	20000f7c 	.word	0x20000f7c
 8009d1c:	08009bf1 	.word	0x08009bf1
 8009d20:	20000fc0 	.word	0x20000fc0
 8009d24:	0800ceec 	.word	0x0800ceec
 8009d28:	20000f7e 	.word	0x20000f7e
 8009d2c:	08009e09 	.word	0x08009e09
 8009d30:	20000a00 	.word	0x20000a00
 8009d34:	0800cee4 	.word	0x0800cee4
 8009d38:	0800cf00 	.word	0x0800cf00
 8009d3c:	08009e7d 	.word	0x08009e7d
 8009d40:	0800cef8 	.word	0x0800cef8
 8009d44:	0800cf18 	.word	0x0800cf18
 8009d48:	08009f91 	.word	0x08009f91
 8009d4c:	0800cf10 	.word	0x0800cf10
 8009d50:	0800cf28 	.word	0x0800cf28
 8009d54:	08009f19 	.word	0x08009f19
 8009d58:	0800cf20 	.word	0x0800cf20
 8009d5c:	0800a0fd 	.word	0x0800a0fd
 8009d60:	08009b51 	.word	0x08009b51
 8009d64:	08009b65 	.word	0x08009b65
 8009d68:	0800ae3d 	.word	0x0800ae3d

08009d6c <Ap_StrCmd_Print>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Print( char *Buffer )
{
 8009d6c:	b538      	push	{r3, r4, r5, lr}
	while( *Buffer != '\0') 
 8009d6e:	7803      	ldrb	r3, [r0, #0]
 8009d70:	b193      	cbz	r3, 8009d98 <Ap_StrCmd_Print+0x2c>
 8009d72:	4d0a      	ldr	r5, [pc, #40]	; (8009d9c <Ap_StrCmd_Print+0x30>)
     TITLE   : Ap_StrCmd_Print
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Print( char *Buffer )
 8009d74:	1c44      	adds	r4, r0, #1
 8009d76:	e007      	b.n	8009d88 <Ap_StrCmd_Print+0x1c>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Putch( char Ch )
{
	if( Ap_StrCmd_PutchPtr != NULL_FUNC )
 8009d78:	682b      	ldr	r3, [r5, #0]
		if( *Buffer == '\n' )
		{
			Ap_StrCmd_Putch( '\r' );
		}

		Ap_StrCmd_Putch( *Buffer ) ;                              		
 8009d7a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Putch( char Ch )
{
	if( Ap_StrCmd_PutchPtr != NULL_FUNC )
 8009d7e:	b103      	cbz	r3, 8009d82 <Ap_StrCmd_Print+0x16>
	{
		(*Ap_StrCmd_PutchPtr)( Ch );
 8009d80:	4798      	blx	r3
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Print( char *Buffer )
{
	while( *Buffer != '\0') 
 8009d82:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d86:	b13b      	cbz	r3, 8009d98 <Ap_StrCmd_Print+0x2c>
	{
		if( *Buffer == '\n' )
 8009d88:	2b0a      	cmp	r3, #10
 8009d8a:	d1f5      	bne.n	8009d78 <Ap_StrCmd_Print+0xc>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Putch( char Ch )
{
	if( Ap_StrCmd_PutchPtr != NULL_FUNC )
 8009d8c:	682b      	ldr	r3, [r5, #0]
	{
		(*Ap_StrCmd_PutchPtr)( Ch );
 8009d8e:	200d      	movs	r0, #13
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Putch( char Ch )
{
	if( Ap_StrCmd_PutchPtr != NULL_FUNC )
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d0f6      	beq.n	8009d82 <Ap_StrCmd_Print+0x16>
	{
		(*Ap_StrCmd_PutchPtr)( Ch );
 8009d94:	4798      	blx	r3
 8009d96:	e7ef      	b.n	8009d78 <Ap_StrCmd_Print+0xc>
 8009d98:	bd38      	pop	{r3, r4, r5, pc}
 8009d9a:	bf00      	nop
 8009d9c:	20000fc8 	.word	0x20000fc8

08009da0 <Ap_StrCmd_SendResp>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_SendResp( u8 ErrCode, char *format, ... )
{
 8009da0:	b40e      	push	{r1, r2, r3}
 8009da2:	b530      	push	{r4, r5, lr}
 8009da4:	b0b4      	sub	sp, #208	; 0xd0

	Lb_va_list ap;
	
	Lb_va_start( ap, format );

	Str[0] = AP_STRCMD_FRAME_RET;
 8009da6:	ac34      	add	r4, sp, #208	; 0xd0
 8009da8:	223e      	movs	r2, #62	; 0x3e
 8009daa:	f804 2dc8 	strb.w	r2, [r4, #-200]!

	if( ErrCode == ERR_NONE )
 8009dae:	2800      	cmp	r0, #0
 8009db0:	bf14      	ite	ne
 8009db2:	2346      	movne	r3, #70	; 0x46
 8009db4:	234f      	moveq	r3, #79	; 0x4f
	else
	{
		Ret = AP_STRCMD_FRAME_FAIL;
	}

	Lb_sprintf( Str, "%c%c%02x ", 	AP_STRCMD_FRAME_RET 
 8009db6:	9000      	str	r0, [sp, #0]
 8009db8:	490c      	ldr	r1, [pc, #48]	; (8009dec <Ap_StrCmd_SendResp+0x4c>)
 8009dba:	4620      	mov	r0, r4
 8009dbc:	4d0c      	ldr	r5, [pc, #48]	; (8009df0 <Ap_StrCmd_SendResp+0x50>)
 8009dbe:	47a8      	blx	r5
								,	Ret
								,	ErrCode	);

	Lb_vsprintf( &Str[5], format, ap );	
 8009dc0:	aa37      	add	r2, sp, #220	; 0xdc
 8009dc2:	f852 1b04 	ldr.w	r1, [r2], #4
 8009dc6:	f10d 000d 	add.w	r0, sp, #13
 8009dca:	4b0a      	ldr	r3, [pc, #40]	; (8009df4 <Ap_StrCmd_SendResp+0x54>)
 8009dcc:	4798      	blx	r3

	Lb_va_end(ap);	
	
	Ap_StrCmd_Print(Str);
 8009dce:	4b0a      	ldr	r3, [pc, #40]	; (8009df8 <Ap_StrCmd_SendResp+0x58>)
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	4798      	blx	r3
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8009dd4:	4a09      	ldr	r2, [pc, #36]	; (8009dfc <Ap_StrCmd_SendResp+0x5c>)
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	7013      	strb	r3, [r2, #0]
	Ap_StrCmd_DlyCheck  = 0;
 8009dda:	4a09      	ldr	r2, [pc, #36]	; (8009e00 <Ap_StrCmd_SendResp+0x60>)
 8009ddc:	7013      	strb	r3, [r2, #0]
	Ap_StrCmd_LoopCheck = 0;	
 8009dde:	4a09      	ldr	r2, [pc, #36]	; (8009e04 <Ap_StrCmd_SendResp+0x64>)
 8009de0:	7013      	strb	r3, [r2, #0]
	Lb_va_end(ap);	
	
	Ap_StrCmd_Print(Str);

	Ap_StrCmd_CmdClear();
}
 8009de2:	b034      	add	sp, #208	; 0xd0
 8009de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009de8:	b003      	add	sp, #12
 8009dea:	4770      	bx	lr
 8009dec:	0800cf30 	.word	0x0800cf30
 8009df0:	0800a8e5 	.word	0x0800a8e5
 8009df4:	0800a9e9 	.word	0x0800a9e9
 8009df8:	08009d6d 	.word	0x08009d6d
 8009dfc:	20000f7e 	.word	0x20000f7e
 8009e00:	20000fbc 	.word	0x20000fbc
 8009e04:	20000fcc 	.word	0x20000fcc

08009e08 <Ap_StrCmd_ShowMenuHelp>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_ShowMenuHelp( u8 OpCode,  void *arg )
{
 8009e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009e0c:	4e13      	ldr	r6, [pc, #76]	; (8009e5c <Ap_StrCmd_ShowMenuHelp+0x54>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_ShowMenuHelp( u8 OpCode,  void *arg )
{
 8009e0e:	b09d      	sub	sp, #116	; 0x74
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009e10:	8833      	ldrh	r3, [r6, #0]
 8009e12:	b29b      	uxth	r3, r3
	char StrBuf[100];
	
	arg = arg;

	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 8009e14:	b1c3      	cbz	r3, 8009e48 <Ap_StrCmd_ShowMenuHelp+0x40>
 8009e16:	4d12      	ldr	r5, [pc, #72]	; (8009e60 <Ap_StrCmd_ShowMenuHelp+0x58>)
 8009e18:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8009e74 <Ap_StrCmd_ShowMenuHelp+0x6c>
 8009e1c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8009e78 <Ap_StrCmd_ShowMenuHelp+0x70>
 8009e20:	2400      	movs	r4, #0
	{
		Lb_sprintf( StrBuf, "%c<%s> - %s\n", AP_STRCMD_FRAME_PRINT, Ap_StrCmd_Dic_Ptr[i].NameStr, Ap_StrCmd_Dic_Ptr[i].MenuStr );			
 8009e22:	272c      	movs	r7, #44	; 0x2c
 8009e24:	fb07 f304 	mul.w	r3, r7, r4
 8009e28:	18e8      	adds	r0, r5, r3
 8009e2a:	3014      	adds	r0, #20
 8009e2c:	222a      	movs	r2, #42	; 0x2a
 8009e2e:	18eb      	adds	r3, r5, r3
 8009e30:	490c      	ldr	r1, [pc, #48]	; (8009e64 <Ap_StrCmd_ShowMenuHelp+0x5c>)
 8009e32:	9000      	str	r0, [sp, #0]
 8009e34:	a803      	add	r0, sp, #12
 8009e36:	47c8      	blx	r9
		Ap_StrCmd_Print( StrBuf );
 8009e38:	a803      	add	r0, sp, #12
 8009e3a:	47c0      	blx	r8
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009e3c:	8833      	ldrh	r3, [r6, #0]
	char StrBuf[100];
	
	arg = arg;

	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 8009e3e:	3401      	adds	r4, #1
 8009e40:	b2a4      	uxth	r4, r4
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009e42:	b29b      	uxth	r3, r3
	char StrBuf[100];
	
	arg = arg;

	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 8009e44:	429c      	cmp	r4, r3
 8009e46:	d3ed      	bcc.n	8009e24 <Ap_StrCmd_ShowMenuHelp+0x1c>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8009e48:	4a07      	ldr	r2, [pc, #28]	; (8009e68 <Ap_StrCmd_ShowMenuHelp+0x60>)
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	7013      	strb	r3, [r2, #0]
	Ap_StrCmd_DlyCheck  = 0;
 8009e4e:	4a07      	ldr	r2, [pc, #28]	; (8009e6c <Ap_StrCmd_ShowMenuHelp+0x64>)
 8009e50:	7013      	strb	r3, [r2, #0]
	Ap_StrCmd_LoopCheck = 0;	
 8009e52:	4a07      	ldr	r2, [pc, #28]	; (8009e70 <Ap_StrCmd_ShowMenuHelp+0x68>)
 8009e54:	7013      	strb	r3, [r2, #0]
		Ap_StrCmd_Print( StrBuf );
	}			
	
	Ap_StrCmd_CmdClear();

}
 8009e56:	b01d      	add	sp, #116	; 0x74
 8009e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e5c:	20000fc4 	.word	0x20000fc4
 8009e60:	20000bd0 	.word	0x20000bd0
 8009e64:	0800cf3c 	.word	0x0800cf3c
 8009e68:	20000f7e 	.word	0x20000f7e
 8009e6c:	20000fbc 	.word	0x20000fbc
 8009e70:	20000fcc 	.word	0x20000fcc
 8009e74:	0800a8e5 	.word	0x0800a8e5
 8009e78:	08009d6d 	.word	0x08009d6d

08009e7c <Ap_StrCmd_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_ShowMenu( u8 OpCode, void *arg )
{
 8009e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009e80:	4d11      	ldr	r5, [pc, #68]	; (8009ec8 <Ap_StrCmd_ShowMenu+0x4c>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_ShowMenu( u8 OpCode, void *arg )
{
 8009e82:	b0b3      	sub	sp, #204	; 0xcc
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009e84:	882b      	ldrh	r3, [r5, #0]
 8009e86:	b29b      	uxth	r3, r3
	char StrBuf[200];
	
	OpCode = OpCode;
	arg = arg;
	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 8009e88:	b1a3      	cbz	r3, 8009eb4 <Ap_StrCmd_ShowMenu+0x38>
 8009e8a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8009ee0 <Ap_StrCmd_ShowMenu+0x64>
 8009e8e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8009ee4 <Ap_StrCmd_ShowMenu+0x68>
 8009e92:	4f0e      	ldr	r7, [pc, #56]	; (8009ecc <Ap_StrCmd_ShowMenu+0x50>)
 8009e94:	2400      	movs	r4, #0
	{
		Lb_sprintf( StrBuf, "%c%s\n", AP_STRCMD_FRAME_PRINT, Ap_StrCmd_Dic_Ptr[i].NameStr );
 8009e96:	262c      	movs	r6, #44	; 0x2c
 8009e98:	fb06 9304 	mla	r3, r6, r4, r9
 8009e9c:	222a      	movs	r2, #42	; 0x2a
 8009e9e:	490c      	ldr	r1, [pc, #48]	; (8009ed0 <Ap_StrCmd_ShowMenu+0x54>)
 8009ea0:	4668      	mov	r0, sp
 8009ea2:	47c0      	blx	r8
		Ap_StrCmd_Print( StrBuf );
 8009ea4:	4668      	mov	r0, sp
 8009ea6:	47b8      	blx	r7
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009ea8:	882b      	ldrh	r3, [r5, #0]
	char StrBuf[200];
	
	OpCode = OpCode;
	arg = arg;
	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 8009eaa:	3401      	adds	r4, #1
 8009eac:	b2a4      	uxth	r4, r4
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009eae:	b29b      	uxth	r3, r3
	char StrBuf[200];
	
	OpCode = OpCode;
	arg = arg;
	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 8009eb0:	429c      	cmp	r4, r3
 8009eb2:	d3f1      	bcc.n	8009e98 <Ap_StrCmd_ShowMenu+0x1c>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8009eb4:	4a07      	ldr	r2, [pc, #28]	; (8009ed4 <Ap_StrCmd_ShowMenu+0x58>)
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	7013      	strb	r3, [r2, #0]
	Ap_StrCmd_DlyCheck  = 0;
 8009eba:	4a07      	ldr	r2, [pc, #28]	; (8009ed8 <Ap_StrCmd_ShowMenu+0x5c>)
 8009ebc:	7013      	strb	r3, [r2, #0]
	Ap_StrCmd_LoopCheck = 0;	
 8009ebe:	4a07      	ldr	r2, [pc, #28]	; (8009edc <Ap_StrCmd_ShowMenu+0x60>)
 8009ec0:	7013      	strb	r3, [r2, #0]
		Lb_sprintf( StrBuf, "%c%s\n", AP_STRCMD_FRAME_PRINT, Ap_StrCmd_Dic_Ptr[i].NameStr );
		Ap_StrCmd_Print( StrBuf );
	}			

	Ap_StrCmd_CmdClear();
}
 8009ec2:	b033      	add	sp, #204	; 0xcc
 8009ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ec8:	20000fc4 	.word	0x20000fc4
 8009ecc:	08009d6d 	.word	0x08009d6d
 8009ed0:	0800cf4c 	.word	0x0800cf4c
 8009ed4:	20000f7e 	.word	0x20000f7e
 8009ed8:	20000fbc 	.word	0x20000fbc
 8009edc:	20000fcc 	.word	0x20000fcc
 8009ee0:	20000bd0 	.word	0x20000bd0
 8009ee4:	0800a8e5 	.word	0x0800a8e5

08009ee8 <Ap_StrCmd_Printf>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Printf( char *format, ... )
{
 8009ee8:	b40f      	push	{r0, r1, r2, r3}
 8009eea:	b500      	push	{lr}
 8009eec:	b0b3      	sub	sp, #204	; 0xcc
	char Str[200];
	Lb_va_list ap;
	
	Lb_va_start( ap, format );

	Lb_vsprintf( Str, format, ap );	
 8009eee:	aa34      	add	r2, sp, #208	; 0xd0
 8009ef0:	f64a 13e9 	movw	r3, #43497	; 0xa9e9
 8009ef4:	4668      	mov	r0, sp
 8009ef6:	f852 1b04 	ldr.w	r1, [r2], #4
 8009efa:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009efe:	4798      	blx	r3

	Lb_va_end(ap);	
	
	Ap_StrCmd_Print(Str);
 8009f00:	f649 536d 	movw	r3, #40301	; 0x9d6d
 8009f04:	4668      	mov	r0, sp
 8009f06:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009f0a:	4798      	blx	r3
}
 8009f0c:	b033      	add	sp, #204	; 0xcc
 8009f0e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f12:	b004      	add	sp, #16
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop

08009f18 <Ap_StrCmd_Echo>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Echo( u8 OpCode,  void *arg )
{
 8009f18:	b510      	push	{r4, lr}
 8009f1a:	b086      	sub	sp, #24
	char Arg1[10];

	OpCode = OpCode;
	arg = arg;

	sscanf(arg, "%s %s", CmdMain, Arg1);
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	466a      	mov	r2, sp
 8009f20:	4910      	ldr	r1, [pc, #64]	; (8009f64 <Ap_StrCmd_Echo+0x4c>)
 8009f22:	ab03      	add	r3, sp, #12
 8009f24:	4c10      	ldr	r4, [pc, #64]	; (8009f68 <Ap_StrCmd_Echo+0x50>)
 8009f26:	47a0      	blx	r4

	if( strncmp( Arg1, "ON", 2 ) == 0 )
 8009f28:	a803      	add	r0, sp, #12
 8009f2a:	4910      	ldr	r1, [pc, #64]	; (8009f6c <Ap_StrCmd_Echo+0x54>)
 8009f2c:	2202      	movs	r2, #2
 8009f2e:	4b10      	ldr	r3, [pc, #64]	; (8009f70 <Ap_StrCmd_Echo+0x58>)
 8009f30:	4798      	blx	r3
 8009f32:	b178      	cbz	r0, 8009f54 <Ap_StrCmd_Echo+0x3c>
		Ap_StrCmd_EchoEnable = TRUE;
		Ap_StrCmd_Printf("%cEcho on\n", AP_STRCMD_FRAME_PRINT);
	}
	else
	{
		Ap_StrCmd_EchoEnable = FALSE;
 8009f34:	4b0f      	ldr	r3, [pc, #60]	; (8009f74 <Ap_StrCmd_Echo+0x5c>)
 8009f36:	2200      	movs	r2, #0
 8009f38:	701a      	strb	r2, [r3, #0]
		Ap_StrCmd_Printf("%cEcho off\n", AP_STRCMD_FRAME_PRINT);	
 8009f3a:	480f      	ldr	r0, [pc, #60]	; (8009f78 <Ap_StrCmd_Echo+0x60>)
 8009f3c:	212a      	movs	r1, #42	; 0x2a
 8009f3e:	4b0f      	ldr	r3, [pc, #60]	; (8009f7c <Ap_StrCmd_Echo+0x64>)
 8009f40:	4798      	blx	r3
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8009f42:	4a0f      	ldr	r2, [pc, #60]	; (8009f80 <Ap_StrCmd_Echo+0x68>)
 8009f44:	2300      	movs	r3, #0
 8009f46:	7013      	strb	r3, [r2, #0]
	Ap_StrCmd_DlyCheck  = 0;
 8009f48:	4a0e      	ldr	r2, [pc, #56]	; (8009f84 <Ap_StrCmd_Echo+0x6c>)
 8009f4a:	7013      	strb	r3, [r2, #0]
	Ap_StrCmd_LoopCheck = 0;	
 8009f4c:	4a0e      	ldr	r2, [pc, #56]	; (8009f88 <Ap_StrCmd_Echo+0x70>)
 8009f4e:	7013      	strb	r3, [r2, #0]
		Ap_StrCmd_EchoEnable = FALSE;
		Ap_StrCmd_Printf("%cEcho off\n", AP_STRCMD_FRAME_PRINT);	
	}

	Ap_StrCmd_CmdClear();
}
 8009f50:	b006      	add	sp, #24
 8009f52:	bd10      	pop	{r4, pc}

	sscanf(arg, "%s %s", CmdMain, Arg1);

	if( strncmp( Arg1, "ON", 2 ) == 0 )
	{
		Ap_StrCmd_EchoEnable = TRUE;
 8009f54:	4b07      	ldr	r3, [pc, #28]	; (8009f74 <Ap_StrCmd_Echo+0x5c>)
 8009f56:	2201      	movs	r2, #1
 8009f58:	701a      	strb	r2, [r3, #0]
		Ap_StrCmd_Printf("%cEcho on\n", AP_STRCMD_FRAME_PRINT);
 8009f5a:	480c      	ldr	r0, [pc, #48]	; (8009f8c <Ap_StrCmd_Echo+0x74>)
 8009f5c:	212a      	movs	r1, #42	; 0x2a
 8009f5e:	4b07      	ldr	r3, [pc, #28]	; (8009f7c <Ap_StrCmd_Echo+0x64>)
 8009f60:	4798      	blx	r3
 8009f62:	e7ee      	b.n	8009f42 <Ap_StrCmd_Echo+0x2a>
 8009f64:	0800cf54 	.word	0x0800cf54
 8009f68:	08000009 	.word	0x08000009
 8009f6c:	0800cf5c 	.word	0x0800cf5c
 8009f70:	08000179 	.word	0x08000179
 8009f74:	20000a00 	.word	0x20000a00
 8009f78:	0800cf6c 	.word	0x0800cf6c
 8009f7c:	08009ee9 	.word	0x08009ee9
 8009f80:	20000f7e 	.word	0x20000f7e
 8009f84:	20000fbc 	.word	0x20000fbc
 8009f88:	20000fcc 	.word	0x20000fcc
 8009f8c:	0800cf60 	.word	0x0800cf60

08009f90 <Ap_StrCmd_ShowInfo>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_ShowInfo( u8 OpCode,  void *arg )
{
 8009f90:	b538      	push	{r3, r4, r5, lr}
	OpCode = OpCode;
	arg = arg;

	Ap_StrCmd_Printf( "%c----------------------------------------- \r\n", AP_STRCMD_FRAME_PRINT );
 8009f92:	f64c 7578 	movw	r5, #53112	; 0xcf78
 8009f96:	f6c0 0500 	movt	r5, #2048	; 0x800
 8009f9a:	f649 64e9 	movw	r4, #40681	; 0x9ee9
 8009f9e:	f6c0 0400 	movt	r4, #2048	; 0x800
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	212a      	movs	r1, #42	; 0x2a
 8009fa6:	47a0      	blx	r4
	Ap_StrCmd_Printf( "%c             Ap_StrCmd v0.1               \r\n", AP_STRCMD_FRAME_PRINT );
 8009fa8:	f64c 70a8 	movw	r0, #53160	; 0xcfa8
 8009fac:	f6c0 0000 	movt	r0, #2048	; 0x800
 8009fb0:	212a      	movs	r1, #42	; 0x2a
 8009fb2:	47a0      	blx	r4
	Ap_StrCmd_Printf( "%c                                          \r\n", AP_STRCMD_FRAME_PRINT );
 8009fb4:	f64c 70d8 	movw	r0, #53208	; 0xcfd8
 8009fb8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8009fbc:	212a      	movs	r1, #42	; 0x2a
 8009fbe:	47a0      	blx	r4
	Ap_StrCmd_Printf( "%c        made by : Cho Han Cheol           \r\n", AP_STRCMD_FRAME_PRINT );	
 8009fc0:	f24d 0008 	movw	r0, #53256	; 0xd008
 8009fc4:	212a      	movs	r1, #42	; 0x2a
 8009fc6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8009fca:	47a0      	blx	r4
	Ap_StrCmd_Printf( "%c----------------------------------------- \r\n", AP_STRCMD_FRAME_PRINT );
 8009fcc:	4628      	mov	r0, r5
 8009fce:	212a      	movs	r1, #42	; 0x2a
 8009fd0:	47a0      	blx	r4
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8009fd2:	f640 707e 	movw	r0, #3966	; 0xf7e
	Ap_StrCmd_DlyCheck  = 0;
 8009fd6:	f640 71bc 	movw	r1, #4028	; 0xfbc
	Ap_StrCmd_LoopCheck = 0;	
 8009fda:	f640 73cc 	movw	r3, #4044	; 0xfcc
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f2c2 0000 	movt	r0, #8192	; 0x2000
	Ap_StrCmd_DlyCheck  = 0;
 8009fe4:	f2c2 0100 	movt	r1, #8192	; 0x2000
	Ap_StrCmd_LoopCheck = 0;	
 8009fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8009fec:	7002      	strb	r2, [r0, #0]
	Ap_StrCmd_DlyCheck  = 0;
 8009fee:	700a      	strb	r2, [r1, #0]
	Ap_StrCmd_LoopCheck = 0;	
 8009ff0:	701a      	strb	r2, [r3, #0]
 8009ff2:	bd38      	pop	{r3, r4, r5, pc}

08009ff4 <Ap_StrCmd_ExeFunc>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s16 Ap_StrCmd_ExeFunc( void )
{
 8009ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff8:	b091      	sub	sp, #68	; 0x44
	u16 j;

	AP_STRCMD_CMD_OBJ CmdMsg;
	
	
	Disable_ISR();
 8009ffa:	b672      	cpsid	i
	Ap_StrCmd_Q_Pop( AP_STRCMD_Q_RX_CH, &CmdMsg );
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	a901      	add	r1, sp, #4
 800a000:	4b31      	ldr	r3, [pc, #196]	; (800a0c8 <Ap_StrCmd_ExeFunc+0xd4>)
 800a002:	4798      	blx	r3
	Enable_ISR();
 800a004:	b662      	cpsie	i
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 800a006:	4b31      	ldr	r3, [pc, #196]	; (800a0cc <Ap_StrCmd_ExeFunc+0xd8>)
 800a008:	f8b3 8000 	ldrh.w	r8, [r3]
 800a00c:	fa1f f888 	uxth.w	r8, r8
	Ap_StrCmd_Q_Pop( AP_STRCMD_Q_RX_CH, &CmdMsg );
	Enable_ISR();
	
	CmdSize = Ap_StrCmd_GetSize();
	
	for( i=0; i<CmdSize; i++ )
 800a010:	f1b8 0f00 	cmp.w	r8, #0
 800a014:	d049      	beq.n	800a0aa <Ap_StrCmd_ExeFunc+0xb6>
 800a016:	4b2e      	ldr	r3, [pc, #184]	; (800a0d0 <Ap_StrCmd_ExeFunc+0xdc>)
 800a018:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800a0dc <Ap_StrCmd_ExeFunc+0xe8>
 800a01c:	f04f 0b00 	mov.w	fp, #0
 800a020:	681c      	ldr	r4, [r3, #0]
 800a022:	4655      	mov	r5, sl
 800a024:	465e      	mov	r6, fp
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 800a026:	272c      	movs	r7, #44	; 0x2c
 800a028:	782b      	ldrb	r3, [r5, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d045      	beq.n	800a0ba <Ap_StrCmd_ExeFunc+0xc6>
 800a02e:	fb07 f10b 	mul.w	r1, r7, fp
 800a032:	2300      	movs	r3, #0

		Size++;
 800a034:	3301      	adds	r3, #1
 800a036:	b29b      	uxth	r3, r3
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 800a038:	18ca      	adds	r2, r1, r3
 800a03a:	f81a 2002 	ldrb.w	r2, [sl, r2]
 800a03e:	4699      	mov	r9, r3
 800a040:	2a00      	cmp	r2, #0
 800a042:	d1f7      	bne.n	800a034 <Ap_StrCmd_ExeFunc+0x40>
	CmdSize = Ap_StrCmd_GetSize();
	
	for( i=0; i<CmdSize; i++ )
	{
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
 800a044:	f240 1269 	movw	r2, #361	; 0x169
 800a048:	a801      	add	r0, sp, #4
 800a04a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800a04e:	4790      	blx	r2
 800a050:	b280      	uxth	r0, r0
		
		for( j=0; j<CmdBufStrSize; j++ )
 800a052:	b1b0      	cbz	r0, 800a082 <Ap_StrCmd_ExeFunc+0x8e>
     TITLE   : Ap_StrCmd_ExeFunc
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s16 Ap_StrCmd_ExeFunc( void )
 800a054:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 800a058:	fa1f fe8e 	uxth.w	lr, lr
 800a05c:	f10d 0205 	add.w	r2, sp, #5
 800a060:	ab01      	add	r3, sp, #4
 800a062:	4496      	add	lr, r2
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
		
		for( j=0; j<CmdBufStrSize; j++ )
		{
			CmdMsg.Str[j] = toupper( CmdMsg.Str[j] );
 800a064:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a068:	18a1      	adds	r1, r4, r2
 800a06a:	7848      	ldrb	r0, [r1, #1]
 800a06c:	4611      	mov	r1, r2
 800a06e:	f000 0003 	and.w	r0, r0, #3
 800a072:	2802      	cmp	r0, #2
 800a074:	bf08      	it	eq
 800a076:	f1a2 0120 	subeq.w	r1, r2, #32
	for( i=0; i<CmdSize; i++ )
	{
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
		
		for( j=0; j<CmdBufStrSize; j++ )
 800a07a:	4573      	cmp	r3, lr
		{
			CmdMsg.Str[j] = toupper( CmdMsg.Str[j] );
 800a07c:	f803 1c01 	strb.w	r1, [r3, #-1]
	for( i=0; i<CmdSize; i++ )
	{
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
		
		for( j=0; j<CmdBufStrSize; j++ )
 800a080:	d1f0      	bne.n	800a064 <Ap_StrCmd_ExeFunc+0x70>
		{
			CmdMsg.Str[j] = toupper( CmdMsg.Str[j] );
		}
		
		CmdCheck = strncmp( Ap_StrCmd_Dic_Ptr[i].NameStr, (char *)CmdMsg.Str, CmdStrSize );
 800a082:	f240 1379 	movw	r3, #377	; 0x179
 800a086:	fb07 a00b 	mla	r0, r7, fp, sl
 800a08a:	a901      	add	r1, sp, #4
 800a08c:	464a      	mov	r2, r9
 800a08e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a092:	4798      	blx	r3
		
		
		if( CmdCheck == 0 && Ap_StrCmd_Dic_Ptr[i].Func_Ptr != NULL )
 800a094:	b200      	sxth	r0, r0
 800a096:	b908      	cbnz	r0, 800a09c <Ap_StrCmd_ExeFunc+0xa8>
 800a098:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a09a:	b983      	cbnz	r3, 800a0be <Ap_StrCmd_ExeFunc+0xca>
 800a09c:	f10b 0b01 	add.w	fp, fp, #1
	Ap_StrCmd_Q_Pop( AP_STRCMD_Q_RX_CH, &CmdMsg );
	Enable_ISR();
	
	CmdSize = Ap_StrCmd_GetSize();
	
	for( i=0; i<CmdSize; i++ )
 800a0a0:	fa1f f68b 	uxth.w	r6, fp
 800a0a4:	352c      	adds	r5, #44	; 0x2c
 800a0a6:	45b0      	cmp	r8, r6
 800a0a8:	d8be      	bhi.n	800a028 <Ap_StrCmd_ExeFunc+0x34>
			return true;
		}
	}
	
	
	Ap_StrCmd_SendResp( 0xFF, "\n" );
 800a0aa:	20ff      	movs	r0, #255	; 0xff
 800a0ac:	4909      	ldr	r1, [pc, #36]	; (800a0d4 <Ap_StrCmd_ExeFunc+0xe0>)
 800a0ae:	4b0a      	ldr	r3, [pc, #40]	; (800a0d8 <Ap_StrCmd_ExeFunc+0xe4>)
 800a0b0:	4798      	blx	r3

	return false;
 800a0b2:	2000      	movs	r0, #0
}
 800a0b4:	b011      	add	sp, #68	; 0x44
 800a0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 800a0ba:	4699      	mov	r9, r3
 800a0bc:	e7c2      	b.n	800a044 <Ap_StrCmd_ExeFunc+0x50>
		CmdCheck = strncmp( Ap_StrCmd_Dic_Ptr[i].NameStr, (char *)CmdMsg.Str, CmdStrSize );
		
		
		if( CmdCheck == 0 && Ap_StrCmd_Dic_Ptr[i].Func_Ptr != NULL )
		{		
			AP_STRCMD_DIC_FUNC_EXEC(i, CmdMsg.Str); 			
 800a0be:	b2f0      	uxtb	r0, r6
 800a0c0:	a901      	add	r1, sp, #4
 800a0c2:	4798      	blx	r3
			return true;
 800a0c4:	2001      	movs	r0, #1
 800a0c6:	e7f5      	b.n	800a0b4 <Ap_StrCmd_ExeFunc+0xc0>
 800a0c8:	0800a1f9 	.word	0x0800a1f9
 800a0cc:	20000fc4 	.word	0x20000fc4
 800a0d0:	200000e4 	.word	0x200000e4
 800a0d4:	0800cf50 	.word	0x0800cf50
 800a0d8:	08009da1 	.word	0x08009da1
 800a0dc:	20000bd0 	.word	0x20000bd0

0800a0e0 <Ap_StrCmd_ExeCmd>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_ExeCmd( void )
{
 800a0e0:	b508      	push	{r3, lr}
	u8 Ret = FALSE;

	if( Ap_StrCmd_Q_SIZE(AP_STRCMD_Q_RX_CH) )
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	4b03      	ldr	r3, [pc, #12]	; (800a0f4 <Ap_StrCmd_ExeCmd+0x14>)
 800a0e6:	4798      	blx	r3
 800a0e8:	b110      	cbz	r0, 800a0f0 <Ap_StrCmd_ExeCmd+0x10>
	{
		Ap_StrCmd_ExeFunc();
 800a0ea:	4b03      	ldr	r3, [pc, #12]	; (800a0f8 <Ap_StrCmd_ExeCmd+0x18>)
 800a0ec:	4798      	blx	r3
		Ret = TRUE;
 800a0ee:	2001      	movs	r0, #1
	}

	return Ret; 
}
 800a0f0:	bd08      	pop	{r3, pc}
 800a0f2:	bf00      	nop
 800a0f4:	0800a115 	.word	0x0800a115
 800a0f8:	08009ff5 	.word	0x08009ff5

0800a0fc <Ap_StrCmd_Q_Init>:
{
	u8 i;
	
	for( i=0; i<AP_STRCMD_Q_CH_MAX; i++ )
	{
		Ap_StrCmd_Q_Start[i] = Ap_StrCmd_Q_End[i] = 0;
 800a0fc:	f241 123c 	movw	r2, #4412	; 0x113c
 800a100:	f640 73d0 	movw	r3, #4048	; 0xfd0
 800a104:	2100      	movs	r1, #0
 800a106:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800a10a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a10e:	8011      	strh	r1, [r2, #0]
 800a110:	8019      	strh	r1, [r3, #0]
 800a112:	4770      	bx	lr

0800a114 <Ap_StrCmd_Q_SIZE>:
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 800a114:	f640 72d0 	movw	r2, #4048	; 0xfd0
 800a118:	f241 133c 	movw	r3, #4412	; 0x113c
 800a11c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800a120:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a124:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
 800a128:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 800a12c:	f246 6067 	movw	r0, #26215	; 0x6667
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	3305      	adds	r3, #5
 800a134:	f2c6 6066 	movt	r0, #26214	; 0x6666
 800a138:	fb80 2003 	smull	r2, r0, r0, r3
 800a13c:	17da      	asrs	r2, r3, #31
 800a13e:	ebc2 0060 	rsb	r0, r2, r0, asr #1
 800a142:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
 800a146:	1a18      	subs	r0, r3, r0
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop

0800a14c <Ap_StrCmd_Q_Push>:
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 800a14c:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 800a1f4 <Ap_StrCmd_Q_Push+0xa8>
 800a150:	4b26      	ldr	r3, [pc, #152]	; (800a1ec <Ap_StrCmd_Q_Push+0xa0>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
 800a152:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 800a156:	f83c 8010 	ldrh.w	r8, [ip, r0, lsl #1]
 800a15a:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 800a15e:	fa0f f288 	sxth.w	r2, r8
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
 800a162:	4606      	mov	r6, r0
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	f246 6067 	movw	r0, #26215	; 0x6667
 800a16a:	3305      	adds	r3, #5
 800a16c:	f2c6 6066 	movt	r0, #26214	; 0x6666
 800a170:	fb80 4003 	smull	r4, r0, r0, r3
 800a174:	17dc      	asrs	r4, r3, #31
 800a176:	ebc4 0060 	rsb	r0, r4, r0, asr #1
 800a17a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a17e:	1a1b      	subs	r3, r3, r0
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
        
	if (Ap_StrCmd_Q_SIZE(Ch) == (AP_STRCMD_BUFFER_MAX-1)) return FALSE;
 800a180:	2000      	movs	r0, #0
 800a182:	2b04      	cmp	r3, #4
 800a184:	d02f      	beq.n	800a1e6 <Ap_StrCmd_Q_Push+0x9a>
	
	Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_Start[Ch]++] = *Push_Ptr;
 800a186:	f44f 77b4 	mov.w	r7, #360	; 0x168
 800a18a:	fb07 f706 	mul.w	r7, r7, r6
 800a18e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800a192:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800a196:	4f16      	ldr	r7, [pc, #88]	; (800a1f0 <Ap_StrCmd_Q_Push+0xa4>)
 800a198:	460c      	mov	r4, r1
 800a19a:	18bf      	adds	r7, r7, r2
 800a19c:	f101 0930 	add.w	r9, r1, #48	; 0x30
 800a1a0:	6820      	ldr	r0, [r4, #0]
 800a1a2:	6861      	ldr	r1, [r4, #4]
 800a1a4:	68a2      	ldr	r2, [r4, #8]
 800a1a6:	68e3      	ldr	r3, [r4, #12]
 800a1a8:	463d      	mov	r5, r7
 800a1aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a1ac:	3410      	adds	r4, #16
 800a1ae:	454c      	cmp	r4, r9
 800a1b0:	462f      	mov	r7, r5
 800a1b2:	d1f5      	bne.n	800a1a0 <Ap_StrCmd_Q_Push+0x54>
 800a1b4:	f108 0801 	add.w	r8, r8, #1
	Ap_StrCmd_Q_Start[Ch] %= AP_STRCMD_BUFFER_MAX;
 800a1b8:	f246 6367 	movw	r3, #26215	; 0x6667
 800a1bc:	fa0f f888 	sxth.w	r8, r8
 800a1c0:	f2c6 6366 	movt	r3, #26214	; 0x6666
 800a1c4:	fb83 2308 	smull	r2, r3, r3, r8
 800a1c8:	ea4f 72e8 	mov.w	r2, r8, asr #31
 800a1cc:	ebc2 0363 	rsb	r3, r2, r3, asr #1
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
        
	if (Ap_StrCmd_Q_SIZE(Ch) == (AP_STRCMD_BUFFER_MAX-1)) return FALSE;
	
	Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_Start[Ch]++] = *Push_Ptr;
 800a1d0:	6820      	ldr	r0, [r4, #0]
 800a1d2:	6861      	ldr	r1, [r4, #4]
 800a1d4:	68a2      	ldr	r2, [r4, #8]
	Ap_StrCmd_Q_Start[Ch] %= AP_STRCMD_BUFFER_MAX;
 800a1d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a1da:	ebc3 0808 	rsb	r8, r3, r8
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
        
	if (Ap_StrCmd_Q_SIZE(Ch) == (AP_STRCMD_BUFFER_MAX-1)) return FALSE;
	
	Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_Start[Ch]++] = *Push_Ptr;
 800a1de:	c707      	stmia	r7!, {r0, r1, r2}
	Ap_StrCmd_Q_Start[Ch] %= AP_STRCMD_BUFFER_MAX;
 800a1e0:	f82c 8016 	strh.w	r8, [ip, r6, lsl #1]
	
	return TRUE;
 800a1e4:	2001      	movs	r0, #1
}                                                  
 800a1e6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800a1ea:	4770      	bx	lr
 800a1ec:	2000113c 	.word	0x2000113c
 800a1f0:	20000fd4 	.word	0x20000fd4
 800a1f4:	20000fd0 	.word	0x20000fd0

0800a1f8 <Ap_StrCmd_Q_Pop>:
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 800a1f8:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 800a2a0 <Ap_StrCmd_Q_Pop+0xa8>
 800a1fc:	4b26      	ldr	r3, [pc, #152]	; (800a298 <Ap_StrCmd_Q_Pop+0xa0>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Pop( u8 Ch, AP_STRCMD_DATA_PTR_TYPE *Pop_Ptr )
{
 800a1fe:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 800a202:	f83c 8010 	ldrh.w	r8, [ip, r0, lsl #1]
 800a206:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 800a20a:	fa0f f288 	sxth.w	r2, r8
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Pop( u8 Ch, AP_STRCMD_DATA_PTR_TYPE *Pop_Ptr )
{
 800a20e:	4606      	mov	r6, r0
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 800a210:	1a9b      	subs	r3, r3, r2
 800a212:	f246 6067 	movw	r0, #26215	; 0x6667
 800a216:	3305      	adds	r3, #5
 800a218:	f2c6 6066 	movt	r0, #26214	; 0x6666
 800a21c:	fb80 4003 	smull	r4, r0, r0, r3
 800a220:	17dc      	asrs	r4, r3, #31
 800a222:	ebc4 0060 	rsb	r0, r4, r0, asr #1
 800a226:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Pop( u8 Ch, AP_STRCMD_DATA_PTR_TYPE *Pop_Ptr )
{
	if (Ap_StrCmd_Q_SIZE(Ch) == 0) return FALSE;
 800a22a:	1a1b      	subs	r3, r3, r0
 800a22c:	d02f      	beq.n	800a28e <Ap_StrCmd_Q_Pop+0x96>
	
	*Pop_Ptr = Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_End[Ch]++];
 800a22e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800a232:	fb03 f306 	mul.w	r3, r3, r6
 800a236:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800a23a:	4f18      	ldr	r7, [pc, #96]	; (800a29c <Ap_StrCmd_Q_Pop+0xa4>)
 800a23c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a240:	18bf      	adds	r7, r7, r2
 800a242:	460d      	mov	r5, r1
 800a244:	f107 0930 	add.w	r9, r7, #48	; 0x30
 800a248:	463c      	mov	r4, r7
 800a24a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a24c:	6028      	str	r0, [r5, #0]
 800a24e:	6069      	str	r1, [r5, #4]
 800a250:	60aa      	str	r2, [r5, #8]
 800a252:	60eb      	str	r3, [r5, #12]
 800a254:	3510      	adds	r5, #16
 800a256:	454c      	cmp	r4, r9
 800a258:	4627      	mov	r7, r4
 800a25a:	d1f5      	bne.n	800a248 <Ap_StrCmd_Q_Pop+0x50>
 800a25c:	f108 0801 	add.w	r8, r8, #1
	
	Ap_StrCmd_Q_End[Ch] %= AP_STRCMD_BUFFER_MAX;
 800a260:	f246 6367 	movw	r3, #26215	; 0x6667
 800a264:	fa0f f888 	sxth.w	r8, r8
 800a268:	f2c6 6366 	movt	r3, #26214	; 0x6666
 800a26c:	fb83 2308 	smull	r2, r3, r3, r8
 800a270:	ea4f 72e8 	mov.w	r2, r8, asr #31
 800a274:	ebc2 0363 	rsb	r3, r2, r3, asr #1
 800a278:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a27c:	ebc3 0808 	rsb	r8, r3, r8
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Pop( u8 Ch, AP_STRCMD_DATA_PTR_TYPE *Pop_Ptr )
{
	if (Ap_StrCmd_Q_SIZE(Ch) == 0) return FALSE;
	
	*Pop_Ptr = Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_End[Ch]++];
 800a280:	cf07      	ldmia	r7!, {r0, r1, r2}
	
	Ap_StrCmd_Q_End[Ch] %= AP_STRCMD_BUFFER_MAX;

    return AP_STRCMD_POP_SUCCESS;
 800a282:	2302      	movs	r3, #2
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Pop( u8 Ch, AP_STRCMD_DATA_PTR_TYPE *Pop_Ptr )
{
	if (Ap_StrCmd_Q_SIZE(Ch) == 0) return FALSE;
	
	*Pop_Ptr = Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_End[Ch]++];
 800a284:	6028      	str	r0, [r5, #0]
 800a286:	6069      	str	r1, [r5, #4]
 800a288:	60aa      	str	r2, [r5, #8]
	
	Ap_StrCmd_Q_End[Ch] %= AP_STRCMD_BUFFER_MAX;
 800a28a:	f82c 8016 	strh.w	r8, [ip, r6, lsl #1]

    return AP_STRCMD_POP_SUCCESS;
}
 800a28e:	b258      	sxtb	r0, r3
 800a290:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	20000fd0 	.word	0x20000fd0
 800a29c:	20000fd4 	.word	0x20000fd4
 800a2a0:	2000113c 	.word	0x2000113c

0800a2a4 <Ap_StrCmd_List>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_List( void )
{
 800a2a4:	b508      	push	{r3, lr}
	Ap_StrCmd_AddCmd( "MOVE", "Robot Move",		  Ap_StrCmd_MOVE );
 800a2a6:	f24d 0038 	movw	r0, #53304	; 0xd038
 800a2aa:	f649 33f1 	movw	r3, #39921	; 0x9bf1
 800a2ae:	f24d 0140 	movw	r1, #53312	; 0xd040
 800a2b2:	f24a 22cd 	movw	r2, #41677	; 0xa2cd
 800a2b6:	f6c0 0100 	movt	r1, #2048	; 0x800
 800a2ba:	f6c0 0200 	movt	r2, #2048	; 0x800
 800a2be:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a2c2:	f6c0 0000 	movt	r0, #2048	; 0x800
 800a2c6:	4798      	blx	r3
 800a2c8:	bd08      	pop	{r3, pc}
 800a2ca:	bf00      	nop

0800a2cc <Ap_StrCmd_MOVE>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_MOVE( u8 OpCode,  void *arg )
{
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
	char *argv[128];
	u16  argc;

	//sscanf((char *)arg, "%s %s %d %d", CmdMain, CmdSub, &LeftSpeed, &RightSpeed);

	argc = Lb_Util_PaseArgs( (char *)arg, argv );
 800a2d2:	4608      	mov	r0, r1
 800a2d4:	4b11      	ldr	r3, [pc, #68]	; (800a31c <Ap_StrCmd_MOVE+0x50>)
 800a2d6:	4669      	mov	r1, sp
 800a2d8:	4798      	blx	r3


	if( strcmp( argv[1], "PWM" ) == 0 )
 800a2da:	9801      	ldr	r0, [sp, #4]
 800a2dc:	4910      	ldr	r1, [pc, #64]	; (800a320 <Ap_StrCmd_MOVE+0x54>)
 800a2de:	4b11      	ldr	r3, [pc, #68]	; (800a324 <Ap_StrCmd_MOVE+0x58>)
 800a2e0:	4798      	blx	r3
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	b130      	cbz	r0, 800a2f4 <Ap_StrCmd_MOVE+0x28>
 800a2e6:	4d10      	ldr	r5, [pc, #64]	; (800a328 <Ap_StrCmd_MOVE+0x5c>)

		Ap_StrCmd_SendResp( ErrCode, "%d %d\n", LeftSpeed, RightSpeed );
	}
	else
	{
		ErrCode = 0xFF;
 800a2e8:	20ff      	movs	r0, #255	; 0xff
	}

	Ap_StrCmd_SendResp( ErrCode, "\n" );
 800a2ea:	4910      	ldr	r1, [pc, #64]	; (800a32c <Ap_StrCmd_MOVE+0x60>)
 800a2ec:	47a8      	blx	r5
}
 800a2ee:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
 800a2f2:	bd70      	pop	{r4, r5, r6, pc}


	if( strcmp( argv[1], "PWM" ) == 0 )
	{
		
		LeftSpeed  = Lb_Util_atoi(argv[2]);
 800a2f4:	4e0e      	ldr	r6, [pc, #56]	; (800a330 <Ap_StrCmd_MOVE+0x64>)
 800a2f6:	9802      	ldr	r0, [sp, #8]
 800a2f8:	47b0      	blx	r6
 800a2fa:	4605      	mov	r5, r0
		RightSpeed = Lb_Util_atoi(argv[3]); 
 800a2fc:	9803      	ldr	r0, [sp, #12]
 800a2fe:	47b0      	blx	r6


		Hw_DcMotor_Handle( LeftSpeed, RightSpeed );
 800a300:	4b0c      	ldr	r3, [pc, #48]	; (800a334 <Ap_StrCmd_MOVE+0x68>)
 800a302:	b201      	sxth	r1, r0

	if( strcmp( argv[1], "PWM" ) == 0 )
	{
		
		LeftSpeed  = Lb_Util_atoi(argv[2]);
		RightSpeed = Lb_Util_atoi(argv[3]); 
 800a304:	4606      	mov	r6, r0


		Hw_DcMotor_Handle( LeftSpeed, RightSpeed );
 800a306:	b228      	sxth	r0, r5
 800a308:	4798      	blx	r3

		Ap_StrCmd_SendResp( ErrCode, "%d %d\n", LeftSpeed, RightSpeed );
 800a30a:	4620      	mov	r0, r4
 800a30c:	462a      	mov	r2, r5
 800a30e:	490a      	ldr	r1, [pc, #40]	; (800a338 <Ap_StrCmd_MOVE+0x6c>)
 800a310:	4633      	mov	r3, r6
 800a312:	4d05      	ldr	r5, [pc, #20]	; (800a328 <Ap_StrCmd_MOVE+0x5c>)
 800a314:	47a8      	blx	r5
	int  LeftSpeed;
	int  RightSpeed;

	int  Cnt = -1;

	u8	 ErrCode = ERR_NONE;
 800a316:	4620      	mov	r0, r4
 800a318:	e7e7      	b.n	800a2ea <Ap_StrCmd_MOVE+0x1e>
 800a31a:	bf00      	nop
 800a31c:	0800a33d 	.word	0x0800a33d
 800a320:	0800d04c 	.word	0x0800d04c
 800a324:	08000155 	.word	0x08000155
 800a328:	08009da1 	.word	0x08009da1
 800a32c:	0800cf50 	.word	0x0800cf50
 800a330:	0800a371 	.word	0x0800a371
 800a334:	0800b541 	.word	0x0800b541
 800a338:	0800d050 	.word	0x0800d050

0800a33c <Lb_Util_PaseArgs>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int Lb_Util_PaseArgs(char *cmdline, char **argv)
{
 800a33c:	b570      	push	{r4, r5, r6, lr}
	char *tok;
	int argc = 0;

	argv[argc] = NULL;
 800a33e:	2400      	movs	r4, #0
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int Lb_Util_PaseArgs(char *cmdline, char **argv)
{
 800a340:	460d      	mov	r5, r1
	char *tok;
	int argc = 0;

	argv[argc] = NULL;
 800a342:	600c      	str	r4, [r1, #0]

	for (tok = strtok(cmdline, delim); tok; tok = strtok(NULL, delim))
 800a344:	4e08      	ldr	r6, [pc, #32]	; (800a368 <Lb_Util_PaseArgs+0x2c>)
 800a346:	4909      	ldr	r1, [pc, #36]	; (800a36c <Lb_Util_PaseArgs+0x30>)
 800a348:	47b0      	blx	r6
 800a34a:	b150      	cbz	r0, 800a362 <Lb_Util_PaseArgs+0x26>
     TITLE   : Lb_Util_PaseArgs
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int Lb_Util_PaseArgs(char *cmdline, char **argv)
 800a34c:	3d04      	subs	r5, #4

	argv[argc] = NULL;

	for (tok = strtok(cmdline, delim); tok; tok = strtok(NULL, delim))
	{
		argv[argc++] = tok;
 800a34e:	f845 0f04 	str.w	r0, [r5, #4]!
	char *tok;
	int argc = 0;

	argv[argc] = NULL;

	for (tok = strtok(cmdline, delim); tok; tok = strtok(NULL, delim))
 800a352:	4906      	ldr	r1, [pc, #24]	; (800a36c <Lb_Util_PaseArgs+0x30>)
 800a354:	2000      	movs	r0, #0
 800a356:	47b0      	blx	r6
	{
		argv[argc++] = tok;
 800a358:	3401      	adds	r4, #1
	char *tok;
	int argc = 0;

	argv[argc] = NULL;

	for (tok = strtok(cmdline, delim); tok; tok = strtok(NULL, delim))
 800a35a:	2800      	cmp	r0, #0
 800a35c:	d1f7      	bne.n	800a34e <Lb_Util_PaseArgs+0x12>
	{
		argv[argc++] = tok;
	}

	return argc;
}
 800a35e:	4620      	mov	r0, r4
 800a360:	bd70      	pop	{r4, r5, r6, pc}
     RET     : void
---------------------------------------------------------------------------*/
int Lb_Util_PaseArgs(char *cmdline, char **argv)
{
	char *tok;
	int argc = 0;
 800a362:	4604      	mov	r4, r0
 800a364:	e7fb      	b.n	800a35e <Lb_Util_PaseArgs+0x22>
 800a366:	bf00      	nop
 800a368:	08000235 	.word	0x08000235
 800a36c:	0800d058 	.word	0x0800d058

0800a370 <Lb_Util_atoi>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int Lb_Util_atoi(char *str)
{
 800a370:	b410      	push	{r4}
	int i = 0, j = 0;
 
    if (*str == '-' || isdigit(*str)) 
 800a372:	7803      	ldrb	r3, [r0, #0]
 800a374:	f1b3 042d 	subs.w	r4, r3, #45	; 0x2d
 800a378:	4262      	negs	r2, r4
 800a37a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a37e:	4162      	adcs	r2, r4
 800a380:	b2cc      	uxtb	r4, r1
 800a382:	2c09      	cmp	r4, #9
 800a384:	bf8c      	ite	hi
 800a386:	4614      	movhi	r4, r2
 800a388:	f042 0401 	orrls.w	r4, r2, #1
 800a38c:	b1ac      	cbz	r4, 800a3ba <Lb_Util_atoi+0x4a>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int Lb_Util_atoi(char *str)
{
	int i = 0, j = 0;
 800a38e:	4614      	mov	r4, r2
 
    if (*str == '-' || isdigit(*str)) 
    {
		if(*str == '-') j = 1, str++;
 800a390:	b9aa      	cbnz	r2, 800a3be <Lb_Util_atoi+0x4e>

		while(isdigit(*str))
 800a392:	2909      	cmp	r1, #9
 800a394:	d819      	bhi.n	800a3ca <Lb_Util_atoi+0x5a>
 800a396:	4602      	mov	r2, r0
 800a398:	2000      	movs	r0, #0
		{
			i = i * 10 + (*(str)) - 48;
 800a39a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a39e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 
    if (*str == '-' || isdigit(*str)) 
    {
		if(*str == '-') j = 1, str++;

		while(isdigit(*str))
 800a3a2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		{
			i = i * 10 + (*(str)) - 48;
 800a3a6:	3830      	subs	r0, #48	; 0x30
 
    if (*str == '-' || isdigit(*str)) 
    {
		if(*str == '-') j = 1, str++;

		while(isdigit(*str))
 800a3a8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a3ac:	2909      	cmp	r1, #9
 800a3ae:	d9f4      	bls.n	800a39a <Lb_Util_atoi+0x2a>
		{
			i = i * 10 + (*(str)) - 48;
			str++;
		}
		if (j == 1) return -i;
 800a3b0:	b90c      	cbnz	r4, 800a3b6 <Lb_Util_atoi+0x46>
		else 		return i;
	}
	else
		return 0;
 800a3b2:	bc10      	pop	{r4}
 800a3b4:	4770      	bx	lr
		while(isdigit(*str))
		{
			i = i * 10 + (*(str)) - 48;
			str++;
		}
		if (j == 1) return -i;
 800a3b6:	4240      	negs	r0, r0
 800a3b8:	e7fb      	b.n	800a3b2 <Lb_Util_atoi+0x42>
		else 		return i;
	}
	else
		return 0;
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	e7f9      	b.n	800a3b2 <Lb_Util_atoi+0x42>
 800a3be:	7843      	ldrb	r3, [r0, #1]
{
	int i = 0, j = 0;
 
    if (*str == '-' || isdigit(*str)) 
    {
		if(*str == '-') j = 1, str++;
 800a3c0:	2401      	movs	r4, #1
 800a3c2:	1900      	adds	r0, r0, r4
 800a3c4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a3c8:	e7e3      	b.n	800a392 <Lb_Util_atoi+0x22>

		while(isdigit(*str))
 800a3ca:	2000      	movs	r0, #0
		{
			i = i * 10 + (*(str)) - 48;
			str++;
		}
		if (j == 1) return -i;
 800a3cc:	2c00      	cmp	r4, #0
 800a3ce:	d0f0      	beq.n	800a3b2 <Lb_Util_atoi+0x42>
 800a3d0:	e7f1      	b.n	800a3b6 <Lb_Util_atoi+0x46>
 800a3d2:	bf00      	nop

0800a3d4 <print_byte_out>:




void print_byte_out(unsigned int c)
{
 800a3d4:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 800a3d6:	4b09      	ldr	r3, [pc, #36]	; (800a3fc <print_byte_out+0x28>)




void print_byte_out(unsigned int c)
{
 800a3d8:	4605      	mov	r5, r0
	if( StrPrintMode == LB_PRINT_OUT_UART )
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	b153      	cbz	r3, 800a3f4 <print_byte_out+0x20>
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 800a3de:	4a08      	ldr	r2, [pc, #32]	; (800a400 <print_byte_out+0x2c>)
 800a3e0:	4908      	ldr	r1, [pc, #32]	; (800a404 <print_byte_out+0x30>)
 800a3e2:	6814      	ldr	r4, [r2, #0]
 800a3e4:	6808      	ldr	r0, [r1, #0]
 800a3e6:	1c63      	adds	r3, r4, #1
 800a3e8:	5505      	strb	r5, [r0, r4]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 800a3ea:	6809      	ldr	r1, [r1, #0]
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 800a3ec:	6013      	str	r3, [r2, #0]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	54ca      	strb	r2, [r1, r3]
 800a3f2:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 800a3f4:	4b04      	ldr	r3, [pc, #16]	; (800a408 <print_byte_out+0x34>)
 800a3f6:	4798      	blx	r3
 800a3f8:	bd38      	pop	{r3, r4, r5, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20000a08 	.word	0x20000a08
 800a400:	20000a04 	.word	0x20000a04
 800a404:	20001144 	.word	0x20001144
 800a408:	0800ae81 	.word	0x0800ae81

0800a40c <PrintString.part.0>:
                }
        }
        return;
}

void PrintString(char *fmt, char *s)
 800a40c:	b538      	push	{r3, r4, r5, lr}
 800a40e:	4604      	mov	r4, r0
{
        if (!fmt || !s) return;
        while (*s) print_byte_out(*s++);
 800a410:	7800      	ldrb	r0, [r0, #0]
 800a412:	b128      	cbz	r0, 800a420 <PrintString.part.0+0x14>
 800a414:	4d03      	ldr	r5, [pc, #12]	; (800a424 <PrintString.part.0+0x18>)
 800a416:	47a8      	blx	r5
 800a418:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800a41c:	2800      	cmp	r0, #0
 800a41e:	d1fa      	bne.n	800a416 <PrintString.part.0+0xa>
 800a420:	bd38      	pop	{r3, r4, r5, pc}
 800a422:	bf00      	nop
 800a424:	0800a3d5 	.word	0x0800a3d5

0800a428 <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 800a428:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;
 800a42a:	b1d0      	cbz	r0, 800a462 <DecToLong+0x3a>
 800a42c:	7803      	ldrb	r3, [r0, #0]
 800a42e:	b1d3      	cbz	r3, 800a466 <DecToLong+0x3e>


        for (*retval=0; *s; s++){
 800a430:	2300      	movs	r3, #0
 800a432:	600b      	str	r3, [r1, #0]
 800a434:	7802      	ldrb	r2, [r0, #0]
 800a436:	b19a      	cbz	r2, 800a460 <DecToLong+0x38>
                if (*s < '0' || *s > '9') return false;
 800a438:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 800a43c:	b2e2      	uxtb	r2, r4
 800a43e:	2a09      	cmp	r2, #9
 800a440:	d902      	bls.n	800a448 <DecToLong+0x20>
 800a442:	e012      	b.n	800a46a <DecToLong+0x42>
 800a444:	2d09      	cmp	r5, #9
 800a446:	d810      	bhi.n	800a46a <DecToLong+0x42>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 800a448:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a44c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800a450:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 800a452:	f810 2f01 	ldrb.w	r2, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 800a456:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 800a45a:	b2e5      	uxtb	r5, r4
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 800a45c:	2a00      	cmp	r2, #0
 800a45e:	d1f1      	bne.n	800a444 <DecToLong+0x1c>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 800a460:	2001      	movs	r0, #1
}        // DecToLong.
 800a462:	bc30      	pop	{r4, r5}
 800a464:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 800a466:	4618      	mov	r0, r3
 800a468:	e7fb      	b.n	800a462 <DecToLong+0x3a>


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 800a46a:	2000      	movs	r0, #0
 800a46c:	e7f9      	b.n	800a462 <DecToLong+0x3a>
 800a46e:	bf00      	nop

0800a470 <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 800a470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 800a474:	2300      	movs	r3, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 800a476:	b084      	sub	sp, #16
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
 800a478:	f1b1 0800 	subs.w	r8, r1, #0
void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 800a47c:	9300      	str	r3, [sp, #0]
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;
 800a47e:	bfa8      	it	ge
 800a480:	4699      	movge	r9, r3
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800a482:	7803      	ldrb	r3, [r0, #0]
        return;
}


void PrintDec(char *fmt, int l)
{
 800a484:	4682      	mov	sl, r0
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
		l = -l;	
 800a486:	bfbc      	itt	lt
 800a488:	f1c8 0800 	rsblt	r8, r8, #0
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
 800a48c:	f04f 0901 	movlt.w	r9, #1
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800a490:	2b00      	cmp	r3, #0
 800a492:	f000 80b9 	beq.w	800a608 <PrintDec+0x198>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 800a496:	2500      	movs	r5, #0


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 800a498:	2b64      	cmp	r3, #100	; 0x64
 800a49a:	d028      	beq.n	800a4ee <PrintDec+0x7e>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
 800a49c:	4e5b      	ldr	r6, [pc, #364]	; (800a60c <PrintDec+0x19c>)


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 800a49e:	462c      	mov	r4, r5
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800a4a0:	462f      	mov	r7, r5

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 800a4a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a4a6:	2a08      	cmp	r2, #8
 800a4a8:	d877      	bhi.n	800a59a <PrintDec+0x12a>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800a4aa:	f81a 2004 	ldrb.w	r2, [sl, r4]
 800a4ae:	eb0a 0104 	add.w	r1, sl, r4
 800a4b2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a4b6:	2b09      	cmp	r3, #9
 800a4b8:	a801      	add	r0, sp, #4
 800a4ba:	f04f 0300 	mov.w	r3, #0
 800a4be:	d809      	bhi.n	800a4d4 <PrintDec+0x64>
			{
				tol[j] = s[i++];
 800a4c0:	54c2      	strb	r2, [r0, r3]
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800a4c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
			{
				tol[j] = s[i++];
 800a4c6:	3401      	adds	r4, #1
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800a4c8:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	f1be 0f09 	cmp.w	lr, #9
 800a4d2:	d9f5      	bls.n	800a4c0 <PrintDec+0x50>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800a4d4:	aa04      	add	r2, sp, #16
 800a4d6:	18d3      	adds	r3, r2, r3
			i--;
			DecToLong(tol, &flagcnt);
 800a4d8:	4669      	mov	r1, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800a4da:	f803 7c0c 	strb.w	r7, [r3, #-12]
			i--;
 800a4de:	3c01      	subs	r4, #1
			DecToLong(tol, &flagcnt);
 800a4e0:	47b0      	blx	r6
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800a4e2:	3401      	adds	r4, #1
 800a4e4:	f81a 3004 	ldrb.w	r3, [sl, r4]
 800a4e8:	b10b      	cbz	r3, 800a4ee <PrintDec+0x7e>
	{
		if (c=='d') break;
 800a4ea:	2b64      	cmp	r3, #100	; 0x64
 800a4ec:	d1d9      	bne.n	800a4a2 <PrintDec+0x32>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 800a4ee:	f1b9 0f00 	cmp.w	r9, #0
 800a4f2:	f040 8085 	bne.w	800a600 <PrintDec+0x190>


	// 위의 flag에 따라 출력.
	if (flagcnt)
 800a4f6:	9800      	ldr	r0, [sp, #0]
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d052      	beq.n	800a5a2 <PrintDec+0x132>
	{
                if (flagcnt>9) flagcnt=9;
 800a4fc:	2809      	cmp	r0, #9
 800a4fe:	dd78      	ble.n	800a5f2 <PrintDec+0x182>
 800a500:	2009      	movs	r0, #9
 800a502:	9000      	str	r0, [sp, #0]
 800a504:	2206      	movs	r2, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 800a506:	2107      	movs	r1, #7
 800a508:	230a      	movs	r3, #10
                retval *= num;
 800a50a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
{
        long retval=num;
        cnt--;


        while (cnt--){
 800a50e:	3901      	subs	r1, #1
                retval *= num;
 800a510:	005b      	lsls	r3, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800a512:	1c4c      	adds	r4, r1, #1
 800a514:	d1f9      	bne.n	800a50a <PrintDec+0x9a>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 800a516:	fb98 f1f3 	sdiv	r1, r8, r3
{
        long retval=num;
        cnt--;


        while (cnt--){
 800a51a:	240a      	movs	r4, #10
 800a51c:	2802      	cmp	r0, #2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 800a51e:	fb03 8811 	mls	r8, r3, r1, r8
{
        long retval=num;
        cnt--;


        while (cnt--){
 800a522:	d005      	beq.n	800a530 <PrintDec+0xc0>
                retval *= num;
 800a524:	eb04 0484 	add.w	r4, r4, r4, lsl #2
{
        long retval=num;
        cnt--;


        while (cnt--){
 800a528:	3a01      	subs	r2, #1
                retval *= num;
 800a52a:	0064      	lsls	r4, r4, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800a52c:	1c53      	adds	r3, r2, #1
 800a52e:	d1f9      	bne.n	800a524 <PrintDec+0xb4>
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800a530:	f246 6767 	movw	r7, #26215	; 0x6667
 800a534:	4e36      	ldr	r6, [pc, #216]	; (800a610 <PrintDec+0x1a0>)
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 800a536:	f04f 0901 	mov.w	r9, #1
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800a53a:	f2c6 6766 	movt	r7, #26214	; 0x6666
 800a53e:	e00d      	b.n	800a55c <PrintDec+0xec>


                        if (result!=0 || divisor==1) leading_zero = false;


                        if (leading_zero==true){
 800a540:	f1b9 0f00 	cmp.w	r9, #0
 800a544:	d01c      	beq.n	800a580 <PrintDec+0x110>
                                if (flag0)        print_byte_out('0');
 800a546:	2030      	movs	r0, #48	; 0x30
 800a548:	b905      	cbnz	r5, 800a54c <PrintDec+0xdc>
                                else                print_byte_out(' ');
 800a54a:	2020      	movs	r0, #32
 800a54c:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800a54e:	fb87 2304 	smull	r2, r3, r7, r4
 800a552:	17e4      	asrs	r4, r4, #31
 800a554:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 800a558:	2c00      	cmp	r4, #0
 800a55a:	dd1b      	ble.n	800a594 <PrintDec+0x124>
                        result = remainder/divisor;
 800a55c:	fb98 f3f4 	sdiv	r3, r8, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800a560:	b2d8      	uxtb	r0, r3
 800a562:	3030      	adds	r0, #48	; 0x30
                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 800a564:	f1b4 0e01 	subs.w	lr, r4, #1
 800a568:	f1de 0200 	rsbs	r2, lr, #0
 800a56c:	eb52 020e 	adcs.w	r2, r2, lr
 800a570:	2b00      	cmp	r3, #0
 800a572:	bf18      	it	ne
 800a574:	f042 0201 	orrne.w	r2, r2, #1
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800a578:	fb04 8813 	mls	r8, r4, r3, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 800a57c:	2a00      	cmp	r2, #0
 800a57e:	d0df      	beq.n	800a540 <PrintDec+0xd0>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800a580:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800a582:	fb87 2304 	smull	r2, r3, r7, r4
 800a586:	17e4      	asrs	r4, r4, #31
 800a588:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 800a58c:	2c00      	cmp	r4, #0

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800a58e:	f04f 0900 	mov.w	r9, #0
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800a592:	dce3      	bgt.n	800a55c <PrintDec+0xec>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 800a594:	b004      	add	sp, #16
 800a596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 800a59a:	2b30      	cmp	r3, #48	; 0x30
 800a59c:	bf08      	it	eq
 800a59e:	2501      	moveq	r5, #1
 800a5a0:	e79f      	b.n	800a4e2 <PrintDec+0x72>

	if( sign == 1 ) print_byte_out('-');


	// 위의 flag에 따라 출력.
	if (flagcnt)
 800a5a2:	f44f 444a 	mov.w	r4, #51712	; 0xca00
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 800a5a6:	f246 6767 	movw	r7, #26215	; 0x6667
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800a5aa:	4e19      	ldr	r6, [pc, #100]	; (800a610 <PrintDec+0x1a0>)

	if( sign == 1 ) print_byte_out('-');


	// 위의 flag에 따라 출력.
	if (flagcnt)
 800a5ac:	250a      	movs	r5, #10
 800a5ae:	f6c3 349a 	movt	r4, #15258	; 0x3b9a
 800a5b2:	2101      	movs	r1, #1
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 800a5b4:	f2c6 6766 	movt	r7, #26214	; 0x6666
 800a5b8:	e008      	b.n	800a5cc <PrintDec+0x15c>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800a5ba:	47b0      	blx	r6
 800a5bc:	2100      	movs	r1, #0
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 800a5be:	fb87 2304 	smull	r2, r3, r7, r4
 800a5c2:	17e4      	asrs	r4, r4, #31
 800a5c4:	3d01      	subs	r5, #1
 800a5c6:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 800a5ca:	d0e3      	beq.n	800a594 <PrintDec+0x124>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 800a5cc:	1e60      	subs	r0, r4, #1
 800a5ce:	4242      	negs	r2, r0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800a5d0:	fb98 f3f4 	sdiv	r3, r8, r4
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 800a5d4:	4142      	adcs	r2, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	bf18      	it	ne
 800a5da:	f042 0201 	orrne.w	r2, r2, #1
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800a5de:	b2d8      	uxtb	r0, r3
 800a5e0:	3030      	adds	r0, #48	; 0x30
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800a5e2:	fb04 8813 	mls	r8, r4, r3, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 800a5e6:	2a00      	cmp	r2, #0
 800a5e8:	d1e7      	bne.n	800a5ba <PrintDec+0x14a>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800a5ea:	2900      	cmp	r1, #0
 800a5ec:	d0e5      	beq.n	800a5ba <PrintDec+0x14a>
 800a5ee:	2101      	movs	r1, #1
 800a5f0:	e7e5      	b.n	800a5be <PrintDec+0x14e>
}

int Power(int num, int cnt)
{
        long retval=num;
        cnt--;
 800a5f2:	1e43      	subs	r3, r0, #1


        while (cnt--){
 800a5f4:	1e81      	subs	r1, r0, #2
 800a5f6:	1ec2      	subs	r2, r0, #3
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d185      	bne.n	800a508 <PrintDec+0x98>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 800a5fc:	230a      	movs	r3, #10
 800a5fe:	e78a      	b.n	800a516 <PrintDec+0xa6>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 800a600:	202d      	movs	r0, #45	; 0x2d
 800a602:	4e03      	ldr	r6, [pc, #12]	; (800a610 <PrintDec+0x1a0>)
 800a604:	47b0      	blx	r6
 800a606:	e776      	b.n	800a4f6 <PrintDec+0x86>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 800a608:	461d      	mov	r5, r3
 800a60a:	e770      	b.n	800a4ee <PrintDec+0x7e>
 800a60c:	0800a429 	.word	0x0800a429
 800a610:	0800a3d5 	.word	0x0800a3d5

0800a614 <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800a614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 800a618:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800a61a:	b087      	sub	sp, #28
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 800a61c:	2600      	movs	r6, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800a61e:	4681      	mov	r9, r0
 800a620:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 800a622:	9602      	str	r6, [sp, #8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 8085 	beq.w	800a734 <PrintHex+0x120>
                if (c=='x') break;
 800a62a:	2b78      	cmp	r3, #120	; 0x78
 800a62c:	f000 8082 	beq.w	800a734 <PrintHex+0x120>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 800a630:	4f6d      	ldr	r7, [pc, #436]	; (800a7e8 <PrintHex+0x1d4>)
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
 800a632:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 800a634:	46b0      	mov	r8, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 800a636:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a63a:	2a08      	cmp	r2, #8
 800a63c:	d876      	bhi.n	800a72c <PrintHex+0x118>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800a63e:	f819 2004 	ldrb.w	r2, [r9, r4]
 800a642:	eb09 0104 	add.w	r1, r9, r4
 800a646:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a64a:	2b09      	cmp	r3, #9
 800a64c:	a803      	add	r0, sp, #12
 800a64e:	f04f 0300 	mov.w	r3, #0
 800a652:	d808      	bhi.n	800a666 <PrintHex+0x52>
                                tol[j] = s[i++];
 800a654:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800a656:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                                tol[j] = s[i++];
 800a65a:	3401      	adds	r4, #1

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800a65c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a660:	3301      	adds	r3, #1
 800a662:	2d09      	cmp	r5, #9
 800a664:	d9f6      	bls.n	800a654 <PrintHex+0x40>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 800a666:	aa06      	add	r2, sp, #24
 800a668:	18d3      	adds	r3, r2, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 800a66a:	a902      	add	r1, sp, #8
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 800a66c:	f803 8c0c 	strb.w	r8, [r3, #-12]
                        i--;
 800a670:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 800a672:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 800a674:	3401      	adds	r4, #1
 800a676:	f819 3004 	ldrb.w	r3, [r9, r4]
 800a67a:	b10b      	cbz	r3, 800a680 <PrintHex+0x6c>
                if (c=='x') break;
 800a67c:	2b78      	cmp	r3, #120	; 0x78
 800a67e:	d1da      	bne.n	800a636 <PrintHex+0x22>
 800a680:	9a01      	ldr	r2, [sp, #4]
 800a682:	9b02      	ldr	r3, [sp, #8]
 800a684:	ba12      	rev	r2, r2
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 800a686:	9201      	str	r2, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d056      	beq.n	800a73a <PrintHex+0x126>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 800a68c:	07da      	lsls	r2, r3, #31
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 800a68e:	bf58      	it	pl
 800a690:	f04f 0801 	movpl.w	r8, #1
        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 800a694:	d521      	bpl.n	800a6da <PrintHex+0xc6>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 800a696:	43db      	mvns	r3, r3
 800a698:	3308      	adds	r3, #8
 800a69a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a69e:	aa06      	add	r2, sp, #24
 800a6a0:	eb02 0363 	add.w	r3, r2, r3, asr #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 800a6a4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
                        if (lHex!=0) leading_zero=false;
 800a6a8:	f013 030f 	ands.w	r3, r3, #15
 800a6ac:	d00b      	beq.n	800a6c6 <PrintHex+0xb2>
                        if (lHex<10) lHex+='0';
 800a6ae:	2b09      	cmp	r3, #9
 800a6b0:	bf98      	it	ls
 800a6b2:	f103 0030 	addls.w	r0, r3, #48	; 0x30
 800a6b6:	d901      	bls.n	800a6bc <PrintHex+0xa8>
                        else         lHex+='A'-10;
 800a6b8:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 800a6bc:	4f4b      	ldr	r7, [pc, #300]	; (800a7ec <PrintHex+0x1d8>)
 800a6be:	47b8      	blx	r7
 800a6c0:	f04f 0800 	mov.w	r8, #0
 800a6c4:	e006      	b.n	800a6d4 <PrintHex+0xc0>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 800a6c6:	2e00      	cmp	r6, #0
 800a6c8:	d07c      	beq.n	800a7c4 <PrintHex+0x1b0>
 800a6ca:	2030      	movs	r0, #48	; 0x30
 800a6cc:	4f47      	ldr	r7, [pc, #284]	; (800a7ec <PrintHex+0x1d8>)
 800a6ce:	47b8      	blx	r7
 800a6d0:	f04f 0801 	mov.w	r8, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 800a6d4:	9b02      	ldr	r3, [sp, #8]
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	9302      	str	r3, [sp, #8]
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 800a6da:	f1c3 0308 	rsb	r3, r3, #8
 800a6de:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a6e2:	105c      	asrs	r4, r3, #1
 800a6e4:	2c03      	cmp	r4, #3
 800a6e6:	dc1e      	bgt.n	800a726 <PrintHex+0x112>
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800a6e8:	ab01      	add	r3, sp, #4
 800a6ea:	4f40      	ldr	r7, [pc, #256]	; (800a7ec <PrintHex+0x1d8>)
 800a6ec:	191c      	adds	r4, r3, r4
 800a6ee:	f10d 0908 	add.w	r9, sp, #8
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 800a6f2:	f814 3b01 	ldrb.w	r3, [r4], #1
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800a6f6:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800a6fa:	091b      	lsrs	r3, r3, #4
 800a6fc:	d04d      	beq.n	800a79a <PrintHex+0x186>
                        if (uHex<10) uHex+='0';
 800a6fe:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 800a700:	bf88      	it	hi
 800a702:	f103 0037 	addhi.w	r0, r3, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800a706:	d969      	bls.n	800a7dc <PrintHex+0x1c8>
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 800a708:	47b8      	blx	r7
 800a70a:	f04f 0800 	mov.w	r8, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800a70e:	2d00      	cmp	r5, #0
 800a710:	d04b      	beq.n	800a7aa <PrintHex+0x196>
                        if (lHex<10) lHex+='0';
 800a712:	2d09      	cmp	r5, #9
                        else         lHex+='A'-10;
 800a714:	bf88      	it	hi
 800a716:	f105 0037 	addhi.w	r0, r5, #55	; 0x37
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800a71a:	d959      	bls.n	800a7d0 <PrintHex+0x1bc>
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 800a71c:	47b8      	blx	r7
 800a71e:	f04f 0800 	mov.w	r8, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 800a722:	454c      	cmp	r4, r9
 800a724:	d1e5      	bne.n	800a6f2 <PrintHex+0xde>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
                }
        }
        return;
}
 800a726:	b007      	add	sp, #28
 800a728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 800a72c:	2b30      	cmp	r3, #48	; 0x30
 800a72e:	bf08      	it	eq
 800a730:	2601      	moveq	r6, #1
 800a732:	e79f      	b.n	800a674 <PrintHex+0x60>
 800a734:	9b01      	ldr	r3, [sp, #4]
 800a736:	ba1b      	rev	r3, r3
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 800a738:	9301      	str	r3, [sp, #4]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800a73a:	f10d 0603 	add.w	r6, sp, #3
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 800a73e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 800a742:	2201      	movs	r2, #1
 800a744:	2400      	movs	r4, #0
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800a746:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800a74a:	091b      	lsrs	r3, r3, #4
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 800a74c:	4f27      	ldr	r7, [pc, #156]	; (800a7ec <PrintHex+0x1d8>)
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800a74e:	d01e      	beq.n	800a78e <PrintHex+0x17a>
                        if (uHex<10) uHex+='0';
 800a750:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 800a752:	bf88      	it	hi
 800a754:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800a758:	d93d      	bls.n	800a7d6 <PrintHex+0x1c2>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 800a75a:	47b8      	blx	r7
 800a75c:	2200      	movs	r2, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 800a75e:	1c2b      	adds	r3, r5, #0
 800a760:	bf18      	it	ne
 800a762:	2301      	movne	r3, #1
 800a764:	2c03      	cmp	r4, #3
 800a766:	bf08      	it	eq
 800a768:	f043 0301 	orreq.w	r3, r3, #1
 800a76c:	b193      	cbz	r3, 800a794 <PrintHex+0x180>
                        if (lHex<10) lHex+='0';
 800a76e:	2d09      	cmp	r5, #9
                        else         lHex+='A'-10;
 800a770:	bf88      	it	hi
 800a772:	f105 0037 	addhi.w	r0, r5, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800a776:	d934      	bls.n	800a7e2 <PrintHex+0x1ce>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 800a778:	47b8      	blx	r7
 800a77a:	2200      	movs	r2, #0
                        }
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
 800a77c:	3401      	adds	r4, #1
 800a77e:	2c04      	cmp	r4, #4
 800a780:	d0d1      	beq.n	800a726 <PrintHex+0x112>
                        c = s[i];
 800a782:	f816 3f01 	ldrb.w	r3, [r6, #1]!
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800a786:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800a78a:	091b      	lsrs	r3, r3, #4
 800a78c:	d1e0      	bne.n	800a750 <PrintHex+0x13c>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 800a78e:	b312      	cbz	r2, 800a7d6 <PrintHex+0x1c2>
 800a790:	2201      	movs	r2, #1
 800a792:	e7e4      	b.n	800a75e <PrintHex+0x14a>
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 800a794:	b32a      	cbz	r2, 800a7e2 <PrintHex+0x1ce>
 800a796:	2201      	movs	r2, #1
 800a798:	e7f0      	b.n	800a77c <PrintHex+0x168>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 800a79a:	f1b8 0f00 	cmp.w	r8, #0
 800a79e:	d01d      	beq.n	800a7dc <PrintHex+0x1c8>
                                if (flag0) print_byte_out('0');
 800a7a0:	b156      	cbz	r6, 800a7b8 <PrintHex+0x1a4>
 800a7a2:	2030      	movs	r0, #48	; 0x30
 800a7a4:	47b8      	blx	r7
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800a7a6:	2d00      	cmp	r5, #0
 800a7a8:	d1b3      	bne.n	800a712 <PrintHex+0xfe>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 800a7aa:	f1b8 0f00 	cmp.w	r8, #0
 800a7ae:	d00f      	beq.n	800a7d0 <PrintHex+0x1bc>
                                if (flag0) print_byte_out('0');
 800a7b0:	b12e      	cbz	r6, 800a7be <PrintHex+0x1aa>
 800a7b2:	2030      	movs	r0, #48	; 0x30
 800a7b4:	47b8      	blx	r7
 800a7b6:	e7b4      	b.n	800a722 <PrintHex+0x10e>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 800a7b8:	2020      	movs	r0, #32
 800a7ba:	47b8      	blx	r7
 800a7bc:	e7a7      	b.n	800a70e <PrintHex+0xfa>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 800a7be:	2020      	movs	r0, #32
 800a7c0:	47b8      	blx	r7
 800a7c2:	e7ae      	b.n	800a722 <PrintHex+0x10e>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 800a7c4:	2020      	movs	r0, #32
 800a7c6:	4f09      	ldr	r7, [pc, #36]	; (800a7ec <PrintHex+0x1d8>)
 800a7c8:	47b8      	blx	r7
 800a7ca:	f04f 0801 	mov.w	r8, #1
 800a7ce:	e781      	b.n	800a6d4 <PrintHex+0xc0>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800a7d0:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800a7d4:	e7a2      	b.n	800a71c <PrintHex+0x108>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800a7d6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a7da:	e7be      	b.n	800a75a <PrintHex+0x146>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800a7dc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a7e0:	e792      	b.n	800a708 <PrintHex+0xf4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800a7e2:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800a7e6:	e7c7      	b.n	800a778 <PrintHex+0x164>
 800a7e8:	0800a429 	.word	0x0800a429
 800a7ec:	0800a3d5 	.word	0x0800a3d5

0800a7f0 <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 800a7f0:	b40f      	push	{r0, r1, r2, r3}
 800a7f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f6:	b084      	sub	sp, #16
	int		i;
	va_list args;
	char	*s=fmt;
 800a7f8:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 800a7fc:	4b34      	ldr	r3, [pc, #208]	; (800a8d0 <Lb_printf+0xe0>)
 800a7fe:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 800a800:	f85a 4b04 	ldr.w	r4, [sl], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800a804:	4d33      	ldr	r5, [pc, #204]	; (800a8d4 <Lb_printf+0xe4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800a806:	4f34      	ldr	r7, [pc, #208]	; (800a8d8 <Lb_printf+0xe8>)
 800a808:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800a8e0 <Lb_printf+0xf0>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800a80c:	4e33      	ldr	r6, [pc, #204]	; (800a8dc <Lb_printf+0xec>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 800a80e:	701a      	strb	r2, [r3, #0]
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800a810:	f10d 0904 	add.w	r9, sp, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 800a814:	7820      	ldrb	r0, [r4, #0]
 800a816:	b350      	cbz	r0, 800a86e <Lb_printf+0x7e>
	{
		if (*s=='%')
 800a818:	2825      	cmp	r0, #37	; 0x25
 800a81a:	d12d      	bne.n	800a878 <Lb_printf+0x88>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 800a81c:	f88d 0004 	strb.w	r0, [sp, #4]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 800a820:	1c62      	adds	r2, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800a822:	2101      	movs	r1, #1
 800a824:	4694      	mov	ip, r2
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800a826:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a82a:	f1a3 0463 	sub.w	r4, r3, #99	; 0x63
 800a82e:	2b78      	cmp	r3, #120	; 0x78
 800a830:	bf18      	it	ne
 800a832:	2c01      	cmpne	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800a834:	4610      	mov	r0, r2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800a836:	d922      	bls.n	800a87e <Lb_printf+0x8e>
 800a838:	2b73      	cmp	r3, #115	; 0x73
 800a83a:	d020      	beq.n	800a87e <Lb_printf+0x8e>
 800a83c:	2b25      	cmp	r3, #37	; 0x25
 800a83e:	d01e      	beq.n	800a87e <Lb_printf+0x8e>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800a840:	f801 3009 	strb.w	r3, [r1, r9]
 800a844:	3101      	adds	r1, #1
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800a846:	290a      	cmp	r1, #10
 800a848:	d1ec      	bne.n	800a824 <Lb_printf+0x34>
 800a84a:	f89c 3001 	ldrb.w	r3, [ip, #1]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800a84e:	1c44      	adds	r4, r0, #1
 800a850:	2b64      	cmp	r3, #100	; 0x64
 800a852:	d01f      	beq.n	800a894 <Lb_printf+0xa4>
 800a854:	d825      	bhi.n	800a8a2 <Lb_printf+0xb2>
 800a856:	2b25      	cmp	r3, #37	; 0x25
 800a858:	d036      	beq.n	800a8c8 <Lb_printf+0xd8>
 800a85a:	2b63      	cmp	r3, #99	; 0x63
 800a85c:	d1da      	bne.n	800a814 <Lb_printf+0x24>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800a85e:	f89a 0000 	ldrb.w	r0, [sl]
 800a862:	47a8      	blx	r5
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 800a864:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 800a866:	f10a 0a04 	add.w	sl, sl, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d1d4      	bne.n	800a818 <Lb_printf+0x28>
			s++;
		}
	}
	va_end(args);
	return;
}
 800a86e:	b004      	add	sp, #16
 800a870:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a874:	b004      	add	sp, #16
 800a876:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800a878:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 800a87a:	3401      	adds	r4, #1
 800a87c:	e7ca      	b.n	800a814 <Lb_printf+0x24>
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800a87e:	aa04      	add	r2, sp, #16
					format[i] = '\0';
                	break;
 800a880:	4660      	mov	r0, ip
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800a882:	1851      	adds	r1, r2, r1
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800a884:	1c44      	adds	r4, r0, #1
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
					format[i] = '\0';
 800a886:	2200      	movs	r2, #0
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800a888:	2b64      	cmp	r3, #100	; 0x64
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800a88a:	f801 3c0c 	strb.w	r3, [r1, #-12]
					format[i] = '\0';
 800a88e:	f801 2c0b 	strb.w	r2, [r1, #-11]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800a892:	d1df      	bne.n	800a854 <Lb_printf+0x64>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800a894:	f8da 1000 	ldr.w	r1, [sl]
 800a898:	4648      	mov	r0, r9
 800a89a:	f10a 0a04 	add.w	sl, sl, #4
 800a89e:	47b8      	blx	r7
					break;
 800a8a0:	e7b8      	b.n	800a814 <Lb_printf+0x24>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800a8a2:	2b73      	cmp	r3, #115	; 0x73
 800a8a4:	d008      	beq.n	800a8b8 <Lb_printf+0xc8>
 800a8a6:	2b78      	cmp	r3, #120	; 0x78
 800a8a8:	d1b4      	bne.n	800a814 <Lb_printf+0x24>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800a8aa:	f8da 1000 	ldr.w	r1, [sl]
 800a8ae:	4648      	mov	r0, r9
 800a8b0:	f10a 0a04 	add.w	sl, sl, #4
 800a8b4:	47b0      	blx	r6
					break;
 800a8b6:	e7ad      	b.n	800a814 <Lb_printf+0x24>
				case 's' :
					PrintString(format, va_arg(args, char *));
 800a8b8:	f8da 0000 	ldr.w	r0, [sl]
 800a8bc:	f10a 0a04 	add.w	sl, sl, #4
        return;
}

void PrintString(char *fmt, char *s)
{
        if (!fmt || !s) return;
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d0a7      	beq.n	800a814 <Lb_printf+0x24>
 800a8c4:	47c0      	blx	r8
 800a8c6:	e7a5      	b.n	800a814 <Lb_printf+0x24>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	47a8      	blx	r5
 800a8cc:	e7a2      	b.n	800a814 <Lb_printf+0x24>
 800a8ce:	bf00      	nop
 800a8d0:	20000a08 	.word	0x20000a08
 800a8d4:	0800a3d5 	.word	0x0800a3d5
 800a8d8:	0800a471 	.word	0x0800a471
 800a8dc:	0800a615 	.word	0x0800a615
 800a8e0:	0800a40d 	.word	0x0800a40d

0800a8e4 <Lb_sprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_sprintf( char *pStr, char *fmt, ... )
{
 800a8e4:	b40e      	push	{r1, r2, r3}
 800a8e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	va_list args;
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 800a8ea:	4b38      	ldr	r3, [pc, #224]	; (800a9cc <Lb_sprintf+0xe8>)
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	701a      	strb	r2, [r3, #0]
	pStrPrintBuf = pStr;
 800a8f0:	4b37      	ldr	r3, [pc, #220]	; (800a9d0 <Lb_sprintf+0xec>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_sprintf( char *pStr, char *fmt, ... )
{
 800a8f2:	b085      	sub	sp, #20
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	va_list args;
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 800a8f4:	6018      	str	r0, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Lb_sprintf( char *pStr, char *fmt, ... )
{
	int		i;
	char	*s=fmt;
 800a8f6:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	va_list args;
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 800a8fa:	4b36      	ldr	r3, [pc, #216]	; (800a9d4 <Lb_sprintf+0xf0>)
 800a8fc:	2200      	movs	r2, #0
     RET     : void
---------------------------------------------------------------------------*/
void Lb_sprintf( char *pStr, char *fmt, ... )
{
	int		i;
	char	*s=fmt;
 800a8fe:	f85a 4b04 	ldr.w	r4, [sl], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800a902:	4d35      	ldr	r5, [pc, #212]	; (800a9d8 <Lb_sprintf+0xf4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800a904:	4f35      	ldr	r7, [pc, #212]	; (800a9dc <Lb_sprintf+0xf8>)
 800a906:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800a9e4 <Lb_sprintf+0x100>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800a90a:	4e35      	ldr	r6, [pc, #212]	; (800a9e0 <Lb_sprintf+0xfc>)
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	va_list args;
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 800a90c:	601a      	str	r2, [r3, #0]
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800a90e:	f10d 0904 	add.w	r9, sp, #4
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	va_start(args, fmt);
	
	while (*s)
 800a912:	7820      	ldrb	r0, [r4, #0]
 800a914:	b350      	cbz	r0, 800a96c <Lb_sprintf+0x88>
	{
		if (*s=='%')
 800a916:	2825      	cmp	r0, #37	; 0x25
 800a918:	d12d      	bne.n	800a976 <Lb_sprintf+0x92>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 800a91a:	f88d 0004 	strb.w	r0, [sp, #4]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 800a91e:	1c62      	adds	r2, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800a920:	2101      	movs	r1, #1
 800a922:	4694      	mov	ip, r2
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800a924:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a928:	f1a3 0463 	sub.w	r4, r3, #99	; 0x63
 800a92c:	2b78      	cmp	r3, #120	; 0x78
 800a92e:	bf18      	it	ne
 800a930:	2c01      	cmpne	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800a932:	4610      	mov	r0, r2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800a934:	d922      	bls.n	800a97c <Lb_sprintf+0x98>
 800a936:	2b73      	cmp	r3, #115	; 0x73
 800a938:	d020      	beq.n	800a97c <Lb_sprintf+0x98>
 800a93a:	2b25      	cmp	r3, #37	; 0x25
 800a93c:	d01e      	beq.n	800a97c <Lb_sprintf+0x98>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800a93e:	f801 3009 	strb.w	r3, [r1, r9]
 800a942:	3101      	adds	r1, #1
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800a944:	290a      	cmp	r1, #10
 800a946:	d1ec      	bne.n	800a922 <Lb_sprintf+0x3e>
 800a948:	f89c 3001 	ldrb.w	r3, [ip, #1]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800a94c:	1c44      	adds	r4, r0, #1
 800a94e:	2b64      	cmp	r3, #100	; 0x64
 800a950:	d01f      	beq.n	800a992 <Lb_sprintf+0xae>
 800a952:	d825      	bhi.n	800a9a0 <Lb_sprintf+0xbc>
 800a954:	2b25      	cmp	r3, #37	; 0x25
 800a956:	d036      	beq.n	800a9c6 <Lb_sprintf+0xe2>
 800a958:	2b63      	cmp	r3, #99	; 0x63
 800a95a:	d1da      	bne.n	800a912 <Lb_sprintf+0x2e>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800a95c:	f89a 0000 	ldrb.w	r0, [sl]
 800a960:	47a8      	blx	r5
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	va_start(args, fmt);
	
	while (*s)
 800a962:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 800a964:	f10a 0a04 	add.w	sl, sl, #4
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	va_start(args, fmt);
	
	while (*s)
 800a968:	2800      	cmp	r0, #0
 800a96a:	d1d4      	bne.n	800a916 <Lb_sprintf+0x32>
	}
	
	va_end(args);
	
	return;
}
 800a96c:	b005      	add	sp, #20
 800a96e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a972:	b003      	add	sp, #12
 800a974:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800a976:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 800a978:	3401      	adds	r4, #1
 800a97a:	e7ca      	b.n	800a912 <Lb_sprintf+0x2e>
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800a97c:	aa04      	add	r2, sp, #16
					format[i] = '\0';
                	break;
 800a97e:	4660      	mov	r0, ip
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800a980:	1851      	adds	r1, r2, r1
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800a982:	1c44      	adds	r4, r0, #1
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
					format[i] = '\0';
 800a984:	2200      	movs	r2, #0
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800a986:	2b64      	cmp	r3, #100	; 0x64
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800a988:	f801 3c0c 	strb.w	r3, [r1, #-12]
					format[i] = '\0';
 800a98c:	f801 2c0b 	strb.w	r2, [r1, #-11]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800a990:	d1df      	bne.n	800a952 <Lb_sprintf+0x6e>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800a992:	f8da 1000 	ldr.w	r1, [sl]
 800a996:	4648      	mov	r0, r9
 800a998:	f10a 0a04 	add.w	sl, sl, #4
 800a99c:	47b8      	blx	r7
					break;
 800a99e:	e7b8      	b.n	800a912 <Lb_sprintf+0x2e>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800a9a0:	2b73      	cmp	r3, #115	; 0x73
 800a9a2:	d008      	beq.n	800a9b6 <Lb_sprintf+0xd2>
 800a9a4:	2b78      	cmp	r3, #120	; 0x78
 800a9a6:	d1b4      	bne.n	800a912 <Lb_sprintf+0x2e>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800a9a8:	f8da 1000 	ldr.w	r1, [sl]
 800a9ac:	4648      	mov	r0, r9
 800a9ae:	f10a 0a04 	add.w	sl, sl, #4
 800a9b2:	47b0      	blx	r6
					break;
 800a9b4:	e7ad      	b.n	800a912 <Lb_sprintf+0x2e>
				case 's' :
					PrintString(format, va_arg(args, char *));
 800a9b6:	f8da 0000 	ldr.w	r0, [sl]
 800a9ba:	f10a 0a04 	add.w	sl, sl, #4
        return;
}

void PrintString(char *fmt, char *s)
{
        if (!fmt || !s) return;
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d0a7      	beq.n	800a912 <Lb_sprintf+0x2e>
 800a9c2:	47c0      	blx	r8
 800a9c4:	e7a5      	b.n	800a912 <Lb_sprintf+0x2e>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	47a8      	blx	r5
 800a9ca:	e7a2      	b.n	800a912 <Lb_sprintf+0x2e>
 800a9cc:	20000a08 	.word	0x20000a08
 800a9d0:	20001144 	.word	0x20001144
 800a9d4:	20000a04 	.word	0x20000a04
 800a9d8:	0800a3d5 	.word	0x0800a3d5
 800a9dc:	0800a471 	.word	0x0800a471
 800a9e0:	0800a615 	.word	0x0800a615
 800a9e4:	0800a40d 	.word	0x0800a40d

0800a9e8 <Lb_vsprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 800a9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 800a9ec:	4b33      	ldr	r3, [pc, #204]	; (800aabc <Lb_vsprintf+0xd4>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 800a9ee:	4615      	mov	r5, r2
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	701a      	strb	r2, [r3, #0]
	pStrPrintBuf = pStr;
 800a9f4:	4b32      	ldr	r3, [pc, #200]	; (800aac0 <Lb_vsprintf+0xd8>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 800a9f6:	b084      	sub	sp, #16
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 800a9f8:	6018      	str	r0, [r3, #0]
	StrPrintBufIndex = 0;
 800a9fa:	4b32      	ldr	r3, [pc, #200]	; (800aac4 <Lb_vsprintf+0xdc>)
 800a9fc:	2200      	movs	r2, #0



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800a9fe:	4e32      	ldr	r6, [pc, #200]	; (800aac8 <Lb_vsprintf+0xe0>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800aa00:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800aad0 <Lb_vsprintf+0xe8>
					break;
				case 'X' :
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800aa04:	4f31      	ldr	r7, [pc, #196]	; (800aacc <Lb_vsprintf+0xe4>)
 800aa06:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800aad4 <Lb_vsprintf+0xec>
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 800aa0a:	601a      	str	r2, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
	int		i;
	char	*s=fmt;
 800aa0c:	460c      	mov	r4, r1
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800aa0e:	f10d 0a04 	add.w	sl, sp, #4
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 800aa12:	7820      	ldrb	r0, [r4, #0]
 800aa14:	b340      	cbz	r0, 800aa68 <Lb_vsprintf+0x80>
	{
		if (*s=='%')
 800aa16:	2825      	cmp	r0, #37	; 0x25
 800aa18:	d129      	bne.n	800aa6e <Lb_vsprintf+0x86>
		{
			s++;
 800aa1a:	1c61      	adds	r1, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 800aa1c:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
 800aa20:	2401      	movs	r4, #1
 800aa22:	4608      	mov	r0, r1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800aa24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa28:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800aa2c:	2b78      	cmp	r3, #120	; 0x78
 800aa2e:	bf18      	it	ne
 800aa30:	2a01      	cmpne	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800aa32:	460a      	mov	r2, r1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800aa34:	d91e      	bls.n	800aa74 <Lb_vsprintf+0x8c>
 800aa36:	2b73      	cmp	r3, #115	; 0x73
 800aa38:	d01c      	beq.n	800aa74 <Lb_vsprintf+0x8c>
 800aa3a:	2b25      	cmp	r3, #37	; 0x25
 800aa3c:	d01a      	beq.n	800aa74 <Lb_vsprintf+0x8c>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800aa3e:	f804 300a 	strb.w	r3, [r4, sl]
 800aa42:	3401      	adds	r4, #1
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800aa44:	2c0a      	cmp	r4, #10
 800aa46:	d1ec      	bne.n	800aa22 <Lb_vsprintf+0x3a>
 800aa48:	7843      	ldrb	r3, [r0, #1]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800aa4a:	1c54      	adds	r4, r2, #1
 800aa4c:	2b64      	cmp	r3, #100	; 0x64
 800aa4e:	d01c      	beq.n	800aa8a <Lb_vsprintf+0xa2>
 800aa50:	d820      	bhi.n	800aa94 <Lb_vsprintf+0xac>
 800aa52:	2b58      	cmp	r3, #88	; 0x58
 800aa54:	d022      	beq.n	800aa9c <Lb_vsprintf+0xb4>
 800aa56:	2b63      	cmp	r3, #99	; 0x63
 800aa58:	d02b      	beq.n	800aab2 <Lb_vsprintf+0xca>
 800aa5a:	2b25      	cmp	r3, #37	; 0x25
 800aa5c:	d1d9      	bne.n	800aa12 <Lb_vsprintf+0x2a>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800aa5e:	4618      	mov	r0, r3
 800aa60:	47b0      	blx	r6
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 800aa62:	7820      	ldrb	r0, [r4, #0]
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d1d6      	bne.n	800aa16 <Lb_vsprintf+0x2e>
			s++;
		}
	}
	
	return;
}
 800aa68:	b004      	add	sp, #16
 800aa6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800aa6e:	47b0      	blx	r6
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 800aa70:	3401      	adds	r4, #1
 800aa72:	e7ce      	b.n	800aa12 <Lb_vsprintf+0x2a>
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800aa74:	aa04      	add	r2, sp, #16
 800aa76:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f804 2c0b 	strb.w	r2, [r4, #-11]
                	break;
 800aa7e:	4602      	mov	r2, r0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800aa80:	f804 3c0c 	strb.w	r3, [r4, #-12]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800aa84:	1c54      	adds	r4, r2, #1
 800aa86:	2b64      	cmp	r3, #100	; 0x64
 800aa88:	d1e2      	bne.n	800aa50 <Lb_vsprintf+0x68>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800aa8a:	6829      	ldr	r1, [r5, #0]
 800aa8c:	4650      	mov	r0, sl
 800aa8e:	3504      	adds	r5, #4
 800aa90:	47c0      	blx	r8
					break;
 800aa92:	e7be      	b.n	800aa12 <Lb_vsprintf+0x2a>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800aa94:	2b73      	cmp	r3, #115	; 0x73
 800aa96:	d006      	beq.n	800aaa6 <Lb_vsprintf+0xbe>
 800aa98:	2b78      	cmp	r3, #120	; 0x78
 800aa9a:	d1ba      	bne.n	800aa12 <Lb_vsprintf+0x2a>
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'X' :
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800aa9c:	6829      	ldr	r1, [r5, #0]
 800aa9e:	4650      	mov	r0, sl
 800aaa0:	3504      	adds	r5, #4
 800aaa2:	47b8      	blx	r7
					break;
 800aaa4:	e7b5      	b.n	800aa12 <Lb_vsprintf+0x2a>
				case 's' :
					PrintString(format, va_arg(args, char *));
 800aaa6:	6828      	ldr	r0, [r5, #0]
 800aaa8:	3504      	adds	r5, #4
        return;
}

void PrintString(char *fmt, char *s)
{
        if (!fmt || !s) return;
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d0b1      	beq.n	800aa12 <Lb_vsprintf+0x2a>
 800aaae:	47c8      	blx	r9
 800aab0:	e7af      	b.n	800aa12 <Lb_vsprintf+0x2a>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800aab2:	7828      	ldrb	r0, [r5, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 800aab4:	3504      	adds	r5, #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800aab6:	47b0      	blx	r6
 800aab8:	e7ab      	b.n	800aa12 <Lb_vsprintf+0x2a>
 800aaba:	bf00      	nop
 800aabc:	20000a08 	.word	0x20000a08
 800aac0:	20001144 	.word	0x20001144
 800aac4:	20000a04 	.word	0x20000a04
 800aac8:	0800a3d5 	.word	0x0800a3d5
 800aacc:	0800a615 	.word	0x0800a615
 800aad0:	0800a471 	.word	0x0800a471
 800aad4:	0800a40d 	.word	0x0800a40d

0800aad8 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 800aad8:	4668      	mov	r0, sp
 800aada:	f020 0107 	bic.w	r1, r0, #7
 800aade:	468d      	mov	sp, r1
 800aae0:	b519      	push	{r0, r3, r4, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800aae2:	4923      	ldr	r1, [pc, #140]	; (800ab70 <zero_loop+0x66>)
 800aae4:	4b23      	ldr	r3, [pc, #140]	; (800ab74 <zero_loop+0x6a>)
 800aae6:	4299      	cmp	r1, r3
 800aae8:	d20b      	bcs.n	800ab02 <Hw_StartUp_Init+0x2a>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 800aaea:	43c8      	mvns	r0, r1
 800aaec:	18c0      	adds	r0, r0, r3
 800aaee:	f020 0003 	bic.w	r0, r0, #3
 800aaf2:	4c21      	ldr	r4, [pc, #132]	; (800ab78 <zero_loop+0x6e>)
 800aaf4:	3004      	adds	r0, #4
 800aaf6:	2300      	movs	r3, #0
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 800aaf8:	591a      	ldr	r2, [r3, r4]
 800aafa:	505a      	str	r2, [r3, r1]
 800aafc:	3304      	adds	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800aafe:	4283      	cmp	r3, r0
 800ab00:	d1fa      	bne.n	800aaf8 <Hw_StartUp_Init+0x20>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 800ab02:	481f      	ldr	r0, [pc, #124]	; (800ab80 <zero_loop+0x76>)
 800ab04:	491f      	ldr	r1, [pc, #124]	; (800ab84 <zero_loop+0x7a>)
 800ab06:	f04f 0200 	mov.w	r2, #0

0800ab0a <zero_loop>:
 800ab0a:	4288      	cmp	r0, r1
 800ab0c:	bfb8      	it	lt
 800ab0e:	f840 2b04 	strlt.w	r2, [r0], #4
 800ab12:	f6ff affa 	blt.w	800ab0a <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 800ab16:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800ab1a:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800ab1e:	6822      	ldr	r2, [r4, #0]
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
	
	u32 TimeOutCnt  = 0;
 800ab20:	2300      	movs	r3, #0
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 800ab22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ab26:	6022      	str	r2, [r4, #0]
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 800ab28:	f240 40ff 	movw	r0, #1279	; 0x4ff
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 800ab2c:	6821      	ldr	r1, [r4, #0]
		TimeOutCnt++;		
 800ab2e:	3301      	adds	r3, #1
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 800ab30:	4283      	cmp	r3, r0
 800ab32:	f481 3100 	eor.w	r1, r1, #131072	; 0x20000
 800ab36:	bf8c      	ite	hi
 800ab38:	2200      	movhi	r2, #0
 800ab3a:	2201      	movls	r2, #1
 800ab3c:	ea12 4251 	ands.w	r2, r2, r1, lsr #17
 800ab40:	d1f4      	bne.n	800ab2c <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 800ab42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	f042 0210 	orr.w	r2, r2, #16
 800ab50:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	f022 0203 	bic.w	r2, r2, #3
 800ab58:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	f042 0202 	orr.w	r2, r2, #2
 800ab60:	601a      	str	r2, [r3, #0]


    main();
 800ab62:	4b06      	ldr	r3, [pc, #24]	; (800ab7c <zero_loop+0x72>)
 800ab64:	4798      	blx	r3

}
 800ab66:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
 800ab6a:	4685      	mov	sp, r0
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	20000000 	.word	0x20000000
 800ab74:	200009d0 	.word	0x200009d0
 800ab78:	0800dfa4 	.word	0x0800dfa4
 800ab7c:	08009ae9 	.word	0x08009ae9
 800ab80:	20000a00 	.word	0x20000a00
 800ab84:	20001f50 	.word	0x20001f50

0800ab88 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 800ab88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 800ab8a:	f64a 639d 	movw	r3, #44701	; 0xae9d
 800ab8e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ab92:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 800ab94:	f24b 0301 	movw	r3, #45057	; 0xb001
 800ab98:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ab9c:	4798      	blx	r3
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800ab9e:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800aba2:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800aba6:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800abaa:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800abae:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800abb2:	f241 0104 	movw	r1, #4100	; 0x1004
 800abb6:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800abba:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800abbe:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800abc2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800abc6:	f2c3 3044 	movt	r0, #13124	; 0x3344
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800abca:	f2c4 0601 	movt	r6, #16385	; 0x4001
 800abce:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800abd2:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800abd6:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 800abda:	f64a 53f1 	movw	r3, #44529	; 0xadf1
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800abde:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 800abe2:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800abe6:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800abe8:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800abea:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800abec:	6008      	str	r0, [r1, #0]
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 800abee:	4798      	blx	r3
	Hw_Timer_Init();
 800abf0:	f24b 0351 	movw	r3, #45137	; 0xb051
 800abf4:	f6c0 0300 	movt	r3, #2048	; 0x800
 800abf8:	4798      	blx	r3

	Hw_Adc_Init();
 800abfa:	f24b 13a9 	movw	r3, #45481	; 0xb1a9
 800abfe:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ac02:	4798      	blx	r3

	Hw_VCom_Init();
 800ac04:	f24b 137d 	movw	r3, #45437	; 0xb17d
 800ac08:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ac0c:	4798      	blx	r3
	
	Hw_Led_Init();
 800ac0e:	f64a 7331 	movw	r3, #44849	; 0xaf31
 800ac12:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ac16:	4798      	blx	r3

	Hw_DcMotor_Init();
 800ac18:	f24b 337d 	movw	r3, #45949	; 0xb37d
 800ac1c:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ac20:	4798      	blx	r3
 800ac22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac24 <Hw_ISR_UART2_Handler>:


//-- UART2 ISR
//
void Hw_ISR_UART2_Handler(void)
{
 800ac24:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART2_DR;
 800ac26:	f244 4304 	movw	r3, #17412	; 0x4404
 800ac2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ac2e:	681b      	ldr	r3, [r3, #0]


//-- UART2 ISR
//
void Hw_ISR_UART2_Handler(void)
{
 800ac30:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART2_DR;
 800ac32:	a902      	add	r1, sp, #8
 800ac34:	f801 3d01 	strb.w	r3, [r1, #-1]!
	

	Hw_Uart_Q_Push( 1, &UartData );
 800ac38:	2001      	movs	r0, #1
 800ac3a:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <Hw_ISR_UART2_Handler+0x2c>)
 800ac3c:	4798      	blx	r3

	if( Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr != NULL )
 800ac3e:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <Hw_ISR_UART2_Handler+0x30>)
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	b113      	cbz	r3, 800ac4a <Hw_ISR_UART2_Handler+0x26>
	{
		(*Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr)(UartData);	
 800ac44:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ac48:	4798      	blx	r3
	} 
}
 800ac4a:	b003      	add	sp, #12
 800ac4c:	bd00      	pop	{pc}
 800ac4e:	bf00      	nop
 800ac50:	0800afa5 	.word	0x0800afa5
 800ac54:	20001148 	.word	0x20001148

0800ac58 <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 800ac58:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 800ac5a:	f643 0304 	movw	r3, #14340	; 0x3804
 800ac5e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ac62:	681b      	ldr	r3, [r3, #0]


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 800ac64:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 800ac66:	a902      	add	r1, sp, #8
 800ac68:	f801 3d01 	strb.w	r3, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	4b05      	ldr	r3, [pc, #20]	; (800ac84 <Hw_ISR_UART1_Handler+0x2c>)
 800ac70:	4798      	blx	r3

	if( Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr != NULL )
 800ac72:	4b05      	ldr	r3, [pc, #20]	; (800ac88 <Hw_ISR_UART1_Handler+0x30>)
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	b113      	cbz	r3, 800ac7e <Hw_ISR_UART1_Handler+0x26>
	{
		(*Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr)(UartData);	
 800ac78:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ac7c:	4798      	blx	r3
	} 
}
 800ac7e:	b003      	add	sp, #12
 800ac80:	bd00      	pop	{pc}
 800ac82:	bf00      	nop
 800ac84:	0800afa5 	.word	0x0800afa5
 800ac88:	20001148 	.word	0x20001148

0800ac8c <Hw_Uart_Putch.part.0>:
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
	switch( Ch )
	{
		case HW_UART_COM1:
		    while( !(REG_USART1_SR & 0x80) );
 800ac8c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ac90:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800ac94:	6813      	ldr	r3, [r2, #0]
 800ac96:	061b      	lsls	r3, r3, #24
 800ac98:	d5fc      	bpl.n	800ac94 <Hw_Uart_Putch.part.0+0x8>
    		REG_USART1_DR = Uart_PutData;
 800ac9a:	f643 0304 	movw	r3, #14340	; 0x3804
 800ac9e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800aca2:	6018      	str	r0, [r3, #0]
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop

0800aca8 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 800aca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 800acac:	f241 0618 	movw	r6, #4120	; 0x1018
 800acb0:	f2c4 0602 	movt	r6, #16386	; 0x4002
 800acb4:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 800acb6:	f241 1348 	movw	r3, #4424	; 0x1148
 800acba:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800acbe:	f643 040c 	movw	r4, #14348	; 0x380c
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 800acc2:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 800acc4:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800acc6:	f2c4 0401 	movt	r4, #16385	; 0x4001
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 800acca:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800acce:	230c      	movs	r3, #12
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800acd0:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 800acd4:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 800acd8:	f643 0708 	movw	r7, #14344	; 0x3808
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 800acdc:	f8c6 8000 	str.w	r8, [r6]
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800ace0:	2200      	movs	r2, #0
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800ace2:	6023      	str	r3, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800ace4:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 800ace8:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 800acec:	f240 2371 	movw	r3, #625	; 0x271
 800acf0:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800acf4:	f24e 1504 	movw	r5, #57604	; 0xe104
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800acf8:	f8cc 2000 	str.w	r2, [ip]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800acfc:	f2ce 0500 	movt	r5, #57344	; 0xe000
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART1_CR3  = 0;
 800ad00:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 800ad04:	603b      	str	r3, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800ad06:	682b      	ldr	r3, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800ad08:	2025      	movs	r0, #37	; 0x25
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800ad0a:	f043 0320 	orr.w	r3, r3, #32
 800ad0e:	602b      	str	r3, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 800ad10:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800ad12:	f24b 0315 	movw	r3, #45077	; 0xb015
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 800ad16:	f041 0120 	orr.w	r1, r1, #32
 800ad1a:	6021      	str	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800ad1c:	f64a 4159 	movw	r1, #44121	; 0xac59
 800ad20:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ad24:	f6c0 0100 	movt	r1, #2048	; 0x800
 800ad28:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 800ad2a:	6823      	ldr	r3, [r4, #0]
 800ad2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad36:	bf00      	nop

0800ad38 <Hw_Uart_Open_COM2>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 800ad38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 800ad3a:	f241 041c 	movw	r4, #4124	; 0x101c
 800ad3e:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800ad42:	6825      	ldr	r5, [r4, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 800ad44:	f241 1248 	movw	r2, #4424	; 0x1148
 800ad48:	f2c2 0200 	movt	r2, #8192	; 0x2000
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 800ad4c:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 800ad50:	f44f 6300 	mov.w	r3, #2048	; 0x800
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 800ad54:	6110      	str	r0, [r2, #16]
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
 800ad56:	6151      	str	r1, [r2, #20]
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 800ad58:	f2c4 0301 	movt	r3, #16385	; 0x4001
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 800ad5c:	6025      	str	r5, [r4, #0]
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 800ad5e:	681a      	ldr	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 800ad60:	f244 440c 	movw	r4, #17420	; 0x440c
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 800ad64:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800ad68:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
 800ad6a:	681a      	ldr	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 800ad6c:	f2c4 0400 	movt	r4, #16384	; 0x4000
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
 800ad70:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800ad74:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
 800ad76:	681a      	ldr	r2, [r3, #0]
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 800ad78:	f244 4610 	movw	r6, #17424	; 0x4410
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
 800ad7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad80:	601a      	str	r2, [r3, #0]
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
 800ad82:	681a      	ldr	r2, [r3, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART2_CR3  = 0;
 800ad84:	f244 4514 	movw	r5, #17428	; 0x4414
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
 800ad88:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800ad8c:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 800ad8e:	681a      	ldr	r2, [r3, #0]
	REG_USART2_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 800ad90:	f244 4008 	movw	r0, #17416	; 0x4408
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 800ad94:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 800ad96:	681f      	ldr	r7, [r3, #0]
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 800ad98:	2200      	movs	r2, #0
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 800ad9a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800ad9e:	601f      	str	r7, [r3, #0]
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 800ada0:	230c      	movs	r3, #12
 800ada2:	6023      	str	r3, [r4, #0]
	REG_USART2_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 800ada4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ada8:	f44f 739c 	mov.w	r3, #312	; 0x138
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 800adac:	f2c4 0600 	movt	r6, #16384	; 0x4000
	REG_USART2_CR3  = 0;
 800adb0:	f2c4 0500 	movt	r5, #16384	; 0x4000
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800adb4:	f24e 1104 	movw	r1, #57604	; 0xe104
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 800adb8:	6032      	str	r2, [r6, #0]
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800adba:	f2ce 0100 	movt	r1, #57344	; 0xe000
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART2_CR3  = 0;
 800adbe:	602a      	str	r2, [r5, #0]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 800adc0:	6003      	str	r3, [r0, #0]
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800adc2:	680b      	ldr	r3, [r1, #0]
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 800adc4:	2026      	movs	r0, #38	; 0x26
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800adc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adca:	600b      	str	r3, [r1, #0]
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 800adcc:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 800adce:	f24b 0315 	movw	r3, #45077	; 0xb015
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 800add2:	f041 0120 	orr.w	r1, r1, #32
 800add6:	6021      	str	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 800add8:	f64a 4125 	movw	r1, #44069	; 0xac25
 800addc:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ade0:	f6c0 0100 	movt	r1, #2048	; 0x800
 800ade4:	4798      	blx	r3
	
	REG_USART2_CR1 |= ( 1 << 13 );	    // USART Enable
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800adec:	6023      	str	r3, [r4, #0]
 800adee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800adf0 <Hw_Uart_Init>:
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 800adf0:	f64a 7389 	movw	r3, #44937	; 0xaf89
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 800adf4:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 800adf6:	f6c0 0300 	movt	r3, #2048	; 0x800
 800adfa:	4798      	blx	r3
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800adfc:	f241 1348 	movw	r3, #4424	; 0x1148
 800ae00:	2400      	movs	r4, #0
 800ae02:	f2c2 0300 	movt	r3, #8192	; 0x2000
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 800ae06:	f64a 42a9 	movw	r2, #44201	; 0xaca9
 800ae0a:	4621      	mov	r1, r4
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800ae0c:	605c      	str	r4, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800ae0e:	609c      	str	r4, [r3, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800ae10:	611c      	str	r4, [r3, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800ae12:	615c      	str	r4, [r3, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800ae14:	61dc      	str	r4, [r3, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800ae16:	621c      	str	r4, [r3, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800ae18:	629c      	str	r4, [r3, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800ae1a:	62dc      	str	r4, [r3, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800ae1c:	635c      	str	r4, [r3, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800ae1e:	639c      	str	r4, [r3, #56]	; 0x38
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 800ae20:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800ae24:	f6c0 0200 	movt	r2, #2048	; 0x800
 800ae28:	4790      	blx	r2
			break;
			
		case HW_UART_COM2:
			Hw_Uart_Open_COM2( BaudData, ISR_FuncPtr );
 800ae2a:	f64a 5339 	movw	r3, #44345	; 0xad39
 800ae2e:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800ae32:	4621      	mov	r1, r4
 800ae34:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ae38:	4798      	blx	r3
 800ae3a:	bd10      	pop	{r4, pc}

0800ae3c <Hw_Uart_SetReceiveFuncISR>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_SetReceiveFuncISR( u8 Ch, void (*ISR_FuncPtr)(char Ch) )
{
	Hw_Uart_Ch[Ch].ISR_FuncPtr = ISR_FuncPtr;	
 800ae3c:	f241 1348 	movw	r3, #4424	; 0x1148
 800ae40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ae48:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ae4c:	6099      	str	r1, [r3, #8]
 800ae4e:	4770      	bx	lr

0800ae50 <Hw_Uart_Putch>:
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
 800ae50:	b508      	push	{r3, lr}
	switch( Ch )
 800ae52:	b918      	cbnz	r0, 800ae5c <Hw_Uart_Putch+0xc>
 800ae54:	4608      	mov	r0, r1
 800ae56:	4b09      	ldr	r3, [pc, #36]	; (800ae7c <Hw_Uart_Putch+0x2c>)
 800ae58:	4798      	blx	r3
 800ae5a:	bd08      	pop	{r3, pc}
 800ae5c:	2801      	cmp	r0, #1
 800ae5e:	d000      	beq.n	800ae62 <Hw_Uart_Putch+0x12>
 800ae60:	bd08      	pop	{r3, pc}
		    while( !(REG_USART1_SR & 0x80) );
    		REG_USART1_DR = Uart_PutData;
			break;
			
		case HW_UART_COM2:
		    while( !(REG_USART2_SR & 0x80) );
 800ae62:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 800ae66:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ae6a:	6813      	ldr	r3, [r2, #0]
 800ae6c:	0618      	lsls	r0, r3, #24
 800ae6e:	d5fc      	bpl.n	800ae6a <Hw_Uart_Putch+0x1a>
    		REG_USART2_DR = Uart_PutData;
 800ae70:	f244 4304 	movw	r3, #17412	; 0x4404
 800ae74:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ae78:	6019      	str	r1, [r3, #0]
 800ae7a:	bd08      	pop	{r3, pc}
 800ae7c:	0800ac8d 	.word	0x0800ac8d

0800ae80 <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_USE_UART_CH_MENU, '\r');
 800ae80:	280a      	cmp	r0, #10


//------------------------------- printf 포팅용 --------------------------------
//
void print_byte(unsigned int c)
{
 800ae82:	b538      	push	{r3, r4, r5, lr}
 800ae84:	4604      	mov	r4, r0
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_USE_UART_CH_MENU, '\r');
 800ae86:	d003      	beq.n	800ae90 <print_byte+0x10>
 800ae88:	4d03      	ldr	r5, [pc, #12]	; (800ae98 <print_byte+0x18>)
 800ae8a:	b2e0      	uxtb	r0, r4
 800ae8c:	47a8      	blx	r5
 800ae8e:	bd38      	pop	{r3, r4, r5, pc}
 800ae90:	200d      	movs	r0, #13
 800ae92:	4d01      	ldr	r5, [pc, #4]	; (800ae98 <print_byte+0x18>)
 800ae94:	47a8      	blx	r5
 800ae96:	e7f8      	b.n	800ae8a <print_byte+0xa>
 800ae98:	0800ac8d 	.word	0x0800ac8d

0800ae9c <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 800ae9c:	f241 0304 	movw	r3, #4100	; 0x1004
 800aea0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800aea4:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800aea6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 800aeaa:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800aeae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800aeb2:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 800aeb4:	681a      	ldr	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800aeb6:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 800aeba:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800aebe:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800aec0:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 800aec2:	460a      	mov	r2, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800aec4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aec8:	600b      	str	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 800aeca:	6813      	ldr	r3, [r2, #0]
 800aecc:	019b      	lsls	r3, r3, #6
 800aece:	d5fc      	bpl.n	800aeca <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 800aed0:	f241 0304 	movw	r3, #4100	; 0x1004
 800aed4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800aed8:	6819      	ldr	r1, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 800aeda:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 800aedc:	f021 0103 	bic.w	r1, r1, #3
 800aee0:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 800aee2:	6819      	ldr	r1, [r3, #0]
 800aee4:	f041 0102 	orr.w	r1, r1, #2
 800aee8:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 800aeea:	6819      	ldr	r1, [r3, #0]
 800aeec:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 800aef0:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 800aef2:	6819      	ldr	r1, [r3, #0]
 800aef4:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800aef8:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 800aefa:	6819      	ldr	r1, [r3, #0]
 800aefc:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800af00:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 800af02:	6819      	ldr	r1, [r3, #0]
 800af04:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 800af08:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 800af0a:	6819      	ldr	r1, [r3, #0]
 800af0c:	6019      	str	r1, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 800af0e:	6813      	ldr	r3, [r2, #0]
 800af10:	f003 030c 	and.w	r3, r3, #12
 800af14:	2b08      	cmp	r3, #8
 800af16:	d1fa      	bne.n	800af0e <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 800af18:	f241 0318 	movw	r3, #4120	; 0x1018
 800af1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af26:	f042 021d 	orr.w	r2, r2, #29
 800af2a:	601a      	str	r2, [r3, #0]
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop

0800af30 <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 800af30:	2204      	movs	r2, #4
 800af32:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800af36:	6811      	ldr	r1, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 800af38:	f44f 6340 	mov.w	r3, #3072	; 0xc00
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 800af3c:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800af40:	6011      	str	r1, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 800af42:	6811      	ldr	r1, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 800af44:	f2c4 0301 	movt	r3, #16385	; 0x4001
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
 800af48:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800af4c:	6011      	str	r1, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 800af4e:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 800af50:	f640 420c 	movw	r2, #3084	; 0xc0c
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 800af54:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 800af58:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 800af5a:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 800af5c:	f2c4 0201 	movt	r2, #16385	; 0x4001
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 800af60:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 800af64:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 800af66:	6819      	ldr	r1, [r3, #0]
 800af68:	6019      	str	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 800af6a:	6813      	ldr	r3, [r2, #0]
 800af6c:	f043 0308 	orr.w	r3, r3, #8
 800af70:	6013      	str	r3, [r2, #0]
 800af72:	4770      	bx	lr

0800af74 <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 800af74:	b938      	cbnz	r0, 800af86 <Hw_Led_Toggle+0x12>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 3 );
 800af76:	f640 430c 	movw	r3, #3084	; 0xc0c
 800af7a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	f082 0208 	eor.w	r2, r2, #8
 800af84:	601a      	str	r2, [r3, #0]
 800af86:	4770      	bx	lr

0800af88 <Hw_Uart_Q_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
 800af88:	2300      	movs	r3, #0
 800af8a:	4804      	ldr	r0, [pc, #16]	; (800af9c <Hw_Uart_Q_Init+0x14>)
 800af8c:	4904      	ldr	r1, [pc, #16]	; (800afa0 <Hw_Uart_Q_Init+0x18>)
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 800af8e:	461a      	mov	r2, r3
 800af90:	521a      	strh	r2, [r3, r0]
 800af92:	525a      	strh	r2, [r3, r1]
 800af94:	3302      	adds	r3, #2
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
 800af96:	2b0e      	cmp	r3, #14
 800af98:	d1fa      	bne.n	800af90 <Hw_Uart_Q_Init+0x8>
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
	}
}
 800af9a:	4770      	bx	lr
 800af9c:	2000127c 	.word	0x2000127c
 800afa0:	2000128c 	.word	0x2000128c

0800afa4 <Hw_Uart_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 800afa4:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800afa6:	4c13      	ldr	r4, [pc, #76]	; (800aff4 <Hw_Uart_Q_Push+0x50>)
 800afa8:	4b13      	ldr	r3, [pc, #76]	; (800aff8 <Hw_Uart_Q_Push+0x54>)
 800afaa:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
 800afae:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 800afb2:	b235      	sxth	r5, r6
 800afb4:	1aaa      	subs	r2, r5, r2
 800afb6:	3220      	adds	r2, #32
 800afb8:	17d3      	asrs	r3, r2, #31
 800afba:	0edb      	lsrs	r3, r3, #27
 800afbc:	18d2      	adds	r2, r2, r3
 800afbe:	f002 021f 	and.w	r2, r2, #31
 800afc2:	1ad3      	subs	r3, r2, r3
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 800afc4:	2b1f      	cmp	r3, #31
 800afc6:	d012      	beq.n	800afee <Hw_Uart_Q_Push+0x4a>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800afc8:	3601      	adds	r6, #1
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800afca:	b236      	sxth	r6, r6
 800afcc:	17f3      	asrs	r3, r6, #31
 800afce:	0edb      	lsrs	r3, r3, #27
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800afd0:	eb00 1240 	add.w	r2, r0, r0, lsl #5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800afd4:	18f6      	adds	r6, r6, r3
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800afd6:	7809      	ldrb	r1, [r1, #0]
 800afd8:	1955      	adds	r5, r2, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800afda:	f006 061f 	and.w	r6, r6, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800afde:	4a07      	ldr	r2, [pc, #28]	; (800affc <Hw_Uart_Q_Push+0x58>)
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800afe0:	1af3      	subs	r3, r6, r3
 800afe2:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800afe6:	5551      	strb	r1, [r2, r5]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;

	return TRUE;
 800afe8:	2001      	movs	r0, #1
}
 800afea:	bc70      	pop	{r4, r5, r6}
 800afec:	4770      	bx	lr
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 800afee:	2000      	movs	r0, #0
 800aff0:	e7fb      	b.n	800afea <Hw_Uart_Q_Push+0x46>
 800aff2:	bf00      	nop
 800aff4:	2000128c 	.word	0x2000128c
 800aff8:	2000127c 	.word	0x2000127c
 800affc:	20001184 	.word	0x20001184

0800b000 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 800b000:	f241 4300 	movw	r3, #5120	; 0x1400
 800b004:	f64e 5208 	movw	r2, #60680	; 0xed08
 800b008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b00c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800b010:	6013      	str	r3, [r2, #0]
 800b012:	4770      	bx	lr

0800b014 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 800b014:	f241 4300 	movw	r3, #5120	; 0x1400
 800b018:	3010      	adds	r0, #16
 800b01a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b01e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 800b022:	4770      	bx	lr

0800b024 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 800b024:	f241 4300 	movw	r3, #5120	; 0x1400
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 800b028:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 800b02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b02e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 800b032:	4770      	bx	lr

0800b034 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 800b034:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 800b036:	f24b 1139 	movw	r1, #45369	; 0xb139
 800b03a:	f24b 0325 	movw	r3, #45093	; 0xb025
 800b03e:	203c      	movs	r0, #60	; 0x3c
 800b040:	f6c0 0100 	movt	r1, #2048	; 0x800
 800b044:	2200      	movs	r2, #0
 800b046:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b04a:	4798      	blx	r3
 800b04c:	bd08      	pop	{r3, pc}
 800b04e:	bf00      	nop

0800b050 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 800b050:	b510      	push	{r4, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 800b052:	4c1b      	ldr	r4, [pc, #108]	; (800b0c0 <Hw_Timer_Init+0x70>)
 800b054:	7823      	ldrb	r3, [r4, #0]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d030      	beq.n	800b0bc <Hw_Timer_Init+0x6c>
 800b05a:	4b1a      	ldr	r3, [pc, #104]	; (800b0c4 <Hw_Timer_Init+0x74>)
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800b05c:	2200      	movs	r2, #0
     TITLE   : Hw_Timer_Init
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
 800b05e:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800b062:	f803 2c08 	strb.w	r2, [r3, #-8]
		Timer_Tbl[i].Timer_Ctn  = 0;
 800b066:	f823 2c06 	strh.w	r2, [r3, #-6]
		Timer_Tbl[i].Timer_Init = 0;
 800b06a:	f823 2c04 	strh.w	r2, [r3, #-4]
		Timer_Tbl[i].TmrFnct    = NULL;
 800b06e:	f843 2b10 	str.w	r2, [r3], #16
	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
 800b072:	428b      	cmp	r3, r1
 800b074:	d1f5      	bne.n	800b062 <Hw_Timer_Init+0x12>
		Timer_Tbl[i].Timer_Init = 0;
		Timer_Tbl[i].TmrFnct    = NULL;
	}	                   
	
	
	Hw_Timer_SetupISR();
 800b076:	4b14      	ldr	r3, [pc, #80]	; (800b0c8 <Hw_Timer_Init+0x78>)
 800b078:	4798      	blx	r3
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800b07a:	f24e 0114 	movw	r1, #57364	; 0xe014
 800b07e:	f641 103f 	movw	r0, #6463	; 0x193f
 800b082:	f2ce 0100 	movt	r1, #57344	; 0xe000
	
	REG_STK_VAL  = 0;	
 800b086:	f24e 0218 	movw	r2, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800b08a:	f2c0 0001 	movt	r0, #1
 800b08e:	6008      	str	r0, [r1, #0]
	
	REG_STK_VAL  = 0;	
 800b090:	f2ce 0200 	movt	r2, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 800b094:	f24e 0310 	movw	r3, #57360	; 0xe010
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 800b098:	2100      	movs	r1, #0
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 800b09a:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 800b09e:	6011      	str	r1, [r2, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	f042 0204 	orr.w	r2, r2, #4
 800b0a6:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	f042 0202 	orr.w	r2, r2, #2
 800b0ae:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 800b0b0:	681a      	ldr	r2, [r3, #0]
 800b0b2:	f042 0201 	orr.w	r2, r2, #1
 800b0b6:	601a      	str	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	7023      	strb	r3, [r4, #0]
 800b0bc:	bd10      	pop	{r4, pc}
 800b0be:	bf00      	nop
 800b0c0:	20000ab2 	.word	0x20000ab2
 800b0c4:	20000a14 	.word	0x20000a14
 800b0c8:	0800b035 	.word	0x0800b035

0800b0cc <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 800b0cc:	4a17      	ldr	r2, [pc, #92]	; (800b12c <Hw_Timer_Tick+0x60>)
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 800b0ce:	b538      	push	{r3, r4, r5, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 800b0d0:	6811      	ldr	r1, [r2, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 800b0d2:	4b17      	ldr	r3, [pc, #92]	; (800b130 <Hw_Timer_Tick+0x64>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 800b0d4:	3101      	adds	r1, #1
 800b0d6:	6011      	str	r1, [r2, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 800b0d8:	881a      	ldrh	r2, [r3, #0]
 800b0da:	b292      	uxth	r2, r2
 800b0dc:	b11a      	cbz	r2, 800b0e6 <Hw_Timer_Tick+0x1a>
 800b0de:	881a      	ldrh	r2, [r3, #0]
 800b0e0:	3a01      	subs	r2, #1
 800b0e2:	b292      	uxth	r2, r2
 800b0e4:	801a      	strh	r2, [r3, #0]
 800b0e6:	4c13      	ldr	r4, [pc, #76]	; (800b134 <Hw_Timer_Tick+0x68>)
     WORK	:
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
 800b0e8:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 800b0ec:	e002      	b.n	800b0f4 <Hw_Timer_Tick+0x28>
 800b0ee:	3410      	adds	r4, #16

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 800b0f0:	42ac      	cmp	r4, r5
 800b0f2:	d01a      	beq.n	800b12a <Hw_Timer_Tick+0x5e>
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 800b0f4:	f814 3c08 	ldrb.w	r3, [r4, #-8]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d1f8      	bne.n	800b0ee <Hw_Timer_Tick+0x22>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800b0fc:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 800b100:	3b01      	subs	r3, #1
 800b102:	b29b      	uxth	r3, r3
 800b104:	f824 3c06 	strh.w	r3, [r4, #-6]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1f0      	bne.n	800b0ee <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800b10c:	f814 2c07 	ldrb.w	r2, [r4, #-7]
 800b110:	2a01      	cmp	r2, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800b112:	f834 2c04 	ldrh.w	r2, [r4, #-4]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 800b116:	bf08      	it	eq
 800b118:	f804 3c08 	strbeq.w	r3, [r4, #-8]

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800b11c:	f824 2c06 	strh.w	r2, [r4, #-6]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800b120:	6823      	ldr	r3, [r4, #0]
 800b122:	3410      	adds	r4, #16
 800b124:	4798      	blx	r3

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 800b126:	42ac      	cmp	r4, r5
 800b128:	d1e4      	bne.n	800b0f4 <Hw_Timer_Tick+0x28>
				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
			}
		}
	}
	
}
 800b12a:	bd38      	pop	{r3, r4, r5, pc}
 800b12c:	20000aac 	.word	0x20000aac
 800b130:	20000ab0 	.word	0x20000ab0
 800b134:	20000a14 	.word	0x20000a14

0800b138 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 800b138:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 800b13a:	f24b 03cd 	movw	r3, #45261	; 0xb0cd
 800b13e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b142:	4798      	blx	r3
 800b144:	bd08      	pop	{r3, pc}
 800b146:	bf00      	nop

0800b148 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 800b148:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 800b14a:	f640 240c 	movw	r4, #2572	; 0xa0c
 800b14e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800b152:	eb04 1000 	add.w	r0, r4, r0, lsl #4
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 800b156:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 800b158:	9b01      	ldr	r3, [sp, #4]
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 800b15a:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 800b15c:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 800b15e:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 800b160:	8081      	strh	r1, [r0, #4]
}
 800b162:	bc10      	pop	{r4}
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop

0800b168 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 800b168:	2809      	cmp	r0, #9
 800b16a:	d803      	bhi.n	800b174 <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 800b16c:	4b02      	ldr	r3, [pc, #8]	; (800b178 <Hw_Timer_Start+0x10>)
 800b16e:	0100      	lsls	r0, r0, #4
 800b170:	2201      	movs	r2, #1
 800b172:	541a      	strb	r2, [r3, r0]
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	20000a0c 	.word	0x20000a0c

0800b17c <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 800b17c:	b508      	push	{r3, lr}
	Set_System();
 800b17e:	f64b 53cd 	movw	r3, #48589	; 0xbdcd
 800b182:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b186:	4798      	blx	r3
	Set_USBClock();
 800b188:	f64b 53ed 	movw	r3, #48621	; 0xbded
 800b18c:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b190:	4798      	blx	r3
	USB_Interrupts_Config();
 800b192:	f64b 6331 	movw	r3, #48689	; 0xbe31
 800b196:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b19a:	4798      	blx	r3
	USB_Init();	
 800b19c:	f64c 1391 	movw	r3, #51601	; 0xc991
 800b1a0:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b1a4:	4798      	blx	r3
 800b1a6:	bd08      	pop	{r3, pc}

0800b1a8 <Hw_Adc_Init>:
{
	//GPIO_InitTypeDef GPIO_InitStructure;

	//-- ADC GPIO 설정  PA7 : AIN7
	//
	REG_GPIOA_CRL &= ~(0x0F << (28));	// Clear
 800b1a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b1b0:	6819      	ldr	r1, [r3, #0]


	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
 800b1b2:	f241 0204 	movw	r2, #4100	; 0x1004
{
	//GPIO_InitTypeDef GPIO_InitStructure;

	//-- ADC GPIO 설정  PA7 : AIN7
	//
	REG_GPIOA_CRL &= ~(0x0F << (28));	// Clear
 800b1b6:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
 800b1ba:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRL |=  (0x00 << (28));	// MODE, PA.7 Input Mode
 800b1bc:	6819      	ldr	r1, [r3, #0]


	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
 800b1be:	f2c4 0202 	movt	r2, #16386	; 0x4002
	//GPIO_InitTypeDef GPIO_InitStructure;

	//-- ADC GPIO 설정  PA7 : AIN7
	//
	REG_GPIOA_CRL &= ~(0x0F << (28));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (28));	// MODE, PA.7 Input Mode
 800b1c2:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRL |=  (0x00 << (30));	// CNF,  PA.7 Analog Mode	
 800b1c4:	6818      	ldr	r0, [r3, #0]
	CLR_BIT( REG_RCC_CFGR, 14 );


	// Enable ADC1 clock so that we can talk to it
	//
	SET_BIT( REG_RCC_APB2ENR, 9 );
 800b1c6:	f241 0118 	movw	r1, #4120	; 0x1018

	//-- ADC GPIO 설정  PA7 : AIN7
	//
	REG_GPIOA_CRL &= ~(0x0F << (28));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (28));	// MODE, PA.7 Input Mode
	REG_GPIOA_CRL |=  (0x00 << (30));	// CNF,  PA.7 Analog Mode	
 800b1ca:	6018      	str	r0, [r3, #0]


	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
 800b1cc:	6813      	ldr	r3, [r2, #0]
	CLR_BIT( REG_RCC_CFGR, 14 );


	// Enable ADC1 clock so that we can talk to it
	//
	SET_BIT( REG_RCC_APB2ENR, 9 );
 800b1ce:	f2c4 0102 	movt	r1, #16386	; 0x4002


	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
 800b1d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1d6:	6013      	str	r3, [r2, #0]
	CLR_BIT( REG_RCC_CFGR, 14 );
 800b1d8:	6813      	ldr	r3, [r2, #0]
	SET_BIT( REG_RCC_APB2ENR, 9 );


	// ADC1 Configuration ------------------------------------------------------
	//
	REG_ADC1_CR1 = 0
 800b1da:	f242 4004 	movw	r0, #9220	; 0x2404

	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
	CLR_BIT( REG_RCC_CFGR, 14 );
 800b1de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1e2:	6013      	str	r3, [r2, #0]


	// Enable ADC1 clock so that we can talk to it
	//
	SET_BIT( REG_RCC_APB2ENR, 9 );
 800b1e4:	680a      	ldr	r2, [r1, #0]
        				//             0~17
        				//             



	REG_ADC1_CR2 = 0
 800b1e6:	f242 4308 	movw	r3, #9224	; 0x2408
	CLR_BIT( REG_RCC_CFGR, 14 );


	// Enable ADC1 clock so that we can talk to it
	//
	SET_BIT( REG_RCC_APB2ENR, 9 );
 800b1ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1ee:	600a      	str	r2, [r1, #0]


	// ADC1 Configuration ------------------------------------------------------
	//
	REG_ADC1_CR1 = 0
 800b1f0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b1f4:	2200      	movs	r2, #0
        				//             0~17
        				//             



	REG_ADC1_CR2 = 0
 800b1f6:	f2c4 0301 	movt	r3, #16385	; 0x4001
	SET_BIT( REG_RCC_APB2ENR, 9 );


	// ADC1 Configuration ------------------------------------------------------
	//
	REG_ADC1_CR1 = 0
 800b1fa:	6002      	str	r2, [r0, #0]
        				//             0~17
        				//             



	REG_ADC1_CR2 = 0
 800b1fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b200:	601a      	str	r2, [r3, #0]
						//             1 : Enabled


	// Enable ADC1
	//
	SET_BIT( REG_ADC1_CR2, 0 );
 800b202:	681a      	ldr	r2, [r3, #0]
	//
	SET_BIT( REG_ADC1_CR2, 3 );	

	// Check the end of ADC1 reset calibration register
	//
	while(IS_SET_BIT(REG_ADC1_CR2, 3));
 800b204:	4619      	mov	r1, r3
						//             1 : Enabled


	// Enable ADC1
	//
	SET_BIT( REG_ADC1_CR2, 0 );
 800b206:	f042 0201 	orr.w	r2, r2, #1
 800b20a:	601a      	str	r2, [r3, #0]

	// Enable ADC1 reset calibaration register
	//
	SET_BIT( REG_ADC1_CR2, 3 );	
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	f042 0208 	orr.w	r2, r2, #8
 800b212:	601a      	str	r2, [r3, #0]

	// Check the end of ADC1 reset calibration register
	//
	while(IS_SET_BIT(REG_ADC1_CR2, 3));
 800b214:	680a      	ldr	r2, [r1, #0]
 800b216:	f242 4308 	movw	r3, #9224	; 0x2408
 800b21a:	0712      	lsls	r2, r2, #28
 800b21c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b220:	d4f8      	bmi.n	800b214 <Hw_Adc_Init+0x6c>

	// Start ADC1 calibaration
	//
	//ADC_StartCalibration(ADC1);
	SET_BIT( REG_ADC1_CR2, 2 );
 800b222:	6819      	ldr	r1, [r3, #0]

	// Check the end of ADC1 calibration
	//
	while(IS_SET_BIT(REG_ADC1_CR2, 2));
 800b224:	461a      	mov	r2, r3
	while(IS_SET_BIT(REG_ADC1_CR2, 3));

	// Start ADC1 calibaration
	//
	//ADC_StartCalibration(ADC1);
	SET_BIT( REG_ADC1_CR2, 2 );
 800b226:	f041 0104 	orr.w	r1, r1, #4
 800b22a:	6019      	str	r1, [r3, #0]

	// Check the end of ADC1 calibration
	//
	while(IS_SET_BIT(REG_ADC1_CR2, 2));
 800b22c:	6813      	ldr	r3, [r2, #0]
 800b22e:	f013 0304 	ands.w	r3, r3, #4
 800b232:	d1fb      	bne.n	800b22c <Hw_Adc_Init+0x84>


	REG_ADC1_SQR1  = 0;
 800b234:	f242 422c 	movw	r2, #9260	; 0x242c
 800b238:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800b23c:	6013      	str	r3, [r2, #0]
	REG_ADC1_SQR1 |= (1<<20);	// 1개 채널만 컨버젼
 800b23e:	6813      	ldr	r3, [r2, #0]
 800b240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b244:	6013      	str	r3, [r2, #0]
 800b246:	4770      	bx	lr

0800b248 <Hw_DcMotor_Run>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DcMotor_Run( u8 Ch, u8 Dir )
{
	switch( Ch )
 800b248:	2803      	cmp	r0, #3
 800b24a:	d811      	bhi.n	800b270 <Hw_DcMotor_Run+0x28>
 800b24c:	e8df f000 	tbb	[pc, r0]
 800b250:	0211202e 	.word	0x0211202e
			break;

		case 3:
			if( Dir == HW_DCMOTOR_FOR )
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_L );
 800b254:	f640 430c 	movw	r3, #3084	; 0xc0c
 800b258:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b25c:	681a      	ldr	r2, [r3, #0]
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_R );
			}
			break;

		case 3:
			if( Dir == HW_DCMOTOR_FOR )
 800b25e:	2900      	cmp	r1, #0
 800b260:	d04a      	beq.n	800b2f8 <Hw_DcMotor_Run+0xb0>
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_L );
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_R );
			}
			else
			{
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_L );
 800b262:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b266:	601a      	str	r2, [r3, #0]
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_R );
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b26e:	601a      	str	r2, [r3, #0]
 800b270:	4770      	bx	lr
			break;

		case 2:
			if( Dir == HW_DCMOTOR_FOR )
			{
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_L );
 800b272:	f640 430c 	movw	r3, #3084	; 0xc0c
 800b276:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b27a:	681a      	ldr	r2, [r3, #0]
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_R );
			}
			break;

		case 2:
			if( Dir == HW_DCMOTOR_FOR )
 800b27c:	2900      	cmp	r1, #0
 800b27e:	d133      	bne.n	800b2e8 <Hw_DcMotor_Run+0xa0>
			{
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_L );
 800b280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b284:	601a      	str	r2, [r3, #0]
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_R );
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b28c:	601a      	str	r2, [r3, #0]
 800b28e:	4770      	bx	lr
			break;

		case 1:
			if( Dir == HW_DCMOTOR_FOR )
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_L );
 800b290:	f640 430c 	movw	r3, #3084	; 0xc0c
 800b294:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b298:	681a      	ldr	r2, [r3, #0]
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_R );
			}
			break;

		case 1:
			if( Dir == HW_DCMOTOR_FOR )
 800b29a:	b9e9      	cbnz	r1, 800b2d8 <Hw_DcMotor_Run+0x90>
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_L );
 800b29c:	f022 0204 	bic.w	r2, r2, #4
 800b2a0:	601a      	str	r2, [r3, #0]
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_R );
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b2a8:	601a      	str	r2, [r3, #0]
 800b2aa:	4770      	bx	lr
	switch( Ch )
	{
		case 0:
			if( Dir == HW_DCMOTOR_FOR )
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_L );
 800b2ac:	f640 430c 	movw	r3, #3084	; 0xc0c
 800b2b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b2b4:	681a      	ldr	r2, [r3, #0]
void Hw_DcMotor_Run( u8 Ch, u8 Dir )
{
	switch( Ch )
	{
		case 0:
			if( Dir == HW_DCMOTOR_FOR )
 800b2b6:	b939      	cbnz	r1, 800b2c8 <Hw_DcMotor_Run+0x80>
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_L );
 800b2b8:	f022 0201 	bic.w	r2, r2, #1
 800b2bc:	601a      	str	r2, [r3, #0]
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_R );
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	f042 0202 	orr.w	r2, r2, #2
 800b2c4:	601a      	str	r2, [r3, #0]
 800b2c6:	4770      	bx	lr
			}
			else
			{
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_L );
 800b2c8:	f042 0201 	orr.w	r2, r2, #1
 800b2cc:	601a      	str	r2, [r3, #0]
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_R );
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	f022 0202 	bic.w	r2, r2, #2
 800b2d4:	601a      	str	r2, [r3, #0]
 800b2d6:	4770      	bx	lr
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_L );
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_R );
			}
			else
			{
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_L );
 800b2d8:	f042 0204 	orr.w	r2, r2, #4
 800b2dc:	601a      	str	r2, [r3, #0]
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_R );
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2e4:	601a      	str	r2, [r3, #0]
 800b2e6:	4770      	bx	lr
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_L );
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_R );
			}
			else
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_L );
 800b2e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b2ec:	601a      	str	r2, [r3, #0]
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_R );
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b2f4:	601a      	str	r2, [r3, #0]
 800b2f6:	4770      	bx	lr
			break;

		case 3:
			if( Dir == HW_DCMOTOR_FOR )
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_L );
 800b2f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b2fc:	601a      	str	r2, [r3, #0]
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_R );
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b304:	601a      	str	r2, [r3, #0]
 800b306:	4770      	bx	lr

0800b308 <Hw_DcMotor_Stop>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DcMotor_Stop( u8 Ch )
{
	switch( Ch )
 800b308:	2803      	cmp	r0, #3
 800b30a:	d80f      	bhi.n	800b32c <Hw_DcMotor_Stop+0x24>
 800b30c:	e8df f000 	tbb	[pc, r0]
 800b310:	020f1c29 	.word	0x020f1c29
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_L );
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_R );
			break;

		case 3:
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_L );
 800b314:	f640 430c 	movw	r3, #3084	; 0xc0c
 800b318:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b322:	601a      	str	r2, [r3, #0]
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_3_R );
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b32a:	601a      	str	r2, [r3, #0]
 800b32c:	4770      	bx	lr
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_L );
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_R );
			break;

		case 2:
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_L );
 800b32e:	f640 430c 	movw	r3, #3084	; 0xc0c
 800b332:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b33c:	601a      	str	r2, [r3, #0]
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_2_R );
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b344:	601a      	str	r2, [r3, #0]
			break;
 800b346:	4770      	bx	lr
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_L );
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_R );
			break;

		case 1:
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_L );
 800b348:	f640 430c 	movw	r3, #3084	; 0xc0c
 800b34c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	f022 0204 	bic.w	r2, r2, #4
 800b356:	601a      	str	r2, [r3, #0]
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_R );
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b35e:	601a      	str	r2, [r3, #0]
			break;
 800b360:	4770      	bx	lr
void Hw_DcMotor_Stop( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_L );
 800b362:	f640 430c 	movw	r3, #3084	; 0xc0c
 800b366:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	f022 0201 	bic.w	r2, r2, #1
 800b370:	601a      	str	r2, [r3, #0]
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_R );
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	f022 0202 	bic.w	r2, r2, #2
 800b378:	601a      	str	r2, [r3, #0]
 800b37a:	4770      	bx	lr

0800b37c <Hw_DcMotor_Init>:

	//-- GPIO 설정
	//
	//-- L0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
 800b37c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b380:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800b384:	6811      	ldr	r1, [r2, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DcMotor_Init( void )
{
 800b386:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	//-- GPIO 설정
	//
	//-- L0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
 800b38a:	f021 010f 	bic.w	r1, r1, #15
 800b38e:	6011      	str	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 0));	// MODE, PB.0 Output mode, max speed 50Mhz
 800b390:	6811      	ldr	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	

	//-- L3 PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 800b392:	f640 4304 	movw	r3, #3076	; 0xc04
	//-- GPIO 설정
	//
	//-- L0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << ( 0));	// MODE, PB.0 Output mode, max speed 50Mhz
 800b396:	f041 0103 	orr.w	r1, r1, #3
 800b39a:	6011      	str	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 2));	// CNF,  PB.0 General purpose output push-pul	
 800b39c:	6811      	ldr	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	

	//-- L3 PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 800b39e:	f2c4 0301 	movt	r3, #16385	; 0x4001
	//
	//-- L0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << ( 0));	// MODE, PB.0 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << ( 2));	// CNF,  PB.0 General purpose output push-pul	
 800b3a2:	6011      	str	r1, [r2, #0]

	//-- L1 PB.1
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 4));	// Clear
 800b3a4:	6811      	ldr	r1, [r2, #0]

	//-- R3 PB.14
	//
	REG_GPIOB_CRH &= ~(0x0F << (24));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (24));	// MODE, PB.7 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (26));	// CNF,  PB.7 General purpose output push-pul				
 800b3a6:	2400      	movs	r4, #0
	REG_GPIOB_CRL |=  (0x03 << ( 0));	// MODE, PB.0 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << ( 2));	// CNF,  PB.0 General purpose output push-pul	

	//-- L1 PB.1
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 4));	// Clear
 800b3a8:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800b3ac:	6011      	str	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 4));	// MODE, PB.1 Output mode, max speed 50Mhz
 800b3ae:	6811      	ldr	r1, [r2, #0]
 800b3b0:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800b48c <Hw_DcMotor_Init+0x110>
 800b3b4:	f041 0130 	orr.w	r1, r1, #48	; 0x30
 800b3b8:	6011      	str	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 6));	// CNF,  PB.1 General purpose output push-pul	
 800b3ba:	6811      	ldr	r1, [r2, #0]
 800b3bc:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800b490 <Hw_DcMotor_Init+0x114>
 800b3c0:	6011      	str	r1, [r2, #0]

	//-- L2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
 800b3c2:	6811      	ldr	r1, [r2, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DcMotor_Init( void )
{
 800b3c4:	b082      	sub	sp, #8
	REG_GPIOB_CRL |=  (0x03 << ( 4));	// MODE, PB.1 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << ( 6));	// CNF,  PB.1 General purpose output push-pul	

	//-- L2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
 800b3c6:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 800b3ca:	6011      	str	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
 800b3cc:	6811      	ldr	r1, [r2, #0]
	REG_GPIOB_CRH |=  (0x00 << (26));	// CNF,  PB.7 General purpose output push-pul				




	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
 800b3ce:	4625      	mov	r5, r4
	REG_GPIOB_CRL |=  (0x00 << ( 6));	// CNF,  PB.1 General purpose output push-pul	

	//-- L2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
 800b3d0:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 800b3d4:	6011      	str	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	
 800b3d6:	6811      	ldr	r1, [r2, #0]

	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );

		Hw_DcMotor_State[i].Dir   = HW_DCMOTOR_STOP;
 800b3d8:	2702      	movs	r7, #2

	//-- L2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	
 800b3da:	6011      	str	r1, [r2, #0]

	//-- L3 PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 800b3dc:	681a      	ldr	r2, [r3, #0]
	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );

		Hw_DcMotor_State[i].Dir   = HW_DCMOTOR_STOP;
		Hw_DcMotor_State[i].Pin   = FALSE;
 800b3de:	46a1      	mov	r9, r4
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	

	//-- L3 PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 800b3e0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800b3e4:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
 800b3e6:	681a      	ldr	r2, [r3, #0]
		Hw_DcMotor_Stop( i );

		Hw_DcMotor_State[i].Dir   = HW_DCMOTOR_STOP;
		Hw_DcMotor_State[i].Pin   = FALSE;
		Hw_DcMotor_State[i].Speed = 0;
		Hw_DcMotor_State[i].State = HW_DCMOTOR_STATE_STOP;
 800b3e8:	2601      	movs	r6, #1
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	

	//-- L3 PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
 800b3ea:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800b3ee:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	601a      	str	r2, [r3, #0]

	//-- R0 PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800b3fa:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.2 Output mode, max speed 50Mhz
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800b402:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.2 General purpose output push-pul	
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	601a      	str	r2, [r3, #0]
	
	//-- R1 PB.12
	//
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800b40e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE, PB.6 Output mode, max speed 50Mhz
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800b416:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (18));	// CNF,  PB.6 General purpose output push-pul	
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	601a      	str	r2, [r3, #0]
	
	//-- R2 PB.13
	//
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800b422:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (20));	// MODE, PB.6 Output mode, max speed 50Mhz
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 800b42a:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (22));	// CNF,  PB.6 General purpose output push-pul	
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	601a      	str	r2, [r3, #0]

	//-- R3 PB.14
	//
	REG_GPIOB_CRH &= ~(0x0F << (24));	// Clear
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b436:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (24));	// MODE, PB.7 Output mode, max speed 50Mhz
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800b43e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (26));	// CNF,  PB.7 General purpose output push-pul				
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	601a      	str	r2, [r3, #0]



	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );
 800b444:	4628      	mov	r0, r5
	REG_GPIOB_CRH |=  (0x00 << (26));	// CNF,  PB.7 General purpose output push-pul				




	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
 800b446:	3501      	adds	r5, #1
	{
		Hw_DcMotor_Stop( i );
 800b448:	47c0      	blx	r8
	REG_GPIOB_CRH |=  (0x00 << (26));	// CNF,  PB.7 General purpose output push-pul				




	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
 800b44a:	b2ed      	uxtb	r5, r5
     TITLE   : Hw_DcMotor_Init
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DcMotor_Init( void )
 800b44c:	eb04 030a 	add.w	r3, r4, sl

	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );

		Hw_DcMotor_State[i].Dir   = HW_DCMOTOR_STOP;
 800b450:	705f      	strb	r7, [r3, #1]
		Hw_DcMotor_State[i].Pin   = FALSE;
 800b452:	f883 9002 	strb.w	r9, [r3, #2]
		Hw_DcMotor_State[i].Speed = 0;
 800b456:	f8a3 9004 	strh.w	r9, [r3, #4]
		Hw_DcMotor_State[i].State = HW_DCMOTOR_STATE_STOP;
 800b45a:	f804 600a 	strb.w	r6, [r4, sl]
 800b45e:	3406      	adds	r4, #6
	REG_GPIOB_CRH |=  (0x00 << (26));	// CNF,  PB.7 General purpose output push-pul				




	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
 800b460:	2d04      	cmp	r5, #4
 800b462:	d1ef      	bne.n	800b444 <Hw_DcMotor_Init+0xc8>
		Hw_DcMotor_State[i].Pin   = FALSE;
		Hw_DcMotor_State[i].Speed = 0;
		Hw_DcMotor_State[i].State = HW_DCMOTOR_STATE_STOP;
	}

	Hw_Timer_Set  ( HW_TIMER_CH_DCMOTOR, 1, LOOP_TIME, Hw_DcMotor_Tick, NULL );
 800b464:	2300      	movs	r3, #0
 800b466:	2006      	movs	r0, #6
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	2101      	movs	r1, #1
 800b46c:	2202      	movs	r2, #2
 800b46e:	4b04      	ldr	r3, [pc, #16]	; (800b480 <Hw_DcMotor_Init+0x104>)
 800b470:	4c04      	ldr	r4, [pc, #16]	; (800b484 <Hw_DcMotor_Init+0x108>)
 800b472:	47a0      	blx	r4
	Hw_Timer_Start( HW_TIMER_CH_DCMOTOR );
 800b474:	2006      	movs	r0, #6
 800b476:	4b04      	ldr	r3, [pc, #16]	; (800b488 <Hw_DcMotor_Init+0x10c>)
 800b478:	4798      	blx	r3
}
 800b47a:	b002      	add	sp, #8
 800b47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b480:	0800b495 	.word	0x0800b495
 800b484:	0800b149 	.word	0x0800b149
 800b488:	0800b169 	.word	0x0800b169
 800b48c:	0800b309 	.word	0x0800b309
 800b490:	20001590 	.word	0x20001590

0800b494 <Hw_DcMotor_Tick>:




void Hw_DcMotor_Tick( void )
{
 800b494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b498:	4e27      	ldr	r6, [pc, #156]	; (800b538 <Hw_DcMotor_Tick+0xa4>)
		}
		else
		{
			//-- 카운트 값을 0~100% 값으로 변환
			//
			DutyRatio = Cnt*HW_DCMOTOR_MAX_PWM/HW_DCMOTOR_MAX_CNT;
 800b49a:	2400      	movs	r4, #0
 800b49c:	f8b6 b000 	ldrh.w	fp, [r6]
 800b4a0:	f8df a098 	ldr.w	sl, [pc, #152]	; 800b53c <Hw_DcMotor_Tick+0xa8>
 800b4a4:	eb0b 078b 	add.w	r7, fp, fp, lsl #2
 800b4a8:	007f      	lsls	r7, r7, #1




void Hw_DcMotor_Tick( void )
{
 800b4aa:	b083      	sub	sp, #12
		}
		else
		{
			//-- 카운트 값을 0~100% 값으로 변환
			//
			DutyRatio = Cnt*HW_DCMOTOR_MAX_PWM/HW_DCMOTOR_MAX_CNT;
 800b4ac:	b2bf      	uxth	r7, r7
	u16 DutyRatio;

	static u16 Cnt = 0;


	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
 800b4ae:	4625      	mov	r5, r4
			DutyRatio = Cnt*HW_DCMOTOR_MAX_PWM/HW_DCMOTOR_MAX_CNT;

			if( DutyRatio > Hw_DcMotor_State[i].Speed && Hw_DcMotor_State[i].Pin == TRUE )
			{
				Hw_DcMotor_Stop(i);
				Hw_DcMotor_State[i].Pin = FALSE;
 800b4b0:	46a0      	mov	r8, r4





void Hw_DcMotor_Tick( void )
 800b4b2:	eb04 010a 	add.w	r1, r4, sl
 800b4b6:	4689      	mov	r9, r1
	static u16 Cnt = 0;


	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		if( Cnt == 0 )
 800b4b8:	f1bb 0f00 	cmp.w	fp, #0
 800b4bc:	d123      	bne.n	800b506 <Hw_DcMotor_Tick+0x72>
		{
			if( Hw_DcMotor_State[i].Speed > 0 && Hw_DcMotor_State[i].Dir != HW_DCMOTOR_STOP )
 800b4be:	8889      	ldrh	r1, [r1, #4]
				Hw_DcMotor_Run( i, Hw_DcMotor_State[i].Dir );
				Hw_DcMotor_State[i].Pin = TRUE;
			}
			else
			{
				Hw_DcMotor_Stop(i);
 800b4c0:	4628      	mov	r0, r5

	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		if( Cnt == 0 )
		{
			if( Hw_DcMotor_State[i].Speed > 0 && Hw_DcMotor_State[i].Dir != HW_DCMOTOR_STOP )
 800b4c2:	2900      	cmp	r1, #0
 800b4c4:	d030      	beq.n	800b528 <Hw_DcMotor_Tick+0x94>
 800b4c6:	f899 1001 	ldrb.w	r1, [r9, #1]
 800b4ca:	2902      	cmp	r1, #2
 800b4cc:	d02c      	beq.n	800b528 <Hw_DcMotor_Tick+0x94>
			{
				Hw_DcMotor_Run( i, Hw_DcMotor_State[i].Dir );
 800b4ce:	f24b 2349 	movw	r3, #45641	; 0xb249
 800b4d2:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b4d6:	4798      	blx	r3
				Hw_DcMotor_State[i].Pin = TRUE;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	f889 3002 	strb.w	r3, [r9, #2]
	u16 DutyRatio;

	static u16 Cnt = 0;


	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
 800b4de:	3501      	adds	r5, #1
 800b4e0:	b2ed      	uxtb	r5, r5
 800b4e2:	3406      	adds	r4, #6
 800b4e4:	2d04      	cmp	r5, #4
 800b4e6:	d1e4      	bne.n	800b4b2 <Hw_DcMotor_Tick+0x1e>
			}
		}
	}


	Cnt++;
 800b4e8:	f10b 0c01 	add.w	ip, fp, #1
 800b4ec:	fa1f fc8c 	uxth.w	ip, ip

	if( Cnt >= HW_DCMOTOR_MAX_CNT ) Cnt = 0;
 800b4f0:	f1bc 0f09 	cmp.w	ip, #9
			}
		}
	}


	Cnt++;
 800b4f4:	f8a6 c000 	strh.w	ip, [r6]

	if( Cnt >= HW_DCMOTOR_MAX_CNT ) Cnt = 0;
 800b4f8:	d902      	bls.n	800b500 <Hw_DcMotor_Tick+0x6c>
 800b4fa:	4b0f      	ldr	r3, [pc, #60]	; (800b538 <Hw_DcMotor_Tick+0xa4>)
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	801a      	strh	r2, [r3, #0]
}
 800b500:	b003      	add	sp, #12
 800b502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		{
			//-- 카운트 값을 0~100% 값으로 변환
			//
			DutyRatio = Cnt*HW_DCMOTOR_MAX_PWM/HW_DCMOTOR_MAX_CNT;

			if( DutyRatio > Hw_DcMotor_State[i].Speed && Hw_DcMotor_State[i].Pin == TRUE )
 800b506:	888b      	ldrh	r3, [r1, #4]
 800b508:	42bb      	cmp	r3, r7
 800b50a:	d2e8      	bcs.n	800b4de <Hw_DcMotor_Tick+0x4a>
 800b50c:	788b      	ldrb	r3, [r1, #2]
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d1e5      	bne.n	800b4de <Hw_DcMotor_Tick+0x4a>
			{
				Hw_DcMotor_Stop(i);
 800b512:	f24b 3309 	movw	r3, #45833	; 0xb309
 800b516:	9101      	str	r1, [sp, #4]
 800b518:	4628      	mov	r0, r5
 800b51a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b51e:	4798      	blx	r3
				Hw_DcMotor_State[i].Pin = FALSE;
 800b520:	9901      	ldr	r1, [sp, #4]
 800b522:	f881 8002 	strb.w	r8, [r1, #2]
 800b526:	e7da      	b.n	800b4de <Hw_DcMotor_Tick+0x4a>
				Hw_DcMotor_Run( i, Hw_DcMotor_State[i].Dir );
				Hw_DcMotor_State[i].Pin = TRUE;
			}
			else
			{
				Hw_DcMotor_Stop(i);
 800b528:	f24b 3309 	movw	r3, #45833	; 0xb309
 800b52c:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b530:	4798      	blx	r3
				Hw_DcMotor_State[i].Pin = FALSE;
 800b532:	f889 8002 	strb.w	r8, [r9, #2]
 800b536:	e7d2      	b.n	800b4de <Hw_DcMotor_Tick+0x4a>
 800b538:	20000ab4 	.word	0x20000ab4
 800b53c:	20001590 	.word	0x20001590

0800b540 <Hw_DcMotor_Handle>:
void Hw_DcMotor_Handle( s16 SpeedLeft, s16 SpeedRight )
{
	u16 Pwm;


	if( SpeedLeft  >  HW_DCMOTOR_MAX_PWM )	SpeedLeft  =  HW_DCMOTOR_MAX_PWM;
 800b540:	2864      	cmp	r0, #100	; 0x64
 800b542:	dc1d      	bgt.n	800b580 <Hw_DcMotor_Handle+0x40>
	if( SpeedLeft  < -HW_DCMOTOR_MAX_PWM )	SpeedLeft  = -HW_DCMOTOR_MAX_PWM;
 800b544:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b548:	4298      	cmp	r0, r3
 800b54a:	bfb8      	it	lt
 800b54c:	4618      	movlt	r0, r3
	if( SpeedRight >  HW_DCMOTOR_MAX_PWM )	SpeedRight =  HW_DCMOTOR_MAX_PWM;
 800b54e:	2964      	cmp	r1, #100	; 0x64
 800b550:	dc19      	bgt.n	800b586 <Hw_DcMotor_Handle+0x46>
	if( SpeedRight < -HW_DCMOTOR_MAX_PWM )	SpeedRight = -HW_DCMOTOR_MAX_PWM;
 800b552:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b556:	4299      	cmp	r1, r3
 800b558:	bfb8      	it	lt
 800b55a:	4619      	movlt	r1, r3


	if( SpeedLeft > 0 )
 800b55c:	2800      	cmp	r0, #0
 800b55e:	dd15      	ble.n	800b58c <Hw_DcMotor_Handle+0x4c>
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 800b560:	4b1e      	ldr	r3, [pc, #120]	; (800b5dc <Hw_DcMotor_Handle+0x9c>)
	if( SpeedRight < -HW_DCMOTOR_MAX_PWM )	SpeedRight = -HW_DCMOTOR_MAX_PWM;


	if( SpeedLeft > 0 )
	{
		Pwm = SpeedLeft;
 800b562:	b280      	uxth	r0, r0
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 800b564:	2200      	movs	r2, #0
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 800b566:	8218      	strh	r0, [r3, #16]
 800b568:	8098      	strh	r0, [r3, #4]
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 800b56a:	735a      	strb	r2, [r3, #13]
 800b56c:	705a      	strb	r2, [r3, #1]
		Hw_DcMotor_SetDir( HW_DCMOTOR_LU, HW_DCMOTOR_STOP );
		Hw_DcMotor_SetDir( HW_DCMOTOR_LD, HW_DCMOTOR_STOP );				
	}


	if( SpeedRight > 0 )
 800b56e:	2900      	cmp	r1, #0
 800b570:	dd13      	ble.n	800b59a <Hw_DcMotor_Handle+0x5a>
	{
		Pwm = SpeedRight;
 800b572:	b289      	uxth	r1, r1
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 800b574:	2200      	movs	r2, #0
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 800b576:	82d9      	strh	r1, [r3, #22]
 800b578:	8159      	strh	r1, [r3, #10]
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 800b57a:	74da      	strb	r2, [r3, #19]
 800b57c:	71da      	strb	r2, [r3, #7]
 800b57e:	4770      	bx	lr
void Hw_DcMotor_Handle( s16 SpeedLeft, s16 SpeedRight )
{
	u16 Pwm;


	if( SpeedLeft  >  HW_DCMOTOR_MAX_PWM )	SpeedLeft  =  HW_DCMOTOR_MAX_PWM;
 800b580:	2064      	movs	r0, #100	; 0x64
	if( SpeedLeft  < -HW_DCMOTOR_MAX_PWM )	SpeedLeft  = -HW_DCMOTOR_MAX_PWM;
	if( SpeedRight >  HW_DCMOTOR_MAX_PWM )	SpeedRight =  HW_DCMOTOR_MAX_PWM;
 800b582:	2964      	cmp	r1, #100	; 0x64
 800b584:	dde5      	ble.n	800b552 <Hw_DcMotor_Handle+0x12>
 800b586:	2164      	movs	r1, #100	; 0x64
	if( SpeedRight < -HW_DCMOTOR_MAX_PWM )	SpeedRight = -HW_DCMOTOR_MAX_PWM;


	if( SpeedLeft > 0 )
 800b588:	2800      	cmp	r0, #0
 800b58a:	dce9      	bgt.n	800b560 <Hw_DcMotor_Handle+0x20>
		Hw_DcMotor_SetPwm( HW_DCMOTOR_LD, Pwm );		
		Hw_DcMotor_SetDir( HW_DCMOTOR_LU, HW_DCMOTOR_FOR );
		Hw_DcMotor_SetDir( HW_DCMOTOR_LD, HW_DCMOTOR_FOR );		
	}
	else
	if( SpeedLeft < 0 )
 800b58c:	d114      	bne.n	800b5b8 <Hw_DcMotor_Handle+0x78>
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 800b58e:	4b13      	ldr	r3, [pc, #76]	; (800b5dc <Hw_DcMotor_Handle+0x9c>)
 800b590:	2202      	movs	r2, #2
		Hw_DcMotor_SetDir( HW_DCMOTOR_LU, HW_DCMOTOR_STOP );
		Hw_DcMotor_SetDir( HW_DCMOTOR_LD, HW_DCMOTOR_STOP );				
	}


	if( SpeedRight > 0 )
 800b592:	2900      	cmp	r1, #0
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 800b594:	735a      	strb	r2, [r3, #13]
 800b596:	705a      	strb	r2, [r3, #1]
		Hw_DcMotor_SetDir( HW_DCMOTOR_LU, HW_DCMOTOR_STOP );
		Hw_DcMotor_SetDir( HW_DCMOTOR_LD, HW_DCMOTOR_STOP );				
	}


	if( SpeedRight > 0 )
 800b598:	dceb      	bgt.n	800b572 <Hw_DcMotor_Handle+0x32>
		Hw_DcMotor_SetPwm( HW_DCMOTOR_RD, Pwm );		
		Hw_DcMotor_SetDir( HW_DCMOTOR_RU, HW_DCMOTOR_FOR );
		Hw_DcMotor_SetDir( HW_DCMOTOR_RD, HW_DCMOTOR_FOR );		
	}
	else
	if( SpeedRight < 0 )
 800b59a:	d103      	bne.n	800b5a4 <Hw_DcMotor_Handle+0x64>
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 800b59c:	2202      	movs	r2, #2
 800b59e:	74da      	strb	r2, [r3, #19]
 800b5a0:	71da      	strb	r2, [r3, #7]
 800b5a2:	4770      	bx	lr
		Hw_DcMotor_SetDir( HW_DCMOTOR_RD, HW_DCMOTOR_FOR );		
	}
	else
	if( SpeedRight < 0 )
	{
		Pwm = -SpeedRight;
 800b5a4:	4249      	negs	r1, r1
 800b5a6:	b289      	uxth	r1, r1
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetPwm( u8 Ch, u16 Pwm  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;
 800b5a8:	2964      	cmp	r1, #100	; 0x64
 800b5aa:	d814      	bhi.n	800b5d6 <Hw_DcMotor_Handle+0x96>

	Hw_DcMotor_State[Ch].Speed = Pwm;
 800b5ac:	82d9      	strh	r1, [r3, #22]
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 800b5ae:	2201      	movs	r2, #1
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 800b5b0:	8159      	strh	r1, [r3, #10]
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 800b5b2:	74da      	strb	r2, [r3, #19]
 800b5b4:	71da      	strb	r2, [r3, #7]
 800b5b6:	4770      	bx	lr
		Hw_DcMotor_SetDir( HW_DCMOTOR_LD, HW_DCMOTOR_FOR );		
	}
	else
	if( SpeedLeft < 0 )
	{
		Pwm = -SpeedLeft;
 800b5b8:	4240      	negs	r0, r0
 800b5ba:	b280      	uxth	r0, r0
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetPwm( u8 Ch, u16 Pwm  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;
 800b5bc:	2864      	cmp	r0, #100	; 0x64
 800b5be:	d806      	bhi.n	800b5ce <Hw_DcMotor_Handle+0x8e>

	Hw_DcMotor_State[Ch].Speed = Pwm;
 800b5c0:	4b06      	ldr	r3, [pc, #24]	; (800b5dc <Hw_DcMotor_Handle+0x9c>)
 800b5c2:	8218      	strh	r0, [r3, #16]
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 800b5c4:	2201      	movs	r2, #1
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 800b5c6:	8098      	strh	r0, [r3, #4]
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 800b5c8:	735a      	strb	r2, [r3, #13]
 800b5ca:	705a      	strb	r2, [r3, #1]
 800b5cc:	e7cf      	b.n	800b56e <Hw_DcMotor_Handle+0x2e>
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 800b5ce:	4b03      	ldr	r3, [pc, #12]	; (800b5dc <Hw_DcMotor_Handle+0x9c>)
 800b5d0:	2064      	movs	r0, #100	; 0x64
 800b5d2:	8218      	strh	r0, [r3, #16]
 800b5d4:	e7f6      	b.n	800b5c4 <Hw_DcMotor_Handle+0x84>
 800b5d6:	2164      	movs	r1, #100	; 0x64
 800b5d8:	82d9      	strh	r1, [r3, #22]
 800b5da:	e7e8      	b.n	800b5ae <Hw_DcMotor_Handle+0x6e>
 800b5dc:	20001590 	.word	0x20001590

0800b5e0 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 800b5e0:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 800b5e2:	4b15      	ldr	r3, [pc, #84]	; (800b638 <EP1_IN_Callback+0x58>)
 800b5e4:	781a      	ldrb	r2, [r3, #0]
 800b5e6:	2a01      	cmp	r2, #1
 800b5e8:	d000      	beq.n	800b5ec <EP1_IN_Callback+0xc>
 800b5ea:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 800b5ec:	4c13      	ldr	r4, [pc, #76]	; (800b63c <EP1_IN_Callback+0x5c>)
 800b5ee:	6820      	ldr	r0, [r4, #0]
 800b5f0:	b300      	cbz	r0, 800b634 <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 800b5f2:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 800b5f4:	4a12      	ldr	r2, [pc, #72]	; (800b640 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 800b5f6:	d814      	bhi.n	800b622 <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 800b5f8:	6813      	ldr	r3, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 800b5fa:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 800b5fc:	1818      	adds	r0, r3, r0
 800b5fe:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 800b600:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 800b602:	b29b      	uxth	r3, r3
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 800b604:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800b606:	480f      	ldr	r0, [pc, #60]	; (800b644 <EP1_IN_Callback+0x64>)
 800b608:	21c0      	movs	r1, #192	; 0xc0
 800b60a:	18c0      	adds	r0, r0, r3
 800b60c:	462a      	mov	r2, r5
 800b60e:	4b0e      	ldr	r3, [pc, #56]	; (800b648 <EP1_IN_Callback+0x68>)
 800b610:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 800b612:	2001      	movs	r0, #1
 800b614:	4629      	mov	r1, r5
 800b616:	4b0d      	ldr	r3, [pc, #52]	; (800b64c <EP1_IN_Callback+0x6c>)
 800b618:	4798      	blx	r3
      SetEPTxValid(ENDP1); 
 800b61a:	2001      	movs	r0, #1
 800b61c:	4b0c      	ldr	r3, [pc, #48]	; (800b650 <EP1_IN_Callback+0x70>)
 800b61e:	4798      	blx	r3
 800b620:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 800b622:	6813      	ldr	r3, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 800b624:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 800b626:	f103 0140 	add.w	r1, r3, #64	; 0x40
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 800b62a:	6020      	str	r0, [r4, #0]
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 800b62c:	b29b      	uxth	r3, r3
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 800b62e:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800b630:	2540      	movs	r5, #64	; 0x40
 800b632:	e7e8      	b.n	800b606 <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 800b634:	7018      	strb	r0, [r3, #0]
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	20000ad8 	.word	0x20000ad8
 800b63c:	20000ae4 	.word	0x20000ae4
 800b640:	20000ae0 	.word	0x20000ae0
 800b644:	20001610 	.word	0x20001610
 800b648:	0800c9d5 	.word	0x0800c9d5
 800b64c:	0800cc15 	.word	0x0800cc15
 800b650:	0800cad9 	.word	0x0800cad9

0800b654 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 800b654:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 800b656:	f241 54a8 	movw	r4, #5544	; 0x15a8
 800b65a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800b65e:	f64c 43d5 	movw	r3, #52437	; 0xccd5
 800b662:	4621      	mov	r1, r4
 800b664:	2003      	movs	r0, #3
 800b666:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b66a:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 800b66c:	f64b 63fd 	movw	r3, #48893	; 0xbefd
 800b670:	b2c1      	uxtb	r1, r0
 800b672:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b676:	4620      	mov	r0, r4
 800b678:	4798      	blx	r3
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 800b67a:	f64c 23fd 	movw	r3, #51965	; 0xcafd
 800b67e:	2003      	movs	r0, #3
 800b680:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b684:	4798      	blx	r3
 800b686:	bd10      	pop	{r4, pc}

0800b688 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 800b688:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 800b68a:	4b08      	ldr	r3, [pc, #32]	; (800b6ac <SOF_Callback+0x24>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b05      	cmp	r3, #5
 800b690:	d000      	beq.n	800b694 <SOF_Callback+0xc>
 800b692:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 800b694:	4b06      	ldr	r3, [pc, #24]	; (800b6b0 <SOF_Callback+0x28>)
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	1c51      	adds	r1, r2, #1
 800b69a:	2a05      	cmp	r2, #5
 800b69c:	6019      	str	r1, [r3, #0]
 800b69e:	d1f8      	bne.n	800b692 <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	601a      	str	r2, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 800b6a4:	4b03      	ldr	r3, [pc, #12]	; (800b6b4 <SOF_Callback+0x2c>)
 800b6a6:	4798      	blx	r3
 800b6a8:	e7f3      	b.n	800b692 <SOF_Callback+0xa>
 800b6aa:	bf00      	nop
 800b6ac:	20000acc 	.word	0x20000acc
 800b6b0:	20000ab8 	.word	0x20000ab8
 800b6b4:	0800bf29 	.word	0x0800bf29

0800b6b8 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800b6b8:	f645 4244 	movw	r2, #23620	; 0x5c44
 800b6bc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b6c0:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800b6c2:	b570      	push	{r4, r5, r6, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800b6c4:	4c6b      	ldr	r4, [pc, #428]	; (800b874 <USB_Istr+0x1bc>)
 800b6c6:	b29b      	uxth	r3, r3

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800b6c8:	4d6b      	ldr	r5, [pc, #428]	; (800b878 <USB_Istr+0x1c0>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800b6ca:	8023      	strh	r3, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800b6cc:	8821      	ldrh	r1, [r4, #0]
 800b6ce:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800b6d0:	b088      	sub	sp, #32
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800b6d2:	4019      	ands	r1, r3
 800b6d4:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800b6d8:	b289      	uxth	r1, r1
 800b6da:	2900      	cmp	r1, #0
 800b6dc:	d168      	bne.n	800b7b0 <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800b6de:	8822      	ldrh	r2, [r4, #0]
 800b6e0:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800b6e4:	4213      	tst	r3, r2
 800b6e6:	d15f      	bne.n	800b7a8 <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 800b6e8:	8822      	ldrh	r2, [r4, #0]
 800b6ea:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800b6ee:	4213      	tst	r3, r2
 800b6f0:	d14e      	bne.n	800b790 <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 800b6f2:	8822      	ldrh	r2, [r4, #0]
 800b6f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b6f8:	4213      	tst	r3, r2
  {
    _SetISTR((uint16_t)CLR_ERR);
 800b6fa:	bf1f      	itttt	ne
 800b6fc:	f645 4244 	movwne	r2, #23620	; 0x5c44
 800b700:	f2c4 0200 	movtne	r2, #16384	; 0x4000
 800b704:	f64d 71ff 	movwne	r1, #57343	; 0xdfff
 800b708:	6011      	strne	r1, [r2, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 800b70a:	8822      	ldrh	r2, [r4, #0]
 800b70c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b710:	4213      	tst	r3, r2
 800b712:	d131      	bne.n	800b778 <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 800b714:	8822      	ldrh	r2, [r4, #0]
 800b716:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b71a:	4213      	tst	r3, r2
 800b71c:	d00e      	beq.n	800b73c <USB_Istr+0x84>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 800b71e:	4b57      	ldr	r3, [pc, #348]	; (800b87c <USB_Istr+0x1c4>)
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d125      	bne.n	800b772 <USB_Istr+0xba>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 800b726:	2002      	movs	r0, #2
 800b728:	4b55      	ldr	r3, [pc, #340]	; (800b880 <USB_Istr+0x1c8>)
 800b72a:	4798      	blx	r3
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 800b72c:	f645 4244 	movw	r2, #23620	; 0x5c44
 800b730:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b734:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800b738:	882b      	ldrh	r3, [r5, #0]
 800b73a:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 800b73c:	8822      	ldrh	r2, [r4, #0]
 800b73e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800b742:	4213      	tst	r3, r2
 800b744:	d013      	beq.n	800b76e <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 800b746:	f645 4244 	movw	r2, #23620	; 0x5c44
 800b74a:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 800b74e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 800b752:	f645 4348 	movw	r3, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 800b756:	6011      	str	r1, [r2, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 800b758:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	0419      	lsls	r1, r3, #16
 800b760:	d432      	bmi.n	800b7c8 <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 800b762:	4b48      	ldr	r3, [pc, #288]	; (800b884 <USB_Istr+0x1cc>)
 800b764:	2200      	movs	r2, #0
 800b766:	601a      	str	r2, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 800b768:	2007      	movs	r0, #7
 800b76a:	4b45      	ldr	r3, [pc, #276]	; (800b880 <USB_Istr+0x1c8>)
 800b76c:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 800b76e:	b008      	add	sp, #32
 800b770:	bd70      	pop	{r4, r5, r6, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 800b772:	4b45      	ldr	r3, [pc, #276]	; (800b888 <USB_Istr+0x1d0>)
 800b774:	4798      	blx	r3
 800b776:	e7d9      	b.n	800b72c <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 800b778:	f645 4344 	movw	r3, #23620	; 0x5c44
 800b77c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b780:	f64e 72ff 	movw	r2, #61439	; 0xefff
 800b784:	601a      	str	r2, [r3, #0]
    Resume(RESUME_EXTERNAL);
 800b786:	2000      	movs	r0, #0
 800b788:	4b3d      	ldr	r3, [pc, #244]	; (800b880 <USB_Istr+0x1c8>)
 800b78a:	4798      	blx	r3
 800b78c:	882b      	ldrh	r3, [r5, #0]
 800b78e:	e7c1      	b.n	800b714 <USB_Istr+0x5c>
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 800b790:	f645 4344 	movw	r3, #23620	; 0x5c44
 800b794:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b798:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 800b79c:	601a      	str	r2, [r3, #0]
    Device_Property.Reset();
 800b79e:	4b3b      	ldr	r3, [pc, #236]	; (800b88c <USB_Istr+0x1d4>)
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	4798      	blx	r3
 800b7a4:	882b      	ldrh	r3, [r5, #0]
 800b7a6:	e7a4      	b.n	800b6f2 <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 800b7a8:	4b39      	ldr	r3, [pc, #228]	; (800b890 <USB_Istr+0x1d8>)
 800b7aa:	4798      	blx	r3
 800b7ac:	882b      	ldrh	r3, [r5, #0]
 800b7ae:	e79b      	b.n	800b6e8 <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 800b7b0:	4b38      	ldr	r3, [pc, #224]	; (800b894 <USB_Istr+0x1dc>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 800b7b2:	f64f 51ff 	movw	r1, #65023	; 0xfdff
 800b7b6:	6011      	str	r1, [r2, #0]
    bIntPackSOF++;
 800b7b8:	781a      	ldrb	r2, [r3, #0]
 800b7ba:	3201      	adds	r2, #1
 800b7bc:	b2d2      	uxtb	r2, r2
 800b7be:	701a      	strb	r2, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 800b7c0:	4b35      	ldr	r3, [pc, #212]	; (800b898 <USB_Istr+0x1e0>)
 800b7c2:	4798      	blx	r3
 800b7c4:	882b      	ldrh	r3, [r5, #0]
 800b7c6:	e78a      	b.n	800b6de <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 800b7c8:	492e      	ldr	r1, [pc, #184]	; (800b884 <USB_Istr+0x1cc>)
 800b7ca:	680b      	ldr	r3, [r1, #0]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	600b      	str	r3, [r1, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 800b7d0:	680b      	ldr	r3, [r1, #0]
 800b7d2:	2b03      	cmp	r3, #3
 800b7d4:	d9c8      	bls.n	800b768 <USB_Istr+0xb0>
 800b7d6:	f645 4240 	movw	r2, #23616	; 0x5c40
 800b7da:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b7de:	6813      	ldr	r3, [r2, #0]
 800b7e0:	f013 0308 	ands.w	r3, r3, #8
 800b7e4:	d1c0      	bne.n	800b768 <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 800b7e6:	6810      	ldr	r0, [r2, #0]
 800b7e8:	4d2c      	ldr	r5, [pc, #176]	; (800b89c <USB_Istr+0x1e4>)
 800b7ea:	b280      	uxth	r0, r0
 800b7ec:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800b7f0:	6028      	str	r0, [r5, #0]
 800b7f2:	f2c4 0200 	movt	r2, #16384	; 0x4000
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800b7f6:	f852 4b04 	ldr.w	r4, [r2], #4
 800b7fa:	ae08      	add	r6, sp, #32
 800b7fc:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 800b800:	3301      	adds	r3, #1
 800b802:	b2a4      	uxth	r4, r4
 800b804:	2b08      	cmp	r3, #8
 800b806:	f840 4c20 	str.w	r4, [r0, #-32]
 800b80a:	d1f4      	bne.n	800b7f6 <USB_Istr+0x13e>
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 800b80c:	682a      	ldr	r2, [r5, #0]
        _SetCNTR(wCNTR);
 800b80e:	f645 4340 	movw	r3, #23616	; 0x5c40
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 800b812:	f042 0201 	orr.w	r2, r2, #1
 800b816:	602a      	str	r2, [r5, #0]
        _SetCNTR(wCNTR);
 800b818:	682a      	ldr	r2, [r5, #0]
 800b81a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b81e:	b292      	uxth	r2, r2
 800b820:	601a      	str	r2, [r3, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 800b822:	682a      	ldr	r2, [r5, #0]
        _SetCNTR(wCNTR);
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 800b824:	f645 4044 	movw	r0, #23620	; 0x5c44
        /*apply FRES */
        wCNTR|=CNTR_FRES;
        _SetCNTR(wCNTR);
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 800b828:	f022 0201 	bic.w	r2, r2, #1
 800b82c:	602a      	str	r2, [r5, #0]
        _SetCNTR(wCNTR);
 800b82e:	682a      	ldr	r2, [r5, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 800b830:	f2c4 0000 	movt	r0, #16384	; 0x4000
        wCNTR|=CNTR_FRES;
        _SetCNTR(wCNTR);
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
        _SetCNTR(wCNTR);
 800b834:	b292      	uxth	r2, r2
 800b836:	601a      	str	r2, [r3, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 800b838:	6802      	ldr	r2, [r0, #0]
 800b83a:	f645 4344 	movw	r3, #23620	; 0x5c44
 800b83e:	0552      	lsls	r2, r2, #21
 800b840:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b844:	d5f8      	bpl.n	800b838 <USB_Istr+0x180>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 800b846:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800b84a:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 800b84e:	6018      	str	r0, [r3, #0]
 800b850:	f2c4 0200 	movt	r2, #16384	; 0x4000
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 800b854:	2300      	movs	r3, #0
        _SetENDPOINT(i, EP[i]);
 800b856:	ac08      	add	r4, sp, #32
 800b858:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 800b85c:	f850 0c20 	ldr.w	r0, [r0, #-32]
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 800b860:	3301      	adds	r3, #1
        _SetENDPOINT(i, EP[i]);
 800b862:	b280      	uxth	r0, r0
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 800b864:	2b08      	cmp	r3, #8
        _SetENDPOINT(i, EP[i]);
 800b866:	f842 0b04 	str.w	r0, [r2], #4
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 800b86a:	d1f4      	bne.n	800b856 <USB_Istr+0x19e>
        _SetENDPOINT(i, EP[i]);
      
        esof_counter = 0;
 800b86c:	2300      	movs	r3, #0
 800b86e:	600b      	str	r3, [r1, #0]
 800b870:	e77a      	b.n	800b768 <USB_Istr+0xb0>
 800b872:	bf00      	nop
 800b874:	200015e8 	.word	0x200015e8
 800b878:	20001e44 	.word	0x20001e44
 800b87c:	20000ad0 	.word	0x20000ad0
 800b880:	0800bcb5 	.word	0x0800bcb5
 800b884:	20000ac4 	.word	0x20000ac4
 800b888:	0800bb85 	.word	0x0800bb85
 800b88c:	2000005c 	.word	0x2000005c
 800b890:	0800cd0d 	.word	0x0800cd0d
 800b894:	20000ac0 	.word	0x20000ac0
 800b898:	0800b689 	.word	0x0800b689
 800b89c:	20000abc 	.word	0x20000abc

0800b8a0 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 800b8a0:	4b03      	ldr	r3, [pc, #12]	; (800b8b0 <Virtual_Com_Port_SetConfiguration+0x10>)
 800b8a2:	7a9b      	ldrb	r3, [r3, #10]
 800b8a4:	b113      	cbz	r3, 800b8ac <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800b8a6:	4b03      	ldr	r3, [pc, #12]	; (800b8b4 <Virtual_Com_Port_SetConfiguration+0x14>)
 800b8a8:	2205      	movs	r2, #5
 800b8aa:	601a      	str	r2, [r3, #0]
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	20001e20 	.word	0x20001e20
 800b8b4:	20000acc 	.word	0x20000acc

0800b8b8 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 800b8b8:	f640 23cc 	movw	r3, #2764	; 0xacc
 800b8bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b8c0:	2204      	movs	r2, #4
 800b8c2:	601a      	str	r2, [r3, #0]
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop

0800b8c8 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 800b8c8:	4b03      	ldr	r3, [pc, #12]	; (800b8d8 <Virtual_Com_Port_Status_In+0x10>)
 800b8ca:	781a      	ldrb	r2, [r3, #0]
 800b8cc:	2a20      	cmp	r2, #32
 800b8ce:	d101      	bne.n	800b8d4 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	701a      	strb	r2, [r3, #0]
 800b8d4:	4770      	bx	lr
 800b8d6:	bf00      	nop
 800b8d8:	20000ac8 	.word	0x20000ac8

0800b8dc <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop

0800b8e0 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 800b8e0:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 800b8e2:	b510      	push	{r4, lr}
 800b8e4:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 800b8e6:	d003      	beq.n	800b8f0 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 800b8e8:	2820      	cmp	r0, #32
 800b8ea:	d011      	beq.n	800b910 <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 800b8ec:	2002      	movs	r0, #2
 800b8ee:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800b8f0:	4a0f      	ldr	r2, [pc, #60]	; (800b930 <Virtual_Com_Port_Data_Setup+0x50>)
 800b8f2:	6813      	ldr	r3, [r2, #0]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8fa:	2b21      	cmp	r3, #33	; 0x21
 800b8fc:	d1f6      	bne.n	800b8ec <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 800b8fe:	490d      	ldr	r1, [pc, #52]	; (800b934 <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800b900:	6813      	ldr	r3, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800b902:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 800b904:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800b906:	6199      	str	r1, [r3, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800b908:	825c      	strh	r4, [r3, #18]
  (*CopyRoutine)(0);
 800b90a:	4788      	blx	r1
  return USB_SUCCESS;
 800b90c:	4620      	mov	r0, r4
 800b90e:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800b910:	4a07      	ldr	r2, [pc, #28]	; (800b930 <Virtual_Com_Port_Data_Setup+0x50>)
 800b912:	6811      	ldr	r1, [r2, #0]
 800b914:	7809      	ldrb	r1, [r1, #0]
 800b916:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b91a:	2921      	cmp	r1, #33	; 0x21
 800b91c:	d003      	beq.n	800b926 <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800b91e:	4a06      	ldr	r2, [pc, #24]	; (800b938 <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 800b920:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800b922:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 800b924:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800b926:	4804      	ldr	r0, [pc, #16]	; (800b938 <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 800b928:	4904      	ldr	r1, [pc, #16]	; (800b93c <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 800b92a:	7003      	strb	r3, [r0, #0]
 800b92c:	e7e8      	b.n	800b900 <Virtual_Com_Port_Data_Setup+0x20>
 800b92e:	bf00      	nop
 800b930:	20001e40 	.word	0x20001e40
 800b934:	0800b975 	.word	0x0800b975
 800b938:	20000ac8 	.word	0x20000ac8
 800b93c:	0800b98d 	.word	0x0800b98d

0800b940 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800b940:	4b07      	ldr	r3, [pc, #28]	; (800b960 <Virtual_Com_Port_NoData_Setup+0x20>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b94a:	2b21      	cmp	r3, #33	; 0x21
 800b94c:	d001      	beq.n	800b952 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 800b94e:	2002      	movs	r0, #2
}
 800b950:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 800b952:	2802      	cmp	r0, #2
 800b954:	d001      	beq.n	800b95a <Virtual_Com_Port_NoData_Setup+0x1a>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 800b956:	2822      	cmp	r0, #34	; 0x22
 800b958:	d1f9      	bne.n	800b94e <Virtual_Com_Port_NoData_Setup+0xe>

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 800b95a:	2000      	movs	r0, #0
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	20001e40 	.word	0x20001e40

0800b964 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 800b964:	b109      	cbz	r1, 800b96a <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 800b966:	2002      	movs	r0, #2
 800b968:	4770      	bx	lr
  }
  else if (Interface > 1)
 800b96a:	2801      	cmp	r0, #1
 800b96c:	d8fb      	bhi.n	800b966 <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 800b96e:	4608      	mov	r0, r1
}
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop

0800b974 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 800b974:	b108      	cbz	r0, 800b97a <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800b976:	4803      	ldr	r0, [pc, #12]	; (800b984 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 800b978:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800b97a:	4b03      	ldr	r3, [pc, #12]	; (800b988 <Virtual_Com_Port_GetLineCoding+0x14>)
 800b97c:	2208      	movs	r2, #8
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	821a      	strh	r2, [r3, #16]
    return NULL;
 800b982:	4770      	bx	lr
 800b984:	200000d8 	.word	0x200000d8
 800b988:	20001e40 	.word	0x20001e40

0800b98c <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 800b98c:	b108      	cbz	r0, 800b992 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800b98e:	4803      	ldr	r0, [pc, #12]	; (800b99c <Virtual_Com_Port_SetLineCoding+0x10>)
}
 800b990:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800b992:	4b03      	ldr	r3, [pc, #12]	; (800b9a0 <Virtual_Com_Port_SetLineCoding+0x14>)
 800b994:	2208      	movs	r2, #8
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	821a      	strh	r2, [r3, #16]
    return NULL;
 800b99a:	4770      	bx	lr
 800b99c:	200000d8 	.word	0x200000d8
 800b9a0:	20001e40 	.word	0x20001e40

0800b9a4 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 800b9a4:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 800b9a6:	4b06      	ldr	r3, [pc, #24]	; (800b9c0 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 800b9ac:	2b04      	cmp	r3, #4
 800b9ae:	d805      	bhi.n	800b9bc <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 800b9b0:	4904      	ldr	r1, [pc, #16]	; (800b9c4 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 800b9b2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9b6:	4b04      	ldr	r3, [pc, #16]	; (800b9c8 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 800b9b8:	4798      	blx	r3
 800b9ba:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 800b9bc:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 800b9be:	bd08      	pop	{r3, pc}
 800b9c0:	20001e40 	.word	0x20001e40
 800b9c4:	200000b8 	.word	0x200000b8
 800b9c8:	0800c3e9 	.word	0x0800c3e9

0800b9cc <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 800b9cc:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 800b9ce:	f240 0154 	movw	r1, #84	; 0x54
 800b9d2:	f24c 33e9 	movw	r3, #50153	; 0xc3e9
 800b9d6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b9da:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b9de:	4798      	blx	r3
}
 800b9e0:	bd08      	pop	{r3, pc}
 800b9e2:	bf00      	nop

0800b9e4 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 800b9e4:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800b9e6:	f240 01b0 	movw	r1, #176	; 0xb0
 800b9ea:	f24c 33e9 	movw	r3, #50153	; 0xc3e9
 800b9ee:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b9f2:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b9f6:	4798      	blx	r3
}
 800b9f8:	bd08      	pop	{r3, pc}
 800b9fa:	bf00      	nop

0800b9fc <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800b9fc:	f641 6240 	movw	r2, #7744	; 0x1e40

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800ba00:	f24d 03d4 	movw	r3, #53460	; 0xd0d4
 800ba04:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800ba08:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ba0c:	6812      	ldr	r2, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800ba0e:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 800ba10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 800ba14:	f64c 232d 	movw	r3, #51757	; 0xca2d
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800ba18:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800ba1a:	7251      	strb	r1, [r2, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800ba1c:	7294      	strb	r4, [r2, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 800ba1e:	72d4      	strb	r4, [r2, #11]

  SetBTABLE(BTABLE_ADDRESS);
 800ba20:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ba24:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800ba26:	f64c 2641 	movw	r6, #51777	; 0xca41
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 800ba2a:	4798      	blx	r3

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800ba2c:	f6c0 0600 	movt	r6, #2048	; 0x800
 800ba30:	4620      	mov	r0, r4
 800ba32:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800ba36:	f64c 2559 	movw	r5, #51801	; 0xca59
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800ba3a:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800ba3c:	f6c0 0500 	movt	r5, #2048	; 0x800
 800ba40:	2110      	movs	r1, #16
 800ba42:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800ba44:	f64c 3aad 	movw	sl, #52141	; 0xcbad

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800ba48:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800ba4a:	f6c0 0a00 	movt	sl, #2048	; 0x800
 800ba4e:	2140      	movs	r1, #64	; 0x40
 800ba50:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800ba52:	f64c 3889 	movw	r8, #52105	; 0xcb89
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800ba56:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800ba58:	f6c0 0800 	movt	r8, #2048	; 0x800
 800ba5c:	2180      	movs	r1, #128	; 0x80
 800ba5e:	4620      	mov	r0, r4
 800ba60:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 800ba62:	f64c 3321 	movw	r3, #52001	; 0xcb21
 800ba66:	4620      	mov	r0, r4
 800ba68:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ba6c:	4798      	blx	r3
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800ba6e:	f240 035c 	movw	r3, #92	; 0x5c
 800ba72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba76:	f64c 4935 	movw	r9, #52277	; 0xcc35
 800ba7a:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800ba7e:	f6c0 0900 	movt	r9, #2048	; 0x800
 800ba82:	4620      	mov	r0, r4
 800ba84:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 800ba86:	f64c 23fd 	movw	r3, #51965	; 0xcafd
 800ba8a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ba8e:	4620      	mov	r0, r4
 800ba90:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 800ba92:	2001      	movs	r0, #1
 800ba94:	4621      	mov	r1, r4
 800ba96:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 800ba98:	2001      	movs	r0, #1
 800ba9a:	21c0      	movs	r1, #192	; 0xc0
 800ba9c:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800ba9e:	f64c 2799 	movw	r7, #51865	; 0xca99
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800baa2:	2001      	movs	r0, #1
 800baa4:	2120      	movs	r1, #32
 800baa6:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800baa8:	f6c0 0700 	movt	r7, #2048	; 0x800
 800baac:	2001      	movs	r0, #1
 800baae:	4621      	mov	r1, r4
 800bab0:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 800bab2:	2002      	movs	r0, #2
 800bab4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bab8:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800baba:	2002      	movs	r0, #2
 800babc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bac0:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 800bac2:	2002      	movs	r0, #2
 800bac4:	4621      	mov	r1, r4
 800bac6:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 800bac8:	2002      	movs	r0, #2
 800baca:	2120      	movs	r1, #32
 800bacc:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 800bace:	2003      	movs	r0, #3
 800bad0:	4621      	mov	r1, r4
 800bad2:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 800bad4:	2003      	movs	r0, #3
 800bad6:	f44f 7188 	mov.w	r1, #272	; 0x110
 800bada:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800badc:	2003      	movs	r0, #3
 800bade:	2140      	movs	r1, #64	; 0x40
 800bae0:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 800bae2:	2003      	movs	r0, #3
 800bae4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800bae8:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800baea:	4621      	mov	r1, r4
 800baec:	2003      	movs	r0, #3
 800baee:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 800baf0:	f64c 03dd 	movw	r3, #51421	; 0xc8dd
 800baf4:	f6c0 0300 	movt	r3, #2048	; 0x800
 800baf8:	4620      	mov	r0, r4
 800bafa:	4798      	blx	r3
  
  bDeviceState = ATTACHED;
 800bafc:	f640 23cc 	movw	r3, #2764	; 0xacc
 800bb00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb04:	2201      	movs	r2, #1
 800bb06:	601a      	str	r2, [r3, #0]
 800bb08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bb0c <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 800bb0c:	f64b 73cd 	movw	r3, #49101	; 0xbfcd
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 800bb10:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 800bb12:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bb16:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 800bb18:	f641 6340 	movw	r3, #7744	; 0x1e40
 800bb1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 800bb24:	f64b 3349 	movw	r3, #47945	; 0xbb49

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 800bb28:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 800bb2a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bb2e:	4798      	blx	r3

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 800bb30:	f64c 43a9 	movw	r3, #52393	; 0xcca9
 800bb34:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bb38:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 800bb3a:	f640 23cc 	movw	r3, #2764	; 0xacc
 800bb3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb42:	601c      	str	r4, [r3, #0]
 800bb44:	bd10      	pop	{r4, pc}
 800bb46:	bf00      	nop

0800bb48 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800bb48:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800bb4a:	f64b 63e1 	movw	r3, #48865	; 0xbee1
 800bb4e:	2001      	movs	r0, #1
 800bb50:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bb54:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800bb56:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800bb5a:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800bb5e:	f641 6244 	movw	r2, #7748	; 0x1e44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800bb62:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800bb66:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800bb68:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800bb6c:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800bb6e:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800bb72:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800bb76:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800bb78:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 800bb7a:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800bb7c:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800bb7e:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 800bb80:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 800bb82:	bd38      	pop	{r3, r4, r5, pc}

0800bb84 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 800bb84:	b570      	push	{r4, r5, r6, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 800bb86:	2300      	movs	r3, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 800bb88:	b082      	sub	sp, #8
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 800bb8a:	f645 4140 	movw	r1, #23616	; 0x5c40
 800bb8e:	f2c4 0100 	movt	r1, #16384	; 0x4000
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 800bb92:	9301      	str	r3, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 800bb94:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800bb98:	680d      	ldr	r5, [r1, #0]
 800bb9a:	493a      	ldr	r1, [pc, #232]	; (800bc84 <Suspend+0x100>)
 800bb9c:	f2c4 0200 	movt	r2, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800bba0:	f852 0b04 	ldr.w	r0, [r2], #4
 800bba4:	b280      	uxth	r0, r0
 800bba6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	2b08      	cmp	r3, #8
 800bbae:	d1f7      	bne.n	800bba0 <Suspend+0x1c>
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800bbb0:	b2aa      	uxth	r2, r5
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 800bbb2:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800bbb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bbba:	f645 4340 	movw	r3, #23616	; 0x5c40
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 800bbbe:	402c      	ands	r4, r5
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800bbc0:	f2c4 0300 	movt	r3, #16384	; 0x4000
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 800bbc4:	f042 0601 	orr.w	r6, r2, #1
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 800bbc8:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 800bbcc:	f645 4044 	movw	r0, #23620	; 0x5c44
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800bbd0:	601a      	str	r2, [r3, #0]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 800bbd2:	f2c4 0000 	movt	r0, #16384	; 0x4000
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 800bbd6:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 800bbd8:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 800bbda:	6802      	ldr	r2, [r0, #0]
 800bbdc:	f645 4344 	movw	r3, #23620	; 0x5c44
 800bbe0:	0552      	lsls	r2, r2, #21
 800bbe2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bbe6:	d5f8      	bpl.n	800bbda <Suspend+0x56>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 800bbe8:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800bbec:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 800bbf0:	6018      	str	r0, [r3, #0]
 800bbf2:	f2c4 0200 	movt	r2, #16384	; 0x4000
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800bbf6:	2300      	movs	r3, #0
	_SetENDPOINT(i, EP[i]);
 800bbf8:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800bbfc:	3301      	adds	r3, #1
	_SetENDPOINT(i, EP[i]);
 800bbfe:	b280      	uxth	r0, r0
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800bc00:	2b08      	cmp	r3, #8
	_SetENDPOINT(i, EP[i]);
 800bc02:	f842 0b04 	str.w	r0, [r2], #4
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800bc06:	d1f7      	bne.n	800bbf8 <Suspend+0x74>
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 800bc08:	f645 4340 	movw	r3, #23616	; 0x5c40
 800bc0c:	f2c4 0300 	movt	r3, #16384	; 0x4000
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 800bc10:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	_SetCNTR(wCNTR);
 800bc14:	601c      	str	r4, [r3, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 800bc16:	6819      	ldr	r1, [r3, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800bc18:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 800bc1c:	b289      	uxth	r1, r1
 800bc1e:	f041 0104 	orr.w	r1, r1, #4
 800bc22:	6019      	str	r1, [r3, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800bc24:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bc28:	6811      	ldr	r1, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800bc2a:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800bc2e:	9101      	str	r1, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 800bc30:	6811      	ldr	r1, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800bc32:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 800bc36:	f021 0103 	bic.w	r1, r1, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 800bc3a:	f041 0101 	orr.w	r1, r1, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 800bc3e:	6011      	str	r1, [r2, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800bc40:	6820      	ldr	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 800bc42:	f645 4144 	movw	r1, #23620	; 0x5c44
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800bc46:	f040 0004 	orr.w	r0, r0, #4
 800bc4a:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 800bc4c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800bc50:	6808      	ldr	r0, [r1, #0]
 800bc52:	04c0      	lsls	r0, r0, #19
 800bc54:	d50f      	bpl.n	800bc76 <Suspend+0xf2>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 800bc56:	f64e 70ff 	movw	r0, #61439	; 0xefff
 800bc5a:	6008      	str	r0, [r1, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 800bc5c:	6818      	ldr	r0, [r3, #0]
        wCNTR&=~CNTR_FSUSP;
 800bc5e:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 800bc62:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 800bc64:	6019      	str	r1, [r3, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 800bc66:	9b01      	ldr	r3, [sp, #4]
 800bc68:	6013      	str	r3, [r2, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	f023 0304 	bic.w	r3, r3, #4
 800bc70:	6023      	str	r3, [r4, #0]
#endif
    }
}
 800bc72:	b002      	add	sp, #8
 800bc74:	bd70      	pop	{r4, r5, r6, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 800bc76:	4b04      	ldr	r3, [pc, #16]	; (800bc88 <Suspend+0x104>)
 800bc78:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 800bc7a:	6823      	ldr	r3, [r4, #0]
 800bc7c:	f023 0304 	bic.w	r3, r3, #4
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	e7f6      	b.n	800bc72 <Suspend+0xee>
 800bc84:	200015f0 	.word	0x200015f0
 800bc88:	0800c011 	.word	0x0800c011

0800bc8c <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 800bc8c:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 800bc8e:	f645 4440 	movw	r4, #23616	; 0x5c40
 800bc92:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800bc96:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 800bc98:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800bc9c:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 800bc9e:	f64b 6311 	movw	r3, #48657	; 0xbe11
 800bca2:	f6c0 0300 	movt	r3, #2048	; 0x800
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 800bca6:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 800bca8:	4798      	blx	r3

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 800bcaa:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800bcae:	6023      	str	r3, [r4, #0]
 800bcb0:	bd10      	pop	{r4, pc}
 800bcb2:	bf00      	nop

0800bcb4 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 800bcb4:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 800bcb6:	4c2b      	ldr	r4, [pc, #172]	; (800bd64 <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 800bcb8:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 800bcba:	bf18      	it	ne
 800bcbc:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 800bcbe:	7823      	ldrb	r3, [r4, #0]
 800bcc0:	2b05      	cmp	r3, #5
 800bcc2:	d819      	bhi.n	800bcf8 <Resume+0x44>
 800bcc4:	e8df f003 	tbb	[pc, r3]
 800bcc8:	2f2a221b 	.word	0x2f2a221b
 800bccc:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 800bcce:	7863      	ldrb	r3, [r4, #1]
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 800bcd6:	7863      	ldrb	r3, [r4, #1]
 800bcd8:	b983      	cbnz	r3, 800bcfc <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 800bcda:	f645 4240 	movw	r2, #23616	; 0x5c40
 800bcde:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bce2:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 800bce4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800bce8:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 800bcea:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 800bcec:	4a1d      	ldr	r2, [pc, #116]	; (800bd64 <Resume+0xb0>)
 800bcee:	2106      	movs	r1, #6
 800bcf0:	7011      	strb	r1, [r2, #0]
        remotewakeupon = 0;
 800bcf2:	4a1d      	ldr	r2, [pc, #116]	; (800bd68 <Resume+0xb4>)
 800bcf4:	6013      	str	r3, [r2, #0]
 800bcf6:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 800bcf8:	2306      	movs	r3, #6
 800bcfa:	7023      	strb	r3, [r4, #0]
 800bcfc:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 800bcfe:	4b1a      	ldr	r3, [pc, #104]	; (800bd68 <Resume+0xb4>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d028      	beq.n	800bd58 <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 800bd06:	2305      	movs	r3, #5
 800bd08:	7023      	strb	r3, [r4, #0]
 800bd0a:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 800bd0c:	4b17      	ldr	r3, [pc, #92]	; (800bd6c <Resume+0xb8>)
 800bd0e:	4798      	blx	r3
      ResumeS.eState = RESUME_START;
 800bd10:	2304      	movs	r3, #4
 800bd12:	7023      	strb	r3, [r4, #0]
      remotewakeupon = 1;
 800bd14:	4b14      	ldr	r3, [pc, #80]	; (800bd68 <Resume+0xb4>)
 800bd16:	2201      	movs	r2, #1
 800bd18:	601a      	str	r2, [r3, #0]
      break;
 800bd1a:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 800bd20:	2303      	movs	r3, #3
 800bd22:	7023      	strb	r3, [r4, #0]
      break;
 800bd24:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 800bd26:	7863      	ldrb	r3, [r4, #1]
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 800bd2e:	7863      	ldrb	r3, [r4, #1]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1e3      	bne.n	800bcfc <Resume+0x48>
        ResumeS.eState = RESUME_START;
 800bd34:	4b0b      	ldr	r3, [pc, #44]	; (800bd64 <Resume+0xb0>)
 800bd36:	2204      	movs	r2, #4
 800bd38:	701a      	strb	r2, [r3, #0]
 800bd3a:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 800bd3c:	f645 4340 	movw	r3, #23616	; 0x5c40
 800bd40:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bd44:	681a      	ldr	r2, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 800bd46:	b292      	uxth	r2, r2
 800bd48:	f042 0210 	orr.w	r2, r2, #16
 800bd4c:	601a      	str	r2, [r3, #0]
      ResumeS.eState = RESUME_ON;
 800bd4e:	2305      	movs	r3, #5
 800bd50:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 800bd52:	230a      	movs	r3, #10
 800bd54:	7063      	strb	r3, [r4, #1]
      break;
 800bd56:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 800bd58:	4b04      	ldr	r3, [pc, #16]	; (800bd6c <Resume+0xb8>)
 800bd5a:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 800bd5c:	2306      	movs	r3, #6
 800bd5e:	7023      	strb	r3, [r4, #0]
 800bd60:	bd10      	pop	{r4, pc}
 800bd62:	bf00      	nop
 800bd64:	200015ec 	.word	0x200015ec
 800bd68:	20000ad4 	.word	0x20000ad4
 800bd6c:	0800bc8d 	.word	0x0800bc8d

0800bd70 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 800bd70:	f240 4314 	movw	r3, #1044	; 0x414
 800bd74:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bd78:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bd7c:	601a      	str	r2, [r3, #0]
 800bd7e:	4770      	bx	lr

0800bd80 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 800bd80:	b430      	push	{r4, r5}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800bd82:	b1ca      	cbz	r2, 800bdb8 <IntToUnicode+0x38>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800bd84:	1e55      	subs	r5, r2, #1
 800bd86:	b2ed      	uxtb	r5, r5
 800bd88:	3501      	adds	r5, #1
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	006d      	lsls	r5, r5, #1
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800bd8e:	461c      	mov	r4, r3
 800bd90:	e007      	b.n	800bda2 <IntToUnicode+0x22>
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800bd92:	3230      	adds	r2, #48	; 0x30
 800bd94:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800bd96:	18ca      	adds	r2, r1, r3
 800bd98:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 800bd9a:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800bd9c:	42ab      	cmp	r3, r5
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800bd9e:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800bda0:	d00a      	beq.n	800bdb8 <IntToUnicode+0x38>
  {
    if( ((value >> 28)) < 0xA )
 800bda2:	0f02      	lsrs	r2, r0, #28
 800bda4:	2a09      	cmp	r2, #9
 800bda6:	d9f4      	bls.n	800bd92 <IntToUnicode+0x12>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800bda8:	3237      	adds	r2, #55	; 0x37
 800bdaa:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800bdac:	18ca      	adds	r2, r1, r3
 800bdae:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 800bdb0:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800bdb2:	42ab      	cmp	r3, r5
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800bdb4:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800bdb6:	d1f4      	bne.n	800bda2 <IntToUnicode+0x22>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 800bdb8:	bc30      	pop	{r4, r5}
 800bdba:	4770      	bx	lr

0800bdbc <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 800bdbc:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 800bdbe:	f24b 63b9 	movw	r3, #46777	; 0xb6b9
 800bdc2:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bdc6:	4798      	blx	r3
 800bdc8:	bd08      	pop	{r3, pc}
 800bdca:	bf00      	nop

0800bdcc <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 800bdcc:	f241 0304 	movw	r3, #4100	; 0x1004
 800bdd0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800bdda:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800bde2:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	601a      	str	r2, [r3, #0]
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop

0800bdec <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 800bdec:	f241 0204 	movw	r2, #4100	; 0x1004
 800bdf0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bdf4:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 800bdf6:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 800bdfa:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 800bdfe:	6011      	str	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 800be00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800be0a:	601a      	str	r2, [r3, #0]
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop

0800be10 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 800be10:	4b05      	ldr	r3, [pc, #20]	; (800be28 <Leave_LowPowerMode+0x18>)
 800be12:	7a9b      	ldrb	r3, [r3, #10]
 800be14:	b91b      	cbnz	r3, 800be1e <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 800be16:	4b05      	ldr	r3, [pc, #20]	; (800be2c <Leave_LowPowerMode+0x1c>)
 800be18:	2201      	movs	r2, #1
 800be1a:	601a      	str	r2, [r3, #0]
 800be1c:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800be1e:	4b03      	ldr	r3, [pc, #12]	; (800be2c <Leave_LowPowerMode+0x1c>)
 800be20:	2205      	movs	r2, #5
 800be22:	601a      	str	r2, [r3, #0]
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	20001e20 	.word	0x20001e20
 800be2c:	20000acc 	.word	0x20000acc

0800be30 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 800be30:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 800be34:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 800be36:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800be3a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800be3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 800be42:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800be44:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800be48:	6819      	ldr	r1, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 800be4a:	f240 4204 	movw	r2, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800be4e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800be52:	6019      	str	r1, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 800be54:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800be58:	6810      	ldr	r0, [r2, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 800be5a:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 800be5e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800be62:	6010      	str	r0, [r2, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 800be64:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800be68:	6808      	ldr	r0, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800be6a:	f240 420c 	movw	r2, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 800be6e:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 800be72:	6008      	str	r0, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800be74:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800be78:	6811      	ldr	r1, [r2, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800be7a:	f24b 0425 	movw	r4, #45093	; 0xb025
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800be7e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800be82:	6011      	str	r1, [r2, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 800be84:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800be86:	f64b 51bd 	movw	r1, #48573	; 0xbdbd
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 800be8a:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800be8e:	2090      	movs	r0, #144	; 0x90
 800be90:	f6c0 0100 	movt	r1, #2048	; 0x800
 800be94:	2200      	movs	r2, #0
 800be96:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 800be9a:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800be9c:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 800be9e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800bea2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800bea6:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 800bea8:	f64b 5171 	movw	r1, #48497	; 0xbd71
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 800beac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800beb0:	601a      	str	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 800beb2:	f6c0 0100 	movt	r1, #2048	; 0x800
 800beb6:	2200      	movs	r2, #0
 800beb8:	20e8      	movs	r0, #232	; 0xe8
 800beba:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 800bebc:	f24e 1204 	movw	r2, #57604	; 0xe104
 800bec0:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800bec4:	6811      	ldr	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 800bec6:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 800beca:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800bece:	6011      	str	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 800bed0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800beda:	601a      	str	r2, [r3, #0]
 800bedc:	bd38      	pop	{r3, r4, r5, pc}
 800bede:	bf00      	nop

0800bee0 <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 800bee0:	f241 030c 	movw	r3, #4108	; 0x100c
 800bee4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bee8:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 800beea:	b918      	cbnz	r0, 800bef4 <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 800beec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bef0:	601a      	str	r2, [r3, #0]
 800bef2:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 800bef4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bef8:	601a      	str	r2, [r3, #0]
 800befa:	4770      	bx	lr

0800befc <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800befc:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800befe:	460d      	mov	r5, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800bf00:	b083      	sub	sp, #12
 800bf02:	4606      	mov	r6, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800bf04:	b159      	cbz	r1, 800bf1e <USB_To_USART_Send_Data+0x22>
 800bf06:	4f07      	ldr	r7, [pc, #28]	; (800bf24 <USB_To_USART_Send_Data+0x28>)
 800bf08:	2400      	movs	r4, #0
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800bf0a:	5d33      	ldrb	r3, [r6, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800bf0c:	2005      	movs	r0, #5
 800bf0e:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800bf12:	3401      	adds	r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800bf14:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800bf18:	47b8      	blx	r7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800bf1a:	42ac      	cmp	r4, r5
 800bf1c:	d3f5      	bcc.n	800bf0a <USB_To_USART_Send_Data+0xe>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 800bf1e:	b003      	add	sp, #12
 800bf20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf22:	bf00      	nop
 800bf24:	0800afa5 	.word	0x0800afa5

0800bf28 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 800bf28:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 800bf2a:	4c20      	ldr	r4, [pc, #128]	; (800bfac <Handle_USBAsynchXfer+0x84>)
 800bf2c:	7823      	ldrb	r3, [r4, #0]
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d026      	beq.n	800bf80 <Handle_USBAsynchXfer+0x58>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 800bf32:	4d1f      	ldr	r5, [pc, #124]	; (800bfb0 <Handle_USBAsynchXfer+0x88>)
 800bf34:	682b      	ldr	r3, [r5, #0]
 800bf36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf3a:	d022      	beq.n	800bf82 <Handle_USBAsynchXfer+0x5a>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800bf3c:	4a1d      	ldr	r2, [pc, #116]	; (800bfb4 <Handle_USBAsynchXfer+0x8c>)
 800bf3e:	6811      	ldr	r1, [r2, #0]
 800bf40:	428b      	cmp	r3, r1
 800bf42:	d02f      	beq.n	800bfa4 <Handle_USBAsynchXfer+0x7c>
 800bf44:	bf98      	it	ls
 800bf46:	b298      	uxthls	r0, r3
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 800bf48:	d921      	bls.n	800bf8e <Handle_USBAsynchXfer+0x66>
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 800bf4a:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
 800bf4e:	4a1a      	ldr	r2, [pc, #104]	; (800bfb8 <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800bf50:	2940      	cmp	r1, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 800bf52:	6011      	str	r1, [r2, #0]
 800bf54:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800bf56:	d91f      	bls.n	800bf98 <Handle_USBAsynchXfer+0x70>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 800bf58:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 800bf5a:	3940      	subs	r1, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 800bf5c:	602b      	str	r3, [r5, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 800bf5e:	6011      	str	r1, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800bf60:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800bf62:	4b16      	ldr	r3, [pc, #88]	; (800bfbc <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 800bf64:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800bf66:	1818      	adds	r0, r3, r0
 800bf68:	4632      	mov	r2, r6
 800bf6a:	21c0      	movs	r1, #192	; 0xc0
 800bf6c:	4b14      	ldr	r3, [pc, #80]	; (800bfc0 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 800bf6e:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800bf70:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 800bf72:	4628      	mov	r0, r5
 800bf74:	4b13      	ldr	r3, [pc, #76]	; (800bfc4 <Handle_USBAsynchXfer+0x9c>)
 800bf76:	4631      	mov	r1, r6
 800bf78:	4798      	blx	r3
    SetEPTxValid(ENDP1); 
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	4b12      	ldr	r3, [pc, #72]	; (800bfc8 <Handle_USBAsynchXfer+0xa0>)
 800bf7e:	4798      	blx	r3
 800bf80:	bd70      	pop	{r4, r5, r6, pc}
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800bf82:	4b0c      	ldr	r3, [pc, #48]	; (800bfb4 <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 800bf84:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800bf86:	6819      	ldr	r1, [r3, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 800bf88:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	b151      	cbz	r1, 800bfa4 <Handle_USBAsynchXfer+0x7c>
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 800bf8e:	1ac9      	subs	r1, r1, r3
 800bf90:	4a09      	ldr	r2, [pc, #36]	; (800bfb8 <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800bf92:	2940      	cmp	r1, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 800bf94:	6011      	str	r1, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800bf96:	d8df      	bhi.n	800bf58 <Handle_USBAsynchXfer+0x30>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 800bf98:	18cb      	adds	r3, r1, r3
 800bf9a:	602b      	str	r3, [r5, #0]
      USART_Rx_length = 0;
 800bf9c:	2300      	movs	r3, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 800bf9e:	b28e      	uxth	r6, r1
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 800bfa0:	6013      	str	r3, [r2, #0]
 800bfa2:	e7de      	b.n	800bf62 <Handle_USBAsynchXfer+0x3a>
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
    {
      USB_Tx_State = 0; 
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	7023      	strb	r3, [r4, #0]
      return;
 800bfa8:	bd70      	pop	{r4, r5, r6, pc}
 800bfaa:	bf00      	nop
 800bfac:	20000ad8 	.word	0x20000ad8
 800bfb0:	20000ae0 	.word	0x20000ae0
 800bfb4:	20000adc 	.word	0x20000adc
 800bfb8:	20000ae4 	.word	0x20000ae4
 800bfbc:	20001610 	.word	0x20001610
 800bfc0:	0800c9d5 	.word	0x0800c9d5
 800bfc4:	0800cc15 	.word	0x0800cc15
 800bfc8:	0800cad9 	.word	0x0800cad9

0800bfcc <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 800bfcc:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800bfce:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 800bfd2:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800bfd6:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 800bfda:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800bfde:	6812      	ldr	r2, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 800bfe0:	681b      	ldr	r3, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 800bfe2:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 800bfe6:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 800bfea:	18d0      	adds	r0, r2, r3
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 800bfec:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 800bfee:	d007      	beq.n	800c000 <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 800bff0:	4904      	ldr	r1, [pc, #16]	; (800c004 <Get_SerialNum+0x38>)
 800bff2:	2208      	movs	r2, #8
 800bff4:	4d04      	ldr	r5, [pc, #16]	; (800c008 <Get_SerialNum+0x3c>)
 800bff6:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 800bff8:	4620      	mov	r0, r4
 800bffa:	4904      	ldr	r1, [pc, #16]	; (800c00c <Get_SerialNum+0x40>)
 800bffc:	2204      	movs	r2, #4
 800bffe:	47a8      	blx	r5
 800c000:	bd38      	pop	{r3, r4, r5, pc}
 800c002:	bf00      	nop
 800c004:	20000002 	.word	0x20000002
 800c008:	0800bd81 	.word	0x0800bd81
 800c00c:	20000012 	.word	0x20000012

0800c010 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 800c010:	bf30      	wfi
 800c012:	4770      	bx	lr

0800c014 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 800c014:	b508      	push	{r3, lr}
  if (Length == 0)
 800c016:	b138      	cbz	r0, 800c028 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 800c018:	4b06      	ldr	r3, [pc, #24]	; (800c034 <Standard_GetConfiguration+0x20>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 800c020:	4b05      	ldr	r3, [pc, #20]	; (800c038 <Standard_GetConfiguration+0x24>)
 800c022:	6818      	ldr	r0, [r3, #0]
 800c024:	300a      	adds	r0, #10
}
 800c026:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800c028:	4b03      	ldr	r3, [pc, #12]	; (800c038 <Standard_GetConfiguration+0x24>)
 800c02a:	2201      	movs	r2, #1
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 800c030:	bd08      	pop	{r3, pc}
 800c032:	bf00      	nop
 800c034:	20001e3c 	.word	0x20001e3c
 800c038:	20001e40 	.word	0x20001e40

0800c03c <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800c03c:	b508      	push	{r3, lr}
  if (Length == 0)
 800c03e:	b138      	cbz	r0, 800c050 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 800c040:	4b06      	ldr	r3, [pc, #24]	; (800c05c <Standard_GetInterface+0x20>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 800c048:	4b05      	ldr	r3, [pc, #20]	; (800c060 <Standard_GetInterface+0x24>)
 800c04a:	6818      	ldr	r0, [r3, #0]
 800c04c:	300c      	adds	r0, #12
}
 800c04e:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800c050:	4b03      	ldr	r3, [pc, #12]	; (800c060 <Standard_GetInterface+0x24>)
 800c052:	2201      	movs	r2, #1
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 800c058:	bd08      	pop	{r3, pc}
 800c05a:	bf00      	nop
 800c05c:	20001e3c 	.word	0x20001e3c
 800c060:	20001e40 	.word	0x20001e40

0800c064 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 800c064:	b508      	push	{r3, lr}
  if (Length == 0)
 800c066:	2800      	cmp	r0, #0
 800c068:	d037      	beq.n	800c0da <Standard_GetStatus+0x76>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800c06a:	4b21      	ldr	r3, [pc, #132]	; (800c0f0 <Standard_GetStatus+0x8c>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800c06c:	4821      	ldr	r0, [pc, #132]	; (800c0f4 <Standard_GetStatus+0x90>)
 800c06e:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800c070:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800c072:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800c074:	7813      	ldrb	r3, [r2, #0]
 800c076:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800c07a:	d017      	beq.n	800c0ac <Standard_GetStatus+0x48>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d02b      	beq.n	800c0d8 <Standard_GetStatus+0x74>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800c080:	2b02      	cmp	r3, #2
 800c082:	d128      	bne.n	800c0d6 <Standard_GetStatus+0x72>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800c084:	7953      	ldrb	r3, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 800c086:	f003 020f 	and.w	r2, r3, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800c08a:	0092      	lsls	r2, r2, #2
 800c08c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c090:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800c094:	f013 0f80 	tst.w	r3, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800c098:	6813      	ldr	r3, [r2, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800c09a:	d123      	bne.n	800c0e4 <Standard_GetStatus+0x80>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800c09c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c0a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0a4:	d111      	bne.n	800c0ca <Standard_GetStatus+0x66>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	7003      	strb	r3, [r0, #0]
 800c0aa:	e00e      	b.n	800c0ca <Standard_GetStatus+0x66>
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 800c0ac:	7a52      	ldrb	r2, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800c0ae:	f002 0320 	and.w	r3, r2, #32
 800c0b2:	b2db      	uxtb	r3, r3
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800c0b4:	f002 0240 	and.w	r2, r2, #64	; 0x40
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 800c0b8:	428b      	cmp	r3, r1
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800c0ba:	b2d2      	uxtb	r2, r2
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 800c0bc:	bf18      	it	ne
 800c0be:	2302      	movne	r3, #2
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800c0c0:	2a00      	cmp	r2, #0
 800c0c2:	d0f1      	beq.n	800c0a8 <Standard_GetStatus+0x44>
    {
      SetBit(StatusInfo0, 0);
 800c0c4:	f043 0301 	orr.w	r3, r3, #1
 800c0c8:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 800c0ca:	4b0b      	ldr	r3, [pc, #44]	; (800c0f8 <Standard_GetStatus+0x94>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	691b      	ldr	r3, [r3, #16]
 800c0d0:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 800c0d2:	4808      	ldr	r0, [pc, #32]	; (800c0f4 <Standard_GetStatus+0x90>)
 800c0d4:	bd08      	pop	{r3, pc}
    }

  }
  else
  {
    return NULL;
 800c0d6:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 800c0d8:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800c0da:	4b05      	ldr	r3, [pc, #20]	; (800c0f0 <Standard_GetStatus+0x8c>)
 800c0dc:	2202      	movs	r2, #2
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	821a      	strh	r2, [r3, #16]
    return 0;
 800c0e2:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800c0e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c0e8:	2b10      	cmp	r3, #16
 800c0ea:	d1ee      	bne.n	800c0ca <Standard_GetStatus+0x66>
 800c0ec:	e7db      	b.n	800c0a6 <Standard_GetStatus+0x42>
 800c0ee:	bf00      	nop
 800c0f0:	20001e40 	.word	0x20001e40
 800c0f4:	20001e10 	.word	0x20001e10
 800c0f8:	20001e3c 	.word	0x20001e3c

0800c0fc <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 800c0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800c100:	4e2b      	ldr	r6, [pc, #172]	; (800c1b0 <DataStageIn+0xb4>)
 800c102:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 800c104:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800c106:	7a20      	ldrb	r0, [r4, #8]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	bf08      	it	eq
 800c10c:	2804      	cmpeq	r0, #4
 800c10e:	bf14      	ite	ne
 800c110:	f04f 0800 	movne.w	r8, #0
 800c114:	f04f 0801 	moveq.w	r8, #1
 800c118:	d10a      	bne.n	800c130 <DataStageIn+0x34>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 800c11a:	4b26      	ldr	r3, [pc, #152]	; (800c1b4 <DataStageIn+0xb8>)
 800c11c:	781a      	ldrb	r2, [r3, #0]
 800c11e:	2a01      	cmp	r2, #1
 800c120:	d030      	beq.n	800c184 <DataStageIn+0x88>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 800c122:	4b25      	ldr	r3, [pc, #148]	; (800c1b8 <DataStageIn+0xbc>)
 800c124:	2210      	movs	r2, #16
 800c126:	2707      	movs	r7, #7
 800c128:	801a      	strh	r2, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800c12a:	7227      	strb	r7, [r4, #8]
 800c12c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 800c130:	8aa7      	ldrh	r7, [r4, #20]
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800c132:	69a2      	ldr	r2, [r4, #24]
 800c134:	429f      	cmp	r7, r3
 800c136:	bf34      	ite	cc
 800c138:	463d      	movcc	r5, r7
 800c13a:	461d      	movcs	r5, r3
 800c13c:	4628      	mov	r0, r5
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 800c13e:	42bb      	cmp	r3, r7
 800c140:	bf8c      	ite	hi
 800c142:	2702      	movhi	r7, #2
 800c144:	2704      	movls	r7, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800c146:	4790      	blx	r2
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800c148:	4b1c      	ldr	r3, [pc, #112]	; (800c1bc <DataStageIn+0xc0>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800c14a:	4681      	mov	r9, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800c14c:	4640      	mov	r0, r8
 800c14e:	4798      	blx	r3
 800c150:	462a      	mov	r2, r5
 800c152:	4601      	mov	r1, r0
 800c154:	4b1a      	ldr	r3, [pc, #104]	; (800c1c0 <DataStageIn+0xc4>)
 800c156:	4648      	mov	r0, r9
 800c158:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 800c15a:	4629      	mov	r1, r5
 800c15c:	4b19      	ldr	r3, [pc, #100]	; (800c1c4 <DataStageIn+0xc8>)
 800c15e:	4640      	mov	r0, r8
 800c160:	4798      	blx	r3

  pEPinfo->Usb_wLength -= Length;
 800c162:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800c164:	8a62      	ldrh	r2, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800c166:	1b5b      	subs	r3, r3, r5
 800c168:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 800c16a:	4b13      	ldr	r3, [pc, #76]	; (800c1b8 <DataStageIn+0xbc>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 800c16c:	18ad      	adds	r5, r5, r2
  vSetEPTxStatus(EP_TX_VALID);
 800c16e:	2230      	movs	r2, #48	; 0x30
 800c170:	801a      	strh	r2, [r3, #0]
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 800c172:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800c174:	4b14      	ldr	r3, [pc, #80]	; (800c1c8 <DataStageIn+0xcc>)
 800c176:	6834      	ldr	r4, [r6, #0]
 800c178:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800c17c:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800c17e:	7227      	strb	r7, [r4, #8]
 800c180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 800c184:	f645 4250 	movw	r2, #23632	; 0x5c50
 800c188:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c18c:	6811      	ldr	r1, [r2, #0]
 800c18e:	f243 0202 	movw	r2, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800c192:	b289      	uxth	r1, r1
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 800c194:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c198:	188a      	adds	r2, r1, r2
 800c19a:	0052      	lsls	r2, r2, #1
 800c19c:	2100      	movs	r1, #0
 800c19e:	6011      	str	r1, [r2, #0]
 800c1a0:	4a05      	ldr	r2, [pc, #20]	; (800c1b8 <DataStageIn+0xbc>)
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 800c1a2:	2704      	movs	r7, #4
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 800c1a4:	2030      	movs	r0, #48	; 0x30
 800c1a6:	8010      	strh	r0, [r2, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 800c1a8:	7019      	strb	r1, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800c1aa:	7227      	strb	r7, [r4, #8]
 800c1ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1b0:	20001e40 	.word	0x20001e40
 800c1b4:	20000ae8 	.word	0x20000ae8
 800c1b8:	20001e48 	.word	0x20001e48
 800c1bc:	0800cbd5 	.word	0x0800cbd5
 800c1c0:	0800c9d5 	.word	0x0800c9d5
 800c1c4:	0800cc15 	.word	0x0800cc15
 800c1c8:	20001e46 	.word	0x20001e46

0800c1cc <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 800c1cc:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 800c1ce:	4b0b      	ldr	r3, [pc, #44]	; (800c1fc <Standard_SetConfiguration+0x30>)
 800c1d0:	4a0b      	ldr	r2, [pc, #44]	; (800c200 <Standard_SetConfiguration+0x34>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	7851      	ldrb	r1, [r2, #1]
 800c1d6:	78da      	ldrb	r2, [r3, #3]
 800c1d8:	4291      	cmp	r1, r2
 800c1da:	d201      	bcs.n	800c1e0 <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 800c1dc:	2002      	movs	r0, #2
  }
}
 800c1de:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800c1e0:	7899      	ldrb	r1, [r3, #2]
 800c1e2:	2900      	cmp	r1, #0
 800c1e4:	d1fa      	bne.n	800c1dc <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 800c1e6:	889c      	ldrh	r4, [r3, #4]
 800c1e8:	2c00      	cmp	r4, #0
 800c1ea:	d1f7      	bne.n	800c1dc <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800c1ec:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800c1ee:	4b05      	ldr	r3, [pc, #20]	; (800c204 <Standard_SetConfiguration+0x38>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	4798      	blx	r3
    return USB_SUCCESS;
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	bd10      	pop	{r4, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20001e40 	.word	0x20001e40
 800c200:	200000e0 	.word	0x200000e0
 800c204:	20001e3c 	.word	0x20001e3c

0800c208 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 800c208:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800c20a:	4a10      	ldr	r2, [pc, #64]	; (800c24c <Standard_SetInterface+0x44>)
 800c20c:	4c10      	ldr	r4, [pc, #64]	; (800c250 <Standard_SetInterface+0x48>)
 800c20e:	6812      	ldr	r2, [r2, #0]
 800c210:	6823      	ldr	r3, [r4, #0]
 800c212:	6992      	ldr	r2, [r2, #24]
 800c214:	7958      	ldrb	r0, [r3, #5]
 800c216:	78d9      	ldrb	r1, [r3, #3]
 800c218:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	7a9a      	ldrb	r2, [r3, #10]
 800c21e:	b90a      	cbnz	r2, 800c224 <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 800c220:	2002      	movs	r0, #2
}
 800c222:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 800c224:	2800      	cmp	r0, #0
 800c226:	d1fb      	bne.n	800c220 <Standard_SetInterface+0x18>
 800c228:	791a      	ldrb	r2, [r3, #4]
 800c22a:	2a00      	cmp	r2, #0
 800c22c:	d1f8      	bne.n	800c220 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 800c22e:	789d      	ldrb	r5, [r3, #2]
 800c230:	2d00      	cmp	r5, #0
 800c232:	d1f5      	bne.n	800c220 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 800c234:	4b07      	ldr	r3, [pc, #28]	; (800c254 <Standard_SetInterface+0x4c>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800c23c:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 800c23e:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800c240:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800c242:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800c244:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800c246:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 800c248:	bd38      	pop	{r3, r4, r5, pc}
 800c24a:	bf00      	nop
 800c24c:	20001e18 	.word	0x20001e18
 800c250:	20001e40 	.word	0x20001e40
 800c254:	20001e3c 	.word	0x20001e3c

0800c258 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 800c258:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 800c25a:	4b35      	ldr	r3, [pc, #212]	; (800c330 <Standard_ClearFeature+0xd8>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800c260:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 800c264:	d003      	beq.n	800c26e <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800c266:	2802      	cmp	r0, #2
 800c268:	d006      	beq.n	800c278 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 800c26a:	2002      	movs	r0, #2
}
 800c26c:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 800c26e:	7a5a      	ldrb	r2, [r3, #9]
 800c270:	f022 0220 	bic.w	r2, r2, #32
 800c274:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 800c276:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 800c278:	885a      	ldrh	r2, [r3, #2]
 800c27a:	2a00      	cmp	r2, #0
 800c27c:	d1f6      	bne.n	800c26c <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 800c27e:	791a      	ldrb	r2, [r3, #4]
 800c280:	2a00      	cmp	r2, #0
 800c282:	d1f3      	bne.n	800c26c <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 800c284:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 800c286:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800c28a:	0081      	lsls	r1, r0, #2
 800c28c:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 800c290:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800c292:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 800c296:	bf56      	itet	pl
 800c298:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800c29a:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 800c29c:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800c2a0:	4c24      	ldr	r4, [pc, #144]	; (800c334 <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800c2a2:	bf48      	it	mi
 800c2a4:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800c2a8:	7824      	ldrb	r4, [r4, #0]
 800c2aa:	42a0      	cmp	r0, r4
 800c2ac:	d2dd      	bcs.n	800c26a <Standard_ClearFeature+0x12>
 800c2ae:	2d00      	cmp	r5, #0
 800c2b0:	d0db      	beq.n	800c26a <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 800c2b2:	7a9b      	ldrb	r3, [r3, #10]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d0d8      	beq.n	800c26a <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 800c2b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	b173      	cbz	r3, 800c2de <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800c2c0:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800c2c4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c2ce:	2b10      	cmp	r3, #16
 800c2d0:	d021      	beq.n	800c316 <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 800c2d2:	4b19      	ldr	r3, [pc, #100]	; (800c338 <Standard_ClearFeature+0xe0>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	695b      	ldr	r3, [r3, #20]
 800c2d8:	4798      	blx	r3
    return USB_SUCCESS;
 800c2da:	2000      	movs	r0, #0
 800c2dc:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800c2de:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800c2e2:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 800c2e6:	6823      	ldr	r3, [r4, #0]
 800c2e8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c2ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2f0:	d1ef      	bne.n	800c2d2 <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 800c2f2:	b9c8      	cbnz	r0, 800c328 <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 800c2f4:	4b11      	ldr	r3, [pc, #68]	; (800c33c <Standard_ClearFeature+0xe4>)
 800c2f6:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800c2fa:	4b11      	ldr	r3, [pc, #68]	; (800c340 <Standard_ClearFeature+0xe8>)
 800c2fc:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 800c2fe:	6822      	ldr	r2, [r4, #0]
 800c300:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800c304:	4013      	ands	r3, r2
 800c306:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800c30a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c30e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c312:	6023      	str	r3, [r4, #0]
 800c314:	e7dd      	b.n	800c2d2 <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 800c316:	b2c4      	uxtb	r4, r0
 800c318:	4620      	mov	r0, r4
 800c31a:	4b0a      	ldr	r3, [pc, #40]	; (800c344 <Standard_ClearFeature+0xec>)
 800c31c:	4798      	blx	r3
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 800c31e:	4620      	mov	r0, r4
 800c320:	2130      	movs	r1, #48	; 0x30
 800c322:	4b09      	ldr	r3, [pc, #36]	; (800c348 <Standard_ClearFeature+0xf0>)
 800c324:	4798      	blx	r3
 800c326:	e7d4      	b.n	800c2d2 <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 800c328:	4b08      	ldr	r3, [pc, #32]	; (800c34c <Standard_ClearFeature+0xf4>)
 800c32a:	4798      	blx	r3
 800c32c:	e7e7      	b.n	800c2fe <Standard_ClearFeature+0xa6>
 800c32e:	bf00      	nop
 800c330:	20001e40 	.word	0x20001e40
 800c334:	200000e0 	.word	0x200000e0
 800c338:	20001e3c 	.word	0x20001e3c
 800c33c:	2000005c 	.word	0x2000005c
 800c340:	0800cc35 	.word	0x0800cc35
 800c344:	0800cb65 	.word	0x0800cb65
 800c348:	0800ca59 	.word	0x0800ca59
 800c34c:	0800cb41 	.word	0x0800cb41

0800c350 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 800c350:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800c352:	4b22      	ldr	r3, [pc, #136]	; (800c3dc <Standard_SetEndPointFeature+0x8c>)
 800c354:	6819      	ldr	r1, [r3, #0]
 800c356:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 800c358:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800c35c:	0090      	lsls	r0, r2, #2
 800c35e:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 800c362:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800c364:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 800c368:	bf56      	itet	pl
 800c36a:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800c36c:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 800c36e:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800c372:	4c1b      	ldr	r4, [pc, #108]	; (800c3e0 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800c374:	bf48      	it	mi
 800c376:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800c37a:	7824      	ldrb	r4, [r4, #0]
 800c37c:	42a2      	cmp	r2, r4
 800c37e:	d301      	bcc.n	800c384 <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 800c380:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 800c382:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 800c384:	884a      	ldrh	r2, [r1, #2]
 800c386:	2a00      	cmp	r2, #0
 800c388:	d1fa      	bne.n	800c380 <Standard_SetEndPointFeature+0x30>
 800c38a:	2d00      	cmp	r5, #0
 800c38c:	d0f8      	beq.n	800c380 <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 800c38e:	7a8a      	ldrb	r2, [r1, #10]
 800c390:	2a00      	cmp	r2, #0
 800c392:	d0f5      	beq.n	800c380 <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800c394:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800c398:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c39c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800c3a0:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800c3a2:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800c3a4:	b17b      	cbz	r3, 800c3c6 <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800c3a6:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 800c3aa:	400b      	ands	r3, r1
 800c3ac:	f083 0310 	eor.w	r3, r3, #16
 800c3b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3b8:	6013      	str	r3, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 800c3ba:	4b0a      	ldr	r3, [pc, #40]	; (800c3e4 <Standard_SetEndPointFeature+0x94>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	699b      	ldr	r3, [r3, #24]
 800c3c0:	4798      	blx	r3
  return USB_SUCCESS;
 800c3c2:	2000      	movs	r0, #0
 800c3c4:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 800c3c6:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800c3ca:	400b      	ands	r3, r1
 800c3cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c3d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3d8:	6013      	str	r3, [r2, #0]
 800c3da:	e7ee      	b.n	800c3ba <Standard_SetEndPointFeature+0x6a>
 800c3dc:	20001e40 	.word	0x20001e40
 800c3e0:	200000e0 	.word	0x200000e0
 800c3e4:	20001e3c 	.word	0x20001e3c

0800c3e8 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 800c3e8:	4b05      	ldr	r3, [pc, #20]	; (800c400 <Standard_GetDescriptorData+0x18>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 800c3ee:	b110      	cbz	r0, 800c3f6 <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 800c3f0:	6808      	ldr	r0, [r1, #0]
 800c3f2:	1880      	adds	r0, r0, r2
}
 800c3f4:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800c3f6:	8889      	ldrh	r1, [r1, #4]
 800c3f8:	1a8a      	subs	r2, r1, r2
 800c3fa:	821a      	strh	r2, [r3, #16]
    return 0;
 800c3fc:	4770      	bx	lr
 800c3fe:	bf00      	nop
 800c400:	20001e40 	.word	0x20001e40

0800c404 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 800c404:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800c406:	4b0c      	ldr	r3, [pc, #48]	; (800c438 <Post0_Process+0x34>)
 800c408:	2000      	movs	r0, #0
 800c40a:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800c40e:	4b0b      	ldr	r3, [pc, #44]	; (800c43c <Post0_Process+0x38>)
 800c410:	4798      	blx	r3

  if (pInformation->ControlState == STALLED)
 800c412:	4b0b      	ldr	r3, [pc, #44]	; (800c440 <Post0_Process+0x3c>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	7a18      	ldrb	r0, [r3, #8]
 800c418:	2808      	cmp	r0, #8
 800c41a:	d106      	bne.n	800c42a <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 800c41c:	4b09      	ldr	r3, [pc, #36]	; (800c444 <Post0_Process+0x40>)
 800c41e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c422:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800c424:	4b08      	ldr	r3, [pc, #32]	; (800c448 <Post0_Process+0x44>)
 800c426:	2210      	movs	r2, #16
 800c428:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 800c42a:	f1b0 0c09 	subs.w	ip, r0, #9
 800c42e:	f1dc 0000 	rsbs	r0, ip, #0
 800c432:	eb50 000c 	adcs.w	r0, r0, ip
 800c436:	bd08      	pop	{r3, pc}
 800c438:	2000005c 	.word	0x2000005c
 800c43c:	0800cc35 	.word	0x0800cc35
 800c440:	20001e40 	.word	0x20001e40
 800c444:	20001e46 	.word	0x20001e46
 800c448:	20001e48 	.word	0x20001e48

0800c44c <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 800c44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t ControlState = pInformation->ControlState;
 800c450:	4d35      	ldr	r5, [pc, #212]	; (800c528 <Out0_Process+0xdc>)
 800c452:	682c      	ldr	r4, [r5, #0]
 800c454:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800c456:	2b02      	cmp	r3, #2
 800c458:	bf18      	it	ne
 800c45a:	2b04      	cmpne	r3, #4
 800c45c:	bf14      	ite	ne
 800c45e:	2600      	movne	r6, #0
 800c460:	2601      	moveq	r6, #1
 800c462:	d005      	beq.n	800c470 <Out0_Process+0x24>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800c464:	2b03      	cmp	r3, #3
 800c466:	bf18      	it	ne
 800c468:	2b05      	cmpne	r3, #5
 800c46a:	d007      	beq.n	800c47c <Out0_Process+0x30>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 800c46c:	2b07      	cmp	r3, #7
 800c46e:	d00e      	beq.n	800c48e <Out0_Process+0x42>
 800c470:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800c472:	7223      	strb	r3, [r4, #8]

  return Post0_Process();
 800c474:	4b2d      	ldr	r3, [pc, #180]	; (800c52c <Out0_Process+0xe0>)
 800c476:	4798      	blx	r3
 800c478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 800c47c:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 800c47e:	8a23      	ldrh	r3, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 800c480:	b311      	cbz	r1, 800c4c8 <Out0_Process+0x7c>
 800c482:	b95b      	cbnz	r3, 800c49c <Out0_Process+0x50>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800c484:	8aa3      	ldrh	r3, [r4, #20]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d049      	beq.n	800c51e <Out0_Process+0xd2>
 800c48a:	4a29      	ldr	r2, [pc, #164]	; (800c530 <Out0_Process+0xe4>)
 800c48c:	e02e      	b.n	800c4ec <Out0_Process+0xa0>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 800c48e:	4b29      	ldr	r3, [pc, #164]	; (800c534 <Out0_Process+0xe8>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	4798      	blx	r3
 800c496:	682c      	ldr	r4, [r5, #0]
 800c498:	2308      	movs	r3, #8
 800c49a:	e7ea      	b.n	800c472 <Out0_Process+0x26>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 800c49c:	8aa7      	ldrh	r7, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800c49e:	429f      	cmp	r7, r3
 800c4a0:	bf28      	it	cs
 800c4a2:	461f      	movcs	r7, r3
 800c4a4:	4638      	mov	r0, r7
 800c4a6:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
 800c4a8:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800c4aa:	8a63      	ldrh	r3, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 800c4ac:	1bd2      	subs	r2, r2, r7
    pEPinfo->Usb_rOffset += Length;
 800c4ae:	18fb      	adds	r3, r7, r3
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800c4b0:	4680      	mov	r8, r0
    pEPinfo->Usb_rLength -= Length;
 800c4b2:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800c4b4:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	4b1f      	ldr	r3, [pc, #124]	; (800c538 <Out0_Process+0xec>)
 800c4ba:	4798      	blx	r3
 800c4bc:	4b1f      	ldr	r3, [pc, #124]	; (800c53c <Out0_Process+0xf0>)
 800c4be:	4601      	mov	r1, r0
 800c4c0:	463a      	mov	r2, r7
 800c4c2:	4640      	mov	r0, r8
 800c4c4:	4798      	blx	r3
 800c4c6:	8a23      	ldrh	r3, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d0db      	beq.n	800c484 <Out0_Process+0x38>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800c4cc:	4b1c      	ldr	r3, [pc, #112]	; (800c540 <Out0_Process+0xf4>)
    SetEPTxCount(ENDP0, 0);
 800c4ce:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800c4d0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 800c4d4:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800c4d6:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800c4d8:	4b1a      	ldr	r3, [pc, #104]	; (800c544 <Out0_Process+0xf8>)
 800c4da:	4798      	blx	r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800c4dc:	8a23      	ldrh	r3, [r4, #16]
 800c4de:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800c4e0:	4a13      	ldr	r2, [pc, #76]	; (800c530 <Out0_Process+0xe4>)
 800c4e2:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800c4e4:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800c4e6:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800c4e8:	d919      	bls.n	800c51e <Out0_Process+0xd2>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 800c4ea:	b9a3      	cbnz	r3, 800c516 <Out0_Process+0xca>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 800c4ec:	682c      	ldr	r4, [r5, #0]
 800c4ee:	2106      	movs	r1, #6
      USB_StatusIn();
 800c4f0:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 800c4f4:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 800c4f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c4fa:	6819      	ldr	r1, [r3, #0]
 800c4fc:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800c500:	b289      	uxth	r1, r1
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 800c502:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c506:	18cb      	adds	r3, r1, r3
 800c508:	005b      	lsls	r3, r3, #1
 800c50a:	2100      	movs	r1, #0
 800c50c:	6019      	str	r1, [r3, #0]
 800c50e:	2330      	movs	r3, #48	; 0x30
 800c510:	8013      	strh	r3, [r2, #0]
 800c512:	7a23      	ldrb	r3, [r4, #8]
 800c514:	e7ad      	b.n	800c472 <Out0_Process+0x26>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 800c516:	682c      	ldr	r4, [r5, #0]
 800c518:	2305      	movs	r3, #5
 800c51a:	7223      	strb	r3, [r4, #8]
 800c51c:	e7a9      	b.n	800c472 <Out0_Process+0x26>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 800c51e:	682c      	ldr	r4, [r5, #0]
 800c520:	2303      	movs	r3, #3
 800c522:	7223      	strb	r3, [r4, #8]
 800c524:	e7a5      	b.n	800c472 <Out0_Process+0x26>
 800c526:	bf00      	nop
 800c528:	20001e40 	.word	0x20001e40
 800c52c:	0800c405 	.word	0x0800c405
 800c530:	20001e48 	.word	0x20001e48
 800c534:	20001e18 	.word	0x20001e18
 800c538:	0800cbf5 	.word	0x0800cbf5
 800c53c:	0800ca09 	.word	0x0800ca09
 800c540:	20001e46 	.word	0x20001e46
 800c544:	0800cc15 	.word	0x0800cc15

0800c548 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800c548:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800c54a:	f645 4350 	movw	r3, #23632	; 0x5c50
 800c54e:	f2c4 0300 	movt	r3, #16384	; 0x4000

  if (pInformation->ControlState != PAUSE)
 800c552:	4d9d      	ldr	r5, [pc, #628]	; (800c7c8 <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800c554:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 800c556:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800c558:	f243 0304 	movw	r3, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800c55c:	b292      	uxth	r2, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800c55e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c562:	18d3      	adds	r3, r2, r3

  if (pInformation->ControlState != PAUSE)
 800c564:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800c566:	005b      	lsls	r3, r3, #1

  if (pInformation->ControlState != PAUSE)
 800c568:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800c56a:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800c56c:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 800c56e:	d044      	beq.n	800c5fa <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800c570:	b2b6      	uxth	r6, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800c572:	0076      	lsls	r6, r6, #1
 800c574:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800c578:	f506 46c0 	add.w	r6, r6, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 800c57c:	7833      	ldrb	r3, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800c57e:	4f93      	ldr	r7, [pc, #588]	; (800c7cc <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 800c580:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800c582:	7873      	ldrb	r3, [r6, #1]
 800c584:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800c586:	88b0      	ldrh	r0, [r6, #4]
 800c588:	47b8      	blx	r7
 800c58a:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 800c58c:	8930      	ldrh	r0, [r6, #8]
 800c58e:	682c      	ldr	r4, [r5, #0]
 800c590:	47b8      	blx	r7
 800c592:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 800c594:	89b3      	ldrh	r3, [r6, #12]
 800c596:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 800c598:	2201      	movs	r2, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 800c59a:	80e3      	strh	r3, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 800c59c:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d030      	beq.n	800c604 <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 800c5a2:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 800c5a4:	2906      	cmp	r1, #6
 800c5a6:	f000 8087 	beq.w	800c6b8 <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 800c5aa:	2900      	cmp	r1, #0
 800c5ac:	d15e      	bne.n	800c66c <Setup0_Process+0x124>
 800c5ae:	8863      	ldrh	r3, [r4, #2]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	f000 8094 	beq.w	800c6de <Setup0_Process+0x196>
 800c5b6:	4e86      	ldr	r6, [pc, #536]	; (800c7d0 <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 800c5b8:	6833      	ldr	r3, [r6, #0]
 800c5ba:	4608      	mov	r0, r1
 800c5bc:	691b      	ldr	r3, [r3, #16]
 800c5be:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 800c5c0:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 800c5c2:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 800c5c4:	d062      	beq.n	800c68c <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800c5c6:	8a1a      	ldrh	r2, [r3, #16]
 800c5c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c5cc:	428a      	cmp	r2, r1
 800c5ce:	d05d      	beq.n	800c68c <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 800c5d0:	2802      	cmp	r0, #2
 800c5d2:	d00c      	beq.n	800c5ee <Setup0_Process+0xa6>
 800c5d4:	b15a      	cbz	r2, 800c5ee <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 800c5d6:	f993 1000 	ldrsb.w	r1, [r3]
 800c5da:	2900      	cmp	r1, #0
 800c5dc:	f2c0 80b5 	blt.w	800c74a <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 800c5e0:	2203      	movs	r2, #3
 800c5e2:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800c5e4:	4b7b      	ldr	r3, [pc, #492]	; (800c7d4 <Setup0_Process+0x28c>)
 800c5e6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800c5ea:	801a      	strh	r2, [r3, #0]
 800c5ec:	e001      	b.n	800c5f2 <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 800c5ee:	2208      	movs	r2, #8
 800c5f0:	721a      	strb	r2, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 800c5f2:	4b79      	ldr	r3, [pc, #484]	; (800c7d8 <Setup0_Process+0x290>)
 800c5f4:	4798      	blx	r3
}
 800c5f6:	b003      	add	sp, #12
 800c5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5fa:	88e3      	ldrh	r3, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1ce      	bne.n	800c5a2 <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800c604:	7823      	ldrb	r3, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 800c606:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800c608:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800c60c:	d141      	bne.n	800c692 <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 800c60e:	2e09      	cmp	r6, #9
 800c610:	f000 8108 	beq.w	800c824 <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 800c614:	2e05      	cmp	r6, #5
 800c616:	f000 80bf 	beq.w	800c798 <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 800c61a:	2e03      	cmp	r6, #3
 800c61c:	f000 80f0 	beq.w	800c800 <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 800c620:	2e01      	cmp	r6, #1
 800c622:	d13b      	bne.n	800c69c <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800c624:	78e3      	ldrb	r3, [r4, #3]
 800c626:	2b01      	cmp	r3, #1
 800c628:	d138      	bne.n	800c69c <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 800c62a:	88a3      	ldrh	r3, [r4, #4]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d135      	bne.n	800c69c <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 800c630:	7a63      	ldrb	r3, [r4, #9]
 800c632:	f003 0320 	and.w	r3, r3, #32
 800c636:	b2db      	uxtb	r3, r3
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d02f      	beq.n	800c69c <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 800c63c:	4b67      	ldr	r3, [pc, #412]	; (800c7dc <Setup0_Process+0x294>)
 800c63e:	4798      	blx	r3
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 800c640:	bb60      	cbnz	r0, 800c69c <Setup0_Process+0x154>
 800c642:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 800c644:	f645 4350 	movw	r3, #23632	; 0x5c50
 800c648:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c64c:	681a      	ldr	r2, [r3, #0]
 800c64e:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800c652:	b292      	uxth	r2, r2
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 800c654:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c658:	18d3      	adds	r3, r2, r3
 800c65a:	005b      	lsls	r3, r3, #1
 800c65c:	2200      	movs	r2, #0
 800c65e:	601a      	str	r2, [r3, #0]
 800c660:	4a5f      	ldr	r2, [pc, #380]	; (800c7e0 <Setup0_Process+0x298>)
 800c662:	2306      	movs	r3, #6
 800c664:	2130      	movs	r1, #48	; 0x30
 800c666:	8011      	strh	r1, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800c668:	7223      	strb	r3, [r4, #8]
 800c66a:	e7c2      	b.n	800c5f2 <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 800c66c:	2908      	cmp	r1, #8
 800c66e:	d148      	bne.n	800c702 <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800c670:	7823      	ldrb	r3, [r4, #0]
 800c672:	065b      	lsls	r3, r3, #25
 800c674:	d19f      	bne.n	800c5b6 <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 800c676:	4b5b      	ldr	r3, [pc, #364]	; (800c7e4 <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800c678:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800c67a:	61a3      	str	r3, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800c67c:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 800c67e:	4798      	blx	r3
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800c680:	682b      	ldr	r3, [r5, #0]
 800c682:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c686:	8a1a      	ldrh	r2, [r3, #16]
 800c688:	428a      	cmp	r2, r1
 800c68a:	d1a3      	bne.n	800c5d4 <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 800c68c:	2209      	movs	r2, #9
 800c68e:	721a      	strb	r2, [r3, #8]
 800c690:	e7af      	b.n	800c5f2 <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800c692:	2b01      	cmp	r3, #1
 800c694:	d071      	beq.n	800c77a <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800c696:	2b02      	cmp	r3, #2
 800c698:	f000 808d 	beq.w	800c7b6 <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 800c69c:	4b4c      	ldr	r3, [pc, #304]	; (800c7d0 <Setup0_Process+0x288>)
 800c69e:	4630      	mov	r0, r6
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	695b      	ldr	r3, [r3, #20]
 800c6a4:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 800c6a6:	2803      	cmp	r0, #3
 800c6a8:	f000 80c5 	beq.w	800c836 <Setup0_Process+0x2ee>
 800c6ac:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	d0c8      	beq.n	800c644 <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 800c6b2:	2308      	movs	r3, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800c6b4:	7223      	strb	r3, [r4, #8]
 800c6b6:	e79c      	b.n	800c5f2 <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800c6b8:	7823      	ldrb	r3, [r4, #0]
 800c6ba:	065b      	lsls	r3, r3, #25
 800c6bc:	f47f af7b 	bne.w	800c5b6 <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 800c6c0:	78a3      	ldrb	r3, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800c6c2:	4e43      	ldr	r6, [pc, #268]	; (800c7d0 <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	f000 80b0 	beq.w	800c82a <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 800c6ca:	2b02      	cmp	r3, #2
 800c6cc:	d05e      	beq.n	800c78c <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 800c6ce:	2b03      	cmp	r3, #3
 800c6d0:	f47f af72 	bne.w	800c5b8 <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 800c6d4:	6833      	ldr	r3, [r6, #0]
 800c6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1cd      	bne.n	800c678 <Setup0_Process+0x130>
 800c6dc:	e76c      	b.n	800c5b8 <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 800c6de:	6863      	ldr	r3, [r4, #4]
 800c6e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6e8:	f47f af65 	bne.w	800c5b6 <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800c6ec:	7823      	ldrb	r3, [r4, #0]
 800c6ee:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800c6f2:	f040 80a4 	bne.w	800c83e <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 800c6f6:	88a3      	ldrh	r3, [r4, #4]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f47f af5c 	bne.w	800c5b6 <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 800c6fe:	4b3a      	ldr	r3, [pc, #232]	; (800c7e8 <Setup0_Process+0x2a0>)
 800c700:	e7ba      	b.n	800c678 <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 800c702:	290a      	cmp	r1, #10
 800c704:	f47f af57 	bne.w	800c5b6 <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800c708:	7823      	ldrb	r3, [r4, #0]
 800c70a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c70e:	2b01      	cmp	r3, #1
 800c710:	f47f af51 	bne.w	800c5b6 <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 800c714:	7aa3      	ldrb	r3, [r4, #10]
 800c716:	2b00      	cmp	r3, #0
 800c718:	f43f af4d 	beq.w	800c5b6 <Setup0_Process+0x6e>
 800c71c:	8863      	ldrh	r3, [r4, #2]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	f47f af49 	bne.w	800c5b6 <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800c724:	6862      	ldr	r2, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800c726:	4e2a      	ldr	r6, [pc, #168]	; (800c7d0 <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800c728:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800c72c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800c730:	f47f af42 	bne.w	800c5b8 <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800c734:	6832      	ldr	r2, [r6, #0]
 800c736:	4619      	mov	r1, r3
 800c738:	7960      	ldrb	r0, [r4, #5]
 800c73a:	6993      	ldr	r3, [r2, #24]
 800c73c:	4798      	blx	r3
 800c73e:	2800      	cmp	r0, #0
 800c740:	f040 80be 	bne.w	800c8c0 <Setup0_Process+0x378>
 800c744:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 800c746:	4b29      	ldr	r3, [pc, #164]	; (800c7ec <Setup0_Process+0x2a4>)
 800c748:	e796      	b.n	800c678 <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 800c74a:	88d9      	ldrh	r1, [r3, #6]
 800c74c:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 800c74e:	9801      	ldr	r0, [sp, #4]
 800c750:	4282      	cmp	r2, r0
 800c752:	d817      	bhi.n	800c784 <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800c754:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800c756:	4e1e      	ldr	r6, [pc, #120]	; (800c7d0 <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800c758:	d208      	bcs.n	800c76c <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800c75a:	6831      	ldr	r1, [r6, #0]
 800c75c:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 800c760:	428a      	cmp	r2, r1
 800c762:	f080 8095 	bcs.w	800c890 <Setup0_Process+0x348>
      {
        Data_Mul_MaxPacketSize = FALSE;
 800c766:	4a22      	ldr	r2, [pc, #136]	; (800c7f0 <Setup0_Process+0x2a8>)
 800c768:	2100      	movs	r1, #0
 800c76a:	7011      	strb	r1, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800c76c:	6832      	ldr	r2, [r6, #0]
 800c76e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800c772:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 800c774:	4b1f      	ldr	r3, [pc, #124]	; (800c7f4 <Setup0_Process+0x2ac>)
 800c776:	4798      	blx	r3
 800c778:	e73b      	b.n	800c5f2 <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 800c77a:	2e0b      	cmp	r6, #11
 800c77c:	d18e      	bne.n	800c69c <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 800c77e:	4b1e      	ldr	r3, [pc, #120]	; (800c7f8 <Setup0_Process+0x2b0>)
 800c780:	4798      	blx	r3
 800c782:	e75d      	b.n	800c640 <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 800c784:	9a01      	ldr	r2, [sp, #4]
 800c786:	4e12      	ldr	r6, [pc, #72]	; (800c7d0 <Setup0_Process+0x288>)
 800c788:	821a      	strh	r2, [r3, #16]
 800c78a:	e7ef      	b.n	800c76c <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 800c78c:	6833      	ldr	r3, [r6, #0]
 800c78e:	6a1b      	ldr	r3, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 800c790:	2b00      	cmp	r3, #0
 800c792:	f47f af71 	bne.w	800c678 <Setup0_Process+0x130>
 800c796:	e70f      	b.n	800c5b8 <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800c798:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	db88      	blt.n	800c6b2 <Setup0_Process+0x16a>
 800c7a0:	78a3      	ldrb	r3, [r4, #2]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d185      	bne.n	800c6b2 <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 800c7a6:	88a3      	ldrh	r3, [r4, #4]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d182      	bne.n	800c6b2 <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 800c7ac:	7aa3      	ldrb	r3, [r4, #10]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f43f af48 	beq.w	800c644 <Setup0_Process+0xfc>
 800c7b4:	e77d      	b.n	800c6b2 <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 800c7b6:	2e01      	cmp	r6, #1
 800c7b8:	f43f af40 	beq.w	800c63c <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 800c7bc:	2e03      	cmp	r6, #3
 800c7be:	f47f af6d 	bne.w	800c69c <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 800c7c2:	4b0e      	ldr	r3, [pc, #56]	; (800c7fc <Setup0_Process+0x2b4>)
 800c7c4:	4798      	blx	r3
 800c7c6:	e73b      	b.n	800c640 <Setup0_Process+0xf8>
 800c7c8:	20001e40 	.word	0x20001e40
 800c7cc:	0800cc9d 	.word	0x0800cc9d
 800c7d0:	20001e18 	.word	0x20001e18
 800c7d4:	20001e46 	.word	0x20001e46
 800c7d8:	0800c405 	.word	0x0800c405
 800c7dc:	0800c259 	.word	0x0800c259
 800c7e0:	20001e48 	.word	0x20001e48
 800c7e4:	0800c015 	.word	0x0800c015
 800c7e8:	0800c065 	.word	0x0800c065
 800c7ec:	0800c03d 	.word	0x0800c03d
 800c7f0:	20000ae8 	.word	0x20000ae8
 800c7f4:	0800c0fd 	.word	0x0800c0fd
 800c7f8:	0800c209 	.word	0x0800c209
 800c7fc:	0800c351 	.word	0x0800c351
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 800c800:	78e3      	ldrb	r3, [r4, #3]
 800c802:	2b01      	cmp	r3, #1
 800c804:	f47f af4a 	bne.w	800c69c <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 800c808:	88a3      	ldrh	r3, [r4, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f47f af46 	bne.w	800c69c <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 800c810:	7a62      	ldrb	r2, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800c812:	4b2d      	ldr	r3, [pc, #180]	; (800c8c8 <Setup0_Process+0x380>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 800c814:	f042 0220 	orr.w	r2, r2, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 800c818:	681b      	ldr	r3, [r3, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 800c81a:	7262      	strb	r2, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800c81c:	69db      	ldr	r3, [r3, #28]
 800c81e:	4798      	blx	r3
 800c820:	682c      	ldr	r4, [r5, #0]
 800c822:	e70f      	b.n	800c644 <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 800c824:	4b29      	ldr	r3, [pc, #164]	; (800c8cc <Setup0_Process+0x384>)
 800c826:	4798      	blx	r3
 800c828:	e70a      	b.n	800c640 <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800c82a:	6833      	ldr	r3, [r6, #0]
 800c82c:	69db      	ldr	r3, [r3, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f47f af22 	bne.w	800c678 <Setup0_Process+0x130>
 800c834:	e6c0      	b.n	800c5b8 <Setup0_Process+0x70>
 800c836:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 800c838:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800c83a:	7223      	strb	r3, [r4, #8]
 800c83c:	e6d9      	b.n	800c5f2 <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d031      	beq.n	800c8a6 <Setup0_Process+0x35e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800c842:	2b02      	cmp	r3, #2
 800c844:	f47f aeb7 	bne.w	800c5b6 <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800c848:	7963      	ldrb	r3, [r4, #5]
 800c84a:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800c84e:	0090      	lsls	r0, r2, #2
 800c850:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 800c854:	061e      	lsls	r6, r3, #24
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800c856:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800c85a:	bf56      	itet	pl
 800c85c:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800c85e:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800c860:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800c864:	481a      	ldr	r0, [pc, #104]	; (800c8d0 <Setup0_Process+0x388>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800c866:	bf48      	it	mi
 800c868:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800c86c:	7800      	ldrb	r0, [r0, #0]
 800c86e:	4282      	cmp	r2, r0
 800c870:	f4bf aea1 	bcs.w	800c5b6 <Setup0_Process+0x6e>
 800c874:	f013 0f70 	tst.w	r3, #112	; 0x70
 800c878:	bf14      	ite	ne
 800c87a:	2300      	movne	r3, #0
 800c87c:	2301      	moveq	r3, #1
          && (Status != 0))
 800c87e:	2e00      	cmp	r6, #0
 800c880:	bf0c      	ite	eq
 800c882:	2600      	moveq	r6, #0
 800c884:	f003 0601 	andne.w	r6, r3, #1
 800c888:	2e00      	cmp	r6, #0
 800c88a:	f47f af38 	bne.w	800c6fe <Setup0_Process+0x1b6>
 800c88e:	e692      	b.n	800c5b6 <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800c890:	fb92 f0f1 	sdiv	r0, r2, r1
 800c894:	fb01 2210 	mls	r2, r1, r0, r2
 800c898:	2a00      	cmp	r2, #0
 800c89a:	f47f af67 	bne.w	800c76c <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 800c89e:	4a0d      	ldr	r2, [pc, #52]	; (800c8d4 <Setup0_Process+0x38c>)
 800c8a0:	2101      	movs	r1, #1
 800c8a2:	7011      	strb	r1, [r2, #0]
 800c8a4:	e762      	b.n	800c76c <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 800c8a6:	4e0c      	ldr	r6, [pc, #48]	; (800c8d8 <Setup0_Process+0x390>)
 800c8a8:	7960      	ldrb	r0, [r4, #5]
 800c8aa:	6833      	ldr	r3, [r6, #0]
 800c8ac:	699b      	ldr	r3, [r3, #24]
 800c8ae:	4798      	blx	r3
 800c8b0:	b930      	cbnz	r0, 800c8c0 <Setup0_Process+0x378>
          && (pInformation->Current_Configuration != 0))
 800c8b2:	682c      	ldr	r4, [r5, #0]
 800c8b4:	7aa3      	ldrb	r3, [r4, #10]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f47f af21 	bne.w	800c6fe <Setup0_Process+0x1b6>
 800c8bc:	7861      	ldrb	r1, [r4, #1]
 800c8be:	e67b      	b.n	800c5b8 <Setup0_Process+0x70>
 800c8c0:	682b      	ldr	r3, [r5, #0]
 800c8c2:	7859      	ldrb	r1, [r3, #1]
 800c8c4:	e678      	b.n	800c5b8 <Setup0_Process+0x70>
 800c8c6:	bf00      	nop
 800c8c8:	20001e3c 	.word	0x20001e3c
 800c8cc:	0800c1cd 	.word	0x0800c1cd
 800c8d0:	200000e0 	.word	0x200000e0
 800c8d4:	20000ae8 	.word	0x20000ae8
 800c8d8:	20001e18 	.word	0x20001e18

0800c8dc <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 800c8dc:	b470      	push	{r4, r5, r6}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 800c8de:	4b0f      	ldr	r3, [pc, #60]	; (800c91c <SetDeviceAddress+0x40>)
 800c8e0:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800c8e2:	b196      	cbz	r6, 800c90a <SetDeviceAddress+0x2e>
 800c8e4:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 800c8e8:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800c8ec:	2300      	movs	r3, #0
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800c8ee:	6825      	ldr	r5, [r4, #0]
 800c8f0:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800c8f4:	f640 720f 	movw	r2, #3855	; 0xf0f
 800c8f8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800c8fc:	402a      	ands	r2, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800c8fe:	3301      	adds	r3, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800c900:	430a      	orrs	r2, r1
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800c902:	429e      	cmp	r6, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800c904:	f844 2b04 	str.w	r2, [r4], #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800c908:	d8f1      	bhi.n	800c8ee <SetDeviceAddress+0x12>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 800c90a:	f645 434c 	movw	r3, #23628	; 0x5c4c
 800c90e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800c912:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c916:	6018      	str	r0, [r3, #0]
}
 800c918:	bc70      	pop	{r4, r5, r6}
 800c91a:	4770      	bx	lr
 800c91c:	200000e0 	.word	0x200000e0

0800c920 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 800c920:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 800c922:	4c14      	ldr	r4, [pc, #80]	; (800c974 <In0_Process+0x54>)
 800c924:	6823      	ldr	r3, [r4, #0]
 800c926:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800c928:	2a02      	cmp	r2, #2
 800c92a:	bf18      	it	ne
 800c92c:	2a04      	cmpne	r2, #4
 800c92e:	d010      	beq.n	800c952 <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 800c930:	2a06      	cmp	r2, #6
 800c932:	d004      	beq.n	800c93e <In0_Process+0x1e>
 800c934:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800c936:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 800c938:	4b0f      	ldr	r3, [pc, #60]	; (800c978 <In0_Process+0x58>)
 800c93a:	4798      	blx	r3
}
 800c93c:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800c93e:	785a      	ldrb	r2, [r3, #1]
 800c940:	2a05      	cmp	r2, #5
 800c942:	d00b      	beq.n	800c95c <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 800c944:	4b0d      	ldr	r3, [pc, #52]	; (800c97c <In0_Process+0x5c>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	4798      	blx	r3
 800c94c:	6823      	ldr	r3, [r4, #0]
 800c94e:	2208      	movs	r2, #8
 800c950:	e7f1      	b.n	800c936 <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 800c952:	4b0b      	ldr	r3, [pc, #44]	; (800c980 <In0_Process+0x60>)
 800c954:	4798      	blx	r3
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 800c956:	6823      	ldr	r3, [r4, #0]
 800c958:	7a1a      	ldrb	r2, [r3, #8]
 800c95a:	e7ec      	b.n	800c936 <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 800c95c:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800c95e:	0652      	lsls	r2, r2, #25
 800c960:	d1f0      	bne.n	800c944 <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 800c962:	78d8      	ldrb	r0, [r3, #3]
 800c964:	4b07      	ldr	r3, [pc, #28]	; (800c984 <In0_Process+0x64>)
 800c966:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 800c968:	4b07      	ldr	r3, [pc, #28]	; (800c988 <In0_Process+0x68>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	6a1b      	ldr	r3, [r3, #32]
 800c96e:	4798      	blx	r3
 800c970:	e7e8      	b.n	800c944 <In0_Process+0x24>
 800c972:	bf00      	nop
 800c974:	20001e40 	.word	0x20001e40
 800c978:	0800c405 	.word	0x0800c405
 800c97c:	20001e18 	.word	0x20001e18
 800c980:	0800c0fd 	.word	0x0800c0fd
 800c984:	0800c8dd 	.word	0x0800c8dd
 800c988:	20001e3c 	.word	0x20001e3c

0800c98c <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop

0800c990 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 800c990:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 800c992:	f641 6220 	movw	r2, #7712	; 0x1e20
 800c996:	f641 6440 	movw	r4, #7744	; 0x1e40
 800c99a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c99e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800c9a2:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 800c9a4:	2402      	movs	r4, #2
 800c9a6:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 800c9a8:	f641 6018 	movw	r0, #7704	; 0x1e18
 800c9ac:	f240 035c 	movw	r3, #92	; 0x5c
  pUser_Standard_Requests = &User_Standard_Requests;
 800c9b0:	f641 613c 	movw	r1, #7740	; 0x1e3c
 800c9b4:	f240 028c 	movw	r2, #140	; 0x8c
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 800c9b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c9bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 800c9c0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c9c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 800c9c8:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 800c9ca:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4798      	blx	r3
 800c9d0:	bd10      	pop	{r4, pc}
 800c9d2:	bf00      	nop

0800c9d4 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800c9d4:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800c9d8:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800c9dc:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800c9de:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 800c9e0:	1053      	asrs	r3, r2, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c9e2:	b410      	push	{r4}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800c9e4:	d00d      	beq.n	800ca02 <UserToPMABufferCopy+0x2e>
 800c9e6:	1d0a      	adds	r2, r1, #4
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 800c9e8:	3002      	adds	r0, #2
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800c9ea:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800c9ee:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 800c9f2:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800c9f4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 800c9f8:	f822 1c04 	strh.w	r1, [r2, #-4]
 800c9fc:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800c9fe:	3b01      	subs	r3, #1
 800ca00:	d1f3      	bne.n	800c9ea <UserToPMABufferCopy+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800ca02:	bc10      	pop	{r4}
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop

0800ca08 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800ca08:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800ca0c:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800ca10:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800ca12:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 800ca14:	1053      	asrs	r3, r2, #1
 800ca16:	d008      	beq.n	800ca2a <PMAToUserBufferCopy+0x22>
*                  - wPMABufAddr = address into PMA.
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 800ca18:	3002      	adds	r0, #2
 800ca1a:	1f0a      	subs	r2, r1, #4
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800ca1c:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800ca20:	f820 1c02 	strh.w	r1, [r0, #-2]
 800ca24:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800ca26:	3b01      	subs	r3, #1
 800ca28:	d1f8      	bne.n	800ca1c <PMAToUserBufferCopy+0x14>
 800ca2a:	4770      	bx	lr

0800ca2c <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 800ca2c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800ca30:	f645 4250 	movw	r2, #23632	; 0x5c50
 800ca34:	4003      	ands	r3, r0
 800ca36:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ca3a:	6013      	str	r3, [r2, #0]
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop

0800ca40 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 800ca40:	0080      	lsls	r0, r0, #2
 800ca42:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800ca46:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800ca4a:	6810      	ldr	r0, [r2, #0]
 800ca4c:	f648 138f 	movw	r3, #35215	; 0x898f
 800ca50:	4003      	ands	r3, r0
 800ca52:	4319      	orrs	r1, r3
 800ca54:	6011      	str	r1, [r2, #0]
 800ca56:	4770      	bx	lr

0800ca58 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800ca58:	0080      	lsls	r0, r0, #2
 800ca5a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800ca5e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 800ca62:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 800ca64:	f001 0010 	and.w	r0, r1, #16
 800ca68:	6814      	ldr	r4, [r2, #0]
 800ca6a:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 800ca6e:	b280      	uxth	r0, r0
 800ca70:	4023      	ands	r3, r4
 800ca72:	b968      	cbnz	r0, 800ca90 <SetEPTxStatus+0x38>
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	f001 0120 	and.w	r1, r1, #32
 800ca7a:	b289      	uxth	r1, r1
 800ca7c:	b109      	cbz	r1, 800ca82 <SetEPTxStatus+0x2a>
 800ca7e:	f083 0320 	eor.w	r3, r3, #32
 800ca82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca8a:	6013      	str	r3, [r2, #0]
}
 800ca8c:	bc10      	pop	{r4}
 800ca8e:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800ca90:	f083 0310 	eor.w	r3, r3, #16
 800ca94:	e7ef      	b.n	800ca76 <SetEPTxStatus+0x1e>
 800ca96:	bf00      	nop

0800ca98 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800ca98:	0080      	lsls	r0, r0, #2
 800ca9a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800ca9e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 800caa2:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 800caa4:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 800caa8:	6814      	ldr	r4, [r2, #0]
 800caaa:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800caae:	b280      	uxth	r0, r0
 800cab0:	4023      	ands	r3, r4
 800cab2:	b968      	cbnz	r0, 800cad0 <SetEPRxStatus+0x38>
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800caba:	b289      	uxth	r1, r1
 800cabc:	b109      	cbz	r1, 800cac2 <SetEPRxStatus+0x2a>
 800cabe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caca:	6013      	str	r3, [r2, #0]
}
 800cacc:	bc10      	pop	{r4}
 800cace:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800cad0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cad4:	e7ef      	b.n	800cab6 <SetEPRxStatus+0x1e>
 800cad6:	bf00      	nop

0800cad8 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 800cad8:	0080      	lsls	r0, r0, #2
 800cada:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800cade:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800cae2:	6811      	ldr	r1, [r2, #0]
 800cae4:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 800cae8:	400b      	ands	r3, r1
 800caea:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800caee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800caf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caf6:	6013      	str	r3, [r2, #0]
 800caf8:	4770      	bx	lr
 800cafa:	bf00      	nop

0800cafc <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 800cafc:	0080      	lsls	r0, r0, #2
 800cafe:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800cb02:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800cb06:	6811      	ldr	r1, [r2, #0]
 800cb08:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800cb0c:	400b      	ands	r3, r1
 800cb0e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800cb12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb1a:	6013      	str	r3, [r2, #0]
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop

0800cb20 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 800cb20:	0080      	lsls	r0, r0, #2
 800cb22:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800cb26:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800cb2a:	6811      	ldr	r1, [r2, #0]
 800cb2c:	f640 630f 	movw	r3, #3599	; 0xe0f
 800cb30:	400b      	ands	r3, r1
 800cb32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb3a:	6013      	str	r3, [r2, #0]
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop

0800cb40 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 800cb40:	0080      	lsls	r0, r0, #2
 800cb42:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800cb46:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	0451      	lsls	r1, r2, #17
 800cb4e:	d508      	bpl.n	800cb62 <ClearDTOG_RX+0x22>
 800cb50:	6819      	ldr	r1, [r3, #0]
 800cb52:	f640 720f 	movw	r2, #3855	; 0xf0f
 800cb56:	400a      	ands	r2, r1
 800cb58:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800cb5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cb60:	601a      	str	r2, [r3, #0]
 800cb62:	4770      	bx	lr

0800cb64 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 800cb64:	0080      	lsls	r0, r0, #2
 800cb66:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800cb6a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	0650      	lsls	r0, r2, #25
 800cb72:	d508      	bpl.n	800cb86 <ClearDTOG_TX+0x22>
 800cb74:	6819      	ldr	r1, [r3, #0]
 800cb76:	f640 720f 	movw	r2, #3855	; 0xf0f
 800cb7a:	400a      	ands	r2, r1
 800cb7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb80:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800cb84:	601a      	str	r2, [r3, #0]
 800cb86:	4770      	bx	lr

0800cb88 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800cb88:	f645 4350 	movw	r3, #23632	; 0x5c50
 800cb8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800cb96:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800cb98:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800cb9c:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 800cba0:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800cba4:	0052      	lsls	r2, r2, #1
 800cba6:	400b      	ands	r3, r1
 800cba8:	6013      	str	r3, [r2, #0]
 800cbaa:	4770      	bx	lr

0800cbac <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 800cbac:	f645 4350 	movw	r3, #23632	; 0x5c50
 800cbb0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800cbba:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 800cbbc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800cbc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cbc4:	18c3      	adds	r3, r0, r3
 800cbc6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cbca:	005b      	lsls	r3, r3, #1
 800cbcc:	400a      	ands	r2, r1
 800cbce:	601a      	str	r2, [r3, #0]
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop

0800cbd4 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 800cbd4:	f645 4350 	movw	r3, #23632	; 0x5c50
 800cbd8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cbdc:	681b      	ldr	r3, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800cbde:	b29b      	uxth	r3, r3
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 800cbe0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800cbe4:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 800cbe8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800cbec:	005b      	lsls	r3, r3, #1
}
 800cbee:	8818      	ldrh	r0, [r3, #0]
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop

0800cbf4 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 800cbf4:	f645 4350 	movw	r3, #23632	; 0x5c50
 800cbf8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800cc02:	b292      	uxth	r2, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 800cc04:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800cc08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc0c:	18c3      	adds	r3, r0, r3
 800cc0e:	005b      	lsls	r3, r3, #1
}
 800cc10:	8818      	ldrh	r0, [r3, #0]
 800cc12:	4770      	bx	lr

0800cc14 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 800cc14:	f645 4350 	movw	r3, #23632	; 0x5c50
 800cc18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800cc22:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 800cc24:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800cc28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc2c:	18c3      	adds	r3, r0, r3
 800cc2e:	005b      	lsls	r3, r3, #1
 800cc30:	6019      	str	r1, [r3, #0]
 800cc32:	4770      	bx	lr

0800cc34 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 800cc34:	f645 4350 	movw	r3, #23632	; 0x5c50
 800cc38:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800cc42:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 800cc44:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800cc48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc4c:	18c3      	adds	r3, r0, r3
 800cc4e:	005b      	lsls	r3, r3, #1
 800cc50:	293e      	cmp	r1, #62	; 0x3e
 800cc52:	d909      	bls.n	800cc68 <SetEPRxCount+0x34>
 800cc54:	094a      	lsrs	r2, r1, #5
 800cc56:	06c9      	lsls	r1, r1, #27
 800cc58:	d101      	bne.n	800cc5e <SetEPRxCount+0x2a>
 800cc5a:	3a01      	subs	r2, #1
 800cc5c:	b292      	uxth	r2, r2
 800cc5e:	0292      	lsls	r2, r2, #10
 800cc60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc64:	601a      	str	r2, [r3, #0]
 800cc66:	4770      	bx	lr
 800cc68:	084a      	lsrs	r2, r1, #1
 800cc6a:	07c8      	lsls	r0, r1, #31
 800cc6c:	bf48      	it	mi
 800cc6e:	3201      	addmi	r2, #1
 800cc70:	0292      	lsls	r2, r2, #10
 800cc72:	601a      	str	r2, [r3, #0]
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop

0800cc78 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800cc78:	f645 4350 	movw	r3, #23632	; 0x5c50
 800cc7c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800cc86:	b292      	uxth	r2, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800cc88:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800cc8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc90:	18c3      	adds	r3, r0, r3
 800cc92:	005b      	lsls	r3, r3, #1
 800cc94:	6818      	ldr	r0, [r3, #0]
}
 800cc96:	0580      	lsls	r0, r0, #22
 800cc98:	0d80      	lsrs	r0, r0, #22
 800cc9a:	4770      	bx	lr

0800cc9c <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 800cc9c:	b2c3      	uxtb	r3, r0
 800cc9e:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 800cca0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800cca4:	4770      	bx	lr
 800cca6:	bf00      	nop

0800cca8 <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 800cca8:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800ccaa:	f641 6344 	movw	r3, #7748	; 0x1e44
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800ccae:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800ccb2:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800ccb6:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800ccba:	2000      	movs	r0, #0
 800ccbc:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 800ccc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800ccc4:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800ccc8:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 800ccca:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800cccc:	6011      	str	r1, [r2, #0]
  return 0;
}
 800ccce:	bc10      	pop	{r4}
 800ccd0:	4770      	bx	lr
 800ccd2:	bf00      	nop

0800ccd4 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800ccd4:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800ccd6:	f64c 4379 	movw	r3, #52345	; 0xcc79
 800ccda:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800ccde:	4628      	mov	r0, r5
 800cce0:	f6c0 0300 	movt	r3, #2048	; 0x800
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800cce4:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800cce6:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800cce8:	f64c 33f5 	movw	r3, #52213	; 0xcbf5
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800ccec:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800ccee:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	4798      	blx	r3
 800ccf6:	f64c 2309 	movw	r3, #51721	; 0xca09
 800ccfa:	4601      	mov	r1, r0
 800ccfc:	4622      	mov	r2, r4
 800ccfe:	4630      	mov	r0, r6
 800cd00:	f6c0 0300 	movt	r3, #2048	; 0x800
 800cd04:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 800cd06:	4620      	mov	r0, r4
 800cd08:	bd70      	pop	{r4, r5, r6, pc}
 800cd0a:	bf00      	nop

0800cd0c <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 800cd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd10:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 800cec0 <CTR_LP+0x1b4>
 800cd14:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800cd16:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800cd1a:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800cd1c:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 800cec4 <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800cd20:	4d62      	ldr	r5, [pc, #392]	; (800ceac <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800cd22:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800cd26:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 800cd2a:	46d0      	mov	r8, sl
 800cd2c:	f8db 3000 	ldr.w	r3, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800cd30:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	041b      	lsls	r3, r3, #16
 800cd38:	f8aa 2000 	strh.w	r2, [sl]
 800cd3c:	f140 80ab 	bpl.w	800ce96 <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800cd40:	f8b8 2000 	ldrh.w	r2, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800cd44:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800cd48:	f002 020f 	and.w	r2, r2, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 800cd4c:	0090      	lsls	r0, r2, #2
 800cd4e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 800cd52:	4e57      	ldr	r6, [pc, #348]	; (800ceb0 <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800cd54:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800cd58:	4f54      	ldr	r7, [pc, #336]	; (800ceac <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 800cd5a:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 800cd5c:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800cd60:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 800cd64:	2a00      	cmp	r2, #0
 800cd66:	d133      	bne.n	800cdd0 <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800cd68:	6823      	ldr	r3, [r4, #0]
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800cd6e:	882b      	ldrh	r3, [r5, #0]
 800cd70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cd74:	8033      	strh	r3, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 800cd76:	882b      	ldrh	r3, [r5, #0]
 800cd78:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800cd7c:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	4019      	ands	r1, r3
 800cd82:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800cd86:	f081 0120 	eor.w	r1, r1, #32
 800cd8a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800cd8e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800cd92:	6021      	str	r1, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 800cd94:	f8b8 3000 	ldrh.w	r3, [r8]
 800cd98:	f003 0310 	and.w	r3, r3, #16
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d049      	beq.n	800ce36 <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 800cda2:	6823      	ldr	r3, [r4, #0]
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 800cdaa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800cdae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d171      	bne.n	800ce9c <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 800cdb8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800cdbc:	b21b      	sxth	r3, r3
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	dab4      	bge.n	800cd2c <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 800cdc2:	6822      	ldr	r2, [r4, #0]
 800cdc4:	f640 738f 	movw	r3, #3983	; 0xf8f
 800cdc8:	4013      	ands	r3, r2
 800cdca:	6023      	str	r3, [r4, #0]
          Out0_Process();
 800cdcc:	4b39      	ldr	r3, [pc, #228]	; (800ceb4 <CTR_LP+0x1a8>)
 800cdce:	e038      	b.n	800ce42 <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 800cdd0:	6802      	ldr	r2, [r0, #0]
 800cdd2:	b292      	uxth	r2, r2
 800cdd4:	f8ad 2006 	strh.w	r2, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 800cdd8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cddc:	b212      	sxth	r2, r2
 800cdde:	2a00      	cmp	r2, #0
 800cde0:	db1b      	blt.n	800ce1a <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 800cde2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800cde6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d09d      	beq.n	800cd2c <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800cdf0:	f899 1000 	ldrb.w	r1, [r9]
 800cdf4:	f648 730f 	movw	r3, #36623	; 0x8f0f
 800cdf8:	008a      	lsls	r2, r1, #2
 800cdfa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800cdfe:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800ce02:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800ce04:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800ce06:	4003      	ands	r3, r0
 800ce08:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800ce0a:	f240 021c 	movw	r2, #28
 800ce0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ce12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce16:	4798      	blx	r3
 800ce18:	e788      	b.n	800cd2c <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 800ce1a:	6801      	ldr	r1, [r0, #0]
 800ce1c:	f640 728f 	movw	r2, #3983	; 0xf8f
 800ce20:	400a      	ands	r2, r1
 800ce22:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 800ce24:	f240 0238 	movw	r2, #56	; 0x38
 800ce28:	3b01      	subs	r3, #1
 800ce2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800ce2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce32:	4798      	blx	r3
 800ce34:	e7d5      	b.n	800cde2 <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 800ce36:	6822      	ldr	r2, [r4, #0]
 800ce38:	f648 730f 	movw	r3, #36623	; 0x8f0f
 800ce3c:	4013      	ands	r3, r2
 800ce3e:	6023      	str	r3, [r4, #0]
        In0_Process();
 800ce40:	4b1d      	ldr	r3, [pc, #116]	; (800ceb8 <CTR_LP+0x1ac>)
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 800ce42:	4798      	blx	r3
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800ce44:	6821      	ldr	r1, [r4, #0]
 800ce46:	883a      	ldrh	r2, [r7, #0]
 800ce48:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 800ce4c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800ce50:	b292      	uxth	r2, r2
 800ce52:	400b      	ands	r3, r1
 800ce54:	b10a      	cbz	r2, 800ce5a <CTR_LP+0x14e>
 800ce56:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ce5a:	883a      	ldrh	r2, [r7, #0]
 800ce5c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ce60:	b292      	uxth	r2, r2
 800ce62:	b10a      	cbz	r2, 800ce68 <CTR_LP+0x15c>
 800ce64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ce68:	8832      	ldrh	r2, [r6, #0]
 800ce6a:	f002 0210 	and.w	r2, r2, #16
 800ce6e:	b292      	uxth	r2, r2
 800ce70:	b10a      	cbz	r2, 800ce76 <CTR_LP+0x16a>
 800ce72:	f083 0310 	eor.w	r3, r3, #16
 800ce76:	8832      	ldrh	r2, [r6, #0]
 800ce78:	f002 0220 	and.w	r2, r2, #32
 800ce7c:	b292      	uxth	r2, r2
 800ce7e:	b10a      	cbz	r2, 800ce84 <CTR_LP+0x178>
 800ce80:	f083 0320 	eor.w	r3, r3, #32
 800ce84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce88:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800ce8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce90:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ce94:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800ce96:	b003      	add	sp, #12
 800ce98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800ce9c:	6822      	ldr	r2, [r4, #0]
 800ce9e:	f640 738f 	movw	r3, #3983	; 0xf8f
 800cea2:	4013      	ands	r3, r2
 800cea4:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 800cea6:	4b05      	ldr	r3, [pc, #20]	; (800cebc <CTR_LP+0x1b0>)
 800cea8:	e7cb      	b.n	800ce42 <CTR_LP+0x136>
 800ceaa:	bf00      	nop
 800ceac:	20001e46 	.word	0x20001e46
 800ceb0:	20001e48 	.word	0x20001e48
 800ceb4:	0800c44d 	.word	0x0800c44d
 800ceb8:	0800c921 	.word	0x0800c921
 800cebc:	0800c549 	.word	0x0800c549
 800cec0:	200015e8 	.word	0x200015e8
 800cec4:	20001e1c 	.word	0x20001e1c

0800cec8 <____aeabi_idiv0_from_arm>:
 800cec8:	e51ff004 	ldr	pc, [pc, #-4]	; 800cecc <____aeabi_idiv0_from_arm+0x4>
 800cecc:	08008f89 	.word	0x08008f89
 800ced0:	78457a65 	.word	0x78457a65
 800ced4:	726f6c70 	.word	0x726f6c70
 800ced8:	000a7265 	.word	0x000a7265
 800cedc:	206d7750 	.word	0x206d7750
 800cee0:	000a6425 	.word	0x000a6425
 800cee4:	504c4548 	.word	0x504c4548
 800cee8:	00000000 	.word	0x00000000
 800ceec:	756e654d 	.word	0x756e654d
 800cef0:	6c654820 	.word	0x6c654820
 800cef4:	00000070 	.word	0x00000070
 800cef8:	554e454d 	.word	0x554e454d
 800cefc:	00000000 	.word	0x00000000
 800cf00:	70736944 	.word	0x70736944
 800cf04:	2079616c 	.word	0x2079616c
 800cf08:	756e654d 	.word	0x756e654d
 800cf0c:	00000000 	.word	0x00000000
 800cf10:	4f464e49 	.word	0x4f464e49
 800cf14:	00000000 	.word	0x00000000
 800cf18:	6f666e49 	.word	0x6f666e49
 800cf1c:	00000000 	.word	0x00000000
 800cf20:	4f484345 	.word	0x4f484345
 800cf24:	00000000 	.word	0x00000000
 800cf28:	6f686345 	.word	0x6f686345
 800cf2c:	00000000 	.word	0x00000000
 800cf30:	63256325 	.word	0x63256325
 800cf34:	78323025 	.word	0x78323025
 800cf38:	00000020 	.word	0x00000020
 800cf3c:	253c6325 	.word	0x253c6325
 800cf40:	2d203e73 	.word	0x2d203e73
 800cf44:	0a732520 	.word	0x0a732520
 800cf48:	00000000 	.word	0x00000000
 800cf4c:	73256325 	.word	0x73256325
 800cf50:	0000000a 	.word	0x0000000a
 800cf54:	25207325 	.word	0x25207325
 800cf58:	00000073 	.word	0x00000073
 800cf5c:	00004e4f 	.word	0x00004e4f
 800cf60:	63456325 	.word	0x63456325
 800cf64:	6f206f68 	.word	0x6f206f68
 800cf68:	00000a6e 	.word	0x00000a6e
 800cf6c:	63456325 	.word	0x63456325
 800cf70:	6f206f68 	.word	0x6f206f68
 800cf74:	000a6666 	.word	0x000a6666
 800cf78:	2d2d6325 	.word	0x2d2d6325
 800cf7c:	2d2d2d2d 	.word	0x2d2d2d2d
 800cf80:	2d2d2d2d 	.word	0x2d2d2d2d
 800cf84:	2d2d2d2d 	.word	0x2d2d2d2d
 800cf88:	2d2d2d2d 	.word	0x2d2d2d2d
 800cf8c:	2d2d2d2d 	.word	0x2d2d2d2d
 800cf90:	2d2d2d2d 	.word	0x2d2d2d2d
 800cf94:	2d2d2d2d 	.word	0x2d2d2d2d
 800cf98:	2d2d2d2d 	.word	0x2d2d2d2d
 800cf9c:	2d2d2d2d 	.word	0x2d2d2d2d
 800cfa0:	202d2d2d 	.word	0x202d2d2d
 800cfa4:	00000a0d 	.word	0x00000a0d
 800cfa8:	20206325 	.word	0x20206325
 800cfac:	20202020 	.word	0x20202020
 800cfb0:	20202020 	.word	0x20202020
 800cfb4:	41202020 	.word	0x41202020
 800cfb8:	74535f70 	.word	0x74535f70
 800cfbc:	646d4372 	.word	0x646d4372
 800cfc0:	2e307620 	.word	0x2e307620
 800cfc4:	20202031 	.word	0x20202031
 800cfc8:	20202020 	.word	0x20202020
 800cfcc:	20202020 	.word	0x20202020
 800cfd0:	20202020 	.word	0x20202020
 800cfd4:	00000a0d 	.word	0x00000a0d
 800cfd8:	20206325 	.word	0x20206325
 800cfdc:	20202020 	.word	0x20202020
 800cfe0:	20202020 	.word	0x20202020
 800cfe4:	20202020 	.word	0x20202020
 800cfe8:	20202020 	.word	0x20202020
 800cfec:	20202020 	.word	0x20202020
 800cff0:	20202020 	.word	0x20202020
 800cff4:	20202020 	.word	0x20202020
 800cff8:	20202020 	.word	0x20202020
 800cffc:	20202020 	.word	0x20202020
 800d000:	20202020 	.word	0x20202020
 800d004:	00000a0d 	.word	0x00000a0d
 800d008:	20206325 	.word	0x20206325
 800d00c:	20202020 	.word	0x20202020
 800d010:	616d2020 	.word	0x616d2020
 800d014:	62206564 	.word	0x62206564
 800d018:	203a2079 	.word	0x203a2079
 800d01c:	206f6843 	.word	0x206f6843
 800d020:	206e6148 	.word	0x206e6148
 800d024:	6f656843 	.word	0x6f656843
 800d028:	2020206c 	.word	0x2020206c
 800d02c:	20202020 	.word	0x20202020
 800d030:	20202020 	.word	0x20202020
 800d034:	00000a0d 	.word	0x00000a0d
 800d038:	45564f4d 	.word	0x45564f4d
 800d03c:	00000000 	.word	0x00000000
 800d040:	6f626f52 	.word	0x6f626f52
 800d044:	6f4d2074 	.word	0x6f4d2074
 800d048:	00006576 	.word	0x00006576
 800d04c:	004d5750 	.word	0x004d5750
 800d050:	25206425 	.word	0x25206425
 800d054:	00000a64 	.word	0x00000a64
 800d058:	0d0a0c20 	.word	0x0d0a0c20
 800d05c:	00000b09 	.word	0x00000b09

0800d060 <Virtual_Com_Port_StringVendor>:
 800d060:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 800d070:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 800d080:	00630069 00000073                       i.c.s...

0800d088 <Virtual_Com_Port_DeviceDescriptor>:
 800d088:	02000112 40000002 57400483 02010200     .......@..@W....
 800d098:	00000103                                ....

0800d09c <Virtual_Com_Port_StringLangID>:
 800d09c:	04090304                                ....

0800d0a0 <Virtual_Com_Port_StringProduct>:
 800d0a0:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 800d0b0:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 800d0c0:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 800d0d0:	00000020                                 ...

0800d0d4 <Virtual_Com_Port_ConfigDescriptor>:
 800d0d4:	00430209 c0000102 00040932 02020100     ..C.....2.......
 800d0e4:	24050001 05011000 01000124 02022404     ...$....$....$..
 800d0f4:	00062405 82050701 ff000803 00010409     .$..............
 800d104:	00000a02 03050700 00004002 02810507     .........@......
 800d114:	00000040                                @...

0800d118 <_ctype_>:
 800d118:	20202000 20202020 28282020 20282828     .         ((((( 
 800d128:	20202020 20202020 20202020 20202020                     
 800d138:	10108820 10101010 10101010 10101010      ...............
 800d148:	04040410 04040404 10040404 10101010     ................
 800d158:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800d168:	01010101 01010101 01010101 10101010     ................
 800d178:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800d188:	02020202 02020202 02020202 10101010     ................
 800d198:	00000020 00000000 00000000 00000000      ...............
	...
 800d21c:	080004ba 080003be 080003be 080003be     ................
 800d22c:	080003be 080003be 080003be 080003be     ................
 800d23c:	080003be 080003be 080003be 080003be     ................
 800d24c:	080003be 080003be 080003be 080003be     ................
 800d25c:	080003be 080003be 080003be 080003be     ................
 800d26c:	080003be 080003be 080003be 080003be     ................
 800d27c:	080003be 080003be 080003be 080003be     ................
 800d28c:	080003be 080003be 080003be 080003be     ................
 800d29c:	080003be 080003be 080003be 080003be     ................
 800d2ac:	080003be 08000d3c 080003be 080003be     ....<...........
 800d2bc:	080003be 080003be 08000ce4 080003be     ................
 800d2cc:	080003be 080003be 080003be 080003be     ................
 800d2dc:	08000cf0 08000cf0 08000cf0 08000cf0     ................
 800d2ec:	08000cf0 08000cf0 08000cf0 08000cf0     ................
 800d2fc:	08000cf0 08000cf0 080003be 080003be     ................
 800d30c:	080003be 080003be 080003be 080003be     ................
 800d31c:	080003be 080003be 080003be 080003be     ................
 800d32c:	08000cac 08000d30 080003be 08000d30     ....0.......0...
 800d33c:	080003be 080003be 080003be 080003be     ................
 800d34c:	08000cbc 080003be 080003be 08000cc8     ................
 800d35c:	080003be 080003be 080003be 080003be     ................
 800d36c:	080003be 080003be 080003be 080003be     ................
 800d37c:	08000bf6 080003be 080003be 08000c14     ................
 800d38c:	080003be 080003be 080003be 080003be     ................
 800d39c:	080003be 080003be 080003be 08000c36     ............6...
 800d3ac:	08000c4a 08000d30 08000d30 08000d30     J...0...0...0...
 800d3bc:	08000c52 08000c5e 080003be 080003be     R...^...........
 800d3cc:	08000c72 080003be 08000c7e 08000d0c     r.......~.......
 800d3dc:	08000d12 080003be 080003be 08000d1a     ................
 800d3ec:	080003be 08000d26 080003be 080003be     ....&...........
 800d3fc:	08000bf6 080006de 08000542 080006de     ........B.......
 800d40c:	080006c8 08000542 0800063a 08000642     ....B...:...B...
 800d41c:	08000642 08000642 08000642 08000642     B...B...B...B...
 800d42c:	08000642 08000642 08000642 08000642     B...B...B...B...
 800d43c:	08000542 08000542 08000542 08000542     B...B...B...B...
 800d44c:	08000542 08000542 08000542 0800076c     B...B...B...l...
 800d45c:	08000542 08000542 08000542 08000724     B...B...B...$...
 800d46c:	08000718 08000542 08000542 080006ee     ....B...B.......
 800d47c:	08000542 08000542 08000542 08000542     B...B...B...B...
 800d48c:	08000690 08000542 08000542 08000542     ....B...B...B...
 800d49c:	08000542 08000542 08000684 08000542     B...B.......B...
 800d4ac:	08000542 08000542 08000542 080006bc     B...B...B.......
 800d4bc:	08000542 08000542 08000542 08000542     B...B...B...B...
 800d4cc:	08000542 08000542 08000542 0800076c     B...B...B...l...
 800d4dc:	08000542 08000542 08000542 08000724     B...B...B...$...
 800d4ec:	08000718 08000542 08000542 080006ee     ....B...B.......
 800d4fc:	08000542 08000542 08000542 08000542     B...B...B...B...
 800d50c:	08000690 08000542 08000542 08000542     ....B...B...B...
 800d51c:	08000542 08000542 08000684 08000542     B...B.......B...
 800d52c:	08000542 08000542 08000542 080006bc     B...B...B.......
 800d53c:	080008be 080007ce 080008be 080007ce     ................
 800d54c:	080007ce 08000892 0800087e 0800087e     ........~...~...
 800d55c:	0800087e 0800087e 0800087e 0800087e     ~...~...~...~...
 800d56c:	0800087e 0800086e 0800086e 080007ce     ~...n...n.......
 800d57c:	080007ce 080007ce 080007ce 080007ce     ................
 800d58c:	080007ce 080007ce 0800085e 0800085e     ........^...^...
 800d59c:	0800085e 0800085e 0800085e 0800085e     ^...^...^...^...
 800d5ac:	080007ce 080007ce 080007ce 080007ce     ................
 800d5bc:	080007ce 080007ce 080007ce 080007ce     ................
 800d5cc:	080007ce 080007ce 080007ce 080007ce     ................
 800d5dc:	080007ce 080007ce 080007ce 080007ce     ................
 800d5ec:	080007ce 0800081c 080007ce 080007ce     ................
 800d5fc:	080007ce 080007ce 080007ce 080007ce     ................
 800d60c:	080007ce 080007ce 0800085e 0800085e     ........^...^...
 800d61c:	0800085e 0800085e 0800085e 0800085e     ^...^...^...^...
 800d62c:	080007ce 080007ce 080007ce 080007ce     ................
 800d63c:	080007ce 080007ce 080007ce 080007ce     ................
 800d64c:	080007ce 080007ce 080007ce 080007ce     ................
 800d65c:	080007ce 080007ce 080007ce 080007ce     ................
 800d66c:	080007ce 0800081c                       ........

0800d674 <basefix.6646>:
 800d674:	0001000a 00030002 00050004 00070006     ................
 800d684:	00090008 000b000a 000d000c 000f000e     ................
 800d694:	00000010 646c2565 00000000              ....e%ld....

0800d6a0 <_global_impure_ptr>:
 800d6a0:	200000f0 00000043 49534f50 00000058     ... C...POSIX...
 800d6b0:	0000002e 00000000 0800172a 080015ca     ........*.......
 800d6c0:	080015ca 080015ca 080015ca 080015ca     ................
 800d6d0:	080015ca 080015ca 080015ca 08001724     ............$...
 800d6e0:	08001724 08001724 08001724 08001724     $...$...$...$...
 800d6f0:	080015ca 080015ca 080015ca 080015ca     ................
 800d700:	080015ca 080015ca 080015ca 080015ca     ................
 800d710:	080015ca 080015ca 080015ca 080015ca     ................
 800d720:	080015ca 080015ca 080015ca 080015ca     ................
 800d730:	080015ca 080015ca 08001724 080015ca     ........$.......
 800d740:	080015ca 080015ca 080015ca 080015ca     ................
 800d750:	080015ca 080015ca 080015ca 080015ca     ................
 800d760:	080015ca 0800171e 080015ca 080016d0     ................
 800d770:	080021b6 080021d4 080021ea 080021ce     .!...!...!...!..
 800d780:	080021ac 080021d4                       .!...!..

0800d788 <tinytens>:
 800d788:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 800d798:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 800d7a8:	64ac6f43 0e180628 0000666e 74696e69     Co.d(...nf..init
 800d7b8:	00000079 00006e61 08002b12 08002a1c     y...an...+...*..
 800d7c8:	08002a1c 08002a1c 08002a1c 08002a1c     .*...*...*...*..
 800d7d8:	08002a1c 08002a1c 08002a1c 08002a1c     .*...*...*...*..
 800d7e8:	08002a1c 08002a1c 08002a1c 08002a1c     .*...*...*...*..
 800d7f8:	08002a1c 08002a1c 08002a1c 08002a1c     .*...*...*...*..
 800d808:	08002a1c 08002a1c 08002a1c 08002a1c     .*...*...*...*..
 800d818:	08002a1c 08002a1c 08002a1c 08002a1c     .*...*...*...*..
 800d828:	08002a1c 08002a1c 08002a1c 08002a1c     .*...*...*...*..
 800d838:	08002a1c 08002a1c 08002a1c 08002a1c     .*...*...*...*..
 800d848:	08002a1c 08002a1c 08002a1c 08003010     .*...*...*...0..
 800d858:	08002a1c 08002a1c 08002a1c 08002a1c     .*...*...*...*..
 800d868:	08002fd2 08002a1c 08002a1c 08002a1c     ./...*...*...*..
 800d878:	08002a1c 08002a1c 08002fdc 08002fdc     .*...*.../.../..
 800d888:	08002fdc 08002fdc 08002fdc 08002fdc     ./.../.../.../..
 800d898:	08002fdc 08002fdc 08002fdc 08002fdc     ./.../.../.../..
 800d8a8:	08002a1c 08002a1c 08002a1c 08002a1c     .*...*...*...*..
 800d8b8:	08002a1c 08002a1c 08002a1c 08002a1c     .*...*...*...*..
 800d8c8:	08002a1c 08002a1c 08002fa8 08002a1c     .*...*.../...*..
 800d8d8:	08002a1c 08002a1c 08002a1c 08002a1c     .*...*...*...*..
 800d8e8:	08002a1c 08002a1c 08002f90 08002a1c     .*...*.../...*..
 800d8f8:	08002a1c 08002f9a 08002a1c 08002a1c     .*.../...*...*..
 800d908:	08002a1c 08002a1c 08002a1c 08002a1c     .*...*...*...*..
 800d918:	08002a1c 08002a1c 08002fb6 08002a1c     .*...*.../...*..
 800d928:	08002a1c 08002ef6 08002a1c 08002a1c     .*.......*...*..
 800d938:	08002a1c 08002a1c 08002a1c 08002a1c     .*...*...*...*..
 800d948:	08002a1c 08002f16 08002f28 08002a1c     .*.../..(/...*..
 800d958:	08002a1c 08002a1c 08002f2e 08002f38     .*...*.../..8/..
 800d968:	08002a1c 08002a1c 08002f4a 08002a1c     .*...*..J/...*..
 800d978:	08002f54 08002f7e 08002ff6 08002a1c     T/..~/.../...*..
 800d988:	08002a1c 08002ffe 08002a1c 08003008     .*.../...*...0..
 800d998:	08002a1c 08002a1c 08002fb6 08002d42     .*...*.../..B-..
 800d9a8:	08002cb0 08002d42 08002cb0 08002cb0     .,..B-...,...,..
 800d9b8:	08002d64 08002d50 08002d50 08002d50     d-..P-..P-..P-..
 800d9c8:	08002d50 08002d50 08002d50 08002d50     P-..P-..P-..P-..
 800d9d8:	08002d90 08002d90 08002cb0 08002cb0     .-...-...,...,..
 800d9e8:	08002cb0 08002cb0 08002cb0 08002cb0     .,...,...,...,..
 800d9f8:	08002cb0 08002d32 08002d32 08002d32     .,..2-..2-..2-..
 800da08:	08002d32 08002d32 08002d32 08002cb0     2-..2-..2-...,..
 800da18:	08002cb0 08002cb0 08002cb0 08002cb0     .,...,...,...,..
 800da28:	08002cb0 08002cb0 08002cb0 08002cb0     .,...,...,...,..
 800da38:	08002cb0 08002cb0 08002cb0 08002cb0     .,...,...,...,..
 800da48:	08002cb0 08002cb0 08002cb0 08002cb0     .,...,...,...,..
 800da58:	08002cf2 08002cb0 08002cb0 08002cb0     .,...,...,...,..
 800da68:	08002cb0 08002cb0 08002cb0 08002cb0     .,...,...,...,..
 800da78:	08002cb0 08002d32 08002d32 08002d32     .,..2-..2-..2-..
 800da88:	08002d32 08002d32 08002d32 08002cb0     2-..2-..2-...,..
 800da98:	08002cb0 08002cb0 08002cb0 08002cb0     .,...,...,...,..
 800daa8:	08002cb0 08002cb0 08002cb0 08002cb0     .,...,...,...,..
 800dab8:	08002cb0 08002cb0 08002cb0 08002cb0     .,...,...,...,..
 800dac8:	08002cb0 08002cb0 08002cb0 08002cb0     .,...,...,...,..
 800dad8:	08002cf2                                .,..

0800dadc <basefix.6146>:
 800dadc:	0001000a 00030002 00050004 00070006     ................
 800daec:	00090008 000b000a 000d000c 000f000e     ................
 800dafc:	00000010 08003cd8 0800338e 0800338e     .....<...3...3..
 800db0c:	08003cee 0800338e 0800338e 0800338e     .<...3...3...3..
 800db1c:	0800338e 0800338e 0800338e 080034a0     .3...3...3...4..
 800db2c:	08003cfa 0800338e 080034b6 08003dc8     .<...3...4...=..
 800db3c:	0800338e 08003c38 08003c44 08003c44     .3..8<..D<..D<..
 800db4c:	08003c44 08003c44 08003c44 08003c44     D<..D<..D<..D<..
 800db5c:	08003c44 08003c44 08003c44 0800338e     D<..D<..D<...3..
 800db6c:	0800338e 0800338e 0800338e 0800338e     .3...3...3...3..
 800db7c:	0800338e 0800338e 0800338e 0800338e     .3...3...3...3..
 800db8c:	0800338e 08003476 08003bd0 0800338e     .3..v4...;...3..
 800db9c:	08003bd0 0800338e 0800338e 0800338e     .;...3...3...3..
 800dbac:	0800338e 08003c6a 0800338e 0800338e     .3..j<...3...3..
 800dbbc:	0800344a 0800338e 0800338e 0800338e     J4...3...3...3..
 800dbcc:	0800338e 0800338e 080033be 0800338e     .3...3...3...3..
 800dbdc:	0800338e 08003c76 0800338e 0800338e     .3..v<...3...3..
 800dbec:	0800338e 0800338e 0800338e 0800338e     .3...3...3...3..
 800dbfc:	0800338e 0800338e 0800338e 0800338e     .3...3...3...3..
 800dc0c:	08003c9e 0800347e 08003bd0 08003bd0     .<..~4...;...;..
 800dc1c:	08003bd0 08003db2 0800347e 0800338e     .;...=..~4...3..
 800dc2c:	0800338e 08003dbe 0800338e 08003cb0     .3...=...3...<..
 800dc3c:	08003452 08003d5a 08003d8a 0800338e     R4..Z=...=...3..
 800dc4c:	08003d04 0800338e 080033c6 0800338e     .=...3...3...3..
 800dc5c:	0800338e 08003d94                       .3...=..

0800dc64 <blanks.6732>:
 800dc64:	20202020 20202020 20202020 20202020                     

0800dc74 <zeroes.6733>:
 800dc74:	30303030 30303030 30303030 30303030     0000000000000000
 800dc84:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800dc94:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800dca4:	00000000 33323130 37363534 62613938     ....0123456789ab
 800dcb4:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800dcc4:	00000030 0074743a 69666e49 7974696e     0...:tt.Infinity
 800dcd4:	00000000 004e614e 44434241 00004645     ....NaN.ABCDEF..
 800dce4:	64636261 00006665 33323130 37363534     abcdef..01234567
 800dcf4:	00003938                                89..

0800dcf8 <p05.5251>:
 800dcf8:	00000005 00000019 0000007d 00000000     ........}.......

0800dd08 <__mprec_tens>:
 800dd08:	00000000 3ff00000 00000000 40240000     .......?......$@
 800dd18:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800dd28:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800dd38:	00000000 412e8480 00000000 416312d0     .......A......cA
 800dd48:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800dd58:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800dd68:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800dd78:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800dd88:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800dd98:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800dda8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800ddb8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800ddc8:	79d99db4 44ea7843                       ...yCx.D

0800ddd0 <__mprec_tinytens>:
 800ddd0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 800dde0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 800ddf0:	64ac6f43 0ac80628                       Co.d(...

0800ddf8 <__mprec_bigtens>:
 800ddf8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800de08:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800de18:	7f73bf3c 75154fdd 08008824 08008346     <.s..O.u$...F...
 800de28:	08008346 0800881a 08008346 08008346     F.......F...F...
 800de38:	08008346 08008346 08008346 08008346     F...F...F...F...
 800de48:	08008640 080087b4 08008346 08008658     @.......F...X...
 800de58:	0800877c 08008346 080087e6 080087c8     |...F...........
 800de68:	080087c8 080087c8 080087c8 080087c8     ................
 800de78:	080087c8 080087c8 080087c8 080087c8     ................
 800de88:	08008346 08008346 08008346 08008346     F...F...F...F...
 800de98:	08008346 08008346 08008346 08008346     F...F...F...F...
 800dea8:	08008346 08008346 080087b8 08008346     F...F.......F...
 800deb8:	08008346 08008346 08008346 08008346     F...F...F...F...
 800dec8:	08008346 08008346 08008346 08008346     F...F...F...F...
 800ded8:	08008346 08008586 08008346 08008346     F.......F...F...
 800dee8:	08008346 08008346 08008346 080085ae     F...F...F.......
 800def8:	08008346 08008346 080086be 08008346     F...F.......F...
 800df08:	08008346 08008346 08008346 08008346     F...F...F...F...
 800df18:	08008346 08008346 08008346 08008346     F...F...F...F...
 800df28:	08008346 0800869e 0800866c 08008346     F.......l...F...
 800df38:	08008346 08008346 080086fc 0800866c     F...F.......l...
 800df48:	08008346 08008346 0800857e 08008346     F...F...~...F...
 800df58:	08008706 0800858e 080087f0 0800857e     ............~...
 800df68:	08008346 08008732 08008346 080085b6     F...2...F.......
 800df78:	08008346 08008346 080086f0              F...F.......

0800df84 <blanks.6676>:
 800df84:	20202020 20202020 20202020 20202020                     

0800df94 <zeroes.6677>:
 800df94:	30303030 30303030 30303030 30303030     0000000000000000
